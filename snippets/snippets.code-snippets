{
    "WAIT": {
      "prefix": "WAIT()",
      "body": ["WAIT(${1:int ms})"],
      "description": "WAIT()"
    },
    "START_NEW_SCRIPT": {
      "prefix": "START_NEW_SCRIPT()",
      "body": [
        "START_NEW_SCRIPT(${1:const char* scriptName}, ${2:int stackSize})"
      ],
      "description": "START_NEW_SCRIPT()"
    },
    "START_NEW_SCRIPT_WITH_ARGS": {
      "prefix": "START_NEW_SCRIPT_WITH_ARGS()",
      "body": [
        "START_NEW_SCRIPT_WITH_ARGS(${1:const char* scriptName}, ${2:Any* args}, ${3:int argCount}, ${4:int stackSize})"
      ],
      "description": "START_NEW_SCRIPT_WITH_ARGS()"
    },
    "START_NEW_SCRIPT_WITH_NAME_HASH": {
      "prefix": "START_NEW_SCRIPT_WITH_NAME_HASH()",
      "body": [
        "START_NEW_SCRIPT_WITH_NAME_HASH(${1:Hash scriptHash}, ${2:int stackSize})"
      ],
      "description": "START_NEW_SCRIPT_WITH_NAME_HASH()"
    },
    "START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS": {
      "prefix": "START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS()",
      "body": [
        "START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS(${1:Hash scriptHash}, ${2:Any* args}, ${3:int argCount}, ${4:int stackSize})"
      ],
      "description": "START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS()"
    },
    "TIMERA": {
      "prefix": "TIMERA()",
      "body": ["TIMERA()"],
      "description": "TIMERA()"
    },
    "TIMERB": {
      "prefix": "TIMERB()",
      "body": ["TIMERB()"],
      "description": "TIMERB()"
    },
    "SETTIMERA": {
      "prefix": "SETTIMERA()",
      "body": ["SETTIMERA(${1:int value})"],
      "description": "SETTIMERA()"
    },
    "SETTIMERB": {
      "prefix": "SETTIMERB()",
      "body": ["SETTIMERB(${1:int value})"],
      "description": "SETTIMERB()"
    },
    "TIMESTEP": {
      "prefix": "TIMESTEP()",
      "body": ["TIMESTEP()"],
      "description": "TIMESTEP()"
    },
    "SIN": {
      "prefix": "SIN()",
      "body": ["SIN(${1:float value})"],
      "description": "SIN()"
    },
    "COS": {
      "prefix": "COS()",
      "body": ["COS(${1:float value})"],
      "description": "COS()"
    },
    "SQRT": {
      "prefix": "SQRT()",
      "body": ["SQRT(${1:float value})"],
      "description": "SQRT()"
    },
    "POW": {
      "prefix": "POW()",
      "body": ["POW(${1:float base}, ${2:float exponent})"],
      "description": "POW()"
    },
    "LOG10": {
      "prefix": "LOG10()",
      "body": ["LOG10(${1:float value})"],
      "description": "LOG10()"
    },
    "VMAG": {
      "prefix": "VMAG()",
      "body": ["VMAG(${1:float x}, ${2:float y}, ${3:float z})"],
      "description": "VMAG()"
    },
    "VMAG2": {
      "prefix": "VMAG2()",
      "body": ["VMAG2(${1:float x}, ${2:float y}, ${3:float z})"],
      "description": "VMAG2()"
    },
    "VDIST": {
      "prefix": "VDIST()",
      "body": [
        "VDIST(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
      ],
      "description": "VDIST()"
    },
    "VDIST2": {
      "prefix": "VDIST2()",
      "body": [
        "VDIST2(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
      ],
      "description": "VDIST2()"
    },
    "SHIFT_LEFT": {
      "prefix": "SHIFT_LEFT()",
      "body": ["SHIFT_LEFT(${1:int value}, ${2:int bitShift})"],
      "description": "SHIFT_LEFT()"
    },
    "SHIFT_RIGHT": {
      "prefix": "SHIFT_RIGHT()",
      "body": ["SHIFT_RIGHT(${1:int value}, ${2:int bitShift})"],
      "description": "SHIFT_RIGHT()"
    },
    "FLOOR": {
      "prefix": "FLOOR()",
      "body": ["FLOOR(${1:float value})"],
      "description": "FLOOR()"
    },
    "CEIL": {
      "prefix": "CEIL()",
      "body": ["CEIL(${1:float value})"],
      "description": "CEIL()"
    },
    "ROUND": {
      "prefix": "ROUND()",
      "body": ["ROUND(${1:float value})"],
      "description": "ROUND()"
    },
    "TO_FLOAT": {
      "prefix": "TO_FLOAT()",
      "body": ["TO_FLOAT(${1:int value})"],
      "description": "TO_FLOAT()"
    },
    "SET_THIS_THREAD_PRIORITY": {
      "prefix": "SET_THIS_THREAD_PRIORITY()",
      "body": ["SET_THIS_THREAD_PRIORITY(${1:int priority})"],
      "description": "SET_THIS_THREAD_PRIORITY()"
    },
    "APP_DATA_VALID": {
      "prefix": "APP_DATA_VALID()",
      "body": ["APP_DATA_VALID()"],
      "description": "APP_DATA_VALID()"
    },
    "APP_GET_INT": {
      "prefix": "APP_GET_INT()",
      "body": ["APP_GET_INT(${1:const char* property})"],
      "description": "APP_GET_INT()"
    },
    "APP_GET_FLOAT": {
      "prefix": "APP_GET_FLOAT()",
      "body": ["APP_GET_FLOAT(${1:const char* property})"],
      "description": "APP_GET_FLOAT()"
    },
    "APP_SET_INT": {
      "prefix": "APP_SET_INT()",
      "body": ["APP_SET_INT(${1:const char* property}, ${2:int value})"],
      "description": "APP_SET_INT()"
    },
    "APP_SET_FLOAT": {
      "prefix": "APP_SET_FLOAT()",
      "body": ["APP_SET_FLOAT(${1:const char* property}, ${2:float value})"],
      "description": "APP_SET_FLOAT()"
    },
    "APP_SET_STRING": {
      "prefix": "APP_SET_STRING()",
      "body": [
        "APP_SET_STRING(${1:const char* property}, ${2:const char* value})"
      ],
      "description": "APP_SET_STRING()"
    },
    "APP_SET_APP": {
      "prefix": "APP_SET_APP()",
      "body": ["APP_SET_APP(${1:const char* appName})"],
      "description": "APP_SET_APP()"
    },
    "APP_SET_BLOCK": {
      "prefix": "APP_SET_BLOCK()",
      "body": ["APP_SET_BLOCK(${1:const char* blockName})"],
      "description": "APP_SET_BLOCK()"
    },
    "APP_CLEAR_BLOCK": {
      "prefix": "APP_CLEAR_BLOCK()",
      "body": ["APP_CLEAR_BLOCK()"],
      "description": "APP_CLEAR_BLOCK()"
    },
    "APP_CLOSE_APP": {
      "prefix": "APP_CLOSE_APP()",
      "body": ["APP_CLOSE_APP()"],
      "description": "APP_CLOSE_APP()"
    },
    "APP_CLOSE_BLOCK": {
      "prefix": "APP_CLOSE_BLOCK()",
      "body": ["APP_CLOSE_BLOCK()"],
      "description": "APP_CLOSE_BLOCK()"
    },
    "APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT": {
      "prefix": "APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT()",
      "body": ["APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT()"],
      "description": "APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT()"
    },
    "APP_HAS_SYNCED_DATA": {
      "prefix": "APP_HAS_SYNCED_DATA()",
      "body": ["APP_HAS_SYNCED_DATA(${1:const char* appName})"],
      "description": "APP_HAS_SYNCED_DATA()"
    },
    "APP_SAVE_DATA": {
      "prefix": "APP_SAVE_DATA()",
      "body": ["APP_SAVE_DATA()"],
      "description": "APP_SAVE_DATA()"
    },
    "APP_GET_DELETED_FILE_STATUS": {
      "prefix": "APP_GET_DELETED_FILE_STATUS()",
      "body": ["APP_GET_DELETED_FILE_STATUS()"],
      "description": "APP_GET_DELETED_FILE_STATUS()"
    },
    "APP_DELETE_APP_DATA": {
      "prefix": "APP_DELETE_APP_DATA()",
      "body": ["APP_DELETE_APP_DATA(${1:const char* appName})"],
      "description": "APP_DELETE_APP_DATA()"
    },
    "PLAY_PED_RINGTONE": {
      "prefix": "PLAY_PED_RINGTONE()",
      "body": [
        "PLAY_PED_RINGTONE(${1:const char* ringtoneName}, ${2:Ped ped}, ${3:BOOL p2})"
      ],
      "description": "PLAY_PED_RINGTONE()"
    },
    "IS_PED_RINGTONE_PLAYING": {
      "prefix": "IS_PED_RINGTONE_PLAYING()",
      "body": ["IS_PED_RINGTONE_PLAYING(${1:Ped ped})"],
      "description": "IS_PED_RINGTONE_PLAYING()"
    },
    "STOP_PED_RINGTONE": {
      "prefix": "STOP_PED_RINGTONE()",
      "body": ["STOP_PED_RINGTONE(${1:Ped ped})"],
      "description": "STOP_PED_RINGTONE()"
    },
    "IS_MOBILE_PHONE_CALL_ONGOING": {
      "prefix": "IS_MOBILE_PHONE_CALL_ONGOING()",
      "body": ["IS_MOBILE_PHONE_CALL_ONGOING()"],
      "description": "IS_MOBILE_PHONE_CALL_ONGOING()"
    },
    "IS_MOBILE_INTERFERENCE_ACTIVE": {
      "prefix": "IS_MOBILE_INTERFERENCE_ACTIVE()",
      "body": ["IS_MOBILE_INTERFERENCE_ACTIVE()"],
      "description": "IS_MOBILE_INTERFERENCE_ACTIVE()"
    },
    "GET_CURRENT_TV_SHOW_PLAY_TIME": {
      "prefix": "GET_CURRENT_TV_SHOW_PLAY_TIME()",
      "body": ["GET_CURRENT_TV_SHOW_PLAY_TIME()"],
      "description": "GET_CURRENT_TV_SHOW_PLAY_TIME()"
    },
    "CREATE_NEW_SCRIPTED_CONVERSATION": {
      "prefix": "CREATE_NEW_SCRIPTED_CONVERSATION()",
      "body": ["CREATE_NEW_SCRIPTED_CONVERSATION()"],
      "description": "CREATE_NEW_SCRIPTED_CONVERSATION()"
    },
    "ADD_LINE_TO_CONVERSATION": {
      "prefix": "ADD_LINE_TO_CONVERSATION()",
      "body": [
        "ADD_LINE_TO_CONVERSATION(${1:int index}, ${2:const char* p1}, ${3:const char* p2}, ${4:int p3}, ${5:int p4}, ${6:BOOL p5}, ${7:BOOL p6}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:int p9}, ${11:BOOL p10}, ${12:BOOL p11}, ${13:BOOL p12})"
      ],
      "description": "ADD_LINE_TO_CONVERSATION()"
    },
    "ADD_PED_TO_CONVERSATION": {
      "prefix": "ADD_PED_TO_CONVERSATION()",
      "body": [
        "ADD_PED_TO_CONVERSATION(${1:int index}, ${2:Ped ped}, ${3:const char* p2})"
      ],
      "description": "ADD_PED_TO_CONVERSATION()"
    },
    "SET_POSITION_FOR_NULL_CONV_PED": {
      "prefix": "SET_POSITION_FOR_NULL_CONV_PED()",
      "body": [
        "SET_POSITION_FOR_NULL_CONV_PED(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
      ],
      "description": "SET_POSITION_FOR_NULL_CONV_PED()"
    },
    "SET_ENTITY_FOR_NULL_CONV_PED": {
      "prefix": "SET_ENTITY_FOR_NULL_CONV_PED()",
      "body": ["SET_ENTITY_FOR_NULL_CONV_PED(${1:int p0}, ${2:Entity entity})"],
      "description": "SET_ENTITY_FOR_NULL_CONV_PED()"
    },
    "SET_MICROPHONE_POSITION": {
      "prefix": "SET_MICROPHONE_POSITION()",
      "body": [
        "SET_MICROPHONE_POSITION(${1:BOOL toggle}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2}, ${8:float x3}, ${9:float y3}, ${10:float z3})"
      ],
      "description": "SET_MICROPHONE_POSITION()"
    },
    "SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM": {
      "prefix": "SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM()",
      "body": ["SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM(${1:BOOL p0})"],
      "description": "SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM()"
    },
    "SET_CONVERSATION_AUDIO_PLACEHOLDER": {
      "prefix": "SET_CONVERSATION_AUDIO_PLACEHOLDER()",
      "body": ["SET_CONVERSATION_AUDIO_PLACEHOLDER(${1:BOOL p0})"],
      "description": "SET_CONVERSATION_AUDIO_PLACEHOLDER()"
    },
    "START_SCRIPT_PHONE_CONVERSATION": {
      "prefix": "START_SCRIPT_PHONE_CONVERSATION()",
      "body": ["START_SCRIPT_PHONE_CONVERSATION(${1:BOOL p0}, ${2:BOOL p1})"],
      "description": "START_SCRIPT_PHONE_CONVERSATION()"
    },
    "PRELOAD_SCRIPT_PHONE_CONVERSATION": {
      "prefix": "PRELOAD_SCRIPT_PHONE_CONVERSATION()",
      "body": ["PRELOAD_SCRIPT_PHONE_CONVERSATION(${1:BOOL p0}, ${2:BOOL p1})"],
      "description": "PRELOAD_SCRIPT_PHONE_CONVERSATION()"
    },
    "START_SCRIPT_CONVERSATION": {
      "prefix": "START_SCRIPT_CONVERSATION()",
      "body": [
        "START_SCRIPT_CONVERSATION(${1:BOOL p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "START_SCRIPT_CONVERSATION()"
    },
    "PRELOAD_SCRIPT_CONVERSATION": {
      "prefix": "PRELOAD_SCRIPT_CONVERSATION()",
      "body": [
        "PRELOAD_SCRIPT_CONVERSATION(${1:BOOL p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "PRELOAD_SCRIPT_CONVERSATION()"
    },
    "START_PRELOADED_CONVERSATION": {
      "prefix": "START_PRELOADED_CONVERSATION()",
      "body": ["START_PRELOADED_CONVERSATION()"],
      "description": "START_PRELOADED_CONVERSATION()"
    },
    "GET_IS_PRELOADED_CONVERSATION_READY": {
      "prefix": "GET_IS_PRELOADED_CONVERSATION_READY()",
      "body": ["GET_IS_PRELOADED_CONVERSATION_READY()"],
      "description": "GET_IS_PRELOADED_CONVERSATION_READY()"
    },
    "IS_SCRIPTED_CONVERSATION_ONGOING": {
      "prefix": "IS_SCRIPTED_CONVERSATION_ONGOING()",
      "body": ["IS_SCRIPTED_CONVERSATION_ONGOING()"],
      "description": "IS_SCRIPTED_CONVERSATION_ONGOING()"
    },
    "IS_SCRIPTED_CONVERSATION_LOADED": {
      "prefix": "IS_SCRIPTED_CONVERSATION_LOADED()",
      "body": ["IS_SCRIPTED_CONVERSATION_LOADED()"],
      "description": "IS_SCRIPTED_CONVERSATION_LOADED()"
    },
    "GET_CURRENT_SCRIPTED_CONVERSATION_LINE": {
      "prefix": "GET_CURRENT_SCRIPTED_CONVERSATION_LINE()",
      "body": ["GET_CURRENT_SCRIPTED_CONVERSATION_LINE()"],
      "description": "GET_CURRENT_SCRIPTED_CONVERSATION_LINE()"
    },
    "PAUSE_SCRIPTED_CONVERSATION": {
      "prefix": "PAUSE_SCRIPTED_CONVERSATION()",
      "body": ["PAUSE_SCRIPTED_CONVERSATION(${1:BOOL p0})"],
      "description": "PAUSE_SCRIPTED_CONVERSATION()"
    },
    "RESTART_SCRIPTED_CONVERSATION": {
      "prefix": "RESTART_SCRIPTED_CONVERSATION()",
      "body": ["RESTART_SCRIPTED_CONVERSATION()"],
      "description": "RESTART_SCRIPTED_CONVERSATION()"
    },
    "STOP_SCRIPTED_CONVERSATION": {
      "prefix": "STOP_SCRIPTED_CONVERSATION()",
      "body": ["STOP_SCRIPTED_CONVERSATION(${1:BOOL p0})"],
      "description": "STOP_SCRIPTED_CONVERSATION()"
    },
    "SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE": {
      "prefix": "SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE()",
      "body": ["SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE()"],
      "description": "SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE()"
    },
    "INTERRUPT_CONVERSATION": {
      "prefix": "INTERRUPT_CONVERSATION()",
      "body": [
        "INTERRUPT_CONVERSATION(${1:Ped ped}, ${2:const char* voiceline}, ${3:const char* speaker})"
      ],
      "description": "INTERRUPT_CONVERSATION()"
    },
    "INTERRUPT_CONVERSATION_AND_PAUSE": {
      "prefix": "INTERRUPT_CONVERSATION_AND_PAUSE()",
      "body": [
        "INTERRUPT_CONVERSATION_AND_PAUSE(${1:Ped ped}, ${2:const char* p1}, ${3:const char* speaker})"
      ],
      "description": "INTERRUPT_CONVERSATION_AND_PAUSE()"
    },
    "GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE": {
      "prefix": "GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE()",
      "body": ["GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE(${1:Any* p0})"],
      "description": "GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE()"
    },
    "SET_NO_DUCKING_FOR_CONVERSATION": {
      "prefix": "SET_NO_DUCKING_FOR_CONVERSATION()",
      "body": ["SET_NO_DUCKING_FOR_CONVERSATION(${1:BOOL p0})"],
      "description": "SET_NO_DUCKING_FOR_CONVERSATION()"
    },
    "REGISTER_SCRIPT_WITH_AUDIO": {
      "prefix": "REGISTER_SCRIPT_WITH_AUDIO()",
      "body": ["REGISTER_SCRIPT_WITH_AUDIO(${1:int p0})"],
      "description": "REGISTER_SCRIPT_WITH_AUDIO()"
    },
    "UNREGISTER_SCRIPT_WITH_AUDIO": {
      "prefix": "UNREGISTER_SCRIPT_WITH_AUDIO()",
      "body": ["UNREGISTER_SCRIPT_WITH_AUDIO()"],
      "description": "UNREGISTER_SCRIPT_WITH_AUDIO()"
    },
    "REQUEST_MISSION_AUDIO_BANK": {
      "prefix": "REQUEST_MISSION_AUDIO_BANK()",
      "body": [
        "REQUEST_MISSION_AUDIO_BANK(${1:const char* audioBank}, ${2:BOOL p1}, ${3:Any p2})"
      ],
      "description": "REQUEST_MISSION_AUDIO_BANK()"
    },
    "REQUEST_AMBIENT_AUDIO_BANK": {
      "prefix": "REQUEST_AMBIENT_AUDIO_BANK()",
      "body": [
        "REQUEST_AMBIENT_AUDIO_BANK(${1:const char* audioBank}, ${2:BOOL p1}, ${3:Any p2})"
      ],
      "description": "REQUEST_AMBIENT_AUDIO_BANK()"
    },
    "REQUEST_SCRIPT_AUDIO_BANK": {
      "prefix": "REQUEST_SCRIPT_AUDIO_BANK()",
      "body": [
        "REQUEST_SCRIPT_AUDIO_BANK(${1:const char* audioBank}, ${2:BOOL p1}, ${3:Any p2})"
      ],
      "description": "REQUEST_SCRIPT_AUDIO_BANK()"
    },
    "HINT_MISSION_AUDIO_BANK": {
      "prefix": "HINT_MISSION_AUDIO_BANK()",
      "body": [
        "HINT_MISSION_AUDIO_BANK(${1:const char* audioBank}, ${2:BOOL p1}, ${3:Any p2})"
      ],
      "description": "HINT_MISSION_AUDIO_BANK()"
    },
    "HINT_AMBIENT_AUDIO_BANK": {
      "prefix": "HINT_AMBIENT_AUDIO_BANK()",
      "body": [
        "HINT_AMBIENT_AUDIO_BANK(${1:const char* audioBank}, ${2:BOOL p1}, ${3:Any p2})"
      ],
      "description": "HINT_AMBIENT_AUDIO_BANK()"
    },
    "HINT_SCRIPT_AUDIO_BANK": {
      "prefix": "HINT_SCRIPT_AUDIO_BANK()",
      "body": [
        "HINT_SCRIPT_AUDIO_BANK(${1:const char* audioBank}, ${2:BOOL p1}, ${3:Any p2})"
      ],
      "description": "HINT_SCRIPT_AUDIO_BANK()"
    },
    "RELEASE_MISSION_AUDIO_BANK": {
      "prefix": "RELEASE_MISSION_AUDIO_BANK()",
      "body": ["RELEASE_MISSION_AUDIO_BANK()"],
      "description": "RELEASE_MISSION_AUDIO_BANK()"
    },
    "RELEASE_AMBIENT_AUDIO_BANK": {
      "prefix": "RELEASE_AMBIENT_AUDIO_BANK()",
      "body": ["RELEASE_AMBIENT_AUDIO_BANK()"],
      "description": "RELEASE_AMBIENT_AUDIO_BANK()"
    },
    "RELEASE_NAMED_SCRIPT_AUDIO_BANK": {
      "prefix": "RELEASE_NAMED_SCRIPT_AUDIO_BANK()",
      "body": ["RELEASE_NAMED_SCRIPT_AUDIO_BANK(${1:const char* audioBank})"],
      "description": "RELEASE_NAMED_SCRIPT_AUDIO_BANK()"
    },
    "RELEASE_SCRIPT_AUDIO_BANK": {
      "prefix": "RELEASE_SCRIPT_AUDIO_BANK()",
      "body": ["RELEASE_SCRIPT_AUDIO_BANK()"],
      "description": "RELEASE_SCRIPT_AUDIO_BANK()"
    },
    "UNHINT_AMBIENT_AUDIO_BANK": {
      "prefix": "UNHINT_AMBIENT_AUDIO_BANK()",
      "body": ["UNHINT_AMBIENT_AUDIO_BANK()"],
      "description": "UNHINT_AMBIENT_AUDIO_BANK()"
    },
    "UNHINT_SCRIPT_AUDIO_BANK": {
      "prefix": "UNHINT_SCRIPT_AUDIO_BANK()",
      "body": ["UNHINT_SCRIPT_AUDIO_BANK()"],
      "description": "UNHINT_SCRIPT_AUDIO_BANK()"
    },
    "UNHINT_NAMED_SCRIPT_AUDIO_BANK": {
      "prefix": "UNHINT_NAMED_SCRIPT_AUDIO_BANK()",
      "body": ["UNHINT_NAMED_SCRIPT_AUDIO_BANK(${1:const char* audioBank})"],
      "description": "UNHINT_NAMED_SCRIPT_AUDIO_BANK()"
    },
    "GET_SOUND_ID": {
      "prefix": "GET_SOUND_ID()",
      "body": ["GET_SOUND_ID()"],
      "description": "GET_SOUND_ID()"
    },
    "RELEASE_SOUND_ID": {
      "prefix": "RELEASE_SOUND_ID()",
      "body": ["RELEASE_SOUND_ID(${1:int soundId})"],
      "description": "RELEASE_SOUND_ID()"
    },
    "PLAY_SOUND": {
      "prefix": "PLAY_SOUND()",
      "body": [
        "PLAY_SOUND(${1:int soundId}, ${2:const char* audioName}, ${3:const char* audioRef}, ${4:BOOL p3}, ${5:Any p4}, ${6:BOOL p5})"
      ],
      "description": "PLAY_SOUND()"
    },
    "PLAY_SOUND_FRONTEND": {
      "prefix": "PLAY_SOUND_FRONTEND()",
      "body": [
        "PLAY_SOUND_FRONTEND(${1:int soundId}, ${2:const char* audioName}, ${3:const char* audioRef}, ${4:BOOL p3})"
      ],
      "description": "PLAY_SOUND_FRONTEND()"
    },
    "PLAY_DEFERRED_SOUND_FRONTEND": {
      "prefix": "PLAY_DEFERRED_SOUND_FRONTEND()",
      "body": [
        "PLAY_DEFERRED_SOUND_FRONTEND(${1:const char* soundName}, ${2:const char* soundsetName})"
      ],
      "description": "PLAY_DEFERRED_SOUND_FRONTEND()"
    },
    "PLAY_SOUND_FROM_ENTITY": {
      "prefix": "PLAY_SOUND_FROM_ENTITY()",
      "body": [
        "PLAY_SOUND_FROM_ENTITY(${1:int soundId}, ${2:const char* audioName}, ${3:Entity entity}, ${4:const char* audioRef}, ${5:BOOL isNetwork}, ${6:Any p5})"
      ],
      "description": "PLAY_SOUND_FROM_ENTITY()"
    },
    "PLAY_SOUND_FROM_ENTITY_HASH": {
      "prefix": "PLAY_SOUND_FROM_ENTITY_HASH()",
      "body": [
        "PLAY_SOUND_FROM_ENTITY_HASH(${1:int soundId}, ${2:Hash model}, ${3:Entity entity}, ${4:Hash soundSetHash}, ${5:Any p4}, ${6:Any p5})"
      ],
      "description": "PLAY_SOUND_FROM_ENTITY_HASH()"
    },
    "PLAY_SOUND_FROM_COORD": {
      "prefix": "PLAY_SOUND_FROM_COORD()",
      "body": [
        "PLAY_SOUND_FROM_COORD(${1:int soundId}, ${2:const char* audioName}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:const char* audioRef}, ${7:BOOL isNetwork}, ${8:int range}, ${9:BOOL p8})"
      ],
      "description": "PLAY_SOUND_FROM_COORD()"
    },
    "UPDATE_SOUND_COORD": {
      "prefix": "UPDATE_SOUND_COORD()",
      "body": [
        "UPDATE_SOUND_COORD(${1:int soundId}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "UPDATE_SOUND_COORD()"
    },
    "STOP_SOUND": {
      "prefix": "STOP_SOUND()",
      "body": ["STOP_SOUND(${1:int soundId})"],
      "description": "STOP_SOUND()"
    },
    "GET_NETWORK_ID_FROM_SOUND_ID": {
      "prefix": "GET_NETWORK_ID_FROM_SOUND_ID()",
      "body": ["GET_NETWORK_ID_FROM_SOUND_ID(${1:int soundId})"],
      "description": "GET_NETWORK_ID_FROM_SOUND_ID()"
    },
    "GET_SOUND_ID_FROM_NETWORK_ID": {
      "prefix": "GET_SOUND_ID_FROM_NETWORK_ID()",
      "body": ["GET_SOUND_ID_FROM_NETWORK_ID(${1:int netId})"],
      "description": "GET_SOUND_ID_FROM_NETWORK_ID()"
    },
    "SET_VARIABLE_ON_SOUND": {
      "prefix": "SET_VARIABLE_ON_SOUND()",
      "body": [
        "SET_VARIABLE_ON_SOUND(${1:int soundId}, ${2:const char* variable}, ${3:float p2})"
      ],
      "description": "SET_VARIABLE_ON_SOUND()"
    },
    "SET_VARIABLE_ON_STREAM": {
      "prefix": "SET_VARIABLE_ON_STREAM()",
      "body": [
        "SET_VARIABLE_ON_STREAM(${1:const char* variable}, ${2:float p1})"
      ],
      "description": "SET_VARIABLE_ON_STREAM()"
    },
    "OVERRIDE_UNDERWATER_STREAM": {
      "prefix": "OVERRIDE_UNDERWATER_STREAM()",
      "body": ["OVERRIDE_UNDERWATER_STREAM(${1:const char* p0}, ${2:BOOL p1})"],
      "description": "OVERRIDE_UNDERWATER_STREAM()"
    },
    "SET_VARIABLE_ON_UNDER_WATER_STREAM": {
      "prefix": "SET_VARIABLE_ON_UNDER_WATER_STREAM()",
      "body": [
        "SET_VARIABLE_ON_UNDER_WATER_STREAM(${1:const char* variableName}, ${2:float value})"
      ],
      "description": "SET_VARIABLE_ON_UNDER_WATER_STREAM()"
    },
    "HAS_SOUND_FINISHED": {
      "prefix": "HAS_SOUND_FINISHED()",
      "body": ["HAS_SOUND_FINISHED(${1:int soundId})"],
      "description": "HAS_SOUND_FINISHED()"
    },
    "PLAY_PED_AMBIENT_SPEECH_NATIVE": {
      "prefix": "PLAY_PED_AMBIENT_SPEECH_NATIVE()",
      "body": [
        "PLAY_PED_AMBIENT_SPEECH_NATIVE(${1:Ped ped}, ${2:const char* speechName}, ${3:const char* speechParam}, ${4:Any p3})"
      ],
      "description": "PLAY_PED_AMBIENT_SPEECH_NATIVE()"
    },
    "PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE": {
      "prefix": "PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE()",
      "body": [
        "PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE(${1:Ped ped}, ${2:const char* speechName}, ${3:const char* speechParam}, ${4:Any p3})"
      ],
      "description": "PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE()"
    },
    "PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE": {
      "prefix": "PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE()",
      "body": [
        "PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE(${1:Ped ped}, ${2:const char* speechName}, ${3:const char* voiceName}, ${4:const char* speechParam}, ${5:BOOL p4})"
      ],
      "description": "PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE()"
    },
    "PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE": {
      "prefix": "PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE()",
      "body": [
        "PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE(${1:const char* speechName}, ${2:const char* voiceName}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:const char* speechParam})"
      ],
      "description": "PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE()"
    },
    "OVERRIDE_TREVOR_RAGE": {
      "prefix": "OVERRIDE_TREVOR_RAGE()",
      "body": ["OVERRIDE_TREVOR_RAGE(${1:const char* voiceEffect})"],
      "description": "OVERRIDE_TREVOR_RAGE()"
    },
    "RESET_TREVOR_RAGE": {
      "prefix": "RESET_TREVOR_RAGE()",
      "body": ["RESET_TREVOR_RAGE()"],
      "description": "RESET_TREVOR_RAGE()"
    },
    "SET_PLAYER_ANGRY": {
      "prefix": "SET_PLAYER_ANGRY()",
      "body": ["SET_PLAYER_ANGRY(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PLAYER_ANGRY()"
    },
    "PLAY_PAIN": {
      "prefix": "PLAY_PAIN()",
      "body": [
        "PLAY_PAIN(${1:Ped ped}, ${2:int painID}, ${3:int p1}, ${4:Any p3})"
      ],
      "description": "PLAY_PAIN()"
    },
    "RELEASE_WEAPON_AUDIO": {
      "prefix": "RELEASE_WEAPON_AUDIO()",
      "body": ["RELEASE_WEAPON_AUDIO()"],
      "description": "RELEASE_WEAPON_AUDIO()"
    },
    "ACTIVATE_AUDIO_SLOWMO_MODE": {
      "prefix": "ACTIVATE_AUDIO_SLOWMO_MODE()",
      "body": ["ACTIVATE_AUDIO_SLOWMO_MODE(${1:const char* mode})"],
      "description": "ACTIVATE_AUDIO_SLOWMO_MODE()"
    },
    "DEACTIVATE_AUDIO_SLOWMO_MODE": {
      "prefix": "DEACTIVATE_AUDIO_SLOWMO_MODE()",
      "body": ["DEACTIVATE_AUDIO_SLOWMO_MODE(${1:const char* mode})"],
      "description": "DEACTIVATE_AUDIO_SLOWMO_MODE()"
    },
    "SET_AMBIENT_VOICE_NAME": {
      "prefix": "SET_AMBIENT_VOICE_NAME()",
      "body": ["SET_AMBIENT_VOICE_NAME(${1:Ped ped}, ${2:const char* name})"],
      "description": "SET_AMBIENT_VOICE_NAME()"
    },
    "SET_AMBIENT_VOICE_NAME_HASH": {
      "prefix": "SET_AMBIENT_VOICE_NAME_HASH()",
      "body": ["SET_AMBIENT_VOICE_NAME_HASH(${1:Ped ped}, ${2:Hash hash})"],
      "description": "SET_AMBIENT_VOICE_NAME_HASH()"
    },
    "GET_AMBIENT_VOICE_NAME_HASH": {
      "prefix": "GET_AMBIENT_VOICE_NAME_HASH()",
      "body": ["GET_AMBIENT_VOICE_NAME_HASH(${1:Ped ped})"],
      "description": "GET_AMBIENT_VOICE_NAME_HASH()"
    },
    "SET_PED_VOICE_FULL": {
      "prefix": "SET_PED_VOICE_FULL()",
      "body": ["SET_PED_VOICE_FULL(${1:Ped ped})"],
      "description": "SET_PED_VOICE_FULL()"
    },
    "SET_PED_RACE_AND_VOICE_GROUP": {
      "prefix": "SET_PED_RACE_AND_VOICE_GROUP()",
      "body": [
        "SET_PED_RACE_AND_VOICE_GROUP(${1:Ped ped}, ${2:int p1}, ${3:Hash voiceGroup})"
      ],
      "description": "SET_PED_RACE_AND_VOICE_GROUP()"
    },
    "SET_PED_VOICE_GROUP": {
      "prefix": "SET_PED_VOICE_GROUP()",
      "body": ["SET_PED_VOICE_GROUP(${1:Ped ped}, ${2:Hash voiceGroupHash})"],
      "description": "SET_PED_VOICE_GROUP()"
    },
    "SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG": {
      "prefix": "SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG()",
      "body": [
        "SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG(${1:Ped ped}, ${2:Hash voiceGroupHash})"
      ],
      "description": "SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG()"
    },
    "SET_PED_GENDER": {
      "prefix": "SET_PED_GENDER()",
      "body": ["SET_PED_GENDER(${1:Ped ped}, ${2:BOOL p1})"],
      "description": "SET_PED_GENDER()"
    },
    "STOP_CURRENT_PLAYING_SPEECH": {
      "prefix": "STOP_CURRENT_PLAYING_SPEECH()",
      "body": ["STOP_CURRENT_PLAYING_SPEECH(${1:Ped ped})"],
      "description": "STOP_CURRENT_PLAYING_SPEECH()"
    },
    "STOP_CURRENT_PLAYING_AMBIENT_SPEECH": {
      "prefix": "STOP_CURRENT_PLAYING_AMBIENT_SPEECH()",
      "body": ["STOP_CURRENT_PLAYING_AMBIENT_SPEECH(${1:Ped ped})"],
      "description": "STOP_CURRENT_PLAYING_AMBIENT_SPEECH()"
    },
    "IS_AMBIENT_SPEECH_PLAYING": {
      "prefix": "IS_AMBIENT_SPEECH_PLAYING()",
      "body": ["IS_AMBIENT_SPEECH_PLAYING(${1:Ped ped})"],
      "description": "IS_AMBIENT_SPEECH_PLAYING()"
    },
    "IS_SCRIPTED_SPEECH_PLAYING": {
      "prefix": "IS_SCRIPTED_SPEECH_PLAYING()",
      "body": ["IS_SCRIPTED_SPEECH_PLAYING(${1:Ped p0})"],
      "description": "IS_SCRIPTED_SPEECH_PLAYING()"
    },
    "IS_ANY_SPEECH_PLAYING": {
      "prefix": "IS_ANY_SPEECH_PLAYING()",
      "body": ["IS_ANY_SPEECH_PLAYING(${1:Ped ped})"],
      "description": "IS_ANY_SPEECH_PLAYING()"
    },
    "IS_ANY_POSITIONAL_SPEECH_PLAYING": {
      "prefix": "IS_ANY_POSITIONAL_SPEECH_PLAYING()",
      "body": ["IS_ANY_POSITIONAL_SPEECH_PLAYING()"],
      "description": "IS_ANY_POSITIONAL_SPEECH_PLAYING()"
    },
    "DOES_CONTEXT_EXIST_FOR_THIS_PED": {
      "prefix": "DOES_CONTEXT_EXIST_FOR_THIS_PED()",
      "body": [
        "DOES_CONTEXT_EXIST_FOR_THIS_PED(${1:Ped ped}, ${2:const char* speechName}, ${3:BOOL p2})"
      ],
      "description": "DOES_CONTEXT_EXIST_FOR_THIS_PED()"
    },
    "IS_PED_IN_CURRENT_CONVERSATION": {
      "prefix": "IS_PED_IN_CURRENT_CONVERSATION()",
      "body": ["IS_PED_IN_CURRENT_CONVERSATION(${1:Ped ped})"],
      "description": "IS_PED_IN_CURRENT_CONVERSATION()"
    },
    "SET_PED_IS_DRUNK": {
      "prefix": "SET_PED_IS_DRUNK()",
      "body": ["SET_PED_IS_DRUNK(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_IS_DRUNK()"
    },
    "PLAY_ANIMAL_VOCALIZATION": {
      "prefix": "PLAY_ANIMAL_VOCALIZATION()",
      "body": [
        "PLAY_ANIMAL_VOCALIZATION(${1:Ped pedHandle}, ${2:int p1}, ${3:const char* speechName})"
      ],
      "description": "PLAY_ANIMAL_VOCALIZATION()"
    },
    "IS_ANIMAL_VOCALIZATION_PLAYING": {
      "prefix": "IS_ANIMAL_VOCALIZATION_PLAYING()",
      "body": ["IS_ANIMAL_VOCALIZATION_PLAYING(${1:Ped pedHandle})"],
      "description": "IS_ANIMAL_VOCALIZATION_PLAYING()"
    },
    "SET_ANIMAL_MOOD": {
      "prefix": "SET_ANIMAL_MOOD()",
      "body": ["SET_ANIMAL_MOOD(${1:Ped animal}, ${2:int mood})"],
      "description": "SET_ANIMAL_MOOD()"
    },
    "IS_MOBILE_PHONE_RADIO_ACTIVE": {
      "prefix": "IS_MOBILE_PHONE_RADIO_ACTIVE()",
      "body": ["IS_MOBILE_PHONE_RADIO_ACTIVE()"],
      "description": "IS_MOBILE_PHONE_RADIO_ACTIVE()"
    },
    "SET_MOBILE_PHONE_RADIO_STATE": {
      "prefix": "SET_MOBILE_PHONE_RADIO_STATE()",
      "body": ["SET_MOBILE_PHONE_RADIO_STATE(${1:BOOL state})"],
      "description": "SET_MOBILE_PHONE_RADIO_STATE()"
    },
    "GET_PLAYER_RADIO_STATION_INDEX": {
      "prefix": "GET_PLAYER_RADIO_STATION_INDEX()",
      "body": ["GET_PLAYER_RADIO_STATION_INDEX()"],
      "description": "GET_PLAYER_RADIO_STATION_INDEX()"
    },
    "GET_PLAYER_RADIO_STATION_GENRE": {
      "prefix": "GET_PLAYER_RADIO_STATION_GENRE()",
      "body": ["GET_PLAYER_RADIO_STATION_GENRE()"],
      "description": "GET_PLAYER_RADIO_STATION_GENRE()"
    },
    "IS_RADIO_RETUNING": {
      "prefix": "IS_RADIO_RETUNING()",
      "body": ["IS_RADIO_RETUNING()"],
      "description": "IS_RADIO_RETUNING()"
    },
    "IS_RADIO_FADED_OUT": {
      "prefix": "IS_RADIO_FADED_OUT()",
      "body": ["IS_RADIO_FADED_OUT()"],
      "description": "IS_RADIO_FADED_OUT()"
    },
    "SET_RADIO_RETUNE_UP": {
      "prefix": "SET_RADIO_RETUNE_UP()",
      "body": ["SET_RADIO_RETUNE_UP()"],
      "description": "SET_RADIO_RETUNE_UP()"
    },
    "SET_RADIO_RETUNE_DOWN": {
      "prefix": "SET_RADIO_RETUNE_DOWN()",
      "body": ["SET_RADIO_RETUNE_DOWN()"],
      "description": "SET_RADIO_RETUNE_DOWN()"
    },
    "SET_RADIO_TO_STATION_NAME": {
      "prefix": "SET_RADIO_TO_STATION_NAME()",
      "body": ["SET_RADIO_TO_STATION_NAME(${1:const char* stationName})"],
      "description": "SET_RADIO_TO_STATION_NAME()"
    },
    "SET_VEH_RADIO_STATION": {
      "prefix": "SET_VEH_RADIO_STATION()",
      "body": [
        "SET_VEH_RADIO_STATION(${1:Vehicle vehicle}, ${2:const char* radioStation})"
      ],
      "description": "SET_VEH_RADIO_STATION()"
    },
    "SET_VEH_HAS_NORMAL_RADIO": {
      "prefix": "SET_VEH_HAS_NORMAL_RADIO()",
      "body": ["SET_VEH_HAS_NORMAL_RADIO(${1:Vehicle vehicle})"],
      "description": "SET_VEH_HAS_NORMAL_RADIO()"
    },
    "IS_VEHICLE_RADIO_ON": {
      "prefix": "IS_VEHICLE_RADIO_ON()",
      "body": ["IS_VEHICLE_RADIO_ON(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_RADIO_ON()"
    },
    "SET_VEH_FORCED_RADIO_THIS_FRAME": {
      "prefix": "SET_VEH_FORCED_RADIO_THIS_FRAME()",
      "body": ["SET_VEH_FORCED_RADIO_THIS_FRAME(${1:Vehicle vehicle})"],
      "description": "SET_VEH_FORCED_RADIO_THIS_FRAME()"
    },
    "SET_EMITTER_RADIO_STATION": {
      "prefix": "SET_EMITTER_RADIO_STATION()",
      "body": [
        "SET_EMITTER_RADIO_STATION(${1:const char* emitterName}, ${2:const char* radioStation}, ${3:Any p2})"
      ],
      "description": "SET_EMITTER_RADIO_STATION()"
    },
    "SET_STATIC_EMITTER_ENABLED": {
      "prefix": "SET_STATIC_EMITTER_ENABLED()",
      "body": [
        "SET_STATIC_EMITTER_ENABLED(${1:const char* emitterName}, ${2:BOOL toggle})"
      ],
      "description": "SET_STATIC_EMITTER_ENABLED()"
    },
    "LINK_STATIC_EMITTER_TO_ENTITY": {
      "prefix": "LINK_STATIC_EMITTER_TO_ENTITY()",
      "body": [
        "LINK_STATIC_EMITTER_TO_ENTITY(${1:const char* emitterName}, ${2:Entity entity})"
      ],
      "description": "LINK_STATIC_EMITTER_TO_ENTITY()"
    },
    "SET_RADIO_TO_STATION_INDEX": {
      "prefix": "SET_RADIO_TO_STATION_INDEX()",
      "body": ["SET_RADIO_TO_STATION_INDEX(${1:int radioStation})"],
      "description": "SET_RADIO_TO_STATION_INDEX()"
    },
    "SET_FRONTEND_RADIO_ACTIVE": {
      "prefix": "SET_FRONTEND_RADIO_ACTIVE()",
      "body": ["SET_FRONTEND_RADIO_ACTIVE(${1:BOOL active})"],
      "description": "SET_FRONTEND_RADIO_ACTIVE()"
    },
    "UNLOCK_MISSION_NEWS_STORY": {
      "prefix": "UNLOCK_MISSION_NEWS_STORY()",
      "body": ["UNLOCK_MISSION_NEWS_STORY(${1:int newsStory})"],
      "description": "UNLOCK_MISSION_NEWS_STORY()"
    },
    "IS_MISSION_NEWS_STORY_UNLOCKED": {
      "prefix": "IS_MISSION_NEWS_STORY_UNLOCKED()",
      "body": ["IS_MISSION_NEWS_STORY_UNLOCKED(${1:int newsStory})"],
      "description": "IS_MISSION_NEWS_STORY_UNLOCKED()"
    },
    "GET_AUDIBLE_MUSIC_TRACK_TEXT_ID": {
      "prefix": "GET_AUDIBLE_MUSIC_TRACK_TEXT_ID()",
      "body": ["GET_AUDIBLE_MUSIC_TRACK_TEXT_ID()"],
      "description": "GET_AUDIBLE_MUSIC_TRACK_TEXT_ID()"
    },
    "PLAY_END_CREDITS_MUSIC": {
      "prefix": "PLAY_END_CREDITS_MUSIC()",
      "body": ["PLAY_END_CREDITS_MUSIC(${1:BOOL play})"],
      "description": "PLAY_END_CREDITS_MUSIC()"
    },
    "SKIP_RADIO_FORWARD": {
      "prefix": "SKIP_RADIO_FORWARD()",
      "body": ["SKIP_RADIO_FORWARD()"],
      "description": "SKIP_RADIO_FORWARD()"
    },
    "FREEZE_RADIO_STATION": {
      "prefix": "FREEZE_RADIO_STATION()",
      "body": ["FREEZE_RADIO_STATION(${1:const char* radioStation})"],
      "description": "FREEZE_RADIO_STATION()"
    },
    "UNFREEZE_RADIO_STATION": {
      "prefix": "UNFREEZE_RADIO_STATION()",
      "body": ["UNFREEZE_RADIO_STATION(${1:const char* radioStation})"],
      "description": "UNFREEZE_RADIO_STATION()"
    },
    "SET_RADIO_AUTO_UNFREEZE": {
      "prefix": "SET_RADIO_AUTO_UNFREEZE()",
      "body": ["SET_RADIO_AUTO_UNFREEZE(${1:BOOL toggle})"],
      "description": "SET_RADIO_AUTO_UNFREEZE()"
    },
    "SET_INITIAL_PLAYER_STATION": {
      "prefix": "SET_INITIAL_PLAYER_STATION()",
      "body": ["SET_INITIAL_PLAYER_STATION(${1:const char* radioStation})"],
      "description": "SET_INITIAL_PLAYER_STATION()"
    },
    "SET_USER_RADIO_CONTROL_ENABLED": {
      "prefix": "SET_USER_RADIO_CONTROL_ENABLED()",
      "body": ["SET_USER_RADIO_CONTROL_ENABLED(${1:BOOL toggle})"],
      "description": "SET_USER_RADIO_CONTROL_ENABLED()"
    },
    "SET_RADIO_TRACK": {
      "prefix": "SET_RADIO_TRACK()",
      "body": [
        "SET_RADIO_TRACK(${1:const char* radioStation}, ${2:const char* radioTrack})"
      ],
      "description": "SET_RADIO_TRACK()"
    },
    "SET_RADIO_TRACK_WITH_START_OFFSET": {
      "prefix": "SET_RADIO_TRACK_WITH_START_OFFSET()",
      "body": [
        "SET_RADIO_TRACK_WITH_START_OFFSET(${1:const char* radioStationName}, ${2:const char* mixName}, ${3:int p2})"
      ],
      "description": "SET_RADIO_TRACK_WITH_START_OFFSET()"
    },
    "SET_NEXT_RADIO_TRACK": {
      "prefix": "SET_NEXT_RADIO_TRACK()",
      "body": [
        "SET_NEXT_RADIO_TRACK(${1:const char* radioName}, ${2:const char* radioTrack}, ${3:const char* p2}, ${4:const char* p3})"
      ],
      "description": "SET_NEXT_RADIO_TRACK()"
    },
    "SET_VEHICLE_RADIO_LOUD": {
      "prefix": "SET_VEHICLE_RADIO_LOUD()",
      "body": ["SET_VEHICLE_RADIO_LOUD(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_VEHICLE_RADIO_LOUD()"
    },
    "CAN_VEHICLE_RECEIVE_CB_RADIO": {
      "prefix": "CAN_VEHICLE_RECEIVE_CB_RADIO()",
      "body": ["CAN_VEHICLE_RECEIVE_CB_RADIO(${1:Vehicle vehicle})"],
      "description": "CAN_VEHICLE_RECEIVE_CB_RADIO()"
    },
    "SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY": {
      "prefix": "SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY()",
      "body": ["SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(${1:BOOL toggle})"],
      "description": "SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY()"
    },
    "DOES_PLAYER_VEH_HAVE_RADIO": {
      "prefix": "DOES_PLAYER_VEH_HAVE_RADIO()",
      "body": ["DOES_PLAYER_VEH_HAVE_RADIO()"],
      "description": "DOES_PLAYER_VEH_HAVE_RADIO()"
    },
    "IS_PLAYER_VEH_RADIO_ENABLE": {
      "prefix": "IS_PLAYER_VEH_RADIO_ENABLE()",
      "body": ["IS_PLAYER_VEH_RADIO_ENABLE()"],
      "description": "IS_PLAYER_VEH_RADIO_ENABLE()"
    },
    "SET_VEHICLE_RADIO_ENABLED": {
      "prefix": "SET_VEHICLE_RADIO_ENABLED()",
      "body": [
        "SET_VEHICLE_RADIO_ENABLED(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_RADIO_ENABLED()"
    },
    "SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED": {
      "prefix": "SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED()",
      "body": [
        "SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED(${1:Any p0})"
      ],
      "description": "SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED()"
    },
    "SET_CUSTOM_RADIO_TRACK_LIST": {
      "prefix": "SET_CUSTOM_RADIO_TRACK_LIST()",
      "body": [
        "SET_CUSTOM_RADIO_TRACK_LIST(${1:const char* radioStation}, ${2:const char* trackListName}, ${3:BOOL p2})"
      ],
      "description": "SET_CUSTOM_RADIO_TRACK_LIST()"
    },
    "CLEAR_CUSTOM_RADIO_TRACK_LIST": {
      "prefix": "CLEAR_CUSTOM_RADIO_TRACK_LIST()",
      "body": ["CLEAR_CUSTOM_RADIO_TRACK_LIST(${1:const char* radioStation})"],
      "description": "CLEAR_CUSTOM_RADIO_TRACK_LIST()"
    },
    "GET_NUM_UNLOCKED_RADIO_STATIONS": {
      "prefix": "GET_NUM_UNLOCKED_RADIO_STATIONS()",
      "body": ["GET_NUM_UNLOCKED_RADIO_STATIONS()"],
      "description": "GET_NUM_UNLOCKED_RADIO_STATIONS()"
    },
    "FIND_RADIO_STATION_INDEX": {
      "prefix": "FIND_RADIO_STATION_INDEX()",
      "body": ["FIND_RADIO_STATION_INDEX(${1:Hash stationNameHash})"],
      "description": "FIND_RADIO_STATION_INDEX()"
    },
    "SET_RADIO_STATION_MUSIC_ONLY": {
      "prefix": "SET_RADIO_STATION_MUSIC_ONLY()",
      "body": [
        "SET_RADIO_STATION_MUSIC_ONLY(${1:const char* radioStation}, ${2:BOOL toggle})"
      ],
      "description": "SET_RADIO_STATION_MUSIC_ONLY()"
    },
    "SET_RADIO_FRONTEND_FADE_TIME": {
      "prefix": "SET_RADIO_FRONTEND_FADE_TIME()",
      "body": ["SET_RADIO_FRONTEND_FADE_TIME(${1:float fadeTime})"],
      "description": "SET_RADIO_FRONTEND_FADE_TIME()"
    },
    "UNLOCK_RADIO_STATION_TRACK_LIST": {
      "prefix": "UNLOCK_RADIO_STATION_TRACK_LIST()",
      "body": [
        "UNLOCK_RADIO_STATION_TRACK_LIST(${1:const char* radioStation}, ${2:const char* trackListName})"
      ],
      "description": "UNLOCK_RADIO_STATION_TRACK_LIST()"
    },
    "LOCK_RADIO_STATION_TRACK_LIST": {
      "prefix": "LOCK_RADIO_STATION_TRACK_LIST()",
      "body": [
        "LOCK_RADIO_STATION_TRACK_LIST(${1:const char* radioStation}, ${2:const char* trackListName})"
      ],
      "description": "LOCK_RADIO_STATION_TRACK_LIST()"
    },
    "UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS": {
      "prefix": "UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS()",
      "body": ["UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS(${1:BOOL enableMixes})"],
      "description": "UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS()"
    },
    "LOCK_RADIO_STATION": {
      "prefix": "LOCK_RADIO_STATION()",
      "body": [
        "LOCK_RADIO_STATION(${1:const char* radioStationName}, ${2:BOOL toggle})"
      ],
      "description": "LOCK_RADIO_STATION()"
    },
    "SET_RADIO_STATION_AS_FAVOURITE": {
      "prefix": "SET_RADIO_STATION_AS_FAVOURITE()",
      "body": [
        "SET_RADIO_STATION_AS_FAVOURITE(${1:const char* radioStation}, ${2:BOOL toggle})"
      ],
      "description": "SET_RADIO_STATION_AS_FAVOURITE()"
    },
    "IS_RADIO_STATION_FAVOURITED": {
      "prefix": "IS_RADIO_STATION_FAVOURITED()",
      "body": ["IS_RADIO_STATION_FAVOURITED(${1:const char* radioStation})"],
      "description": "IS_RADIO_STATION_FAVOURITED()"
    },
    "GET_NEXT_AUDIBLE_BEAT": {
      "prefix": "GET_NEXT_AUDIBLE_BEAT()",
      "body": [
        "GET_NEXT_AUDIBLE_BEAT(${1:float* out1}, ${2:float* out2}, ${3:int* out3})"
      ],
      "description": "GET_NEXT_AUDIBLE_BEAT()"
    },
    "FORCE_MUSIC_TRACK_LIST": {
      "prefix": "FORCE_MUSIC_TRACK_LIST()",
      "body": [
        "FORCE_MUSIC_TRACK_LIST(${1:const char* radioStation}, ${2:const char* trackListName}, ${3:int milliseconds})"
      ],
      "description": "FORCE_MUSIC_TRACK_LIST()"
    },
    "GET_CURRENT_TRACK_PLAY_TIME": {
      "prefix": "GET_CURRENT_TRACK_PLAY_TIME()",
      "body": ["GET_CURRENT_TRACK_PLAY_TIME(${1:const char* radioStationName})"],
      "description": "GET_CURRENT_TRACK_PLAY_TIME()"
    },
    "GET_CURRENT_TRACK_SOUND_NAME": {
      "prefix": "GET_CURRENT_TRACK_SOUND_NAME()",
      "body": ["GET_CURRENT_TRACK_SOUND_NAME(${1:const char* radioStationName})"],
      "description": "GET_CURRENT_TRACK_SOUND_NAME()"
    },
    "SET_VEHICLE_MISSILE_WARNING_ENABLED": {
      "prefix": "SET_VEHICLE_MISSILE_WARNING_ENABLED()",
      "body": [
        "SET_VEHICLE_MISSILE_WARNING_ENABLED(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_MISSILE_WARNING_ENABLED()"
    },
    "SET_AMBIENT_ZONE_STATE": {
      "prefix": "SET_AMBIENT_ZONE_STATE()",
      "body": [
        "SET_AMBIENT_ZONE_STATE(${1:const char* zoneName}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "SET_AMBIENT_ZONE_STATE()"
    },
    "CLEAR_AMBIENT_ZONE_STATE": {
      "prefix": "CLEAR_AMBIENT_ZONE_STATE()",
      "body": [
        "CLEAR_AMBIENT_ZONE_STATE(${1:const char* zoneName}, ${2:BOOL p1})"
      ],
      "description": "CLEAR_AMBIENT_ZONE_STATE()"
    },
    "SET_AMBIENT_ZONE_LIST_STATE": {
      "prefix": "SET_AMBIENT_ZONE_LIST_STATE()",
      "body": [
        "SET_AMBIENT_ZONE_LIST_STATE(${1:const char* ambientZone}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "SET_AMBIENT_ZONE_LIST_STATE()"
    },
    "CLEAR_AMBIENT_ZONE_LIST_STATE": {
      "prefix": "CLEAR_AMBIENT_ZONE_LIST_STATE()",
      "body": [
        "CLEAR_AMBIENT_ZONE_LIST_STATE(${1:const char* ambientZone}, ${2:BOOL p1})"
      ],
      "description": "CLEAR_AMBIENT_ZONE_LIST_STATE()"
    },
    "SET_AMBIENT_ZONE_STATE_PERSISTENT": {
      "prefix": "SET_AMBIENT_ZONE_STATE_PERSISTENT()",
      "body": [
        "SET_AMBIENT_ZONE_STATE_PERSISTENT(${1:const char* ambientZone}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "SET_AMBIENT_ZONE_STATE_PERSISTENT()"
    },
    "SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT": {
      "prefix": "SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT()",
      "body": [
        "SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT(${1:const char* ambientZone}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT()"
    },
    "IS_AMBIENT_ZONE_ENABLED": {
      "prefix": "IS_AMBIENT_ZONE_ENABLED()",
      "body": ["IS_AMBIENT_ZONE_ENABLED(${1:const char* ambientZone})"],
      "description": "IS_AMBIENT_ZONE_ENABLED()"
    },
    "REFRESH_CLOSEST_OCEAN_SHORELINE": {
      "prefix": "REFRESH_CLOSEST_OCEAN_SHORELINE()",
      "body": ["REFRESH_CLOSEST_OCEAN_SHORELINE()"],
      "description": "REFRESH_CLOSEST_OCEAN_SHORELINE()"
    },
    "SET_CUTSCENE_AUDIO_OVERRIDE": {
      "prefix": "SET_CUTSCENE_AUDIO_OVERRIDE()",
      "body": ["SET_CUTSCENE_AUDIO_OVERRIDE(${1:const char* name})"],
      "description": "SET_CUTSCENE_AUDIO_OVERRIDE()"
    },
    "SET_VARIABLE_ON_SYNCH_SCENE_AUDIO": {
      "prefix": "SET_VARIABLE_ON_SYNCH_SCENE_AUDIO()",
      "body": [
        "SET_VARIABLE_ON_SYNCH_SCENE_AUDIO(${1:const char* variableName}, ${2:float value})"
      ],
      "description": "SET_VARIABLE_ON_SYNCH_SCENE_AUDIO()"
    },
    "PLAY_POLICE_REPORT": {
      "prefix": "PLAY_POLICE_REPORT()",
      "body": ["PLAY_POLICE_REPORT(${1:const char* name}, ${2:float p1})"],
      "description": "PLAY_POLICE_REPORT()"
    },
    "CANCEL_ALL_POLICE_REPORTS": {
      "prefix": "CANCEL_ALL_POLICE_REPORTS()",
      "body": ["CANCEL_ALL_POLICE_REPORTS()"],
      "description": "CANCEL_ALL_POLICE_REPORTS()"
    },
    "BLIP_SIREN": {
      "prefix": "BLIP_SIREN()",
      "body": ["BLIP_SIREN(${1:Vehicle vehicle})"],
      "description": "BLIP_SIREN()"
    },
    "OVERRIDE_VEH_HORN": {
      "prefix": "OVERRIDE_VEH_HORN()",
      "body": [
        "OVERRIDE_VEH_HORN(${1:Vehicle vehicle}, ${2:BOOL override}, ${3:int hornHash})"
      ],
      "description": "OVERRIDE_VEH_HORN()"
    },
    "IS_HORN_ACTIVE": {
      "prefix": "IS_HORN_ACTIVE()",
      "body": ["IS_HORN_ACTIVE(${1:Vehicle vehicle})"],
      "description": "IS_HORN_ACTIVE()"
    },
    "SET_AGGRESSIVE_HORNS": {
      "prefix": "SET_AGGRESSIVE_HORNS()",
      "body": ["SET_AGGRESSIVE_HORNS(${1:BOOL toggle})"],
      "description": "SET_AGGRESSIVE_HORNS()"
    },
    "SET_RADIO_POSITION_AUDIO_MUTE": {
      "prefix": "SET_RADIO_POSITION_AUDIO_MUTE()",
      "body": ["SET_RADIO_POSITION_AUDIO_MUTE(${1:BOOL p0})"],
      "description": "SET_RADIO_POSITION_AUDIO_MUTE()"
    },
    "SET_VEHICLE_CONVERSATIONS_PERSIST": {
      "prefix": "SET_VEHICLE_CONVERSATIONS_PERSIST()",
      "body": ["SET_VEHICLE_CONVERSATIONS_PERSIST(${1:BOOL p0}, ${2:BOOL p1})"],
      "description": "SET_VEHICLE_CONVERSATIONS_PERSIST()"
    },
    "SET_VEHICLE_CONVERSATIONS_PERSIST_NEW": {
      "prefix": "SET_VEHICLE_CONVERSATIONS_PERSIST_NEW()",
      "body": [
        "SET_VEHICLE_CONVERSATIONS_PERSIST_NEW(${1:BOOL p0}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "SET_VEHICLE_CONVERSATIONS_PERSIST_NEW()"
    },
    "IS_STREAM_PLAYING": {
      "prefix": "IS_STREAM_PLAYING()",
      "body": ["IS_STREAM_PLAYING()"],
      "description": "IS_STREAM_PLAYING()"
    },
    "GET_STREAM_PLAY_TIME": {
      "prefix": "GET_STREAM_PLAY_TIME()",
      "body": ["GET_STREAM_PLAY_TIME()"],
      "description": "GET_STREAM_PLAY_TIME()"
    },
    "LOAD_STREAM": {
      "prefix": "LOAD_STREAM()",
      "body": [
        "LOAD_STREAM(${1:const char* streamName}, ${2:const char* soundSet})"
      ],
      "description": "LOAD_STREAM()"
    },
    "LOAD_STREAM_WITH_START_OFFSET": {
      "prefix": "LOAD_STREAM_WITH_START_OFFSET()",
      "body": [
        "LOAD_STREAM_WITH_START_OFFSET(${1:const char* streamName}, ${2:int startOffset}, ${3:const char* soundSet})"
      ],
      "description": "LOAD_STREAM_WITH_START_OFFSET()"
    },
    "PLAY_STREAM_FROM_PED": {
      "prefix": "PLAY_STREAM_FROM_PED()",
      "body": ["PLAY_STREAM_FROM_PED(${1:Ped ped})"],
      "description": "PLAY_STREAM_FROM_PED()"
    },
    "PLAY_STREAM_FROM_VEHICLE": {
      "prefix": "PLAY_STREAM_FROM_VEHICLE()",
      "body": ["PLAY_STREAM_FROM_VEHICLE(${1:Vehicle vehicle})"],
      "description": "PLAY_STREAM_FROM_VEHICLE()"
    },
    "PLAY_STREAM_FROM_OBJECT": {
      "prefix": "PLAY_STREAM_FROM_OBJECT()",
      "body": ["PLAY_STREAM_FROM_OBJECT(${1:Object object})"],
      "description": "PLAY_STREAM_FROM_OBJECT()"
    },
    "PLAY_STREAM_FRONTEND": {
      "prefix": "PLAY_STREAM_FRONTEND()",
      "body": ["PLAY_STREAM_FRONTEND()"],
      "description": "PLAY_STREAM_FRONTEND()"
    },
    "PLAY_STREAM_FROM_POSITION": {
      "prefix": "PLAY_STREAM_FROM_POSITION()",
      "body": [
        "PLAY_STREAM_FROM_POSITION(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "PLAY_STREAM_FROM_POSITION()"
    },
    "STOP_STREAM": {
      "prefix": "STOP_STREAM()",
      "body": ["STOP_STREAM()"],
      "description": "STOP_STREAM()"
    },
    "STOP_PED_SPEAKING": {
      "prefix": "STOP_PED_SPEAKING()",
      "body": ["STOP_PED_SPEAKING(${1:Ped ped}, ${2:BOOL shaking})"],
      "description": "STOP_PED_SPEAKING()"
    },
    "BLOCK_ALL_SPEECH_FROM_PED": {
      "prefix": "BLOCK_ALL_SPEECH_FROM_PED()",
      "body": [
        "BLOCK_ALL_SPEECH_FROM_PED(${1:Ped ped}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "BLOCK_ALL_SPEECH_FROM_PED()"
    },
    "STOP_PED_SPEAKING_SYNCED": {
      "prefix": "STOP_PED_SPEAKING_SYNCED()",
      "body": ["STOP_PED_SPEAKING_SYNCED(${1:Ped ped}, ${2:BOOL p1})"],
      "description": "STOP_PED_SPEAKING_SYNCED()"
    },
    "DISABLE_PED_PAIN_AUDIO": {
      "prefix": "DISABLE_PED_PAIN_AUDIO()",
      "body": ["DISABLE_PED_PAIN_AUDIO(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "DISABLE_PED_PAIN_AUDIO()"
    },
    "IS_AMBIENT_SPEECH_DISABLED": {
      "prefix": "IS_AMBIENT_SPEECH_DISABLED()",
      "body": ["IS_AMBIENT_SPEECH_DISABLED(${1:Ped ped})"],
      "description": "IS_AMBIENT_SPEECH_DISABLED()"
    },
    "BLOCK_SPEECH_CONTEXT_GROUP": {
      "prefix": "BLOCK_SPEECH_CONTEXT_GROUP()",
      "body": ["BLOCK_SPEECH_CONTEXT_GROUP(${1:const char* p0}, ${2:int p1})"],
      "description": "BLOCK_SPEECH_CONTEXT_GROUP()"
    },
    "UNBLOCK_SPEECH_CONTEXT_GROUP": {
      "prefix": "UNBLOCK_SPEECH_CONTEXT_GROUP()",
      "body": ["UNBLOCK_SPEECH_CONTEXT_GROUP(${1:const char* p0})"],
      "description": "UNBLOCK_SPEECH_CONTEXT_GROUP()"
    },
    "SET_SIREN_WITH_NO_DRIVER": {
      "prefix": "SET_SIREN_WITH_NO_DRIVER()",
      "body": [
        "SET_SIREN_WITH_NO_DRIVER(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_SIREN_WITH_NO_DRIVER()"
    },
    "SET_SIREN_BYPASS_MP_DRIVER_CHECK": {
      "prefix": "SET_SIREN_BYPASS_MP_DRIVER_CHECK()",
      "body": [
        "SET_SIREN_BYPASS_MP_DRIVER_CHECK(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_SIREN_BYPASS_MP_DRIVER_CHECK()"
    },
    "TRIGGER_SIREN_AUDIO": {
      "prefix": "TRIGGER_SIREN_AUDIO()",
      "body": ["TRIGGER_SIREN_AUDIO(${1:Vehicle vehicle})"],
      "description": "TRIGGER_SIREN_AUDIO()"
    },
    "SET_HORN_PERMANENTLY_ON": {
      "prefix": "SET_HORN_PERMANENTLY_ON()",
      "body": ["SET_HORN_PERMANENTLY_ON(${1:Vehicle vehicle})"],
      "description": "SET_HORN_PERMANENTLY_ON()"
    },
    "SET_HORN_ENABLED": {
      "prefix": "SET_HORN_ENABLED()",
      "body": ["SET_HORN_ENABLED(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_HORN_ENABLED()"
    },
    "SET_AUDIO_VEHICLE_PRIORITY": {
      "prefix": "SET_AUDIO_VEHICLE_PRIORITY()",
      "body": ["SET_AUDIO_VEHICLE_PRIORITY(${1:Vehicle vehicle}, ${2:Any p1})"],
      "description": "SET_AUDIO_VEHICLE_PRIORITY()"
    },
    "SET_HORN_PERMANENTLY_ON_TIME": {
      "prefix": "SET_HORN_PERMANENTLY_ON_TIME()",
      "body": [
        "SET_HORN_PERMANENTLY_ON_TIME(${1:Vehicle vehicle}, ${2:float time})"
      ],
      "description": "SET_HORN_PERMANENTLY_ON_TIME()"
    },
    "USE_SIREN_AS_HORN": {
      "prefix": "USE_SIREN_AS_HORN()",
      "body": ["USE_SIREN_AS_HORN(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "USE_SIREN_AS_HORN()"
    },
    "FORCE_USE_AUDIO_GAME_OBJECT": {
      "prefix": "FORCE_USE_AUDIO_GAME_OBJECT()",
      "body": [
        "FORCE_USE_AUDIO_GAME_OBJECT(${1:Vehicle vehicle}, ${2:const char* audioName})"
      ],
      "description": "FORCE_USE_AUDIO_GAME_OBJECT()"
    },
    "PRELOAD_VEHICLE_AUDIO_BANK": {
      "prefix": "PRELOAD_VEHICLE_AUDIO_BANK()",
      "body": ["PRELOAD_VEHICLE_AUDIO_BANK(${1:Hash vehicleModel})"],
      "description": "PRELOAD_VEHICLE_AUDIO_BANK()"
    },
    "SET_VEHICLE_STARTUP_REV_SOUND": {
      "prefix": "SET_VEHICLE_STARTUP_REV_SOUND()",
      "body": [
        "SET_VEHICLE_STARTUP_REV_SOUND(${1:Vehicle vehicle}, ${2:const char* p1}, ${3:const char* p2})"
      ],
      "description": "SET_VEHICLE_STARTUP_REV_SOUND()"
    },
    "RESET_VEHICLE_STARTUP_REV_SOUND": {
      "prefix": "RESET_VEHICLE_STARTUP_REV_SOUND()",
      "body": ["RESET_VEHICLE_STARTUP_REV_SOUND(${1:Vehicle vehicle})"],
      "description": "RESET_VEHICLE_STARTUP_REV_SOUND()"
    },
    "SET_VEHICLE_FORCE_REVERSE_WARNING": {
      "prefix": "SET_VEHICLE_FORCE_REVERSE_WARNING()",
      "body": ["SET_VEHICLE_FORCE_REVERSE_WARNING(${1:Any p0}, ${2:Any p1})"],
      "description": "SET_VEHICLE_FORCE_REVERSE_WARNING()"
    },
    "IS_VEHICLE_AUDIBLY_DAMAGED": {
      "prefix": "IS_VEHICLE_AUDIBLY_DAMAGED()",
      "body": ["IS_VEHICLE_AUDIBLY_DAMAGED(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_AUDIBLY_DAMAGED()"
    },
    "SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR": {
      "prefix": "SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR()",
      "body": [
        "SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR(${1:Vehicle vehicle}, ${2:float damageFactor})"
      ],
      "description": "SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR()"
    },
    "SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR": {
      "prefix": "SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR()",
      "body": [
        "SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR(${1:Vehicle vehicle}, ${2:float intensity})"
      ],
      "description": "SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR()"
    },
    "ENABLE_VEHICLE_FANBELT_DAMAGE": {
      "prefix": "ENABLE_VEHICLE_FANBELT_DAMAGE()",
      "body": [
        "ENABLE_VEHICLE_FANBELT_DAMAGE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "ENABLE_VEHICLE_FANBELT_DAMAGE()"
    },
    "ENABLE_VEHICLE_EXHAUST_POPS": {
      "prefix": "ENABLE_VEHICLE_EXHAUST_POPS()",
      "body": [
        "ENABLE_VEHICLE_EXHAUST_POPS(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "ENABLE_VEHICLE_EXHAUST_POPS()"
    },
    "SET_VEHICLE_BOOST_ACTIVE": {
      "prefix": "SET_VEHICLE_BOOST_ACTIVE()",
      "body": [
        "SET_VEHICLE_BOOST_ACTIVE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_BOOST_ACTIVE()"
    },
    "SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE": {
      "prefix": "SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE()",
      "body": [
        "SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE()"
    },
    "SET_SCRIPT_UPDATE_DOOR_AUDIO": {
      "prefix": "SET_SCRIPT_UPDATE_DOOR_AUDIO()",
      "body": [
        "SET_SCRIPT_UPDATE_DOOR_AUDIO(${1:Hash doorHash}, ${2:BOOL toggle})"
      ],
      "description": "SET_SCRIPT_UPDATE_DOOR_AUDIO()"
    },
    "PLAY_VEHICLE_DOOR_OPEN_SOUND": {
      "prefix": "PLAY_VEHICLE_DOOR_OPEN_SOUND()",
      "body": [
        "PLAY_VEHICLE_DOOR_OPEN_SOUND(${1:Vehicle vehicle}, ${2:int doorId})"
      ],
      "description": "PLAY_VEHICLE_DOOR_OPEN_SOUND()"
    },
    "PLAY_VEHICLE_DOOR_CLOSE_SOUND": {
      "prefix": "PLAY_VEHICLE_DOOR_CLOSE_SOUND()",
      "body": [
        "PLAY_VEHICLE_DOOR_CLOSE_SOUND(${1:Vehicle vehicle}, ${2:int doorId})"
      ],
      "description": "PLAY_VEHICLE_DOOR_CLOSE_SOUND()"
    },
    "ENABLE_STALL_WARNING_SOUNDS": {
      "prefix": "ENABLE_STALL_WARNING_SOUNDS()",
      "body": [
        "ENABLE_STALL_WARNING_SOUNDS(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "ENABLE_STALL_WARNING_SOUNDS()"
    },
    "_ENABLE_DRAG_RACE_STATIONARY_WARNING_SOUNDS": {
      "prefix": "_ENABLE_DRAG_RACE_STATIONARY_WARNING_SOUNDS()",
      "body": [
        "_ENABLE_DRAG_RACE_STATIONARY_WARNING_SOUNDS(${1:Vehicle vehicle}, ${2:BOOL enable})"
      ],
      "description": "_ENABLE_DRAG_RACE_STATIONARY_WARNING_SOUNDS()"
    },
    "IS_GAME_IN_CONTROL_OF_MUSIC": {
      "prefix": "IS_GAME_IN_CONTROL_OF_MUSIC()",
      "body": ["IS_GAME_IN_CONTROL_OF_MUSIC()"],
      "description": "IS_GAME_IN_CONTROL_OF_MUSIC()"
    },
    "SET_GPS_ACTIVE": {
      "prefix": "SET_GPS_ACTIVE()",
      "body": ["SET_GPS_ACTIVE(${1:BOOL active})"],
      "description": "SET_GPS_ACTIVE()"
    },
    "PLAY_MISSION_COMPLETE_AUDIO": {
      "prefix": "PLAY_MISSION_COMPLETE_AUDIO()",
      "body": ["PLAY_MISSION_COMPLETE_AUDIO(${1:const char* audioName})"],
      "description": "PLAY_MISSION_COMPLETE_AUDIO()"
    },
    "IS_MISSION_COMPLETE_PLAYING": {
      "prefix": "IS_MISSION_COMPLETE_PLAYING()",
      "body": ["IS_MISSION_COMPLETE_PLAYING()"],
      "description": "IS_MISSION_COMPLETE_PLAYING()"
    },
    "IS_MISSION_COMPLETE_READY_FOR_UI": {
      "prefix": "IS_MISSION_COMPLETE_READY_FOR_UI()",
      "body": ["IS_MISSION_COMPLETE_READY_FOR_UI()"],
      "description": "IS_MISSION_COMPLETE_READY_FOR_UI()"
    },
    "BLOCK_DEATH_JINGLE": {
      "prefix": "BLOCK_DEATH_JINGLE()",
      "body": ["BLOCK_DEATH_JINGLE(${1:BOOL toggle})"],
      "description": "BLOCK_DEATH_JINGLE()"
    },
    "START_AUDIO_SCENE": {
      "prefix": "START_AUDIO_SCENE()",
      "body": ["START_AUDIO_SCENE(${1:const char* scene})"],
      "description": "START_AUDIO_SCENE()"
    },
    "STOP_AUDIO_SCENE": {
      "prefix": "STOP_AUDIO_SCENE()",
      "body": ["STOP_AUDIO_SCENE(${1:const char* scene})"],
      "description": "STOP_AUDIO_SCENE()"
    },
    "STOP_AUDIO_SCENES": {
      "prefix": "STOP_AUDIO_SCENES()",
      "body": ["STOP_AUDIO_SCENES()"],
      "description": "STOP_AUDIO_SCENES()"
    },
    "IS_AUDIO_SCENE_ACTIVE": {
      "prefix": "IS_AUDIO_SCENE_ACTIVE()",
      "body": ["IS_AUDIO_SCENE_ACTIVE(${1:const char* scene})"],
      "description": "IS_AUDIO_SCENE_ACTIVE()"
    },
    "SET_AUDIO_SCENE_VARIABLE": {
      "prefix": "SET_AUDIO_SCENE_VARIABLE()",
      "body": [
        "SET_AUDIO_SCENE_VARIABLE(${1:const char* scene}, ${2:const char* variable}, ${3:float value})"
      ],
      "description": "SET_AUDIO_SCENE_VARIABLE()"
    },
    "SET_AUDIO_SCRIPT_CLEANUP_TIME": {
      "prefix": "SET_AUDIO_SCRIPT_CLEANUP_TIME()",
      "body": ["SET_AUDIO_SCRIPT_CLEANUP_TIME(${1:int time})"],
      "description": "SET_AUDIO_SCRIPT_CLEANUP_TIME()"
    },
    "ADD_ENTITY_TO_AUDIO_MIX_GROUP": {
      "prefix": "ADD_ENTITY_TO_AUDIO_MIX_GROUP()",
      "body": [
        "ADD_ENTITY_TO_AUDIO_MIX_GROUP(${1:Entity entity}, ${2:const char* groupName}, ${3:float p2})"
      ],
      "description": "ADD_ENTITY_TO_AUDIO_MIX_GROUP()"
    },
    "REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP": {
      "prefix": "REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP()",
      "body": [
        "REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP(${1:Entity entity}, ${2:float p1})"
      ],
      "description": "REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP()"
    },
    "AUDIO_IS_MUSIC_PLAYING": {
      "prefix": "AUDIO_IS_MUSIC_PLAYING()",
      "body": ["AUDIO_IS_MUSIC_PLAYING()"],
      "description": "AUDIO_IS_MUSIC_PLAYING()"
    },
    "AUDIO_IS_SCRIPTED_MUSIC_PLAYING": {
      "prefix": "AUDIO_IS_SCRIPTED_MUSIC_PLAYING()",
      "body": ["AUDIO_IS_SCRIPTED_MUSIC_PLAYING()"],
      "description": "AUDIO_IS_SCRIPTED_MUSIC_PLAYING()"
    },
    "PREPARE_MUSIC_EVENT": {
      "prefix": "PREPARE_MUSIC_EVENT()",
      "body": ["PREPARE_MUSIC_EVENT(${1:const char* eventName})"],
      "description": "PREPARE_MUSIC_EVENT()"
    },
    "CANCEL_MUSIC_EVENT": {
      "prefix": "CANCEL_MUSIC_EVENT()",
      "body": ["CANCEL_MUSIC_EVENT(${1:const char* eventName})"],
      "description": "CANCEL_MUSIC_EVENT()"
    },
    "TRIGGER_MUSIC_EVENT": {
      "prefix": "TRIGGER_MUSIC_EVENT()",
      "body": ["TRIGGER_MUSIC_EVENT(${1:const char* eventName})"],
      "description": "TRIGGER_MUSIC_EVENT()"
    },
    "IS_MUSIC_ONESHOT_PLAYING": {
      "prefix": "IS_MUSIC_ONESHOT_PLAYING()",
      "body": ["IS_MUSIC_ONESHOT_PLAYING()"],
      "description": "IS_MUSIC_ONESHOT_PLAYING()"
    },
    "GET_MUSIC_PLAYTIME": {
      "prefix": "GET_MUSIC_PLAYTIME()",
      "body": ["GET_MUSIC_PLAYTIME()"],
      "description": "GET_MUSIC_PLAYTIME()"
    },
    "SET_GLOBAL_RADIO_SIGNAL_LEVEL": {
      "prefix": "SET_GLOBAL_RADIO_SIGNAL_LEVEL()",
      "body": ["SET_GLOBAL_RADIO_SIGNAL_LEVEL(${1:Any p0})"],
      "description": "SET_GLOBAL_RADIO_SIGNAL_LEVEL()"
    },
    "RECORD_BROKEN_GLASS": {
      "prefix": "RECORD_BROKEN_GLASS()",
      "body": [
        "RECORD_BROKEN_GLASS(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius})"
      ],
      "description": "RECORD_BROKEN_GLASS()"
    },
    "CLEAR_ALL_BROKEN_GLASS": {
      "prefix": "CLEAR_ALL_BROKEN_GLASS()",
      "body": ["CLEAR_ALL_BROKEN_GLASS()"],
      "description": "CLEAR_ALL_BROKEN_GLASS()"
    },
    "SCRIPT_OVERRIDES_WIND_ELEVATION": {
      "prefix": "SCRIPT_OVERRIDES_WIND_ELEVATION()",
      "body": ["SCRIPT_OVERRIDES_WIND_ELEVATION(${1:BOOL p0}, ${2:Any p1})"],
      "description": "SCRIPT_OVERRIDES_WIND_ELEVATION()"
    },
    "SET_PED_WALLA_DENSITY": {
      "prefix": "SET_PED_WALLA_DENSITY()",
      "body": ["SET_PED_WALLA_DENSITY(${1:float p0}, ${2:float p1})"],
      "description": "SET_PED_WALLA_DENSITY()"
    },
    "SET_PED_INTERIOR_WALLA_DENSITY": {
      "prefix": "SET_PED_INTERIOR_WALLA_DENSITY()",
      "body": ["SET_PED_INTERIOR_WALLA_DENSITY(${1:float p0}, ${2:float p1})"],
      "description": "SET_PED_INTERIOR_WALLA_DENSITY()"
    },
    "FORCE_PED_PANIC_WALLA": {
      "prefix": "FORCE_PED_PANIC_WALLA()",
      "body": ["FORCE_PED_PANIC_WALLA()"],
      "description": "FORCE_PED_PANIC_WALLA()"
    },
    "PREPARE_ALARM": {
      "prefix": "PREPARE_ALARM()",
      "body": ["PREPARE_ALARM(${1:const char* alarmName})"],
      "description": "PREPARE_ALARM()"
    },
    "START_ALARM": {
      "prefix": "START_ALARM()",
      "body": ["START_ALARM(${1:const char* alarmName}, ${2:BOOL p2})"],
      "description": "START_ALARM()"
    },
    "STOP_ALARM": {
      "prefix": "STOP_ALARM()",
      "body": ["STOP_ALARM(${1:const char* alarmName}, ${2:BOOL toggle})"],
      "description": "STOP_ALARM()"
    },
    "STOP_ALL_ALARMS": {
      "prefix": "STOP_ALL_ALARMS()",
      "body": ["STOP_ALL_ALARMS(${1:BOOL stop})"],
      "description": "STOP_ALL_ALARMS()"
    },
    "IS_ALARM_PLAYING": {
      "prefix": "IS_ALARM_PLAYING()",
      "body": ["IS_ALARM_PLAYING(${1:const char* alarmName})"],
      "description": "IS_ALARM_PLAYING()"
    },
    "GET_VEHICLE_DEFAULT_HORN": {
      "prefix": "GET_VEHICLE_DEFAULT_HORN()",
      "body": ["GET_VEHICLE_DEFAULT_HORN(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_DEFAULT_HORN()"
    },
    "GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS": {
      "prefix": "GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS()",
      "body": ["GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS()"
    },
    "RESET_PED_AUDIO_FLAGS": {
      "prefix": "RESET_PED_AUDIO_FLAGS()",
      "body": ["RESET_PED_AUDIO_FLAGS(${1:Ped ped})"],
      "description": "RESET_PED_AUDIO_FLAGS()"
    },
    "SET_PED_FOOTSTEPS_EVENTS_ENABLED": {
      "prefix": "SET_PED_FOOTSTEPS_EVENTS_ENABLED()",
      "body": [
        "SET_PED_FOOTSTEPS_EVENTS_ENABLED(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "SET_PED_FOOTSTEPS_EVENTS_ENABLED()"
    },
    "SET_PED_CLOTH_EVENTS_ENABLED": {
      "prefix": "SET_PED_CLOTH_EVENTS_ENABLED()",
      "body": ["SET_PED_CLOTH_EVENTS_ENABLED(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_CLOTH_EVENTS_ENABLED()"
    },
    "OVERRIDE_PLAYER_GROUND_MATERIAL": {
      "prefix": "OVERRIDE_PLAYER_GROUND_MATERIAL()",
      "body": [
        "OVERRIDE_PLAYER_GROUND_MATERIAL(${1:Hash hash}, ${2:BOOL toggle})"
      ],
      "description": "OVERRIDE_PLAYER_GROUND_MATERIAL()"
    },
    "USE_FOOTSTEP_SCRIPT_SWEETENERS": {
      "prefix": "USE_FOOTSTEP_SCRIPT_SWEETENERS()",
      "body": [
        "USE_FOOTSTEP_SCRIPT_SWEETENERS(${1:Ped ped}, ${2:BOOL p1}, ${3:Hash hash})"
      ],
      "description": "USE_FOOTSTEP_SCRIPT_SWEETENERS()"
    },
    "OVERRIDE_MICROPHONE_SETTINGS": {
      "prefix": "OVERRIDE_MICROPHONE_SETTINGS()",
      "body": ["OVERRIDE_MICROPHONE_SETTINGS(${1:Hash hash}, ${2:BOOL toggle})"],
      "description": "OVERRIDE_MICROPHONE_SETTINGS()"
    },
    "FREEZE_MICROPHONE": {
      "prefix": "FREEZE_MICROPHONE()",
      "body": ["FREEZE_MICROPHONE()"],
      "description": "FREEZE_MICROPHONE()"
    },
    "DISTANT_COP_CAR_SIRENS": {
      "prefix": "DISTANT_COP_CAR_SIRENS()",
      "body": ["DISTANT_COP_CAR_SIRENS(${1:BOOL value})"],
      "description": "DISTANT_COP_CAR_SIRENS()"
    },
    "SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO": {
      "prefix": "SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO()",
      "body": [
        "SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO()"
    },
    "ENABLE_STUNT_JUMP_AUDIO": {
      "prefix": "ENABLE_STUNT_JUMP_AUDIO()",
      "body": ["ENABLE_STUNT_JUMP_AUDIO()"],
      "description": "ENABLE_STUNT_JUMP_AUDIO()"
    },
    "SET_AUDIO_FLAG": {
      "prefix": "SET_AUDIO_FLAG()",
      "body": ["SET_AUDIO_FLAG(${1:const char* flagName}, ${2:BOOL toggle})"],
      "description": "SET_AUDIO_FLAG()"
    },
    "PREPARE_SYNCHRONIZED_AUDIO_EVENT": {
      "prefix": "PREPARE_SYNCHRONIZED_AUDIO_EVENT()",
      "body": [
        "PREPARE_SYNCHRONIZED_AUDIO_EVENT(${1:const char* audioEvent}, ${2:Any p1})"
      ],
      "description": "PREPARE_SYNCHRONIZED_AUDIO_EVENT()"
    },
    "PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE": {
      "prefix": "PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE()",
      "body": [
        "PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE(${1:int sceneID}, ${2:const char* audioEvent})"
      ],
      "description": "PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE()"
    },
    "PLAY_SYNCHRONIZED_AUDIO_EVENT": {
      "prefix": "PLAY_SYNCHRONIZED_AUDIO_EVENT()",
      "body": ["PLAY_SYNCHRONIZED_AUDIO_EVENT(${1:int sceneID})"],
      "description": "PLAY_SYNCHRONIZED_AUDIO_EVENT()"
    },
    "STOP_SYNCHRONIZED_AUDIO_EVENT": {
      "prefix": "STOP_SYNCHRONIZED_AUDIO_EVENT()",
      "body": ["STOP_SYNCHRONIZED_AUDIO_EVENT(${1:int sceneID})"],
      "description": "STOP_SYNCHRONIZED_AUDIO_EVENT()"
    },
    "INIT_SYNCH_SCENE_AUDIO_WITH_POSITION": {
      "prefix": "INIT_SYNCH_SCENE_AUDIO_WITH_POSITION()",
      "body": [
        "INIT_SYNCH_SCENE_AUDIO_WITH_POSITION(${1:const char* audioEvent}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "INIT_SYNCH_SCENE_AUDIO_WITH_POSITION()"
    },
    "INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY": {
      "prefix": "INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY()",
      "body": [
        "INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY(${1:const char* audioEvent}, ${2:Entity entity})"
      ],
      "description": "INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY()"
    },
    "SET_AUDIO_SPECIAL_EFFECT_MODE": {
      "prefix": "SET_AUDIO_SPECIAL_EFFECT_MODE()",
      "body": ["SET_AUDIO_SPECIAL_EFFECT_MODE(${1:int mode})"],
      "description": "SET_AUDIO_SPECIAL_EFFECT_MODE()"
    },
    "SET_PORTAL_SETTINGS_OVERRIDE": {
      "prefix": "SET_PORTAL_SETTINGS_OVERRIDE()",
      "body": [
        "SET_PORTAL_SETTINGS_OVERRIDE(${1:const char* p0}, ${2:const char* p1})"
      ],
      "description": "SET_PORTAL_SETTINGS_OVERRIDE()"
    },
    "REMOVE_PORTAL_SETTINGS_OVERRIDE": {
      "prefix": "REMOVE_PORTAL_SETTINGS_OVERRIDE()",
      "body": ["REMOVE_PORTAL_SETTINGS_OVERRIDE(${1:const char* p0})"],
      "description": "REMOVE_PORTAL_SETTINGS_OVERRIDE()"
    },
    "STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS": {
      "prefix": "STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS()",
      "body": ["STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS()"],
      "description": "STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS()"
    },
    "GET_MUSIC_VOL_SLIDER": {
      "prefix": "GET_MUSIC_VOL_SLIDER()",
      "body": ["GET_MUSIC_VOL_SLIDER()"],
      "description": "GET_MUSIC_VOL_SLIDER()"
    },
    "REQUEST_TENNIS_BANKS": {
      "prefix": "REQUEST_TENNIS_BANKS()",
      "body": ["REQUEST_TENNIS_BANKS(${1:Ped ped})"],
      "description": "REQUEST_TENNIS_BANKS()"
    },
    "UNREQUEST_TENNIS_BANKS": {
      "prefix": "UNREQUEST_TENNIS_BANKS()",
      "body": ["UNREQUEST_TENNIS_BANKS()"],
      "description": "UNREQUEST_TENNIS_BANKS()"
    },
    "SET_SKIP_MINIGUN_SPIN_UP_AUDIO": {
      "prefix": "SET_SKIP_MINIGUN_SPIN_UP_AUDIO()",
      "body": ["SET_SKIP_MINIGUN_SPIN_UP_AUDIO(${1:BOOL p0})"],
      "description": "SET_SKIP_MINIGUN_SPIN_UP_AUDIO()"
    },
    "STOP_CUTSCENE_AUDIO": {
      "prefix": "STOP_CUTSCENE_AUDIO()",
      "body": ["STOP_CUTSCENE_AUDIO()"],
      "description": "STOP_CUTSCENE_AUDIO()"
    },
    "HAS_LOADED_MP_DATA_SET": {
      "prefix": "HAS_LOADED_MP_DATA_SET()",
      "body": ["HAS_LOADED_MP_DATA_SET()"],
      "description": "HAS_LOADED_MP_DATA_SET()"
    },
    "HAS_LOADED_SP_DATA_SET": {
      "prefix": "HAS_LOADED_SP_DATA_SET()",
      "body": ["HAS_LOADED_SP_DATA_SET()"],
      "description": "HAS_LOADED_SP_DATA_SET()"
    },
    "GET_VEHICLE_HORN_SOUND_INDEX": {
      "prefix": "GET_VEHICLE_HORN_SOUND_INDEX()",
      "body": ["GET_VEHICLE_HORN_SOUND_INDEX(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_HORN_SOUND_INDEX()"
    },
    "SET_VEHICLE_HORN_SOUND_INDEX": {
      "prefix": "SET_VEHICLE_HORN_SOUND_INDEX()",
      "body": [
        "SET_VEHICLE_HORN_SOUND_INDEX(${1:Vehicle vehicle}, ${2:int value})"
      ],
      "description": "SET_VEHICLE_HORN_SOUND_INDEX()"
    },
    "ADD_SCRIPT_TO_RANDOM_PED": {
      "prefix": "ADD_SCRIPT_TO_RANDOM_PED()",
      "body": [
        "ADD_SCRIPT_TO_RANDOM_PED(${1:const char* name}, ${2:Hash model}, ${3:float p2}, ${4:float p3})"
      ],
      "description": "ADD_SCRIPT_TO_RANDOM_PED()"
    },
    "REGISTER_OBJECT_SCRIPT_BRAIN": {
      "prefix": "REGISTER_OBJECT_SCRIPT_BRAIN()",
      "body": [
        "REGISTER_OBJECT_SCRIPT_BRAIN(${1:const char* scriptName}, ${2:Hash modelHash}, ${3:int p2}, ${4:float activationRange}, ${5:int p4}, ${6:int p5})"
      ],
      "description": "REGISTER_OBJECT_SCRIPT_BRAIN()"
    },
    "IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE": {
      "prefix": "IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE()",
      "body": ["IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE(${1:Object object})"],
      "description": "IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE()"
    },
    "REGISTER_WORLD_POINT_SCRIPT_BRAIN": {
      "prefix": "REGISTER_WORLD_POINT_SCRIPT_BRAIN()",
      "body": [
        "REGISTER_WORLD_POINT_SCRIPT_BRAIN(${1:const char* scriptName}, ${2:float activationRange}, ${3:int p2})"
      ],
      "description": "REGISTER_WORLD_POINT_SCRIPT_BRAIN()"
    },
    "IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE": {
      "prefix": "IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE()",
      "body": ["IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE()"],
      "description": "IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE()"
    },
    "ENABLE_SCRIPT_BRAIN_SET": {
      "prefix": "ENABLE_SCRIPT_BRAIN_SET()",
      "body": ["ENABLE_SCRIPT_BRAIN_SET(${1:int brainSet})"],
      "description": "ENABLE_SCRIPT_BRAIN_SET()"
    },
    "DISABLE_SCRIPT_BRAIN_SET": {
      "prefix": "DISABLE_SCRIPT_BRAIN_SET()",
      "body": ["DISABLE_SCRIPT_BRAIN_SET(${1:int brainSet})"],
      "description": "DISABLE_SCRIPT_BRAIN_SET()"
    },
    "REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE": {
      "prefix": "REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE()",
      "body": [
        "REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE()"
      ],
      "description": "REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE()"
    },
    "REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE": {
      "prefix": "REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE()",
      "body": [
        "REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE()"
      ],
      "description": "REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE()"
    },
    "REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE": {
      "prefix": "REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE()",
      "body": [
        "REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE(${1:const char* scriptName})"
      ],
      "description": "REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE()"
    },
    "REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE": {
      "prefix": "REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE()",
      "body": [
        "REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE(${1:const char* scriptName})"
      ],
      "description": "REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE()"
    },
    "RENDER_SCRIPT_CAMS": {
      "prefix": "RENDER_SCRIPT_CAMS()",
      "body": [
        "RENDER_SCRIPT_CAMS(${1:BOOL render}, ${2:BOOL ease}, ${3:int easeTime}, ${4:BOOL p3}, ${5:BOOL p4}, ${6:Any p5})"
      ],
      "description": "RENDER_SCRIPT_CAMS()"
    },
    "STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP": {
      "prefix": "STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP()",
      "body": [
        "STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP(${1:BOOL render}, ${2:float p1}, ${3:int p2}, ${4:Any p3})"
      ],
      "description": "STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP()"
    },
    "CREATE_CAM": {
      "prefix": "CREATE_CAM()",
      "body": ["CREATE_CAM(${1:const char* camName}, ${2:BOOL p1})"],
      "description": "CREATE_CAM()"
    },
    "CREATE_CAM_WITH_PARAMS": {
      "prefix": "CREATE_CAM_WITH_PARAMS()",
      "body": [
        "CREATE_CAM_WITH_PARAMS(${1:const char* camName}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float rotX}, ${6:float rotY}, ${7:float rotZ}, ${8:float fov}, ${9:BOOL p8}, ${10:int p9})"
      ],
      "description": "CREATE_CAM_WITH_PARAMS()"
    },
    "CREATE_CAMERA": {
      "prefix": "CREATE_CAMERA()",
      "body": ["CREATE_CAMERA(${1:Hash camHash}, ${2:BOOL p1})"],
      "description": "CREATE_CAMERA()"
    },
    "CREATE_CAMERA_WITH_PARAMS": {
      "prefix": "CREATE_CAMERA_WITH_PARAMS()",
      "body": [
        "CREATE_CAMERA_WITH_PARAMS(${1:Hash camHash}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float rotX}, ${6:float rotY}, ${7:float rotZ}, ${8:float fov}, ${9:BOOL p8}, ${10:Any p9})"
      ],
      "description": "CREATE_CAMERA_WITH_PARAMS()"
    },
    "DESTROY_CAM": {
      "prefix": "DESTROY_CAM()",
      "body": ["DESTROY_CAM(${1:Cam cam}, ${2:BOOL bScriptHostCam})"],
      "description": "DESTROY_CAM()"
    },
    "DESTROY_ALL_CAMS": {
      "prefix": "DESTROY_ALL_CAMS()",
      "body": ["DESTROY_ALL_CAMS(${1:BOOL bScriptHostCam})"],
      "description": "DESTROY_ALL_CAMS()"
    },
    "DOES_CAM_EXIST": {
      "prefix": "DOES_CAM_EXIST()",
      "body": ["DOES_CAM_EXIST(${1:Cam cam})"],
      "description": "DOES_CAM_EXIST()"
    },
    "SET_CAM_ACTIVE": {
      "prefix": "SET_CAM_ACTIVE()",
      "body": ["SET_CAM_ACTIVE(${1:Cam cam}, ${2:BOOL active})"],
      "description": "SET_CAM_ACTIVE()"
    },
    "IS_CAM_ACTIVE": {
      "prefix": "IS_CAM_ACTIVE()",
      "body": ["IS_CAM_ACTIVE(${1:Cam cam})"],
      "description": "IS_CAM_ACTIVE()"
    },
    "IS_CAM_RENDERING": {
      "prefix": "IS_CAM_RENDERING()",
      "body": ["IS_CAM_RENDERING(${1:Cam cam})"],
      "description": "IS_CAM_RENDERING()"
    },
    "GET_RENDERING_CAM": {
      "prefix": "GET_RENDERING_CAM()",
      "body": ["GET_RENDERING_CAM()"],
      "description": "GET_RENDERING_CAM()"
    },
    "GET_CAM_COORD": {
      "prefix": "GET_CAM_COORD()",
      "body": ["GET_CAM_COORD(${1:Cam cam})"],
      "description": "GET_CAM_COORD()"
    },
    "GET_CAM_ROT": {
      "prefix": "GET_CAM_ROT()",
      "body": ["GET_CAM_ROT(${1:Cam cam}, ${2:int rotationOrder})"],
      "description": "GET_CAM_ROT()"
    },
    "GET_CAM_FOV": {
      "prefix": "GET_CAM_FOV()",
      "body": ["GET_CAM_FOV(${1:Cam cam})"],
      "description": "GET_CAM_FOV()"
    },
    "GET_CAM_NEAR_CLIP": {
      "prefix": "GET_CAM_NEAR_CLIP()",
      "body": ["GET_CAM_NEAR_CLIP(${1:Cam cam})"],
      "description": "GET_CAM_NEAR_CLIP()"
    },
    "GET_CAM_FAR_CLIP": {
      "prefix": "GET_CAM_FAR_CLIP()",
      "body": ["GET_CAM_FAR_CLIP(${1:Cam cam})"],
      "description": "GET_CAM_FAR_CLIP()"
    },
    "GET_CAM_NEAR_DOF": {
      "prefix": "GET_CAM_NEAR_DOF()",
      "body": ["GET_CAM_NEAR_DOF(${1:Cam cam})"],
      "description": "GET_CAM_NEAR_DOF()"
    },
    "GET_CAM_FAR_DOF": {
      "prefix": "GET_CAM_FAR_DOF()",
      "body": ["GET_CAM_FAR_DOF(${1:Cam cam})"],
      "description": "GET_CAM_FAR_DOF()"
    },
    "GET_CAM_DOF_STRENGTH": {
      "prefix": "GET_CAM_DOF_STRENGTH()",
      "body": ["GET_CAM_DOF_STRENGTH(${1:Cam cam})"],
      "description": "GET_CAM_DOF_STRENGTH()"
    },
    "SET_CAM_PARAMS": {
      "prefix": "SET_CAM_PARAMS()",
      "body": [
        "SET_CAM_PARAMS(${1:Cam cam}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float rotX}, ${6:float rotY}, ${7:float rotZ}, ${8:float fieldOfView}, ${9:Any p8}, ${10:int p9}, ${11:int p10}, ${12:int p11})"
      ],
      "description": "SET_CAM_PARAMS()"
    },
    "SET_CAM_COORD": {
      "prefix": "SET_CAM_COORD()",
      "body": [
        "SET_CAM_COORD(${1:Cam cam}, ${2:float posX}, ${3:float posY}, ${4:float posZ})"
      ],
      "description": "SET_CAM_COORD()"
    },
    "SET_CAM_ROT": {
      "prefix": "SET_CAM_ROT()",
      "body": [
        "SET_CAM_ROT(${1:Cam cam}, ${2:float rotX}, ${3:float rotY}, ${4:float rotZ}, ${5:int rotationOrder})"
      ],
      "description": "SET_CAM_ROT()"
    },
    "SET_CAM_FOV": {
      "prefix": "SET_CAM_FOV()",
      "body": ["SET_CAM_FOV(${1:Cam cam}, ${2:float fieldOfView})"],
      "description": "SET_CAM_FOV()"
    },
    "SET_CAM_NEAR_CLIP": {
      "prefix": "SET_CAM_NEAR_CLIP()",
      "body": ["SET_CAM_NEAR_CLIP(${1:Cam cam}, ${2:float nearClip})"],
      "description": "SET_CAM_NEAR_CLIP()"
    },
    "SET_CAM_FAR_CLIP": {
      "prefix": "SET_CAM_FAR_CLIP()",
      "body": ["SET_CAM_FAR_CLIP(${1:Cam cam}, ${2:float farClip})"],
      "description": "SET_CAM_FAR_CLIP()"
    },
    "FORCE_CAM_FAR_CLIP": {
      "prefix": "FORCE_CAM_FAR_CLIP()",
      "body": ["FORCE_CAM_FAR_CLIP(${1:Cam cam}, ${2:float p1})"],
      "description": "FORCE_CAM_FAR_CLIP()"
    },
    "SET_CAM_MOTION_BLUR_STRENGTH": {
      "prefix": "SET_CAM_MOTION_BLUR_STRENGTH()",
      "body": ["SET_CAM_MOTION_BLUR_STRENGTH(${1:Cam cam}, ${2:float strength})"],
      "description": "SET_CAM_MOTION_BLUR_STRENGTH()"
    },
    "SET_CAM_NEAR_DOF": {
      "prefix": "SET_CAM_NEAR_DOF()",
      "body": ["SET_CAM_NEAR_DOF(${1:Cam cam}, ${2:float nearDOF})"],
      "description": "SET_CAM_NEAR_DOF()"
    },
    "SET_CAM_FAR_DOF": {
      "prefix": "SET_CAM_FAR_DOF()",
      "body": ["SET_CAM_FAR_DOF(${1:Cam cam}, ${2:float farDOF})"],
      "description": "SET_CAM_FAR_DOF()"
    },
    "SET_CAM_DOF_STRENGTH": {
      "prefix": "SET_CAM_DOF_STRENGTH()",
      "body": ["SET_CAM_DOF_STRENGTH(${1:Cam cam}, ${2:float dofStrength})"],
      "description": "SET_CAM_DOF_STRENGTH()"
    },
    "SET_CAM_DOF_PLANES": {
      "prefix": "SET_CAM_DOF_PLANES()",
      "body": [
        "SET_CAM_DOF_PLANES(${1:Cam cam}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4})"
      ],
      "description": "SET_CAM_DOF_PLANES()"
    },
    "SET_CAM_USE_SHALLOW_DOF_MODE": {
      "prefix": "SET_CAM_USE_SHALLOW_DOF_MODE()",
      "body": ["SET_CAM_USE_SHALLOW_DOF_MODE(${1:Cam cam}, ${2:BOOL toggle})"],
      "description": "SET_CAM_USE_SHALLOW_DOF_MODE()"
    },
    "SET_USE_HI_DOF": {
      "prefix": "SET_USE_HI_DOF()",
      "body": ["SET_USE_HI_DOF()"],
      "description": "SET_USE_HI_DOF()"
    },
    "SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE": {
      "prefix": "SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE()",
      "body": ["SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE()"],
      "description": "SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE()"
    },
    "SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE": {
      "prefix": "SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE()",
      "body": [
        "SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE(${1:Cam camera}, ${2:float p1})"
      ],
      "description": "SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE()"
    },
    "SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL": {
      "prefix": "SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL()",
      "body": [
        "SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL(${1:Any p0}, ${2:float p1})"
      ],
      "description": "SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL()"
    },
    "SET_CAM_DOF_FNUMBER_OF_LENS": {
      "prefix": "SET_CAM_DOF_FNUMBER_OF_LENS()",
      "body": ["SET_CAM_DOF_FNUMBER_OF_LENS(${1:Cam camera}, ${2:float p1})"],
      "description": "SET_CAM_DOF_FNUMBER_OF_LENS()"
    },
    "SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER": {
      "prefix": "SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER()",
      "body": [
        "SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER(${1:Cam camera}, ${2:float multiplier})"
      ],
      "description": "SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER()"
    },
    "SET_CAM_DOF_FOCUS_DISTANCE_BIAS": {
      "prefix": "SET_CAM_DOF_FOCUS_DISTANCE_BIAS()",
      "body": ["SET_CAM_DOF_FOCUS_DISTANCE_BIAS(${1:Cam camera}, ${2:float p1})"],
      "description": "SET_CAM_DOF_FOCUS_DISTANCE_BIAS()"
    },
    "SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE": {
      "prefix": "SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE()",
      "body": [
        "SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE(${1:Cam camera}, ${2:float p1})"
      ],
      "description": "SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE()"
    },
    "SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL": {
      "prefix": "SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL()",
      "body": [
        "SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL(${1:Cam camera}, ${2:float p1})"
      ],
      "description": "SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL()"
    },
    "SET_CAM_DOF_SHOULD_KEEP_LOOK_AT_TARGET_IN_FOCUS": {
      "prefix": "SET_CAM_DOF_SHOULD_KEEP_LOOK_AT_TARGET_IN_FOCUS()",
      "body": [
        "SET_CAM_DOF_SHOULD_KEEP_LOOK_AT_TARGET_IN_FOCUS(${1:Cam camera}, ${2:BOOL state})"
      ],
      "description": "SET_CAM_DOF_SHOULD_KEEP_LOOK_AT_TARGET_IN_FOCUS()"
    },
    "ATTACH_CAM_TO_ENTITY": {
      "prefix": "ATTACH_CAM_TO_ENTITY()",
      "body": [
        "ATTACH_CAM_TO_ENTITY(${1:Cam cam}, ${2:Entity entity}, ${3:float xOffset}, ${4:float yOffset}, ${5:float zOffset}, ${6:BOOL isRelative})"
      ],
      "description": "ATTACH_CAM_TO_ENTITY()"
    },
    "ATTACH_CAM_TO_PED_BONE": {
      "prefix": "ATTACH_CAM_TO_PED_BONE()",
      "body": [
        "ATTACH_CAM_TO_PED_BONE(${1:Cam cam}, ${2:Ped ped}, ${3:int boneIndex}, ${4:float x}, ${5:float y}, ${6:float z}, ${7:BOOL heading})"
      ],
      "description": "ATTACH_CAM_TO_PED_BONE()"
    },
    "HARD_ATTACH_CAM_TO_PED_BONE": {
      "prefix": "HARD_ATTACH_CAM_TO_PED_BONE()",
      "body": [
        "HARD_ATTACH_CAM_TO_PED_BONE(${1:Cam cam}, ${2:Ped ped}, ${3:int boneIndex}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:BOOL p9})"
      ],
      "description": "HARD_ATTACH_CAM_TO_PED_BONE()"
    },
    "HARD_ATTACH_CAM_TO_ENTITY": {
      "prefix": "HARD_ATTACH_CAM_TO_ENTITY()",
      "body": [
        "HARD_ATTACH_CAM_TO_ENTITY(${1:Cam cam}, ${2:Entity entity}, ${3:float xRot}, ${4:float yRot}, ${5:float zRot}, ${6:float xOffset}, ${7:float yOffset}, ${8:float zOffset}, ${9:BOOL isRelative})"
      ],
      "description": "HARD_ATTACH_CAM_TO_ENTITY()"
    },
    "ATTACH_CAM_TO_VEHICLE_BONE": {
      "prefix": "ATTACH_CAM_TO_VEHICLE_BONE()",
      "body": [
        "ATTACH_CAM_TO_VEHICLE_BONE(${1:Cam cam}, ${2:Vehicle vehicle}, ${3:int boneIndex}, ${4:BOOL relativeRotation}, ${5:float rotX}, ${6:float rotY}, ${7:float rotZ}, ${8:float offsetX}, ${9:float offsetY}, ${10:float offsetZ}, ${11:BOOL fixedDirection})"
      ],
      "description": "ATTACH_CAM_TO_VEHICLE_BONE()"
    },
    "DETACH_CAM": {
      "prefix": "DETACH_CAM()",
      "body": ["DETACH_CAM(${1:Cam cam})"],
      "description": "DETACH_CAM()"
    },
    "SET_CAM_INHERIT_ROLL_VEHICLE": {
      "prefix": "SET_CAM_INHERIT_ROLL_VEHICLE()",
      "body": ["SET_CAM_INHERIT_ROLL_VEHICLE(${1:Cam cam}, ${2:BOOL p1})"],
      "description": "SET_CAM_INHERIT_ROLL_VEHICLE()"
    },
    "POINT_CAM_AT_COORD": {
      "prefix": "POINT_CAM_AT_COORD()",
      "body": [
        "POINT_CAM_AT_COORD(${1:Cam cam}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "POINT_CAM_AT_COORD()"
    },
    "POINT_CAM_AT_ENTITY": {
      "prefix": "POINT_CAM_AT_ENTITY()",
      "body": [
        "POINT_CAM_AT_ENTITY(${1:Cam cam}, ${2:Entity entity}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:BOOL p5})"
      ],
      "description": "POINT_CAM_AT_ENTITY()"
    },
    "POINT_CAM_AT_PED_BONE": {
      "prefix": "POINT_CAM_AT_PED_BONE()",
      "body": [
        "POINT_CAM_AT_PED_BONE(${1:Cam cam}, ${2:Ped ped}, ${3:int boneIndex}, ${4:float x}, ${5:float y}, ${6:float z}, ${7:BOOL p6})"
      ],
      "description": "POINT_CAM_AT_PED_BONE()"
    },
    "STOP_CAM_POINTING": {
      "prefix": "STOP_CAM_POINTING()",
      "body": ["STOP_CAM_POINTING(${1:Cam cam})"],
      "description": "STOP_CAM_POINTING()"
    },
    "SET_CAM_AFFECTS_AIMING": {
      "prefix": "SET_CAM_AFFECTS_AIMING()",
      "body": ["SET_CAM_AFFECTS_AIMING(${1:Cam cam}, ${2:BOOL toggle})"],
      "description": "SET_CAM_AFFECTS_AIMING()"
    },
    "SET_CAM_CONTROLS_MINI_MAP_HEADING": {
      "prefix": "SET_CAM_CONTROLS_MINI_MAP_HEADING()",
      "body": [
        "SET_CAM_CONTROLS_MINI_MAP_HEADING(${1:Cam cam}, ${2:BOOL toggle})"
      ],
      "description": "SET_CAM_CONTROLS_MINI_MAP_HEADING()"
    },
    "SET_CAM_IS_INSIDE_VEHICLE": {
      "prefix": "SET_CAM_IS_INSIDE_VEHICLE()",
      "body": ["SET_CAM_IS_INSIDE_VEHICLE(${1:Cam cam}, ${2:BOOL toggle})"],
      "description": "SET_CAM_IS_INSIDE_VEHICLE()"
    },
    "ALLOW_MOTION_BLUR_DECAY": {
      "prefix": "ALLOW_MOTION_BLUR_DECAY()",
      "body": ["ALLOW_MOTION_BLUR_DECAY(${1:Any p0}, ${2:BOOL p1})"],
      "description": "ALLOW_MOTION_BLUR_DECAY()"
    },
    "SET_CAM_DEBUG_NAME": {
      "prefix": "SET_CAM_DEBUG_NAME()",
      "body": ["SET_CAM_DEBUG_NAME(${1:Cam camera}, ${2:const char* name})"],
      "description": "SET_CAM_DEBUG_NAME()"
    },
    "GET_DEBUG_CAM": {
      "prefix": "GET_DEBUG_CAM()",
      "body": ["GET_DEBUG_CAM()"],
      "description": "GET_DEBUG_CAM()"
    },
    "ADD_CAM_SPLINE_NODE": {
      "prefix": "ADD_CAM_SPLINE_NODE()",
      "body": [
        "ADD_CAM_SPLINE_NODE(${1:Cam camera}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float xRot}, ${6:float yRot}, ${7:float zRot}, ${8:int length}, ${9:int smoothingStyle}, ${10:int rotationOrder})"
      ],
      "description": "ADD_CAM_SPLINE_NODE()"
    },
    "ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME": {
      "prefix": "ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME()",
      "body": [
        "ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME(${1:Cam cam}, ${2:Cam cam2}, ${3:int length}, ${4:int p3})"
      ],
      "description": "ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME()"
    },
    "ADD_CAM_SPLINE_NODE_USING_CAMERA": {
      "prefix": "ADD_CAM_SPLINE_NODE_USING_CAMERA()",
      "body": [
        "ADD_CAM_SPLINE_NODE_USING_CAMERA(${1:Cam cam}, ${2:Cam cam2}, ${3:int length}, ${4:int p3})"
      ],
      "description": "ADD_CAM_SPLINE_NODE_USING_CAMERA()"
    },
    "ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME": {
      "prefix": "ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME()",
      "body": [
        "ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME(${1:Cam cam}, ${2:int length}, ${3:int p2})"
      ],
      "description": "ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME()"
    },
    "SET_CAM_SPLINE_PHASE": {
      "prefix": "SET_CAM_SPLINE_PHASE()",
      "body": ["SET_CAM_SPLINE_PHASE(${1:Cam cam}, ${2:float p1})"],
      "description": "SET_CAM_SPLINE_PHASE()"
    },
    "GET_CAM_SPLINE_PHASE": {
      "prefix": "GET_CAM_SPLINE_PHASE()",
      "body": ["GET_CAM_SPLINE_PHASE(${1:Cam cam})"],
      "description": "GET_CAM_SPLINE_PHASE()"
    },
    "GET_CAM_SPLINE_NODE_PHASE": {
      "prefix": "GET_CAM_SPLINE_NODE_PHASE()",
      "body": ["GET_CAM_SPLINE_NODE_PHASE(${1:Cam cam})"],
      "description": "GET_CAM_SPLINE_NODE_PHASE()"
    },
    "SET_CAM_SPLINE_DURATION": {
      "prefix": "SET_CAM_SPLINE_DURATION()",
      "body": ["SET_CAM_SPLINE_DURATION(${1:Cam cam}, ${2:int timeDuration})"],
      "description": "SET_CAM_SPLINE_DURATION()"
    },
    "SET_CAM_SPLINE_SMOOTHING_STYLE": {
      "prefix": "SET_CAM_SPLINE_SMOOTHING_STYLE()",
      "body": [
        "SET_CAM_SPLINE_SMOOTHING_STYLE(${1:Cam cam}, ${2:int smoothingStyle})"
      ],
      "description": "SET_CAM_SPLINE_SMOOTHING_STYLE()"
    },
    "GET_CAM_SPLINE_NODE_INDEX": {
      "prefix": "GET_CAM_SPLINE_NODE_INDEX()",
      "body": ["GET_CAM_SPLINE_NODE_INDEX(${1:Cam cam})"],
      "description": "GET_CAM_SPLINE_NODE_INDEX()"
    },
    "SET_CAM_SPLINE_NODE_EASE": {
      "prefix": "SET_CAM_SPLINE_NODE_EASE()",
      "body": [
        "SET_CAM_SPLINE_NODE_EASE(${1:Cam cam}, ${2:int easingFunction}, ${3:int p2}, ${4:float p3})"
      ],
      "description": "SET_CAM_SPLINE_NODE_EASE()"
    },
    "SET_CAM_SPLINE_NODE_VELOCITY_SCALE": {
      "prefix": "SET_CAM_SPLINE_NODE_VELOCITY_SCALE()",
      "body": [
        "SET_CAM_SPLINE_NODE_VELOCITY_SCALE(${1:Cam cam}, ${2:int p1}, ${3:float scale})"
      ],
      "description": "SET_CAM_SPLINE_NODE_VELOCITY_SCALE()"
    },
    "OVERRIDE_CAM_SPLINE_VELOCITY": {
      "prefix": "OVERRIDE_CAM_SPLINE_VELOCITY()",
      "body": [
        "OVERRIDE_CAM_SPLINE_VELOCITY(${1:Cam cam}, ${2:int p1}, ${3:float p2}, ${4:float p3})"
      ],
      "description": "OVERRIDE_CAM_SPLINE_VELOCITY()"
    },
    "OVERRIDE_CAM_SPLINE_MOTION_BLUR": {
      "prefix": "OVERRIDE_CAM_SPLINE_MOTION_BLUR()",
      "body": [
        "OVERRIDE_CAM_SPLINE_MOTION_BLUR(${1:Cam cam}, ${2:int p1}, ${3:float p2}, ${4:float p3})"
      ],
      "description": "OVERRIDE_CAM_SPLINE_MOTION_BLUR()"
    },
    "SET_CAM_SPLINE_NODE_EXTRA_FLAGS": {
      "prefix": "SET_CAM_SPLINE_NODE_EXTRA_FLAGS()",
      "body": [
        "SET_CAM_SPLINE_NODE_EXTRA_FLAGS(${1:Cam cam}, ${2:int p1}, ${3:int flags})"
      ],
      "description": "SET_CAM_SPLINE_NODE_EXTRA_FLAGS()"
    },
    "IS_CAM_SPLINE_PAUSED": {
      "prefix": "IS_CAM_SPLINE_PAUSED()",
      "body": ["IS_CAM_SPLINE_PAUSED(${1:Cam cam})"],
      "description": "IS_CAM_SPLINE_PAUSED()"
    },
    "SET_CAM_ACTIVE_WITH_INTERP": {
      "prefix": "SET_CAM_ACTIVE_WITH_INTERP()",
      "body": [
        "SET_CAM_ACTIVE_WITH_INTERP(${1:Cam camTo}, ${2:Cam camFrom}, ${3:int duration}, ${4:int easeLocation}, ${5:int easeRotation})"
      ],
      "description": "SET_CAM_ACTIVE_WITH_INTERP()"
    },
    "IS_CAM_INTERPOLATING": {
      "prefix": "IS_CAM_INTERPOLATING()",
      "body": ["IS_CAM_INTERPOLATING(${1:Cam cam})"],
      "description": "IS_CAM_INTERPOLATING()"
    },
    "SHAKE_CAM": {
      "prefix": "SHAKE_CAM()",
      "body": [
        "SHAKE_CAM(${1:Cam cam}, ${2:const char* type}, ${3:float amplitude})"
      ],
      "description": "SHAKE_CAM()"
    },
    "ANIMATED_SHAKE_CAM": {
      "prefix": "ANIMATED_SHAKE_CAM()",
      "body": [
        "ANIMATED_SHAKE_CAM(${1:Cam cam}, ${2:const char* p1}, ${3:const char* p2}, ${4:const char* p3}, ${5:float amplitude})"
      ],
      "description": "ANIMATED_SHAKE_CAM()"
    },
    "IS_CAM_SHAKING": {
      "prefix": "IS_CAM_SHAKING()",
      "body": ["IS_CAM_SHAKING(${1:Cam cam})"],
      "description": "IS_CAM_SHAKING()"
    },
    "SET_CAM_SHAKE_AMPLITUDE": {
      "prefix": "SET_CAM_SHAKE_AMPLITUDE()",
      "body": ["SET_CAM_SHAKE_AMPLITUDE(${1:Cam cam}, ${2:float amplitude})"],
      "description": "SET_CAM_SHAKE_AMPLITUDE()"
    },
    "STOP_CAM_SHAKING": {
      "prefix": "STOP_CAM_SHAKING()",
      "body": ["STOP_CAM_SHAKING(${1:Cam cam}, ${2:BOOL p1})"],
      "description": "STOP_CAM_SHAKING()"
    },
    "SHAKE_SCRIPT_GLOBAL": {
      "prefix": "SHAKE_SCRIPT_GLOBAL()",
      "body": ["SHAKE_SCRIPT_GLOBAL(${1:const char* p0}, ${2:float p1})"],
      "description": "SHAKE_SCRIPT_GLOBAL()"
    },
    "ANIMATED_SHAKE_SCRIPT_GLOBAL": {
      "prefix": "ANIMATED_SHAKE_SCRIPT_GLOBAL()",
      "body": [
        "ANIMATED_SHAKE_SCRIPT_GLOBAL(${1:const char* p0}, ${2:const char* p1}, ${3:const char* p2}, ${4:float p3})"
      ],
      "description": "ANIMATED_SHAKE_SCRIPT_GLOBAL()"
    },
    "IS_SCRIPT_GLOBAL_SHAKING": {
      "prefix": "IS_SCRIPT_GLOBAL_SHAKING()",
      "body": ["IS_SCRIPT_GLOBAL_SHAKING()"],
      "description": "IS_SCRIPT_GLOBAL_SHAKING()"
    },
    "STOP_SCRIPT_GLOBAL_SHAKING": {
      "prefix": "STOP_SCRIPT_GLOBAL_SHAKING()",
      "body": ["STOP_SCRIPT_GLOBAL_SHAKING(${1:BOOL p0})"],
      "description": "STOP_SCRIPT_GLOBAL_SHAKING()"
    },
    "TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE": {
      "prefix": "TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE()",
      "body": [
        "TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE(${1:Vehicle vehicle}, ${2:int p1}, ${3:float p2})"
      ],
      "description": "TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE()"
    },
    "PLAY_CAM_ANIM": {
      "prefix": "PLAY_CAM_ANIM()",
      "body": [
        "PLAY_CAM_ANIM(${1:Cam cam}, ${2:const char* animName}, ${3:const char* animDictionary}, ${4:float x}, ${5:float y}, ${6:float z}, ${7:float xRot}, ${8:float yRot}, ${9:float zRot}, ${10:BOOL p9}, ${11:int p10})"
      ],
      "description": "PLAY_CAM_ANIM()"
    },
    "IS_CAM_PLAYING_ANIM": {
      "prefix": "IS_CAM_PLAYING_ANIM()",
      "body": [
        "IS_CAM_PLAYING_ANIM(${1:Cam cam}, ${2:const char* animName}, ${3:const char* animDictionary})"
      ],
      "description": "IS_CAM_PLAYING_ANIM()"
    },
    "SET_CAM_ANIM_CURRENT_PHASE": {
      "prefix": "SET_CAM_ANIM_CURRENT_PHASE()",
      "body": ["SET_CAM_ANIM_CURRENT_PHASE(${1:Cam cam}, ${2:float phase})"],
      "description": "SET_CAM_ANIM_CURRENT_PHASE()"
    },
    "GET_CAM_ANIM_CURRENT_PHASE": {
      "prefix": "GET_CAM_ANIM_CURRENT_PHASE()",
      "body": ["GET_CAM_ANIM_CURRENT_PHASE(${1:Cam cam})"],
      "description": "GET_CAM_ANIM_CURRENT_PHASE()"
    },
    "PLAY_SYNCHRONIZED_CAM_ANIM": {
      "prefix": "PLAY_SYNCHRONIZED_CAM_ANIM()",
      "body": [
        "PLAY_SYNCHRONIZED_CAM_ANIM(${1:Any p0}, ${2:Any p1}, ${3:const char* animName}, ${4:const char* animDictionary})"
      ],
      "description": "PLAY_SYNCHRONIZED_CAM_ANIM()"
    },
    "SET_FLY_CAM_HORIZONTAL_RESPONSE": {
      "prefix": "SET_FLY_CAM_HORIZONTAL_RESPONSE()",
      "body": [
        "SET_FLY_CAM_HORIZONTAL_RESPONSE(${1:Cam cam}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
      ],
      "description": "SET_FLY_CAM_HORIZONTAL_RESPONSE()"
    },
    "SET_FLY_CAM_VERTICAL_RESPONSE": {
      "prefix": "SET_FLY_CAM_VERTICAL_RESPONSE()",
      "body": [
        "SET_FLY_CAM_VERTICAL_RESPONSE(${1:Cam cam}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
      ],
      "description": "SET_FLY_CAM_VERTICAL_RESPONSE()"
    },
    "SET_FLY_CAM_MAX_HEIGHT": {
      "prefix": "SET_FLY_CAM_MAX_HEIGHT()",
      "body": ["SET_FLY_CAM_MAX_HEIGHT(${1:Cam cam}, ${2:float height})"],
      "description": "SET_FLY_CAM_MAX_HEIGHT()"
    },
    "SET_FLY_CAM_COORD_AND_CONSTRAIN": {
      "prefix": "SET_FLY_CAM_COORD_AND_CONSTRAIN()",
      "body": [
        "SET_FLY_CAM_COORD_AND_CONSTRAIN(${1:Cam cam}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "SET_FLY_CAM_COORD_AND_CONSTRAIN()"
    },
    "SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE": {
      "prefix": "SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE()",
      "body": ["SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE(${1:Cam cam})"],
      "description": "SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE()"
    },
    "WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE": {
      "prefix": "WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE()",
      "body": ["WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE(${1:Cam cam})"],
      "description": "WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE()"
    },
    "IS_SCREEN_FADED_OUT": {
      "prefix": "IS_SCREEN_FADED_OUT()",
      "body": ["IS_SCREEN_FADED_OUT()"],
      "description": "IS_SCREEN_FADED_OUT()"
    },
    "IS_SCREEN_FADED_IN": {
      "prefix": "IS_SCREEN_FADED_IN()",
      "body": ["IS_SCREEN_FADED_IN()"],
      "description": "IS_SCREEN_FADED_IN()"
    },
    "IS_SCREEN_FADING_OUT": {
      "prefix": "IS_SCREEN_FADING_OUT()",
      "body": ["IS_SCREEN_FADING_OUT()"],
      "description": "IS_SCREEN_FADING_OUT()"
    },
    "IS_SCREEN_FADING_IN": {
      "prefix": "IS_SCREEN_FADING_IN()",
      "body": ["IS_SCREEN_FADING_IN()"],
      "description": "IS_SCREEN_FADING_IN()"
    },
    "DO_SCREEN_FADE_IN": {
      "prefix": "DO_SCREEN_FADE_IN()",
      "body": ["DO_SCREEN_FADE_IN(${1:int duration})"],
      "description": "DO_SCREEN_FADE_IN()"
    },
    "DO_SCREEN_FADE_OUT": {
      "prefix": "DO_SCREEN_FADE_OUT()",
      "body": ["DO_SCREEN_FADE_OUT(${1:int duration})"],
      "description": "DO_SCREEN_FADE_OUT()"
    },
    "SET_WIDESCREEN_BORDERS": {
      "prefix": "SET_WIDESCREEN_BORDERS()",
      "body": ["SET_WIDESCREEN_BORDERS(${1:BOOL p0}, ${2:int p1})"],
      "description": "SET_WIDESCREEN_BORDERS()"
    },
    "ARE_WIDESCREEN_BORDERS_ACTIVE": {
      "prefix": "ARE_WIDESCREEN_BORDERS_ACTIVE()",
      "body": ["ARE_WIDESCREEN_BORDERS_ACTIVE()"],
      "description": "ARE_WIDESCREEN_BORDERS_ACTIVE()"
    },
    "GET_GAMEPLAY_CAM_COORD": {
      "prefix": "GET_GAMEPLAY_CAM_COORD()",
      "body": ["GET_GAMEPLAY_CAM_COORD()"],
      "description": "GET_GAMEPLAY_CAM_COORD()"
    },
    "GET_GAMEPLAY_CAM_ROT": {
      "prefix": "GET_GAMEPLAY_CAM_ROT()",
      "body": ["GET_GAMEPLAY_CAM_ROT(${1:int rotationOrder})"],
      "description": "GET_GAMEPLAY_CAM_ROT()"
    },
    "GET_GAMEPLAY_CAM_FOV": {
      "prefix": "GET_GAMEPLAY_CAM_FOV()",
      "body": ["GET_GAMEPLAY_CAM_FOV()"],
      "description": "GET_GAMEPLAY_CAM_FOV()"
    },
    "SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE": {
      "prefix": "SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE()",
      "body": ["SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE(${1:float p0})"],
      "description": "SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE()"
    },
    "SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE": {
      "prefix": "SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE()",
      "body": [
        "SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE(${1:float p0})"
      ],
      "description": "SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE()"
    },
    "GET_GAMEPLAY_CAM_RELATIVE_HEADING": {
      "prefix": "GET_GAMEPLAY_CAM_RELATIVE_HEADING()",
      "body": ["GET_GAMEPLAY_CAM_RELATIVE_HEADING()"],
      "description": "GET_GAMEPLAY_CAM_RELATIVE_HEADING()"
    },
    "SET_GAMEPLAY_CAM_RELATIVE_HEADING": {
      "prefix": "SET_GAMEPLAY_CAM_RELATIVE_HEADING()",
      "body": ["SET_GAMEPLAY_CAM_RELATIVE_HEADING(${1:float heading})"],
      "description": "SET_GAMEPLAY_CAM_RELATIVE_HEADING()"
    },
    "GET_GAMEPLAY_CAM_RELATIVE_PITCH": {
      "prefix": "GET_GAMEPLAY_CAM_RELATIVE_PITCH()",
      "body": ["GET_GAMEPLAY_CAM_RELATIVE_PITCH()"],
      "description": "GET_GAMEPLAY_CAM_RELATIVE_PITCH()"
    },
    "SET_GAMEPLAY_CAM_RELATIVE_PITCH": {
      "prefix": "SET_GAMEPLAY_CAM_RELATIVE_PITCH()",
      "body": [
        "SET_GAMEPLAY_CAM_RELATIVE_PITCH(${1:float angle}, ${2:float scalingFactor})"
      ],
      "description": "SET_GAMEPLAY_CAM_RELATIVE_PITCH()"
    },
    "RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER": {
      "prefix": "RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER()",
      "body": ["RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER()"],
      "description": "RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER()"
    },
    "FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH": {
      "prefix": "FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH()",
      "body": [
        "FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH(${1:float roll}, ${2:float pitch}, ${3:float yaw})"
      ],
      "description": "FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH()"
    },
    "FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH": {
      "prefix": "FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH()",
      "body": [
        "FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH(${1:float p0}, ${2:float p1})"
      ],
      "description": "FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH()"
    },
    "SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING": {
      "prefix": "SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING()",
      "body": ["SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING(${1:float yaw})"],
      "description": "SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING()"
    },
    "SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH": {
      "prefix": "SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH()",
      "body": ["SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH(${1:float pitch})"],
      "description": "SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH()"
    },
    "SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME": {
      "prefix": "SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME()",
      "body": ["SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME(${1:BOOL p0})"],
      "description": "SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME()"
    },
    "SHAKE_GAMEPLAY_CAM": {
      "prefix": "SHAKE_GAMEPLAY_CAM()",
      "body": [
        "SHAKE_GAMEPLAY_CAM(${1:const char* shakeName}, ${2:float intensity})"
      ],
      "description": "SHAKE_GAMEPLAY_CAM()"
    },
    "IS_GAMEPLAY_CAM_SHAKING": {
      "prefix": "IS_GAMEPLAY_CAM_SHAKING()",
      "body": ["IS_GAMEPLAY_CAM_SHAKING()"],
      "description": "IS_GAMEPLAY_CAM_SHAKING()"
    },
    "SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE": {
      "prefix": "SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE()",
      "body": ["SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(${1:float amplitude})"],
      "description": "SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE()"
    },
    "STOP_GAMEPLAY_CAM_SHAKING": {
      "prefix": "STOP_GAMEPLAY_CAM_SHAKING()",
      "body": ["STOP_GAMEPLAY_CAM_SHAKING(${1:BOOL p0})"],
      "description": "STOP_GAMEPLAY_CAM_SHAKING()"
    },
    "SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE": {
      "prefix": "SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE()",
      "body": ["SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE(${1:Ped ped})"],
      "description": "SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE()"
    },
    "IS_GAMEPLAY_CAM_RENDERING": {
      "prefix": "IS_GAMEPLAY_CAM_RENDERING()",
      "body": ["IS_GAMEPLAY_CAM_RENDERING()"],
      "description": "IS_GAMEPLAY_CAM_RENDERING()"
    },
    "IS_INTERPOLATING_FROM_SCRIPT_CAMS": {
      "prefix": "IS_INTERPOLATING_FROM_SCRIPT_CAMS()",
      "body": ["IS_INTERPOLATING_FROM_SCRIPT_CAMS()"],
      "description": "IS_INTERPOLATING_FROM_SCRIPT_CAMS()"
    },
    "IS_INTERPOLATING_TO_SCRIPT_CAMS": {
      "prefix": "IS_INTERPOLATING_TO_SCRIPT_CAMS()",
      "body": ["IS_INTERPOLATING_TO_SCRIPT_CAMS()"],
      "description": "IS_INTERPOLATING_TO_SCRIPT_CAMS()"
    },
    "SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE": {
      "prefix": "SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE()",
      "body": ["SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE(${1:BOOL p0})"],
      "description": "SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE()"
    },
    "DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE": {
      "prefix": "DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE()",
      "body": ["DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE()"],
      "description": "DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE()"
    },
    "IS_GAMEPLAY_CAM_LOOKING_BEHIND": {
      "prefix": "IS_GAMEPLAY_CAM_LOOKING_BEHIND()",
      "body": ["IS_GAMEPLAY_CAM_LOOKING_BEHIND()"],
      "description": "IS_GAMEPLAY_CAM_LOOKING_BEHIND()"
    },
    "SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE": {
      "prefix": "SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE()",
      "body": [
        "SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE(${1:Entity entity})"
      ],
      "description": "SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE()"
    },
    "DISABLE_CAM_COLLISION_FOR_OBJECT": {
      "prefix": "DISABLE_CAM_COLLISION_FOR_OBJECT()",
      "body": ["DISABLE_CAM_COLLISION_FOR_OBJECT(${1:Entity entity})"],
      "description": "DISABLE_CAM_COLLISION_FOR_OBJECT()"
    },
    "BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE": {
      "prefix": "BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE()",
      "body": ["BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE()"],
      "description": "BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE()"
    },
    "SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE": {
      "prefix": "SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE()",
      "body": [
        "SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE(${1:Entity entity})"
      ],
      "description": "SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE()"
    },
    "DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE": {
      "prefix": "DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE()",
      "body": ["DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE()"],
      "description": "DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE()"
    },
    "SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE": {
      "prefix": "SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE()",
      "body": ["SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE()"],
      "description": "SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE()"
    },
    "IS_SPHERE_VISIBLE": {
      "prefix": "IS_SPHERE_VISIBLE()",
      "body": [
        "IS_SPHERE_VISIBLE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius})"
      ],
      "description": "IS_SPHERE_VISIBLE()"
    },
    "IS_FOLLOW_PED_CAM_ACTIVE": {
      "prefix": "IS_FOLLOW_PED_CAM_ACTIVE()",
      "body": ["IS_FOLLOW_PED_CAM_ACTIVE()"],
      "description": "IS_FOLLOW_PED_CAM_ACTIVE()"
    },
    "SET_FOLLOW_PED_CAM_THIS_UPDATE": {
      "prefix": "SET_FOLLOW_PED_CAM_THIS_UPDATE()",
      "body": [
        "SET_FOLLOW_PED_CAM_THIS_UPDATE(${1:const char* camName}, ${2:int p1})"
      ],
      "description": "SET_FOLLOW_PED_CAM_THIS_UPDATE()"
    },
    "USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME": {
      "prefix": "USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME()",
      "body": [
        "USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME(${1:BOOL p0}, ${2:BOOL p1})"
      ],
      "description": "USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME()"
    },
    "SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE": {
      "prefix": "SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE()",
      "body": ["SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE()"],
      "description": "SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE()"
    },
    "SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE": {
      "prefix": "SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE()",
      "body": [
        "SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(${1:float minimum}, ${2:float maximum})"
      ],
      "description": "SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE()"
    },
    "SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE": {
      "prefix": "SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE()",
      "body": [
        "SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(${1:float minimum}, ${2:float maximum})"
      ],
      "description": "SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE()"
    },
    "SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE": {
      "prefix": "SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE()",
      "body": [
        "SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(${1:float p0}, ${2:float distance})"
      ],
      "description": "SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE()"
    },
    "_GET_THIRD_PERSON_CAM_MIN_ORBIT_DISTANCE_SPRING": {
      "prefix": "_GET_THIRD_PERSON_CAM_MIN_ORBIT_DISTANCE_SPRING()",
      "body": ["_GET_THIRD_PERSON_CAM_MIN_ORBIT_DISTANCE_SPRING()"],
      "description": "_GET_THIRD_PERSON_CAM_MIN_ORBIT_DISTANCE_SPRING()"
    },
    "_GET_THIRD_PERSON_CAM_MAX_ORBIT_DISTANCE_SPRING": {
      "prefix": "_GET_THIRD_PERSON_CAM_MAX_ORBIT_DISTANCE_SPRING()",
      "body": ["_GET_THIRD_PERSON_CAM_MAX_ORBIT_DISTANCE_SPRING()"],
      "description": "_GET_THIRD_PERSON_CAM_MAX_ORBIT_DISTANCE_SPRING()"
    },
    "SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE": {
      "prefix": "SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE()",
      "body": [
        "SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE(${1:Vehicle p0}, ${2:int p1})"
      ],
      "description": "SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE()"
    },
    "DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE": {
      "prefix": "DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE()",
      "body": ["DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE()"],
      "description": "DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE()"
    },
    "DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE": {
      "prefix": "DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE()",
      "body": ["DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE()"],
      "description": "DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE()"
    },
    "BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE": {
      "prefix": "BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE()",
      "body": ["BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE()"],
      "description": "BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE()"
    },
    "GET_FOLLOW_PED_CAM_ZOOM_LEVEL": {
      "prefix": "GET_FOLLOW_PED_CAM_ZOOM_LEVEL()",
      "body": ["GET_FOLLOW_PED_CAM_ZOOM_LEVEL()"],
      "description": "GET_FOLLOW_PED_CAM_ZOOM_LEVEL()"
    },
    "GET_FOLLOW_PED_CAM_VIEW_MODE": {
      "prefix": "GET_FOLLOW_PED_CAM_VIEW_MODE()",
      "body": ["GET_FOLLOW_PED_CAM_VIEW_MODE()"],
      "description": "GET_FOLLOW_PED_CAM_VIEW_MODE()"
    },
    "SET_FOLLOW_PED_CAM_VIEW_MODE": {
      "prefix": "SET_FOLLOW_PED_CAM_VIEW_MODE()",
      "body": ["SET_FOLLOW_PED_CAM_VIEW_MODE(${1:int viewMode})"],
      "description": "SET_FOLLOW_PED_CAM_VIEW_MODE()"
    },
    "IS_FOLLOW_VEHICLE_CAM_ACTIVE": {
      "prefix": "IS_FOLLOW_VEHICLE_CAM_ACTIVE()",
      "body": ["IS_FOLLOW_VEHICLE_CAM_ACTIVE()"],
      "description": "IS_FOLLOW_VEHICLE_CAM_ACTIVE()"
    },
    "SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE": {
      "prefix": "SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE()",
      "body": [
        "SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE(${1:BOOL p0})"
      ],
      "description": "SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE()"
    },
    "SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE": {
      "prefix": "SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE()",
      "body": [
        "SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE(${1:BOOL p0}, ${2:BOOL p1})"
      ],
      "description": "SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE()"
    },
    "SET_TABLE_GAMES_CAMERA_THIS_UPDATE": {
      "prefix": "SET_TABLE_GAMES_CAMERA_THIS_UPDATE()",
      "body": ["SET_TABLE_GAMES_CAMERA_THIS_UPDATE(${1:Hash hash})"],
      "description": "SET_TABLE_GAMES_CAMERA_THIS_UPDATE()"
    },
    "GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL": {
      "prefix": "GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL()",
      "body": ["GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL()"],
      "description": "GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL()"
    },
    "SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL": {
      "prefix": "SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL()",
      "body": ["SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(${1:int zoomLevel})"],
      "description": "SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL()"
    },
    "GET_FOLLOW_VEHICLE_CAM_VIEW_MODE": {
      "prefix": "GET_FOLLOW_VEHICLE_CAM_VIEW_MODE()",
      "body": ["GET_FOLLOW_VEHICLE_CAM_VIEW_MODE()"],
      "description": "GET_FOLLOW_VEHICLE_CAM_VIEW_MODE()"
    },
    "SET_FOLLOW_VEHICLE_CAM_VIEW_MODE": {
      "prefix": "SET_FOLLOW_VEHICLE_CAM_VIEW_MODE()",
      "body": ["SET_FOLLOW_VEHICLE_CAM_VIEW_MODE(${1:int viewMode})"],
      "description": "SET_FOLLOW_VEHICLE_CAM_VIEW_MODE()"
    },
    "GET_CAM_VIEW_MODE_FOR_CONTEXT": {
      "prefix": "GET_CAM_VIEW_MODE_FOR_CONTEXT()",
      "body": ["GET_CAM_VIEW_MODE_FOR_CONTEXT(${1:int context})"],
      "description": "GET_CAM_VIEW_MODE_FOR_CONTEXT()"
    },
    "SET_CAM_VIEW_MODE_FOR_CONTEXT": {
      "prefix": "SET_CAM_VIEW_MODE_FOR_CONTEXT()",
      "body": [
        "SET_CAM_VIEW_MODE_FOR_CONTEXT(${1:int context}, ${2:int viewMode})"
      ],
      "description": "SET_CAM_VIEW_MODE_FOR_CONTEXT()"
    },
    "GET_CAM_ACTIVE_VIEW_MODE_CONTEXT": {
      "prefix": "GET_CAM_ACTIVE_VIEW_MODE_CONTEXT()",
      "body": ["GET_CAM_ACTIVE_VIEW_MODE_CONTEXT()"],
      "description": "GET_CAM_ACTIVE_VIEW_MODE_CONTEXT()"
    },
    "USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE": {
      "prefix": "USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE()",
      "body": ["USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE()"],
      "description": "USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE()"
    },
    "USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE": {
      "prefix": "USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE()",
      "body": [
        "USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE(${1:const char* camName})"
      ],
      "description": "USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE()"
    },
    "FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE": {
      "prefix": "FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE()",
      "body": ["FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE()"],
      "description": "FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE()"
    },
    "SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE": {
      "prefix": "SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE()",
      "body": ["SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE(${1:int seatIndex})"],
      "description": "SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE()"
    },
    "IS_AIM_CAM_ACTIVE": {
      "prefix": "IS_AIM_CAM_ACTIVE()",
      "body": ["IS_AIM_CAM_ACTIVE()"],
      "description": "IS_AIM_CAM_ACTIVE()"
    },
    "IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE": {
      "prefix": "IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE()",
      "body": ["IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE()"],
      "description": "IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE()"
    },
    "IS_FIRST_PERSON_AIM_CAM_ACTIVE": {
      "prefix": "IS_FIRST_PERSON_AIM_CAM_ACTIVE()",
      "body": ["IS_FIRST_PERSON_AIM_CAM_ACTIVE()"],
      "description": "IS_FIRST_PERSON_AIM_CAM_ACTIVE()"
    },
    "DISABLE_AIM_CAM_THIS_UPDATE": {
      "prefix": "DISABLE_AIM_CAM_THIS_UPDATE()",
      "body": ["DISABLE_AIM_CAM_THIS_UPDATE()"],
      "description": "DISABLE_AIM_CAM_THIS_UPDATE()"
    },
    "GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR": {
      "prefix": "GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR()",
      "body": ["GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR()"],
      "description": "GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR()"
    },
    "SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR": {
      "prefix": "SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR()",
      "body": ["SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR(${1:float zoomFactor})"],
      "description": "SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR()"
    },
    "SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE": {
      "prefix": "SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE()",
      "body": [
        "SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE(${1:float p0}, ${2:float p1})"
      ],
      "description": "SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE()"
    },
    "SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE": {
      "prefix": "SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE()",
      "body": [
        "SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(${1:float p0}, ${2:float p1})"
      ],
      "description": "SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE()"
    },
    "SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE": {
      "prefix": "SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE()",
      "body": [
        "SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(${1:float p0}, ${2:float p1})"
      ],
      "description": "SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE()"
    },
    "SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE": {
      "prefix": "SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE()",
      "body": ["SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(${1:float p0})"],
      "description": "SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE()"
    },
    "SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE": {
      "prefix": "SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE()",
      "body": ["SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(${1:float p0})"],
      "description": "SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE()"
    },
    "SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE": {
      "prefix": "SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE()",
      "body": ["SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE(${1:BOOL p0})"],
      "description": "SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE()"
    },
    "FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE": {
      "prefix": "FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE()",
      "body": ["FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE()"],
      "description": "FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE()"
    },
    "GET_FINAL_RENDERED_CAM_COORD": {
      "prefix": "GET_FINAL_RENDERED_CAM_COORD()",
      "body": ["GET_FINAL_RENDERED_CAM_COORD()"],
      "description": "GET_FINAL_RENDERED_CAM_COORD()"
    },
    "GET_FINAL_RENDERED_CAM_ROT": {
      "prefix": "GET_FINAL_RENDERED_CAM_ROT()",
      "body": ["GET_FINAL_RENDERED_CAM_ROT(${1:int rotationOrder})"],
      "description": "GET_FINAL_RENDERED_CAM_ROT()"
    },
    "GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT": {
      "prefix": "GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT()",
      "body": [
        "GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT(${1:Player player}, ${2:int rotationOrder})"
      ],
      "description": "GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT()"
    },
    "GET_FINAL_RENDERED_CAM_FOV": {
      "prefix": "GET_FINAL_RENDERED_CAM_FOV()",
      "body": ["GET_FINAL_RENDERED_CAM_FOV()"],
      "description": "GET_FINAL_RENDERED_CAM_FOV()"
    },
    "GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV": {
      "prefix": "GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV()",
      "body": ["GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV(${1:Player player})"],
      "description": "GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV()"
    },
    "GET_FINAL_RENDERED_CAM_NEAR_CLIP": {
      "prefix": "GET_FINAL_RENDERED_CAM_NEAR_CLIP()",
      "body": ["GET_FINAL_RENDERED_CAM_NEAR_CLIP()"],
      "description": "GET_FINAL_RENDERED_CAM_NEAR_CLIP()"
    },
    "GET_FINAL_RENDERED_CAM_FAR_CLIP": {
      "prefix": "GET_FINAL_RENDERED_CAM_FAR_CLIP()",
      "body": ["GET_FINAL_RENDERED_CAM_FAR_CLIP()"],
      "description": "GET_FINAL_RENDERED_CAM_FAR_CLIP()"
    },
    "GET_FINAL_RENDERED_CAM_NEAR_DOF": {
      "prefix": "GET_FINAL_RENDERED_CAM_NEAR_DOF()",
      "body": ["GET_FINAL_RENDERED_CAM_NEAR_DOF()"],
      "description": "GET_FINAL_RENDERED_CAM_NEAR_DOF()"
    },
    "GET_FINAL_RENDERED_CAM_FAR_DOF": {
      "prefix": "GET_FINAL_RENDERED_CAM_FAR_DOF()",
      "body": ["GET_FINAL_RENDERED_CAM_FAR_DOF()"],
      "description": "GET_FINAL_RENDERED_CAM_FAR_DOF()"
    },
    "GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH": {
      "prefix": "GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH()",
      "body": ["GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH()"],
      "description": "GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH()"
    },
    "SET_GAMEPLAY_COORD_HINT": {
      "prefix": "SET_GAMEPLAY_COORD_HINT()",
      "body": [
        "SET_GAMEPLAY_COORD_HINT(${1:float x}, ${2:float y}, ${3:float z}, ${4:int duration}, ${5:int blendOutDuration}, ${6:int blendInDuration}, ${7:int p6})"
      ],
      "description": "SET_GAMEPLAY_COORD_HINT()"
    },
    "SET_GAMEPLAY_PED_HINT": {
      "prefix": "SET_GAMEPLAY_PED_HINT()",
      "body": [
        "SET_GAMEPLAY_PED_HINT(${1:Ped ped}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:BOOL p4}, ${6:int duration}, ${7:int blendOutDuration}, ${8:int blendInDuration})"
      ],
      "description": "SET_GAMEPLAY_PED_HINT()"
    },
    "SET_GAMEPLAY_VEHICLE_HINT": {
      "prefix": "SET_GAMEPLAY_VEHICLE_HINT()",
      "body": [
        "SET_GAMEPLAY_VEHICLE_HINT(${1:Vehicle vehicle}, ${2:float offsetX}, ${3:float offsetY}, ${4:float offsetZ}, ${5:BOOL p4}, ${6:int time}, ${7:int easeInTime}, ${8:int easeOutTime})"
      ],
      "description": "SET_GAMEPLAY_VEHICLE_HINT()"
    },
    "SET_GAMEPLAY_OBJECT_HINT": {
      "prefix": "SET_GAMEPLAY_OBJECT_HINT()",
      "body": [
        "SET_GAMEPLAY_OBJECT_HINT(${1:Object object}, ${2:float xOffset}, ${3:float yOffset}, ${4:float zOffset}, ${5:BOOL p4}, ${6:int time}, ${7:int easeInTime}, ${8:int easeOutTime})"
      ],
      "description": "SET_GAMEPLAY_OBJECT_HINT()"
    },
    "SET_GAMEPLAY_ENTITY_HINT": {
      "prefix": "SET_GAMEPLAY_ENTITY_HINT()",
      "body": [
        "SET_GAMEPLAY_ENTITY_HINT(${1:Entity entity}, ${2:float xOffset}, ${3:float yOffset}, ${4:float zOffset}, ${5:BOOL p4}, ${6:int time}, ${7:int easeInTime}, ${8:int easeOutTime}, ${9:int p8})"
      ],
      "description": "SET_GAMEPLAY_ENTITY_HINT()"
    },
    "IS_GAMEPLAY_HINT_ACTIVE": {
      "prefix": "IS_GAMEPLAY_HINT_ACTIVE()",
      "body": ["IS_GAMEPLAY_HINT_ACTIVE()"],
      "description": "IS_GAMEPLAY_HINT_ACTIVE()"
    },
    "STOP_GAMEPLAY_HINT": {
      "prefix": "STOP_GAMEPLAY_HINT()",
      "body": ["STOP_GAMEPLAY_HINT(${1:BOOL p0})"],
      "description": "STOP_GAMEPLAY_HINT()"
    },
    "STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE": {
      "prefix": "STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE()",
      "body": ["STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE(${1:BOOL p0})"],
      "description": "STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE()"
    },
    "STOP_CODE_GAMEPLAY_HINT": {
      "prefix": "STOP_CODE_GAMEPLAY_HINT()",
      "body": ["STOP_CODE_GAMEPLAY_HINT(${1:BOOL p0})"],
      "description": "STOP_CODE_GAMEPLAY_HINT()"
    },
    "IS_CODE_GAMEPLAY_HINT_ACTIVE": {
      "prefix": "IS_CODE_GAMEPLAY_HINT_ACTIVE()",
      "body": ["IS_CODE_GAMEPLAY_HINT_ACTIVE()"],
      "description": "IS_CODE_GAMEPLAY_HINT_ACTIVE()"
    },
    "SET_GAMEPLAY_HINT_FOV": {
      "prefix": "SET_GAMEPLAY_HINT_FOV()",
      "body": ["SET_GAMEPLAY_HINT_FOV(${1:float FOV})"],
      "description": "SET_GAMEPLAY_HINT_FOV()"
    },
    "SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR": {
      "prefix": "SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR()",
      "body": ["SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR(${1:float value})"],
      "description": "SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR()"
    },
    "SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET": {
      "prefix": "SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET()",
      "body": ["SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET(${1:float value})"],
      "description": "SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET()"
    },
    "SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET": {
      "prefix": "SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET()",
      "body": [
        "SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET(${1:float xOffset})"
      ],
      "description": "SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET()"
    },
    "SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET": {
      "prefix": "SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET()",
      "body": [
        "SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET(${1:float yOffset})"
      ],
      "description": "SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET()"
    },
    "SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE": {
      "prefix": "SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE()",
      "body": [
        "SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE(${1:BOOL toggle})"
      ],
      "description": "SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE()"
    },
    "SET_CINEMATIC_BUTTON_ACTIVE": {
      "prefix": "SET_CINEMATIC_BUTTON_ACTIVE()",
      "body": ["SET_CINEMATIC_BUTTON_ACTIVE(${1:BOOL p0})"],
      "description": "SET_CINEMATIC_BUTTON_ACTIVE()"
    },
    "IS_CINEMATIC_CAM_RENDERING": {
      "prefix": "IS_CINEMATIC_CAM_RENDERING()",
      "body": ["IS_CINEMATIC_CAM_RENDERING()"],
      "description": "IS_CINEMATIC_CAM_RENDERING()"
    },
    "SHAKE_CINEMATIC_CAM": {
      "prefix": "SHAKE_CINEMATIC_CAM()",
      "body": [
        "SHAKE_CINEMATIC_CAM(${1:const char* shakeType}, ${2:float amount})"
      ],
      "description": "SHAKE_CINEMATIC_CAM()"
    },
    "IS_CINEMATIC_CAM_SHAKING": {
      "prefix": "IS_CINEMATIC_CAM_SHAKING()",
      "body": ["IS_CINEMATIC_CAM_SHAKING()"],
      "description": "IS_CINEMATIC_CAM_SHAKING()"
    },
    "SET_CINEMATIC_CAM_SHAKE_AMPLITUDE": {
      "prefix": "SET_CINEMATIC_CAM_SHAKE_AMPLITUDE()",
      "body": ["SET_CINEMATIC_CAM_SHAKE_AMPLITUDE(${1:float p0})"],
      "description": "SET_CINEMATIC_CAM_SHAKE_AMPLITUDE()"
    },
    "STOP_CINEMATIC_CAM_SHAKING": {
      "prefix": "STOP_CINEMATIC_CAM_SHAKING()",
      "body": ["STOP_CINEMATIC_CAM_SHAKING(${1:BOOL p0})"],
      "description": "STOP_CINEMATIC_CAM_SHAKING()"
    },
    "DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE": {
      "prefix": "DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE()",
      "body": ["DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE()"],
      "description": "DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE()"
    },
    "DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE": {
      "prefix": "DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE()",
      "body": ["DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE()"],
      "description": "DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE()"
    },
    "INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE": {
      "prefix": "INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE()",
      "body": ["INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE()"],
      "description": "INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE()"
    },
    "INVALIDATE_IDLE_CAM": {
      "prefix": "INVALIDATE_IDLE_CAM()",
      "body": ["INVALIDATE_IDLE_CAM()"],
      "description": "INVALIDATE_IDLE_CAM()"
    },
    "IS_CINEMATIC_IDLE_CAM_RENDERING": {
      "prefix": "IS_CINEMATIC_IDLE_CAM_RENDERING()",
      "body": ["IS_CINEMATIC_IDLE_CAM_RENDERING()"],
      "description": "IS_CINEMATIC_IDLE_CAM_RENDERING()"
    },
    "IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING": {
      "prefix": "IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING()",
      "body": ["IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING()"],
      "description": "IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING()"
    },
    "CREATE_CINEMATIC_SHOT": {
      "prefix": "CREATE_CINEMATIC_SHOT()",
      "body": [
        "CREATE_CINEMATIC_SHOT(${1:Hash p0}, ${2:int time}, ${3:BOOL p2}, ${4:Entity entity})"
      ],
      "description": "CREATE_CINEMATIC_SHOT()"
    },
    "IS_CINEMATIC_SHOT_ACTIVE": {
      "prefix": "IS_CINEMATIC_SHOT_ACTIVE()",
      "body": ["IS_CINEMATIC_SHOT_ACTIVE(${1:Hash p0})"],
      "description": "IS_CINEMATIC_SHOT_ACTIVE()"
    },
    "STOP_CINEMATIC_SHOT": {
      "prefix": "STOP_CINEMATIC_SHOT()",
      "body": ["STOP_CINEMATIC_SHOT(${1:Hash p0})"],
      "description": "STOP_CINEMATIC_SHOT()"
    },
    "FORCE_CINEMATIC_RENDERING_THIS_UPDATE": {
      "prefix": "FORCE_CINEMATIC_RENDERING_THIS_UPDATE()",
      "body": ["FORCE_CINEMATIC_RENDERING_THIS_UPDATE(${1:BOOL toggle})"],
      "description": "FORCE_CINEMATIC_RENDERING_THIS_UPDATE()"
    },
    "SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE": {
      "prefix": "SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE()",
      "body": ["SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE()"],
      "description": "SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE()"
    },
    "SET_CINEMATIC_MODE_ACTIVE": {
      "prefix": "SET_CINEMATIC_MODE_ACTIVE()",
      "body": ["SET_CINEMATIC_MODE_ACTIVE(${1:BOOL toggle})"],
      "description": "SET_CINEMATIC_MODE_ACTIVE()"
    },
    "IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING": {
      "prefix": "IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING()",
      "body": ["IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING()"],
      "description": "IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING()"
    },
    "DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE": {
      "prefix": "DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE()",
      "body": ["DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE()"],
      "description": "DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE()"
    },
    "IS_BONNET_CINEMATIC_CAM_RENDERING": {
      "prefix": "IS_BONNET_CINEMATIC_CAM_RENDERING()",
      "body": ["IS_BONNET_CINEMATIC_CAM_RENDERING()"],
      "description": "IS_BONNET_CINEMATIC_CAM_RENDERING()"
    },
    "IS_CINEMATIC_CAM_INPUT_ACTIVE": {
      "prefix": "IS_CINEMATIC_CAM_INPUT_ACTIVE()",
      "body": ["IS_CINEMATIC_CAM_INPUT_ACTIVE()"],
      "description": "IS_CINEMATIC_CAM_INPUT_ACTIVE()"
    },
    "IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE": {
      "prefix": "IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE()",
      "body": ["IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE()"],
      "description": "IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE()"
    },
    "BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE": {
      "prefix": "BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE()",
      "body": ["BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE()"],
      "description": "BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE()"
    },
    "STOP_CUTSCENE_CAM_SHAKING": {
      "prefix": "STOP_CUTSCENE_CAM_SHAKING()",
      "body": ["STOP_CUTSCENE_CAM_SHAKING(${1:Any p0})"],
      "description": "STOP_CUTSCENE_CAM_SHAKING()"
    },
    "SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE": {
      "prefix": "SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE()",
      "body": ["SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE(${1:float p0})"],
      "description": "SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE()"
    },
    "GET_FOCUS_PED_ON_SCREEN": {
      "prefix": "GET_FOCUS_PED_ON_SCREEN()",
      "body": [
        "GET_FOCUS_PED_ON_SCREEN(${1:float p0}, ${2:int p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:int p7}, ${9:int p8})"
      ],
      "description": "GET_FOCUS_PED_ON_SCREEN()"
    },
    "DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE": {
      "prefix": "DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE()",
      "body": ["DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE()"],
      "description": "DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE()"
    },
    "SET_CAM_DEATH_FAIL_EFFECT_STATE": {
      "prefix": "SET_CAM_DEATH_FAIL_EFFECT_STATE()",
      "body": ["SET_CAM_DEATH_FAIL_EFFECT_STATE(${1:int p0})"],
      "description": "SET_CAM_DEATH_FAIL_EFFECT_STATE()"
    },
    "SET_FIRST_PERSON_FLASH_EFFECT_TYPE": {
      "prefix": "SET_FIRST_PERSON_FLASH_EFFECT_TYPE()",
      "body": ["SET_FIRST_PERSON_FLASH_EFFECT_TYPE(${1:Any p0})"],
      "description": "SET_FIRST_PERSON_FLASH_EFFECT_TYPE()"
    },
    "SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME": {
      "prefix": "SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME()",
      "body": [
        "SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME(${1:const char* vehicleName})"
      ],
      "description": "SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME()"
    },
    "SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH": {
      "prefix": "SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH()",
      "body": [
        "SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH(${1:Hash vehicleModel})"
      ],
      "description": "SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH()"
    },
    "IS_ALLOWED_INDEPENDENT_CAMERA_MODES": {
      "prefix": "IS_ALLOWED_INDEPENDENT_CAMERA_MODES()",
      "body": ["IS_ALLOWED_INDEPENDENT_CAMERA_MODES()"],
      "description": "IS_ALLOWED_INDEPENDENT_CAMERA_MODES()"
    },
    "CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE": {
      "prefix": "CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE()",
      "body": [
        "CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE()"
      ],
      "description": "CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE()"
    },
    "REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER": {
      "prefix": "REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER()",
      "body": ["REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER()"],
      "description": "REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER()"
    },
    "SET_CLOCK_TIME": {
      "prefix": "SET_CLOCK_TIME()",
      "body": ["SET_CLOCK_TIME(${1:int hour}, ${2:int minute}, ${3:int second})"],
      "description": "SET_CLOCK_TIME()"
    },
    "PAUSE_CLOCK": {
      "prefix": "PAUSE_CLOCK()",
      "body": ["PAUSE_CLOCK(${1:BOOL toggle})"],
      "description": "PAUSE_CLOCK()"
    },
    "ADVANCE_CLOCK_TIME_TO": {
      "prefix": "ADVANCE_CLOCK_TIME_TO()",
      "body": [
        "ADVANCE_CLOCK_TIME_TO(${1:int hour}, ${2:int minute}, ${3:int second})"
      ],
      "description": "ADVANCE_CLOCK_TIME_TO()"
    },
    "ADD_TO_CLOCK_TIME": {
      "prefix": "ADD_TO_CLOCK_TIME()",
      "body": [
        "ADD_TO_CLOCK_TIME(${1:int hours}, ${2:int minutes}, ${3:int seconds})"
      ],
      "description": "ADD_TO_CLOCK_TIME()"
    },
    "GET_CLOCK_HOURS": {
      "prefix": "GET_CLOCK_HOURS()",
      "body": ["GET_CLOCK_HOURS()"],
      "description": "GET_CLOCK_HOURS()"
    },
    "GET_CLOCK_MINUTES": {
      "prefix": "GET_CLOCK_MINUTES()",
      "body": ["GET_CLOCK_MINUTES()"],
      "description": "GET_CLOCK_MINUTES()"
    },
    "GET_CLOCK_SECONDS": {
      "prefix": "GET_CLOCK_SECONDS()",
      "body": ["GET_CLOCK_SECONDS()"],
      "description": "GET_CLOCK_SECONDS()"
    },
    "SET_CLOCK_DATE": {
      "prefix": "SET_CLOCK_DATE()",
      "body": ["SET_CLOCK_DATE(${1:int day}, ${2:int month}, ${3:int year})"],
      "description": "SET_CLOCK_DATE()"
    },
    "GET_CLOCK_DAY_OF_WEEK": {
      "prefix": "GET_CLOCK_DAY_OF_WEEK()",
      "body": ["GET_CLOCK_DAY_OF_WEEK()"],
      "description": "GET_CLOCK_DAY_OF_WEEK()"
    },
    "GET_CLOCK_DAY_OF_MONTH": {
      "prefix": "GET_CLOCK_DAY_OF_MONTH()",
      "body": ["GET_CLOCK_DAY_OF_MONTH()"],
      "description": "GET_CLOCK_DAY_OF_MONTH()"
    },
    "GET_CLOCK_MONTH": {
      "prefix": "GET_CLOCK_MONTH()",
      "body": ["GET_CLOCK_MONTH()"],
      "description": "GET_CLOCK_MONTH()"
    },
    "GET_CLOCK_YEAR": {
      "prefix": "GET_CLOCK_YEAR()",
      "body": ["GET_CLOCK_YEAR()"],
      "description": "GET_CLOCK_YEAR()"
    },
    "GET_MILLISECONDS_PER_GAME_MINUTE": {
      "prefix": "GET_MILLISECONDS_PER_GAME_MINUTE()",
      "body": ["GET_MILLISECONDS_PER_GAME_MINUTE()"],
      "description": "GET_MILLISECONDS_PER_GAME_MINUTE()"
    },
    "GET_POSIX_TIME": {
      "prefix": "GET_POSIX_TIME()",
      "body": [
        "GET_POSIX_TIME(${1:int* year}, ${2:int* month}, ${3:int* day}, ${4:int* hour}, ${5:int* minute}, ${6:int* second})"
      ],
      "description": "GET_POSIX_TIME()"
    },
    "GET_UTC_TIME": {
      "prefix": "GET_UTC_TIME()",
      "body": [
        "GET_UTC_TIME(${1:int* year}, ${2:int* month}, ${3:int* day}, ${4:int* hour}, ${5:int* minute}, ${6:int* second})"
      ],
      "description": "GET_UTC_TIME()"
    },
    "GET_LOCAL_TIME": {
      "prefix": "GET_LOCAL_TIME()",
      "body": [
        "GET_LOCAL_TIME(${1:int* year}, ${2:int* month}, ${3:int* day}, ${4:int* hour}, ${5:int* minute}, ${6:int* second})"
      ],
      "description": "GET_LOCAL_TIME()"
    },
    "REQUEST_CUTSCENE": {
      "prefix": "REQUEST_CUTSCENE()",
      "body": ["REQUEST_CUTSCENE(${1:const char* cutsceneName}, ${2:int flags})"],
      "description": "REQUEST_CUTSCENE()"
    },
    "REQUEST_CUTSCENE_WITH_PLAYBACK_LIST": {
      "prefix": "REQUEST_CUTSCENE_WITH_PLAYBACK_LIST()",
      "body": [
        "REQUEST_CUTSCENE_WITH_PLAYBACK_LIST(${1:const char* cutsceneName}, ${2:int playbackFlags}, ${3:int flags})"
      ],
      "description": "REQUEST_CUTSCENE_WITH_PLAYBACK_LIST()"
    },
    "REMOVE_CUTSCENE": {
      "prefix": "REMOVE_CUTSCENE()",
      "body": ["REMOVE_CUTSCENE()"],
      "description": "REMOVE_CUTSCENE()"
    },
    "HAS_CUTSCENE_LOADED": {
      "prefix": "HAS_CUTSCENE_LOADED()",
      "body": ["HAS_CUTSCENE_LOADED()"],
      "description": "HAS_CUTSCENE_LOADED()"
    },
    "HAS_THIS_CUTSCENE_LOADED": {
      "prefix": "HAS_THIS_CUTSCENE_LOADED()",
      "body": ["HAS_THIS_CUTSCENE_LOADED(${1:const char* cutsceneName})"],
      "description": "HAS_THIS_CUTSCENE_LOADED()"
    },
    "SET_SCRIPT_CAN_START_CUTSCENE": {
      "prefix": "SET_SCRIPT_CAN_START_CUTSCENE()",
      "body": ["SET_SCRIPT_CAN_START_CUTSCENE(${1:int threadId})"],
      "description": "SET_SCRIPT_CAN_START_CUTSCENE()"
    },
    "CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY": {
      "prefix": "CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY()",
      "body": ["CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY()"],
      "description": "CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY()"
    },
    "IS_CUTSCENE_PLAYBACK_FLAG_SET": {
      "prefix": "IS_CUTSCENE_PLAYBACK_FLAG_SET()",
      "body": ["IS_CUTSCENE_PLAYBACK_FLAG_SET(${1:int flag})"],
      "description": "IS_CUTSCENE_PLAYBACK_FLAG_SET()"
    },
    "SET_CUTSCENE_ENTITY_STREAMING_FLAGS": {
      "prefix": "SET_CUTSCENE_ENTITY_STREAMING_FLAGS()",
      "body": [
        "SET_CUTSCENE_ENTITY_STREAMING_FLAGS(${1:const char* cutsceneEntName}, ${2:int p1}, ${3:int p2})"
      ],
      "description": "SET_CUTSCENE_ENTITY_STREAMING_FLAGS()"
    },
    "REQUEST_CUT_FILE": {
      "prefix": "REQUEST_CUT_FILE()",
      "body": ["REQUEST_CUT_FILE(${1:const char* cutsceneName})"],
      "description": "REQUEST_CUT_FILE()"
    },
    "HAS_CUT_FILE_LOADED": {
      "prefix": "HAS_CUT_FILE_LOADED()",
      "body": ["HAS_CUT_FILE_LOADED(${1:const char* cutsceneName})"],
      "description": "HAS_CUT_FILE_LOADED()"
    },
    "REMOVE_CUT_FILE": {
      "prefix": "REMOVE_CUT_FILE()",
      "body": ["REMOVE_CUT_FILE(${1:const char* cutsceneName})"],
      "description": "REMOVE_CUT_FILE()"
    },
    "GET_CUT_FILE_CONCAT_COUNT": {
      "prefix": "GET_CUT_FILE_CONCAT_COUNT()",
      "body": ["GET_CUT_FILE_CONCAT_COUNT(${1:const char* cutsceneName})"],
      "description": "GET_CUT_FILE_CONCAT_COUNT()"
    },
    "START_CUTSCENE": {
      "prefix": "START_CUTSCENE()",
      "body": ["START_CUTSCENE(${1:int flags})"],
      "description": "START_CUTSCENE()"
    },
    "START_CUTSCENE_AT_COORDS": {
      "prefix": "START_CUTSCENE_AT_COORDS()",
      "body": [
        "START_CUTSCENE_AT_COORDS(${1:float x}, ${2:float y}, ${3:float z}, ${4:int flags})"
      ],
      "description": "START_CUTSCENE_AT_COORDS()"
    },
    "STOP_CUTSCENE": {
      "prefix": "STOP_CUTSCENE()",
      "body": ["STOP_CUTSCENE(${1:BOOL p0})"],
      "description": "STOP_CUTSCENE()"
    },
    "STOP_CUTSCENE_IMMEDIATELY": {
      "prefix": "STOP_CUTSCENE_IMMEDIATELY()",
      "body": ["STOP_CUTSCENE_IMMEDIATELY()"],
      "description": "STOP_CUTSCENE_IMMEDIATELY()"
    },
    "SET_CUTSCENE_ORIGIN": {
      "prefix": "SET_CUTSCENE_ORIGIN()",
      "body": [
        "SET_CUTSCENE_ORIGIN(${1:float x}, ${2:float y}, ${3:float z}, ${4:float p3}, ${5:int p4})"
      ],
      "description": "SET_CUTSCENE_ORIGIN()"
    },
    "SET_CUTSCENE_ORIGIN_AND_ORIENTATION": {
      "prefix": "SET_CUTSCENE_ORIGIN_AND_ORIENTATION()",
      "body": [
        "SET_CUTSCENE_ORIGIN_AND_ORIENTATION(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int p6})"
      ],
      "description": "SET_CUTSCENE_ORIGIN_AND_ORIENTATION()"
    },
    "GET_CUTSCENE_TIME": {
      "prefix": "GET_CUTSCENE_TIME()",
      "body": ["GET_CUTSCENE_TIME()"],
      "description": "GET_CUTSCENE_TIME()"
    },
    "GET_CUTSCENE_TOTAL_DURATION": {
      "prefix": "GET_CUTSCENE_TOTAL_DURATION()",
      "body": ["GET_CUTSCENE_TOTAL_DURATION()"],
      "description": "GET_CUTSCENE_TOTAL_DURATION()"
    },
    "GET_CUTSCENE_END_TIME": {
      "prefix": "GET_CUTSCENE_END_TIME()",
      "body": ["GET_CUTSCENE_END_TIME()"],
      "description": "GET_CUTSCENE_END_TIME()"
    },
    "GET_CUTSCENE_PLAY_DURATION": {
      "prefix": "GET_CUTSCENE_PLAY_DURATION()",
      "body": ["GET_CUTSCENE_PLAY_DURATION()"],
      "description": "GET_CUTSCENE_PLAY_DURATION()"
    },
    "WAS_CUTSCENE_SKIPPED": {
      "prefix": "WAS_CUTSCENE_SKIPPED()",
      "body": ["WAS_CUTSCENE_SKIPPED()"],
      "description": "WAS_CUTSCENE_SKIPPED()"
    },
    "HAS_CUTSCENE_FINISHED": {
      "prefix": "HAS_CUTSCENE_FINISHED()",
      "body": ["HAS_CUTSCENE_FINISHED()"],
      "description": "HAS_CUTSCENE_FINISHED()"
    },
    "IS_CUTSCENE_ACTIVE": {
      "prefix": "IS_CUTSCENE_ACTIVE()",
      "body": ["IS_CUTSCENE_ACTIVE()"],
      "description": "IS_CUTSCENE_ACTIVE()"
    },
    "IS_CUTSCENE_PLAYING": {
      "prefix": "IS_CUTSCENE_PLAYING()",
      "body": ["IS_CUTSCENE_PLAYING()"],
      "description": "IS_CUTSCENE_PLAYING()"
    },
    "GET_CUTSCENE_SECTION_PLAYING": {
      "prefix": "GET_CUTSCENE_SECTION_PLAYING()",
      "body": ["GET_CUTSCENE_SECTION_PLAYING()"],
      "description": "GET_CUTSCENE_SECTION_PLAYING()"
    },
    "GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY": {
      "prefix": "GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY()",
      "body": [
        "GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY(${1:const char* cutsceneEntName}, ${2:Hash modelHash})"
      ],
      "description": "GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY()"
    },
    "GET_CUTSCENE_CONCAT_SECTION_PLAYING": {
      "prefix": "GET_CUTSCENE_CONCAT_SECTION_PLAYING()",
      "body": ["GET_CUTSCENE_CONCAT_SECTION_PLAYING()"],
      "description": "GET_CUTSCENE_CONCAT_SECTION_PLAYING()"
    },
    "IS_CUTSCENE_AUTHORIZED": {
      "prefix": "IS_CUTSCENE_AUTHORIZED()",
      "body": ["IS_CUTSCENE_AUTHORIZED(${1:const char* cutsceneName})"],
      "description": "IS_CUTSCENE_AUTHORIZED()"
    },
    "DOES_CUTSCENE_HANDLE_EXIST": {
      "prefix": "DOES_CUTSCENE_HANDLE_EXIST()",
      "body": ["DOES_CUTSCENE_HANDLE_EXIST(${1:int cutsceneHandle})"],
      "description": "DOES_CUTSCENE_HANDLE_EXIST()"
    },
    "REGISTER_ENTITY_FOR_CUTSCENE": {
      "prefix": "REGISTER_ENTITY_FOR_CUTSCENE()",
      "body": [
        "REGISTER_ENTITY_FOR_CUTSCENE(${1:Ped cutscenePed}, ${2:const char* cutsceneEntName}, ${3:int p2}, ${4:Hash modelHash}, ${5:int p4})"
      ],
      "description": "REGISTER_ENTITY_FOR_CUTSCENE()"
    },
    "GET_ENTITY_INDEX_OF_REGISTERED_ENTITY": {
      "prefix": "GET_ENTITY_INDEX_OF_REGISTERED_ENTITY()",
      "body": [
        "GET_ENTITY_INDEX_OF_REGISTERED_ENTITY(${1:const char* cutsceneEntName}, ${2:Hash modelHash})"
      ],
      "description": "GET_ENTITY_INDEX_OF_REGISTERED_ENTITY()"
    },
    "SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE": {
      "prefix": "SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE()",
      "body": ["SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE(${1:Hash modelHash})"],
      "description": "SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE()"
    },
    "SET_CUTSCENE_TRIGGER_AREA": {
      "prefix": "SET_CUTSCENE_TRIGGER_AREA()",
      "body": [
        "SET_CUTSCENE_TRIGGER_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
      ],
      "description": "SET_CUTSCENE_TRIGGER_AREA()"
    },
    "CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY": {
      "prefix": "CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY()",
      "body": [
        "CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY(${1:const char* cutsceneEntName}, ${2:Hash modelHash})"
      ],
      "description": "CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY()"
    },
    "CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY": {
      "prefix": "CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY()",
      "body": [
        "CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY(${1:const char* cutsceneEntName}, ${2:Hash modelHash})"
      ],
      "description": "CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY()"
    },
    "CAN_SET_EXIT_STATE_FOR_CAMERA": {
      "prefix": "CAN_SET_EXIT_STATE_FOR_CAMERA()",
      "body": ["CAN_SET_EXIT_STATE_FOR_CAMERA(${1:BOOL p0})"],
      "description": "CAN_SET_EXIT_STATE_FOR_CAMERA()"
    },
    "SET_PAD_CAN_SHAKE_DURING_CUTSCENE": {
      "prefix": "SET_PAD_CAN_SHAKE_DURING_CUTSCENE()",
      "body": ["SET_PAD_CAN_SHAKE_DURING_CUTSCENE(${1:BOOL toggle})"],
      "description": "SET_PAD_CAN_SHAKE_DURING_CUTSCENE()"
    },
    "SET_CUTSCENE_FADE_VALUES": {
      "prefix": "SET_CUTSCENE_FADE_VALUES()",
      "body": [
        "SET_CUTSCENE_FADE_VALUES(${1:BOOL p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "SET_CUTSCENE_FADE_VALUES()"
    },
    "SET_CUTSCENE_MULTIHEAD_FADE": {
      "prefix": "SET_CUTSCENE_MULTIHEAD_FADE()",
      "body": [
        "SET_CUTSCENE_MULTIHEAD_FADE(${1:BOOL p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "SET_CUTSCENE_MULTIHEAD_FADE()"
    },
    "SET_CUTSCENE_MULTIHEAD_FADE_MANUAL": {
      "prefix": "SET_CUTSCENE_MULTIHEAD_FADE_MANUAL()",
      "body": ["SET_CUTSCENE_MULTIHEAD_FADE_MANUAL(${1:BOOL p0})"],
      "description": "SET_CUTSCENE_MULTIHEAD_FADE_MANUAL()"
    },
    "IS_MULTIHEAD_FADE_UP": {
      "prefix": "IS_MULTIHEAD_FADE_UP()",
      "body": ["IS_MULTIHEAD_FADE_UP()"],
      "description": "IS_MULTIHEAD_FADE_UP()"
    },
    "NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED": {
      "prefix": "NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED()",
      "body": ["NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED(${1:BOOL p0})"],
      "description": "NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED()"
    },
    "SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE": {
      "prefix": "SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE()",
      "body": ["SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE(${1:BOOL p0})"],
      "description": "SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE()"
    },
    "CAN_USE_MOBILE_PHONE_DURING_CUTSCENE": {
      "prefix": "CAN_USE_MOBILE_PHONE_DURING_CUTSCENE()",
      "body": ["CAN_USE_MOBILE_PHONE_DURING_CUTSCENE()"],
      "description": "CAN_USE_MOBILE_PHONE_DURING_CUTSCENE()"
    },
    "SET_CUTSCENE_CAN_BE_SKIPPED": {
      "prefix": "SET_CUTSCENE_CAN_BE_SKIPPED()",
      "body": ["SET_CUTSCENE_CAN_BE_SKIPPED(${1:BOOL p0})"],
      "description": "SET_CUTSCENE_CAN_BE_SKIPPED()"
    },
    "SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE": {
      "prefix": "SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE()",
      "body": ["SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE()"],
      "description": "SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE()"
    },
    "SET_CUTSCENE_PED_COMPONENT_VARIATION": {
      "prefix": "SET_CUTSCENE_PED_COMPONENT_VARIATION()",
      "body": [
        "SET_CUTSCENE_PED_COMPONENT_VARIATION(${1:const char* cutsceneEntName}, ${2:int componentId}, ${3:int drawableId}, ${4:int textureId}, ${5:Hash modelHash})"
      ],
      "description": "SET_CUTSCENE_PED_COMPONENT_VARIATION()"
    },
    "SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED": {
      "prefix": "SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED()",
      "body": [
        "SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED(${1:const char* cutsceneEntName}, ${2:Ped ped}, ${3:Hash modelHash})"
      ],
      "description": "SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED()"
    },
    "DOES_CUTSCENE_ENTITY_EXIST": {
      "prefix": "DOES_CUTSCENE_ENTITY_EXIST()",
      "body": [
        "DOES_CUTSCENE_ENTITY_EXIST(${1:const char* cutsceneEntName}, ${2:Hash modelHash})"
      ],
      "description": "DOES_CUTSCENE_ENTITY_EXIST()"
    },
    "SET_CUTSCENE_PED_PROP_VARIATION": {
      "prefix": "SET_CUTSCENE_PED_PROP_VARIATION()",
      "body": [
        "SET_CUTSCENE_PED_PROP_VARIATION(${1:const char* cutsceneEntName}, ${2:int componentId}, ${3:int drawableId}, ${4:int textureId}, ${5:Hash modelHash})"
      ],
      "description": "SET_CUTSCENE_PED_PROP_VARIATION()"
    },
    "HAS_CUTSCENE_CUT_THIS_FRAME": {
      "prefix": "HAS_CUTSCENE_CUT_THIS_FRAME()",
      "body": ["HAS_CUTSCENE_CUT_THIS_FRAME()"],
      "description": "HAS_CUTSCENE_CUT_THIS_FRAME()"
    },
    "DATAFILE_WATCH_REQUEST_ID": {
      "prefix": "DATAFILE_WATCH_REQUEST_ID()",
      "body": ["DATAFILE_WATCH_REQUEST_ID(${1:int requestId})"],
      "description": "DATAFILE_WATCH_REQUEST_ID()"
    },
    "DATAFILE_CLEAR_WATCH_LIST": {
      "prefix": "DATAFILE_CLEAR_WATCH_LIST()",
      "body": ["DATAFILE_CLEAR_WATCH_LIST()"],
      "description": "DATAFILE_CLEAR_WATCH_LIST()"
    },
    "DATAFILE_IS_VALID_REQUEST_ID": {
      "prefix": "DATAFILE_IS_VALID_REQUEST_ID()",
      "body": ["DATAFILE_IS_VALID_REQUEST_ID(${1:int index})"],
      "description": "DATAFILE_IS_VALID_REQUEST_ID()"
    },
    "DATAFILE_HAS_LOADED_FILE_DATA": {
      "prefix": "DATAFILE_HAS_LOADED_FILE_DATA()",
      "body": ["DATAFILE_HAS_LOADED_FILE_DATA(${1:int requestId})"],
      "description": "DATAFILE_HAS_LOADED_FILE_DATA()"
    },
    "DATAFILE_HAS_VALID_FILE_DATA": {
      "prefix": "DATAFILE_HAS_VALID_FILE_DATA()",
      "body": ["DATAFILE_HAS_VALID_FILE_DATA(${1:int requestId})"],
      "description": "DATAFILE_HAS_VALID_FILE_DATA()"
    },
    "DATAFILE_SELECT_ACTIVE_FILE": {
      "prefix": "DATAFILE_SELECT_ACTIVE_FILE()",
      "body": ["DATAFILE_SELECT_ACTIVE_FILE(${1:int requestId}, ${2:Any p1})"],
      "description": "DATAFILE_SELECT_ACTIVE_FILE()"
    },
    "DATAFILE_DELETE_REQUESTED_FILE": {
      "prefix": "DATAFILE_DELETE_REQUESTED_FILE()",
      "body": ["DATAFILE_DELETE_REQUESTED_FILE(${1:int requestId})"],
      "description": "DATAFILE_DELETE_REQUESTED_FILE()"
    },
    "UGC_CREATE_CONTENT": {
      "prefix": "UGC_CREATE_CONTENT()",
      "body": [
        "UGC_CREATE_CONTENT(${1:Any* data}, ${2:int dataCount}, ${3:const char* contentName}, ${4:const char* description}, ${5:const char* tagsCsv}, ${6:const char* contentTypeName}, ${7:BOOL publish}, ${8:Any p7})"
      ],
      "description": "UGC_CREATE_CONTENT()"
    },
    "UGC_CREATE_MISSION": {
      "prefix": "UGC_CREATE_MISSION()",
      "body": [
        "UGC_CREATE_MISSION(${1:const char* contentName}, ${2:const char* description}, ${3:const char* tagsCsv}, ${4:const char* contentTypeName}, ${5:BOOL publish}, ${6:Any p5})"
      ],
      "description": "UGC_CREATE_MISSION()"
    },
    "UGC_UPDATE_CONTENT": {
      "prefix": "UGC_UPDATE_CONTENT()",
      "body": [
        "UGC_UPDATE_CONTENT(${1:const char* contentId}, ${2:Any* data}, ${3:int dataCount}, ${4:const char* contentName}, ${5:const char* description}, ${6:const char* tagsCsv}, ${7:const char* contentTypeName}, ${8:Any p7})"
      ],
      "description": "UGC_UPDATE_CONTENT()"
    },
    "UGC_UPDATE_MISSION": {
      "prefix": "UGC_UPDATE_MISSION()",
      "body": [
        "UGC_UPDATE_MISSION(${1:const char* contentId}, ${2:const char* contentName}, ${3:const char* description}, ${4:const char* tagsCsv}, ${5:const char* contentTypeName}, ${6:Any p5})"
      ],
      "description": "UGC_UPDATE_MISSION()"
    },
    "UGC_SET_PLAYER_DATA": {
      "prefix": "UGC_SET_PLAYER_DATA()",
      "body": [
        "UGC_SET_PLAYER_DATA(${1:const char* contentId}, ${2:float rating}, ${3:const char* contentTypeName}, ${4:Any p3})"
      ],
      "description": "UGC_SET_PLAYER_DATA()"
    },
    "DATAFILE_SELECT_UGC_DATA": {
      "prefix": "DATAFILE_SELECT_UGC_DATA()",
      "body": ["DATAFILE_SELECT_UGC_DATA(${1:int p0}, ${2:Any p1})"],
      "description": "DATAFILE_SELECT_UGC_DATA()"
    },
    "DATAFILE_SELECT_UGC_STATS": {
      "prefix": "DATAFILE_SELECT_UGC_STATS()",
      "body": [
        "DATAFILE_SELECT_UGC_STATS(${1:int p0}, ${2:BOOL p1}, ${3:Any p2})"
      ],
      "description": "DATAFILE_SELECT_UGC_STATS()"
    },
    "DATAFILE_SELECT_UGC_PLAYER_DATA": {
      "prefix": "DATAFILE_SELECT_UGC_PLAYER_DATA()",
      "body": ["DATAFILE_SELECT_UGC_PLAYER_DATA(${1:int p0}, ${2:Any p1})"],
      "description": "DATAFILE_SELECT_UGC_PLAYER_DATA()"
    },
    "DATAFILE_SELECT_CREATOR_STATS": {
      "prefix": "DATAFILE_SELECT_CREATOR_STATS()",
      "body": ["DATAFILE_SELECT_CREATOR_STATS(${1:int p0}, ${2:Any p1})"],
      "description": "DATAFILE_SELECT_CREATOR_STATS()"
    },
    "DATAFILE_LOAD_OFFLINE_UGC": {
      "prefix": "DATAFILE_LOAD_OFFLINE_UGC()",
      "body": [
        "DATAFILE_LOAD_OFFLINE_UGC(${1:const char* filename}, ${2:Any p1})"
      ],
      "description": "DATAFILE_LOAD_OFFLINE_UGC()"
    },
    "DATAFILE_CREATE": {
      "prefix": "DATAFILE_CREATE()",
      "body": ["DATAFILE_CREATE(${1:int p0})"],
      "description": "DATAFILE_CREATE()"
    },
    "DATAFILE_DELETE": {
      "prefix": "DATAFILE_DELETE()",
      "body": ["DATAFILE_DELETE(${1:int p0})"],
      "description": "DATAFILE_DELETE()"
    },
    "DATAFILE_STORE_MISSION_HEADER": {
      "prefix": "DATAFILE_STORE_MISSION_HEADER()",
      "body": ["DATAFILE_STORE_MISSION_HEADER(${1:int p0})"],
      "description": "DATAFILE_STORE_MISSION_HEADER()"
    },
    "DATAFILE_FLUSH_MISSION_HEADER": {
      "prefix": "DATAFILE_FLUSH_MISSION_HEADER()",
      "body": ["DATAFILE_FLUSH_MISSION_HEADER()"],
      "description": "DATAFILE_FLUSH_MISSION_HEADER()"
    },
    "DATAFILE_START_SAVE_TO_CLOUD": {
      "prefix": "DATAFILE_START_SAVE_TO_CLOUD()",
      "body": [
        "DATAFILE_START_SAVE_TO_CLOUD(${1:const char* filename}, ${2:Any p1})"
      ],
      "description": "DATAFILE_START_SAVE_TO_CLOUD()"
    },
    "DATAFILE_UPDATE_SAVE_TO_CLOUD": {
      "prefix": "DATAFILE_UPDATE_SAVE_TO_CLOUD()",
      "body": ["DATAFILE_UPDATE_SAVE_TO_CLOUD(${1:BOOL* p0})"],
      "description": "DATAFILE_UPDATE_SAVE_TO_CLOUD()"
    },
    "DATAFILE_IS_SAVE_PENDING": {
      "prefix": "DATAFILE_IS_SAVE_PENDING()",
      "body": ["DATAFILE_IS_SAVE_PENDING()"],
      "description": "DATAFILE_IS_SAVE_PENDING()"
    },
    "DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE": {
      "prefix": "DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE()",
      "body": [
        "DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE()"
    },
    "DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE": {
      "prefix": "DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE()",
      "body": ["DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE(${1:Any p0})"],
      "description": "DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE()"
    },
    "DATADICT_SET_BOOL": {
      "prefix": "DATADICT_SET_BOOL()",
      "body": [
        "DATADICT_SET_BOOL(${1:Any* objectData}, ${2:const char* key}, ${3:BOOL value})"
      ],
      "description": "DATADICT_SET_BOOL()"
    },
    "DATADICT_SET_INT": {
      "prefix": "DATADICT_SET_INT()",
      "body": [
        "DATADICT_SET_INT(${1:Any* objectData}, ${2:const char* key}, ${3:int value})"
      ],
      "description": "DATADICT_SET_INT()"
    },
    "DATADICT_SET_FLOAT": {
      "prefix": "DATADICT_SET_FLOAT()",
      "body": [
        "DATADICT_SET_FLOAT(${1:Any* objectData}, ${2:const char* key}, ${3:float value})"
      ],
      "description": "DATADICT_SET_FLOAT()"
    },
    "DATADICT_SET_STRING": {
      "prefix": "DATADICT_SET_STRING()",
      "body": [
        "DATADICT_SET_STRING(${1:Any* objectData}, ${2:const char* key}, ${3:const char* value})"
      ],
      "description": "DATADICT_SET_STRING()"
    },
    "DATADICT_SET_VECTOR": {
      "prefix": "DATADICT_SET_VECTOR()",
      "body": [
        "DATADICT_SET_VECTOR(${1:Any* objectData}, ${2:const char* key}, ${3:float valueX}, ${4:float valueY}, ${5:float valueZ})"
      ],
      "description": "DATADICT_SET_VECTOR()"
    },
    "DATADICT_GET_BOOL": {
      "prefix": "DATADICT_GET_BOOL()",
      "body": ["DATADICT_GET_BOOL(${1:Any* objectData}, ${2:const char* key})"],
      "description": "DATADICT_GET_BOOL()"
    },
    "DATADICT_GET_INT": {
      "prefix": "DATADICT_GET_INT()",
      "body": ["DATADICT_GET_INT(${1:Any* objectData}, ${2:const char* key})"],
      "description": "DATADICT_GET_INT()"
    },
    "DATADICT_GET_FLOAT": {
      "prefix": "DATADICT_GET_FLOAT()",
      "body": ["DATADICT_GET_FLOAT(${1:Any* objectData}, ${2:const char* key})"],
      "description": "DATADICT_GET_FLOAT()"
    },
    "DATADICT_GET_VECTOR": {
      "prefix": "DATADICT_GET_VECTOR()",
      "body": ["DATADICT_GET_VECTOR(${1:Any* objectData}, ${2:const char* key})"],
      "description": "DATADICT_GET_VECTOR()"
    },
    "DATADICT_GET_TYPE": {
      "prefix": "DATADICT_GET_TYPE()",
      "body": ["DATADICT_GET_TYPE(${1:Any* objectData}, ${2:const char* key})"],
      "description": "DATADICT_GET_TYPE()"
    },
    "DATAARRAY_ADD_BOOL": {
      "prefix": "DATAARRAY_ADD_BOOL()",
      "body": ["DATAARRAY_ADD_BOOL(${1:Any* arrayData}, ${2:BOOL value})"],
      "description": "DATAARRAY_ADD_BOOL()"
    },
    "DATAARRAY_ADD_INT": {
      "prefix": "DATAARRAY_ADD_INT()",
      "body": ["DATAARRAY_ADD_INT(${1:Any* arrayData}, ${2:int value})"],
      "description": "DATAARRAY_ADD_INT()"
    },
    "DATAARRAY_ADD_FLOAT": {
      "prefix": "DATAARRAY_ADD_FLOAT()",
      "body": ["DATAARRAY_ADD_FLOAT(${1:Any* arrayData}, ${2:float value})"],
      "description": "DATAARRAY_ADD_FLOAT()"
    },
    "DATAARRAY_ADD_STRING": {
      "prefix": "DATAARRAY_ADD_STRING()",
      "body": [
        "DATAARRAY_ADD_STRING(${1:Any* arrayData}, ${2:const char* value})"
      ],
      "description": "DATAARRAY_ADD_STRING()"
    },
    "DATAARRAY_ADD_VECTOR": {
      "prefix": "DATAARRAY_ADD_VECTOR()",
      "body": [
        "DATAARRAY_ADD_VECTOR(${1:Any* arrayData}, ${2:float valueX}, ${3:float valueY}, ${4:float valueZ})"
      ],
      "description": "DATAARRAY_ADD_VECTOR()"
    },
    "DATAARRAY_GET_BOOL": {
      "prefix": "DATAARRAY_GET_BOOL()",
      "body": ["DATAARRAY_GET_BOOL(${1:Any* arrayData}, ${2:int arrayIndex})"],
      "description": "DATAARRAY_GET_BOOL()"
    },
    "DATAARRAY_GET_INT": {
      "prefix": "DATAARRAY_GET_INT()",
      "body": ["DATAARRAY_GET_INT(${1:Any* arrayData}, ${2:int arrayIndex})"],
      "description": "DATAARRAY_GET_INT()"
    },
    "DATAARRAY_GET_FLOAT": {
      "prefix": "DATAARRAY_GET_FLOAT()",
      "body": ["DATAARRAY_GET_FLOAT(${1:Any* arrayData}, ${2:int arrayIndex})"],
      "description": "DATAARRAY_GET_FLOAT()"
    },
    "DATAARRAY_GET_VECTOR": {
      "prefix": "DATAARRAY_GET_VECTOR()",
      "body": ["DATAARRAY_GET_VECTOR(${1:Any* arrayData}, ${2:int arrayIndex})"],
      "description": "DATAARRAY_GET_VECTOR()"
    },
    "DATAARRAY_GET_COUNT": {
      "prefix": "DATAARRAY_GET_COUNT()",
      "body": ["DATAARRAY_GET_COUNT(${1:Any* arrayData})"],
      "description": "DATAARRAY_GET_COUNT()"
    },
    "DATAARRAY_GET_TYPE": {
      "prefix": "DATAARRAY_GET_TYPE()",
      "body": ["DATAARRAY_GET_TYPE(${1:Any* arrayData}, ${2:int arrayIndex})"],
      "description": "DATAARRAY_GET_TYPE()"
    },
    "DECOR_SET_TIME": {
      "prefix": "DECOR_SET_TIME()",
      "body": [
        "DECOR_SET_TIME(${1:Entity entity}, ${2:const char* propertyName}, ${3:int timestamp})"
      ],
      "description": "DECOR_SET_TIME()"
    },
    "DECOR_SET_BOOL": {
      "prefix": "DECOR_SET_BOOL()",
      "body": [
        "DECOR_SET_BOOL(${1:Entity entity}, ${2:const char* propertyName}, ${3:BOOL value})"
      ],
      "description": "DECOR_SET_BOOL()"
    },
    "DECOR_SET_FLOAT": {
      "prefix": "DECOR_SET_FLOAT()",
      "body": [
        "DECOR_SET_FLOAT(${1:Entity entity}, ${2:const char* propertyName}, ${3:float value})"
      ],
      "description": "DECOR_SET_FLOAT()"
    },
    "DECOR_SET_INT": {
      "prefix": "DECOR_SET_INT()",
      "body": [
        "DECOR_SET_INT(${1:Entity entity}, ${2:const char* propertyName}, ${3:int value})"
      ],
      "description": "DECOR_SET_INT()"
    },
    "DECOR_GET_BOOL": {
      "prefix": "DECOR_GET_BOOL()",
      "body": [
        "DECOR_GET_BOOL(${1:Entity entity}, ${2:const char* propertyName})"
      ],
      "description": "DECOR_GET_BOOL()"
    },
    "DECOR_GET_FLOAT": {
      "prefix": "DECOR_GET_FLOAT()",
      "body": [
        "DECOR_GET_FLOAT(${1:Entity entity}, ${2:const char* propertyName})"
      ],
      "description": "DECOR_GET_FLOAT()"
    },
    "DECOR_GET_INT": {
      "prefix": "DECOR_GET_INT()",
      "body": [
        "DECOR_GET_INT(${1:Entity entity}, ${2:const char* propertyName})"
      ],
      "description": "DECOR_GET_INT()"
    },
    "DECOR_EXIST_ON": {
      "prefix": "DECOR_EXIST_ON()",
      "body": [
        "DECOR_EXIST_ON(${1:Entity entity}, ${2:const char* propertyName})"
      ],
      "description": "DECOR_EXIST_ON()"
    },
    "DECOR_REMOVE": {
      "prefix": "DECOR_REMOVE()",
      "body": ["DECOR_REMOVE(${1:Entity entity}, ${2:const char* propertyName})"],
      "description": "DECOR_REMOVE()"
    },
    "DECOR_REGISTER": {
      "prefix": "DECOR_REGISTER()",
      "body": ["DECOR_REGISTER(${1:const char* propertyName}, ${2:int type})"],
      "description": "DECOR_REGISTER()"
    },
    "DECOR_IS_REGISTERED_AS_TYPE": {
      "prefix": "DECOR_IS_REGISTERED_AS_TYPE()",
      "body": [
        "DECOR_IS_REGISTERED_AS_TYPE(${1:const char* propertyName}, ${2:int type})"
      ],
      "description": "DECOR_IS_REGISTERED_AS_TYPE()"
    },
    "DECOR_REGISTER_LOCK": {
      "prefix": "DECOR_REGISTER_LOCK()",
      "body": ["DECOR_REGISTER_LOCK()"],
      "description": "DECOR_REGISTER_LOCK()"
    },
    "ARE_ANY_CCS_PENDING": {
      "prefix": "ARE_ANY_CCS_PENDING()",
      "body": ["ARE_ANY_CCS_PENDING()"],
      "description": "ARE_ANY_CCS_PENDING()"
    },
    "IS_DLC_PRESENT": {
      "prefix": "IS_DLC_PRESENT()",
      "body": ["IS_DLC_PRESENT(${1:Hash dlcHash})"],
      "description": "IS_DLC_PRESENT()"
    },
    "DLC_CHECK_CLOUD_DATA_CORRECT": {
      "prefix": "DLC_CHECK_CLOUD_DATA_CORRECT()",
      "body": ["DLC_CHECK_CLOUD_DATA_CORRECT()"],
      "description": "DLC_CHECK_CLOUD_DATA_CORRECT()"
    },
    "GET_EXTRACONTENT_CLOUD_RESULT": {
      "prefix": "GET_EXTRACONTENT_CLOUD_RESULT()",
      "body": ["GET_EXTRACONTENT_CLOUD_RESULT()"],
      "description": "GET_EXTRACONTENT_CLOUD_RESULT()"
    },
    "DLC_CHECK_COMPAT_PACK_CONFIGURATION": {
      "prefix": "DLC_CHECK_COMPAT_PACK_CONFIGURATION()",
      "body": ["DLC_CHECK_COMPAT_PACK_CONFIGURATION()"],
      "description": "DLC_CHECK_COMPAT_PACK_CONFIGURATION()"
    },
    "GET_EVER_HAD_BAD_PACK_ORDER": {
      "prefix": "GET_EVER_HAD_BAD_PACK_ORDER()",
      "body": ["GET_EVER_HAD_BAD_PACK_ORDER()"],
      "description": "GET_EVER_HAD_BAD_PACK_ORDER()"
    },
    "GET_IS_LOADING_SCREEN_ACTIVE": {
      "prefix": "GET_IS_LOADING_SCREEN_ACTIVE()",
      "body": ["GET_IS_LOADING_SCREEN_ACTIVE()"],
      "description": "GET_IS_LOADING_SCREEN_ACTIVE()"
    },
    "GET_IS_INITIAL_LOADING_SCREEN_ACTIVE": {
      "prefix": "GET_IS_INITIAL_LOADING_SCREEN_ACTIVE()",
      "body": ["GET_IS_INITIAL_LOADING_SCREEN_ACTIVE()"],
      "description": "GET_IS_INITIAL_LOADING_SCREEN_ACTIVE()"
    },
    "HAS_CLOUD_REQUESTS_FINISHED": {
      "prefix": "HAS_CLOUD_REQUESTS_FINISHED()",
      "body": ["HAS_CLOUD_REQUESTS_FINISHED(${1:BOOL* p0}, ${2:int unused})"],
      "description": "HAS_CLOUD_REQUESTS_FINISHED()"
    },
    "ON_ENTER_SP": {
      "prefix": "ON_ENTER_SP()",
      "body": ["ON_ENTER_SP()"],
      "description": "ON_ENTER_SP()"
    },
    "ON_ENTER_MP": {
      "prefix": "ON_ENTER_MP()",
      "body": ["ON_ENTER_MP()"],
      "description": "ON_ENTER_MP()"
    },
    "DOES_ENTITY_EXIST": {
      "prefix": "DOES_ENTITY_EXIST()",
      "body": ["DOES_ENTITY_EXIST(${1:Entity entity})"],
      "description": "DOES_ENTITY_EXIST()"
    },
    "DOES_ENTITY_BELONG_TO_THIS_SCRIPT": {
      "prefix": "DOES_ENTITY_BELONG_TO_THIS_SCRIPT()",
      "body": [
        "DOES_ENTITY_BELONG_TO_THIS_SCRIPT(${1:Entity entity}, ${2:BOOL p1})"
      ],
      "description": "DOES_ENTITY_BELONG_TO_THIS_SCRIPT()"
    },
    "DOES_ENTITY_HAVE_DRAWABLE": {
      "prefix": "DOES_ENTITY_HAVE_DRAWABLE()",
      "body": ["DOES_ENTITY_HAVE_DRAWABLE(${1:Entity entity})"],
      "description": "DOES_ENTITY_HAVE_DRAWABLE()"
    },
    "DOES_ENTITY_HAVE_PHYSICS": {
      "prefix": "DOES_ENTITY_HAVE_PHYSICS()",
      "body": ["DOES_ENTITY_HAVE_PHYSICS(${1:Entity entity})"],
      "description": "DOES_ENTITY_HAVE_PHYSICS()"
    },
    "DOES_ENTITY_HAVE_SKELETON": {
      "prefix": "DOES_ENTITY_HAVE_SKELETON()",
      "body": ["DOES_ENTITY_HAVE_SKELETON(${1:Entity entity})"],
      "description": "DOES_ENTITY_HAVE_SKELETON()"
    },
    "DOES_ENTITY_HAVE_ANIM_DIRECTOR": {
      "prefix": "DOES_ENTITY_HAVE_ANIM_DIRECTOR()",
      "body": ["DOES_ENTITY_HAVE_ANIM_DIRECTOR(${1:Entity entity})"],
      "description": "DOES_ENTITY_HAVE_ANIM_DIRECTOR()"
    },
    "HAS_ENTITY_ANIM_FINISHED": {
      "prefix": "HAS_ENTITY_ANIM_FINISHED()",
      "body": [
        "HAS_ENTITY_ANIM_FINISHED(${1:Entity entity}, ${2:const char* animDict}, ${3:const char* animName}, ${4:int p3})"
      ],
      "description": "HAS_ENTITY_ANIM_FINISHED()"
    },
    "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT": {
      "prefix": "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT()",
      "body": ["HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(${1:Entity entity})"],
      "description": "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT()"
    },
    "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED": {
      "prefix": "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED()",
      "body": ["HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(${1:Entity entity})"],
      "description": "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED()"
    },
    "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE": {
      "prefix": "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE()",
      "body": ["HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(${1:Entity entity})"],
      "description": "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE()"
    },
    "HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY": {
      "prefix": "HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY()",
      "body": [
        "HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(${1:Entity entity1}, ${2:Entity entity2}, ${3:BOOL p2})"
      ],
      "description": "HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY()"
    },
    "HAS_ENTITY_CLEAR_LOS_TO_ENTITY": {
      "prefix": "HAS_ENTITY_CLEAR_LOS_TO_ENTITY()",
      "body": [
        "HAS_ENTITY_CLEAR_LOS_TO_ENTITY(${1:Entity entity1}, ${2:Entity entity2}, ${3:int traceType})"
      ],
      "description": "HAS_ENTITY_CLEAR_LOS_TO_ENTITY()"
    },
    "HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER": {
      "prefix": "HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER()",
      "body": [
        "HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER(${1:Entity entity1}, ${2:Entity entity2}, ${3:int traceType})"
      ],
      "description": "HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER()"
    },
    "HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT": {
      "prefix": "HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT()",
      "body": [
        "HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(${1:Entity entity1}, ${2:Entity entity2})"
      ],
      "description": "HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT()"
    },
    "HAS_ENTITY_COLLIDED_WITH_ANYTHING": {
      "prefix": "HAS_ENTITY_COLLIDED_WITH_ANYTHING()",
      "body": ["HAS_ENTITY_COLLIDED_WITH_ANYTHING(${1:Entity entity})"],
      "description": "HAS_ENTITY_COLLIDED_WITH_ANYTHING()"
    },
    "_GET_LAST_ENTITY_HIT_BY_ENTITY": {
      "prefix": "_GET_LAST_ENTITY_HIT_BY_ENTITY()",
      "body": ["_GET_LAST_ENTITY_HIT_BY_ENTITY(${1:Entity entity})"],
      "description": "_GET_LAST_ENTITY_HIT_BY_ENTITY()"
    },
    "GET_LAST_MATERIAL_HIT_BY_ENTITY": {
      "prefix": "GET_LAST_MATERIAL_HIT_BY_ENTITY()",
      "body": ["GET_LAST_MATERIAL_HIT_BY_ENTITY(${1:Entity entity})"],
      "description": "GET_LAST_MATERIAL_HIT_BY_ENTITY()"
    },
    "GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY": {
      "prefix": "GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY()",
      "body": ["GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY(${1:Entity entity})"],
      "description": "GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY()"
    },
    "FORCE_ENTITY_AI_AND_ANIMATION_UPDATE": {
      "prefix": "FORCE_ENTITY_AI_AND_ANIMATION_UPDATE()",
      "body": ["FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(${1:Entity entity})"],
      "description": "FORCE_ENTITY_AI_AND_ANIMATION_UPDATE()"
    },
    "GET_ENTITY_ANIM_CURRENT_TIME": {
      "prefix": "GET_ENTITY_ANIM_CURRENT_TIME()",
      "body": [
        "GET_ENTITY_ANIM_CURRENT_TIME(${1:Entity entity}, ${2:const char* animDict}, ${3:const char* animName})"
      ],
      "description": "GET_ENTITY_ANIM_CURRENT_TIME()"
    },
    "GET_ENTITY_ANIM_TOTAL_TIME": {
      "prefix": "GET_ENTITY_ANIM_TOTAL_TIME()",
      "body": [
        "GET_ENTITY_ANIM_TOTAL_TIME(${1:Entity entity}, ${2:const char* animDict}, ${3:const char* animName})"
      ],
      "description": "GET_ENTITY_ANIM_TOTAL_TIME()"
    },
    "GET_ANIM_DURATION": {
      "prefix": "GET_ANIM_DURATION()",
      "body": [
        "GET_ANIM_DURATION(${1:const char* animDict}, ${2:const char* animName})"
      ],
      "description": "GET_ANIM_DURATION()"
    },
    "GET_ENTITY_ATTACHED_TO": {
      "prefix": "GET_ENTITY_ATTACHED_TO()",
      "body": ["GET_ENTITY_ATTACHED_TO(${1:Entity entity})"],
      "description": "GET_ENTITY_ATTACHED_TO()"
    },
    "GET_ENTITY_COORDS": {
      "prefix": "GET_ENTITY_COORDS()",
      "body": ["GET_ENTITY_COORDS(${1:Entity entity}, ${2:BOOL alive})"],
      "description": "GET_ENTITY_COORDS()"
    },
    "GET_ENTITY_FORWARD_VECTOR": {
      "prefix": "GET_ENTITY_FORWARD_VECTOR()",
      "body": ["GET_ENTITY_FORWARD_VECTOR(${1:Entity entity})"],
      "description": "GET_ENTITY_FORWARD_VECTOR()"
    },
    "GET_ENTITY_FORWARD_X": {
      "prefix": "GET_ENTITY_FORWARD_X()",
      "body": ["GET_ENTITY_FORWARD_X(${1:Entity entity})"],
      "description": "GET_ENTITY_FORWARD_X()"
    },
    "GET_ENTITY_FORWARD_Y": {
      "prefix": "GET_ENTITY_FORWARD_Y()",
      "body": ["GET_ENTITY_FORWARD_Y(${1:Entity entity})"],
      "description": "GET_ENTITY_FORWARD_Y()"
    },
    "GET_ENTITY_HEADING": {
      "prefix": "GET_ENTITY_HEADING()",
      "body": ["GET_ENTITY_HEADING(${1:Entity entity})"],
      "description": "GET_ENTITY_HEADING()"
    },
    "GET_ENTITY_HEADING_FROM_EULERS": {
      "prefix": "GET_ENTITY_HEADING_FROM_EULERS()",
      "body": ["GET_ENTITY_HEADING_FROM_EULERS(${1:Entity entity})"],
      "description": "GET_ENTITY_HEADING_FROM_EULERS()"
    },
    "GET_ENTITY_HEALTH": {
      "prefix": "GET_ENTITY_HEALTH()",
      "body": ["GET_ENTITY_HEALTH(${1:Entity entity})"],
      "description": "GET_ENTITY_HEALTH()"
    },
    "GET_ENTITY_MAX_HEALTH": {
      "prefix": "GET_ENTITY_MAX_HEALTH()",
      "body": ["GET_ENTITY_MAX_HEALTH(${1:Entity entity})"],
      "description": "GET_ENTITY_MAX_HEALTH()"
    },
    "SET_ENTITY_MAX_HEALTH": {
      "prefix": "SET_ENTITY_MAX_HEALTH()",
      "body": ["SET_ENTITY_MAX_HEALTH(${1:Entity entity}, ${2:int value})"],
      "description": "SET_ENTITY_MAX_HEALTH()"
    },
    "GET_ENTITY_HEIGHT": {
      "prefix": "GET_ENTITY_HEIGHT()",
      "body": [
        "GET_ENTITY_HEIGHT(${1:Entity entity}, ${2:float X}, ${3:float Y}, ${4:float Z}, ${5:BOOL atTop}, ${6:BOOL inWorldCoords})"
      ],
      "description": "GET_ENTITY_HEIGHT()"
    },
    "GET_ENTITY_HEIGHT_ABOVE_GROUND": {
      "prefix": "GET_ENTITY_HEIGHT_ABOVE_GROUND()",
      "body": ["GET_ENTITY_HEIGHT_ABOVE_GROUND(${1:Entity entity})"],
      "description": "GET_ENTITY_HEIGHT_ABOVE_GROUND()"
    },
    "GET_ENTITY_MATRIX": {
      "prefix": "GET_ENTITY_MATRIX()",
      "body": [
        "GET_ENTITY_MATRIX(${1:Entity entity}, ${2:Vector3* forwardVector}, ${3:Vector3* rightVector}, ${4:Vector3* upVector}, ${5:Vector3* position})"
      ],
      "description": "GET_ENTITY_MATRIX()"
    },
    "GET_ENTITY_MODEL": {
      "prefix": "GET_ENTITY_MODEL()",
      "body": ["GET_ENTITY_MODEL(${1:Entity entity})"],
      "description": "GET_ENTITY_MODEL()"
    },
    "GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS": {
      "prefix": "GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS()",
      "body": [
        "GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(${1:Entity entity}, ${2:float posX}, ${3:float posY}, ${4:float posZ})"
      ],
      "description": "GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS()"
    },
    "GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS": {
      "prefix": "GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS()",
      "body": [
        "GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(${1:Entity entity}, ${2:float offsetX}, ${3:float offsetY}, ${4:float offsetZ})"
      ],
      "description": "GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS()"
    },
    "GET_ENTITY_PITCH": {
      "prefix": "GET_ENTITY_PITCH()",
      "body": ["GET_ENTITY_PITCH(${1:Entity entity})"],
      "description": "GET_ENTITY_PITCH()"
    },
    "GET_ENTITY_QUATERNION": {
      "prefix": "GET_ENTITY_QUATERNION()",
      "body": [
        "GET_ENTITY_QUATERNION(${1:Entity entity}, ${2:float* x}, ${3:float* y}, ${4:float* z}, ${5:float* w})"
      ],
      "description": "GET_ENTITY_QUATERNION()"
    },
    "GET_ENTITY_ROLL": {
      "prefix": "GET_ENTITY_ROLL()",
      "body": ["GET_ENTITY_ROLL(${1:Entity entity})"],
      "description": "GET_ENTITY_ROLL()"
    },
    "GET_ENTITY_ROTATION": {
      "prefix": "GET_ENTITY_ROTATION()",
      "body": ["GET_ENTITY_ROTATION(${1:Entity entity}, ${2:int rotationOrder})"],
      "description": "GET_ENTITY_ROTATION()"
    },
    "GET_ENTITY_ROTATION_VELOCITY": {
      "prefix": "GET_ENTITY_ROTATION_VELOCITY()",
      "body": ["GET_ENTITY_ROTATION_VELOCITY(${1:Entity entity})"],
      "description": "GET_ENTITY_ROTATION_VELOCITY()"
    },
    "GET_ENTITY_SPEED": {
      "prefix": "GET_ENTITY_SPEED()",
      "body": ["GET_ENTITY_SPEED(${1:Entity entity})"],
      "description": "GET_ENTITY_SPEED()"
    },
    "GET_ENTITY_SPEED_VECTOR": {
      "prefix": "GET_ENTITY_SPEED_VECTOR()",
      "body": ["GET_ENTITY_SPEED_VECTOR(${1:Entity entity}, ${2:BOOL relative})"],
      "description": "GET_ENTITY_SPEED_VECTOR()"
    },
    "GET_ENTITY_UPRIGHT_VALUE": {
      "prefix": "GET_ENTITY_UPRIGHT_VALUE()",
      "body": ["GET_ENTITY_UPRIGHT_VALUE(${1:Entity entity})"],
      "description": "GET_ENTITY_UPRIGHT_VALUE()"
    },
    "GET_ENTITY_VELOCITY": {
      "prefix": "GET_ENTITY_VELOCITY()",
      "body": ["GET_ENTITY_VELOCITY(${1:Entity entity})"],
      "description": "GET_ENTITY_VELOCITY()"
    },
    "GET_OBJECT_INDEX_FROM_ENTITY_INDEX": {
      "prefix": "GET_OBJECT_INDEX_FROM_ENTITY_INDEX()",
      "body": ["GET_OBJECT_INDEX_FROM_ENTITY_INDEX(${1:Entity entity})"],
      "description": "GET_OBJECT_INDEX_FROM_ENTITY_INDEX()"
    },
    "GET_PED_INDEX_FROM_ENTITY_INDEX": {
      "prefix": "GET_PED_INDEX_FROM_ENTITY_INDEX()",
      "body": ["GET_PED_INDEX_FROM_ENTITY_INDEX(${1:Entity entity})"],
      "description": "GET_PED_INDEX_FROM_ENTITY_INDEX()"
    },
    "GET_VEHICLE_INDEX_FROM_ENTITY_INDEX": {
      "prefix": "GET_VEHICLE_INDEX_FROM_ENTITY_INDEX()",
      "body": ["GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(${1:Entity entity})"],
      "description": "GET_VEHICLE_INDEX_FROM_ENTITY_INDEX()"
    },
    "GET_WORLD_POSITION_OF_ENTITY_BONE": {
      "prefix": "GET_WORLD_POSITION_OF_ENTITY_BONE()",
      "body": [
        "GET_WORLD_POSITION_OF_ENTITY_BONE(${1:Entity entity}, ${2:int boneIndex})"
      ],
      "description": "GET_WORLD_POSITION_OF_ENTITY_BONE()"
    },
    "GET_NEAREST_PLAYER_TO_ENTITY": {
      "prefix": "GET_NEAREST_PLAYER_TO_ENTITY()",
      "body": ["GET_NEAREST_PLAYER_TO_ENTITY(${1:Entity entity})"],
      "description": "GET_NEAREST_PLAYER_TO_ENTITY()"
    },
    "GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM": {
      "prefix": "GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM()",
      "body": [
        "GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(${1:Entity entity}, ${2:int team})"
      ],
      "description": "GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM()"
    },
    "GET_NEAREST_PARTICIPANT_TO_ENTITY": {
      "prefix": "GET_NEAREST_PARTICIPANT_TO_ENTITY()",
      "body": ["GET_NEAREST_PARTICIPANT_TO_ENTITY(${1:Entity entity})"],
      "description": "GET_NEAREST_PARTICIPANT_TO_ENTITY()"
    },
    "GET_ENTITY_TYPE": {
      "prefix": "GET_ENTITY_TYPE()",
      "body": ["GET_ENTITY_TYPE(${1:Entity entity})"],
      "description": "GET_ENTITY_TYPE()"
    },
    "GET_ENTITY_POPULATION_TYPE": {
      "prefix": "GET_ENTITY_POPULATION_TYPE()",
      "body": ["GET_ENTITY_POPULATION_TYPE(${1:Entity entity})"],
      "description": "GET_ENTITY_POPULATION_TYPE()"
    },
    "IS_AN_ENTITY": {
      "prefix": "IS_AN_ENTITY()",
      "body": ["IS_AN_ENTITY(${1:ScrHandle handle})"],
      "description": "IS_AN_ENTITY()"
    },
    "IS_ENTITY_A_PED": {
      "prefix": "IS_ENTITY_A_PED()",
      "body": ["IS_ENTITY_A_PED(${1:Entity entity})"],
      "description": "IS_ENTITY_A_PED()"
    },
    "IS_ENTITY_A_MISSION_ENTITY": {
      "prefix": "IS_ENTITY_A_MISSION_ENTITY()",
      "body": ["IS_ENTITY_A_MISSION_ENTITY(${1:Entity entity})"],
      "description": "IS_ENTITY_A_MISSION_ENTITY()"
    },
    "IS_ENTITY_A_VEHICLE": {
      "prefix": "IS_ENTITY_A_VEHICLE()",
      "body": ["IS_ENTITY_A_VEHICLE(${1:Entity entity})"],
      "description": "IS_ENTITY_A_VEHICLE()"
    },
    "IS_ENTITY_AN_OBJECT": {
      "prefix": "IS_ENTITY_AN_OBJECT()",
      "body": ["IS_ENTITY_AN_OBJECT(${1:Entity entity})"],
      "description": "IS_ENTITY_AN_OBJECT()"
    },
    "IS_ENTITY_AT_COORD": {
      "prefix": "IS_ENTITY_AT_COORD()",
      "body": [
        "IS_ENTITY_AT_COORD(${1:Entity entity}, ${2:float xPos}, ${3:float yPos}, ${4:float zPos}, ${5:float xSize}, ${6:float ySize}, ${7:float zSize}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:int p9})"
      ],
      "description": "IS_ENTITY_AT_COORD()"
    },
    "IS_ENTITY_AT_ENTITY": {
      "prefix": "IS_ENTITY_AT_ENTITY()",
      "body": [
        "IS_ENTITY_AT_ENTITY(${1:Entity entity1}, ${2:Entity entity2}, ${3:float xSize}, ${4:float ySize}, ${5:float zSize}, ${6:BOOL p5}, ${7:BOOL p6}, ${8:int p7})"
      ],
      "description": "IS_ENTITY_AT_ENTITY()"
    },
    "IS_ENTITY_ATTACHED": {
      "prefix": "IS_ENTITY_ATTACHED()",
      "body": ["IS_ENTITY_ATTACHED(${1:Entity entity})"],
      "description": "IS_ENTITY_ATTACHED()"
    },
    "IS_ENTITY_ATTACHED_TO_ANY_OBJECT": {
      "prefix": "IS_ENTITY_ATTACHED_TO_ANY_OBJECT()",
      "body": ["IS_ENTITY_ATTACHED_TO_ANY_OBJECT(${1:Entity entity})"],
      "description": "IS_ENTITY_ATTACHED_TO_ANY_OBJECT()"
    },
    "IS_ENTITY_ATTACHED_TO_ANY_PED": {
      "prefix": "IS_ENTITY_ATTACHED_TO_ANY_PED()",
      "body": ["IS_ENTITY_ATTACHED_TO_ANY_PED(${1:Entity entity})"],
      "description": "IS_ENTITY_ATTACHED_TO_ANY_PED()"
    },
    "IS_ENTITY_ATTACHED_TO_ANY_VEHICLE": {
      "prefix": "IS_ENTITY_ATTACHED_TO_ANY_VEHICLE()",
      "body": ["IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(${1:Entity entity})"],
      "description": "IS_ENTITY_ATTACHED_TO_ANY_VEHICLE()"
    },
    "IS_ENTITY_ATTACHED_TO_ENTITY": {
      "prefix": "IS_ENTITY_ATTACHED_TO_ENTITY()",
      "body": ["IS_ENTITY_ATTACHED_TO_ENTITY(${1:Entity from}, ${2:Entity to})"],
      "description": "IS_ENTITY_ATTACHED_TO_ENTITY()"
    },
    "IS_ENTITY_DEAD": {
      "prefix": "IS_ENTITY_DEAD()",
      "body": ["IS_ENTITY_DEAD(${1:Entity entity}, ${2:BOOL p1})"],
      "description": "IS_ENTITY_DEAD()"
    },
    "IS_ENTITY_IN_AIR": {
      "prefix": "IS_ENTITY_IN_AIR()",
      "body": ["IS_ENTITY_IN_AIR(${1:Entity entity})"],
      "description": "IS_ENTITY_IN_AIR()"
    },
    "IS_ENTITY_IN_ANGLED_AREA": {
      "prefix": "IS_ENTITY_IN_ANGLED_AREA()",
      "body": [
        "IS_ENTITY_IN_ANGLED_AREA(${1:Entity entity}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2}, ${8:float width}, ${9:BOOL debug}, ${10:BOOL includeZ}, ${11:Any p10})"
      ],
      "description": "IS_ENTITY_IN_ANGLED_AREA()"
    },
    "IS_ENTITY_IN_AREA": {
      "prefix": "IS_ENTITY_IN_AREA()",
      "body": [
        "IS_ENTITY_IN_AREA(${1:Entity entity}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:Any p9})"
      ],
      "description": "IS_ENTITY_IN_AREA()"
    },
    "IS_ENTITY_IN_ZONE": {
      "prefix": "IS_ENTITY_IN_ZONE()",
      "body": ["IS_ENTITY_IN_ZONE(${1:Entity entity}, ${2:const char* zone})"],
      "description": "IS_ENTITY_IN_ZONE()"
    },
    "IS_ENTITY_IN_WATER": {
      "prefix": "IS_ENTITY_IN_WATER()",
      "body": ["IS_ENTITY_IN_WATER(${1:Entity entity})"],
      "description": "IS_ENTITY_IN_WATER()"
    },
    "GET_ENTITY_SUBMERGED_LEVEL": {
      "prefix": "GET_ENTITY_SUBMERGED_LEVEL()",
      "body": ["GET_ENTITY_SUBMERGED_LEVEL(${1:Entity entity})"],
      "description": "GET_ENTITY_SUBMERGED_LEVEL()"
    },
    "SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK": {
      "prefix": "SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK()",
      "body": [
        "SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK()"
    },
    "IS_ENTITY_ON_SCREEN": {
      "prefix": "IS_ENTITY_ON_SCREEN()",
      "body": ["IS_ENTITY_ON_SCREEN(${1:Entity entity})"],
      "description": "IS_ENTITY_ON_SCREEN()"
    },
    "IS_ENTITY_PLAYING_ANIM": {
      "prefix": "IS_ENTITY_PLAYING_ANIM()",
      "body": [
        "IS_ENTITY_PLAYING_ANIM(${1:Entity entity}, ${2:const char* animDict}, ${3:const char* animName}, ${4:int taskFlag})"
      ],
      "description": "IS_ENTITY_PLAYING_ANIM()"
    },
    "IS_ENTITY_STATIC": {
      "prefix": "IS_ENTITY_STATIC()",
      "body": ["IS_ENTITY_STATIC(${1:Entity entity})"],
      "description": "IS_ENTITY_STATIC()"
    },
    "IS_ENTITY_TOUCHING_ENTITY": {
      "prefix": "IS_ENTITY_TOUCHING_ENTITY()",
      "body": [
        "IS_ENTITY_TOUCHING_ENTITY(${1:Entity entity}, ${2:Entity targetEntity})"
      ],
      "description": "IS_ENTITY_TOUCHING_ENTITY()"
    },
    "IS_ENTITY_TOUCHING_MODEL": {
      "prefix": "IS_ENTITY_TOUCHING_MODEL()",
      "body": [
        "IS_ENTITY_TOUCHING_MODEL(${1:Entity entity}, ${2:Hash modelHash})"
      ],
      "description": "IS_ENTITY_TOUCHING_MODEL()"
    },
    "IS_ENTITY_UPRIGHT": {
      "prefix": "IS_ENTITY_UPRIGHT()",
      "body": ["IS_ENTITY_UPRIGHT(${1:Entity entity}, ${2:float angle})"],
      "description": "IS_ENTITY_UPRIGHT()"
    },
    "IS_ENTITY_UPSIDEDOWN": {
      "prefix": "IS_ENTITY_UPSIDEDOWN()",
      "body": ["IS_ENTITY_UPSIDEDOWN(${1:Entity entity})"],
      "description": "IS_ENTITY_UPSIDEDOWN()"
    },
    "IS_ENTITY_VISIBLE": {
      "prefix": "IS_ENTITY_VISIBLE()",
      "body": ["IS_ENTITY_VISIBLE(${1:Entity entity})"],
      "description": "IS_ENTITY_VISIBLE()"
    },
    "IS_ENTITY_VISIBLE_TO_SCRIPT": {
      "prefix": "IS_ENTITY_VISIBLE_TO_SCRIPT()",
      "body": ["IS_ENTITY_VISIBLE_TO_SCRIPT(${1:Entity entity})"],
      "description": "IS_ENTITY_VISIBLE_TO_SCRIPT()"
    },
    "IS_ENTITY_OCCLUDED": {
      "prefix": "IS_ENTITY_OCCLUDED()",
      "body": ["IS_ENTITY_OCCLUDED(${1:Entity entity})"],
      "description": "IS_ENTITY_OCCLUDED()"
    },
    "WOULD_ENTITY_BE_OCCLUDED": {
      "prefix": "WOULD_ENTITY_BE_OCCLUDED()",
      "body": [
        "WOULD_ENTITY_BE_OCCLUDED(${1:Hash entityModelHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL p4})"
      ],
      "description": "WOULD_ENTITY_BE_OCCLUDED()"
    },
    "IS_ENTITY_WAITING_FOR_WORLD_COLLISION": {
      "prefix": "IS_ENTITY_WAITING_FOR_WORLD_COLLISION()",
      "body": ["IS_ENTITY_WAITING_FOR_WORLD_COLLISION(${1:Entity entity})"],
      "description": "IS_ENTITY_WAITING_FOR_WORLD_COLLISION()"
    },
    "APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS": {
      "prefix": "APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS()",
      "body": [
        "APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(${1:Entity entity}, ${2:int forceType}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:BOOL p5}, ${7:BOOL isDirectionRel}, ${8:BOOL isForceRel}, ${9:BOOL p8})"
      ],
      "description": "APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS()"
    },
    "APPLY_FORCE_TO_ENTITY": {
      "prefix": "APPLY_FORCE_TO_ENTITY()",
      "body": [
        "APPLY_FORCE_TO_ENTITY(${1:Entity entity}, ${2:int forceFlags}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float offX}, ${7:float offY}, ${8:float offZ}, ${9:int boneIndex}, ${10:BOOL isDirectionRel}, ${11:BOOL ignoreUpVec}, ${12:BOOL isForceRel}, ${13:BOOL p12}, ${14:BOOL p13})"
      ],
      "description": "APPLY_FORCE_TO_ENTITY()"
    },
    "ATTACH_ENTITY_TO_ENTITY": {
      "prefix": "ATTACH_ENTITY_TO_ENTITY()",
      "body": [
        "ATTACH_ENTITY_TO_ENTITY(${1:Entity entity1}, ${2:Entity entity2}, ${3:int boneIndex}, ${4:float xPos}, ${5:float yPos}, ${6:float zPos}, ${7:float xRot}, ${8:float yRot}, ${9:float zRot}, ${10:BOOL p9}, ${11:BOOL useSoftPinning}, ${12:BOOL collision}, ${13:BOOL isPed}, ${14:int vertexIndex}, ${15:BOOL fixedRot}, ${16:Any p15})"
      ],
      "description": "ATTACH_ENTITY_TO_ENTITY()"
    },
    "ATTACH_ENTITY_BONE_TO_ENTITY_BONE": {
      "prefix": "ATTACH_ENTITY_BONE_TO_ENTITY_BONE()",
      "body": [
        "ATTACH_ENTITY_BONE_TO_ENTITY_BONE(${1:Entity entity1}, ${2:Entity entity2}, ${3:int boneIndex1}, ${4:int boneIndex2}, ${5:BOOL p4}, ${6:BOOL p5})"
      ],
      "description": "ATTACH_ENTITY_BONE_TO_ENTITY_BONE()"
    },
    "ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD": {
      "prefix": "ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD()",
      "body": [
        "ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD(${1:Entity entity1}, ${2:Entity entity2}, ${3:int boneIndex1}, ${4:int boneIndex2}, ${5:BOOL p4}, ${6:BOOL p5})"
      ],
      "description": "ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD()"
    },
    "ATTACH_ENTITY_TO_ENTITY_PHYSICALLY": {
      "prefix": "ATTACH_ENTITY_TO_ENTITY_PHYSICALLY()",
      "body": [
        "ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(${1:Entity entity1}, ${2:Entity entity2}, ${3:int boneIndex1}, ${4:int boneIndex2}, ${5:float xPos1}, ${6:float yPos1}, ${7:float zPos1}, ${8:float xPos2}, ${9:float yPos2}, ${10:float zPos2}, ${11:float xRot}, ${12:float yRot}, ${13:float zRot}, ${14:float breakForce}, ${15:BOOL fixedRot}, ${16:BOOL p15}, ${17:BOOL collision}, ${18:BOOL p17}, ${19:int p18})"
      ],
      "description": "ATTACH_ENTITY_TO_ENTITY_PHYSICALLY()"
    },
    "ATTACH_ENTITY_TO_ENTITY_PHYSICALLY_OVERRIDE_INVERSE_MASS": {
      "prefix": "ATTACH_ENTITY_TO_ENTITY_PHYSICALLY_OVERRIDE_INVERSE_MASS()",
      "body": [
        "ATTACH_ENTITY_TO_ENTITY_PHYSICALLY_OVERRIDE_INVERSE_MASS(${1:Entity firstEntityIndex}, ${2:Entity secondEntityIndex}, ${3:int firstEntityBoneIndex}, ${4:int secondEntityBoneIndex}, ${5:float secondEntityOffsetX}, ${6:float secondEntityOffsetY}, ${7:float secondEntityOffsetZ}, ${8:float firstEntityOffsetX}, ${9:float firstEntityOffsetY}, ${10:float firstEntityOffsetZ}, ${11:float vecRotationX}, ${12:float vecRotationY}, ${13:float vecRotationZ}, ${14:float physicalStrength}, ${15:BOOL constrainRotation}, ${16:BOOL doInitialWarp}, ${17:BOOL collideWithEntity}, ${18:BOOL addInitialSeperation}, ${19:int rotOrder}, ${20:float invMassScaleA}, ${21:float invMassScaleB})"
      ],
      "description": "ATTACH_ENTITY_TO_ENTITY_PHYSICALLY_OVERRIDE_INVERSE_MASS()"
    },
    "PROCESS_ENTITY_ATTACHMENTS": {
      "prefix": "PROCESS_ENTITY_ATTACHMENTS()",
      "body": ["PROCESS_ENTITY_ATTACHMENTS(${1:Entity entity})"],
      "description": "PROCESS_ENTITY_ATTACHMENTS()"
    },
    "GET_ENTITY_BONE_INDEX_BY_NAME": {
      "prefix": "GET_ENTITY_BONE_INDEX_BY_NAME()",
      "body": [
        "GET_ENTITY_BONE_INDEX_BY_NAME(${1:Entity entity}, ${2:const char* boneName})"
      ],
      "description": "GET_ENTITY_BONE_INDEX_BY_NAME()"
    },
    "CLEAR_ENTITY_LAST_DAMAGE_ENTITY": {
      "prefix": "CLEAR_ENTITY_LAST_DAMAGE_ENTITY()",
      "body": ["CLEAR_ENTITY_LAST_DAMAGE_ENTITY(${1:Entity entity})"],
      "description": "CLEAR_ENTITY_LAST_DAMAGE_ENTITY()"
    },
    "DELETE_ENTITY": {
      "prefix": "DELETE_ENTITY()",
      "body": ["DELETE_ENTITY(${1:Entity* entity})"],
      "description": "DELETE_ENTITY()"
    },
    "DETACH_ENTITY": {
      "prefix": "DETACH_ENTITY()",
      "body": [
        "DETACH_ENTITY(${1:Entity entity}, ${2:BOOL dynamic}, ${3:BOOL collision})"
      ],
      "description": "DETACH_ENTITY()"
    },
    "FREEZE_ENTITY_POSITION": {
      "prefix": "FREEZE_ENTITY_POSITION()",
      "body": ["FREEZE_ENTITY_POSITION(${1:Entity entity}, ${2:BOOL toggle})"],
      "description": "FREEZE_ENTITY_POSITION()"
    },
    "SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION": {
      "prefix": "SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION()",
      "body": [
        "SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION()"
    },
    "PLAY_ENTITY_ANIM": {
      "prefix": "PLAY_ENTITY_ANIM()",
      "body": [
        "PLAY_ENTITY_ANIM(${1:Entity entity}, ${2:const char* animName}, ${3:const char* animDict}, ${4:float p3}, ${5:BOOL loop}, ${6:BOOL stayInAnim}, ${7:BOOL p6}, ${8:float delta}, ${9:Any bitset})"
      ],
      "description": "PLAY_ENTITY_ANIM()"
    },
    "PLAY_SYNCHRONIZED_ENTITY_ANIM": {
      "prefix": "PLAY_SYNCHRONIZED_ENTITY_ANIM()",
      "body": [
        "PLAY_SYNCHRONIZED_ENTITY_ANIM(${1:Entity entity}, ${2:int syncedScene}, ${3:const char* animation}, ${4:const char* propName}, ${5:float p4}, ${6:float p5}, ${7:Any p6}, ${8:float p7})"
      ],
      "description": "PLAY_SYNCHRONIZED_ENTITY_ANIM()"
    },
    "PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM": {
      "prefix": "PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM()",
      "body": [
        "PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:Any y2}, ${6:float z2}, ${7:const char* p6}, ${8:const char* p7}, ${9:float p8}, ${10:float p9}, ${11:Any p10}, ${12:float p11})"
      ],
      "description": "PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM()"
    },
    "STOP_SYNCHRONIZED_MAP_ENTITY_ANIM": {
      "prefix": "STOP_SYNCHRONIZED_MAP_ENTITY_ANIM()",
      "body": [
        "STOP_SYNCHRONIZED_MAP_ENTITY_ANIM(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:Any y2}, ${6:float z2})"
      ],
      "description": "STOP_SYNCHRONIZED_MAP_ENTITY_ANIM()"
    },
    "STOP_ENTITY_ANIM": {
      "prefix": "STOP_ENTITY_ANIM()",
      "body": [
        "STOP_ENTITY_ANIM(${1:Entity entity}, ${2:const char* animation}, ${3:const char* animGroup}, ${4:float p3})"
      ],
      "description": "STOP_ENTITY_ANIM()"
    },
    "STOP_SYNCHRONIZED_ENTITY_ANIM": {
      "prefix": "STOP_SYNCHRONIZED_ENTITY_ANIM()",
      "body": [
        "STOP_SYNCHRONIZED_ENTITY_ANIM(${1:Entity entity}, ${2:float p1}, ${3:BOOL p2})"
      ],
      "description": "STOP_SYNCHRONIZED_ENTITY_ANIM()"
    },
    "HAS_ANIM_EVENT_FIRED": {
      "prefix": "HAS_ANIM_EVENT_FIRED()",
      "body": ["HAS_ANIM_EVENT_FIRED(${1:Entity entity}, ${2:Hash actionHash})"],
      "description": "HAS_ANIM_EVENT_FIRED()"
    },
    "FIND_ANIM_EVENT_PHASE": {
      "prefix": "FIND_ANIM_EVENT_PHASE()",
      "body": [
        "FIND_ANIM_EVENT_PHASE(${1:const char* animDictionary}, ${2:const char* animName}, ${3:const char* p2}, ${4:Any* p3}, ${5:Any* p4})"
      ],
      "description": "FIND_ANIM_EVENT_PHASE()"
    },
    "SET_ENTITY_ANIM_CURRENT_TIME": {
      "prefix": "SET_ENTITY_ANIM_CURRENT_TIME()",
      "body": [
        "SET_ENTITY_ANIM_CURRENT_TIME(${1:Entity entity}, ${2:const char* animDictionary}, ${3:const char* animName}, ${4:float time})"
      ],
      "description": "SET_ENTITY_ANIM_CURRENT_TIME()"
    },
    "SET_ENTITY_ANIM_SPEED": {
      "prefix": "SET_ENTITY_ANIM_SPEED()",
      "body": [
        "SET_ENTITY_ANIM_SPEED(${1:Entity entity}, ${2:const char* animDictionary}, ${3:const char* animName}, ${4:float speedMultiplier})"
      ],
      "description": "SET_ENTITY_ANIM_SPEED()"
    },
    "SET_ENTITY_AS_MISSION_ENTITY": {
      "prefix": "SET_ENTITY_AS_MISSION_ENTITY()",
      "body": [
        "SET_ENTITY_AS_MISSION_ENTITY(${1:Entity entity}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "SET_ENTITY_AS_MISSION_ENTITY()"
    },
    "SET_ENTITY_AS_NO_LONGER_NEEDED": {
      "prefix": "SET_ENTITY_AS_NO_LONGER_NEEDED()",
      "body": ["SET_ENTITY_AS_NO_LONGER_NEEDED(${1:Entity* entity})"],
      "description": "SET_ENTITY_AS_NO_LONGER_NEEDED()"
    },
    "SET_PED_AS_NO_LONGER_NEEDED": {
      "prefix": "SET_PED_AS_NO_LONGER_NEEDED()",
      "body": ["SET_PED_AS_NO_LONGER_NEEDED(${1:Ped* ped})"],
      "description": "SET_PED_AS_NO_LONGER_NEEDED()"
    },
    "SET_VEHICLE_AS_NO_LONGER_NEEDED": {
      "prefix": "SET_VEHICLE_AS_NO_LONGER_NEEDED()",
      "body": ["SET_VEHICLE_AS_NO_LONGER_NEEDED(${1:Vehicle* vehicle})"],
      "description": "SET_VEHICLE_AS_NO_LONGER_NEEDED()"
    },
    "SET_OBJECT_AS_NO_LONGER_NEEDED": {
      "prefix": "SET_OBJECT_AS_NO_LONGER_NEEDED()",
      "body": ["SET_OBJECT_AS_NO_LONGER_NEEDED(${1:Object* object})"],
      "description": "SET_OBJECT_AS_NO_LONGER_NEEDED()"
    },
    "SET_ENTITY_CAN_BE_DAMAGED": {
      "prefix": "SET_ENTITY_CAN_BE_DAMAGED()",
      "body": ["SET_ENTITY_CAN_BE_DAMAGED(${1:Entity entity}, ${2:BOOL toggle})"],
      "description": "SET_ENTITY_CAN_BE_DAMAGED()"
    },
    "GET_ENTITY_CAN_BE_DAMAGED": {
      "prefix": "GET_ENTITY_CAN_BE_DAMAGED()",
      "body": ["GET_ENTITY_CAN_BE_DAMAGED(${1:Entity entity})"],
      "description": "GET_ENTITY_CAN_BE_DAMAGED()"
    },
    "SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP": {
      "prefix": "SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP()",
      "body": [
        "SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(${1:Entity entity}, ${2:BOOL bCanBeDamaged}, ${3:int relGroup})"
      ],
      "description": "SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP()"
    },
    "SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS": {
      "prefix": "SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS()",
      "body": [
        "SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS()"
    },
    "SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS": {
      "prefix": "SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS()",
      "body": [
        "SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS()"
    },
    "SET_ENTITY_COLLISION": {
      "prefix": "SET_ENTITY_COLLISION()",
      "body": [
        "SET_ENTITY_COLLISION(${1:Entity entity}, ${2:BOOL toggle}, ${3:BOOL keepPhysics})"
      ],
      "description": "SET_ENTITY_COLLISION()"
    },
    "GET_ENTITY_COLLISION_DISABLED": {
      "prefix": "GET_ENTITY_COLLISION_DISABLED()",
      "body": ["GET_ENTITY_COLLISION_DISABLED(${1:Entity entity})"],
      "description": "GET_ENTITY_COLLISION_DISABLED()"
    },
    "SET_ENTITY_COMPLETELY_DISABLE_COLLISION": {
      "prefix": "SET_ENTITY_COMPLETELY_DISABLE_COLLISION()",
      "body": [
        "SET_ENTITY_COMPLETELY_DISABLE_COLLISION(${1:Entity entity}, ${2:BOOL toggle}, ${3:BOOL keepPhysics})"
      ],
      "description": "SET_ENTITY_COMPLETELY_DISABLE_COLLISION()"
    },
    "SET_ENTITY_COORDS": {
      "prefix": "SET_ENTITY_COORDS()",
      "body": [
        "SET_ENTITY_COORDS(${1:Entity entity}, ${2:float xPos}, ${3:float yPos}, ${4:float zPos}, ${5:BOOL xAxis}, ${6:BOOL yAxis}, ${7:BOOL zAxis}, ${8:BOOL clearArea})"
      ],
      "description": "SET_ENTITY_COORDS()"
    },
    "SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET": {
      "prefix": "SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET()",
      "body": [
        "SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET(${1:Entity entity}, ${2:float xPos}, ${3:float yPos}, ${4:float zPos}, ${5:BOOL alive}, ${6:BOOL deadFlag}, ${7:BOOL ragdollFlag}, ${8:BOOL clearArea})"
      ],
      "description": "SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET()"
    },
    "SET_ENTITY_COORDS_NO_OFFSET": {
      "prefix": "SET_ENTITY_COORDS_NO_OFFSET()",
      "body": [
        "SET_ENTITY_COORDS_NO_OFFSET(${1:Entity entity}, ${2:float xPos}, ${3:float yPos}, ${4:float zPos}, ${5:BOOL xAxis}, ${6:BOOL yAxis}, ${7:BOOL zAxis})"
      ],
      "description": "SET_ENTITY_COORDS_NO_OFFSET()"
    },
    "SET_ENTITY_DYNAMIC": {
      "prefix": "SET_ENTITY_DYNAMIC()",
      "body": ["SET_ENTITY_DYNAMIC(${1:Entity entity}, ${2:BOOL toggle})"],
      "description": "SET_ENTITY_DYNAMIC()"
    },
    "SET_ENTITY_HEADING": {
      "prefix": "SET_ENTITY_HEADING()",
      "body": ["SET_ENTITY_HEADING(${1:Entity entity}, ${2:float heading})"],
      "description": "SET_ENTITY_HEADING()"
    },
    "SET_ENTITY_HEALTH": {
      "prefix": "SET_ENTITY_HEALTH()",
      "body": [
        "SET_ENTITY_HEALTH(${1:Entity entity}, ${2:int health}, ${3:Entity instigator}, ${4:Hash weaponType})"
      ],
      "description": "SET_ENTITY_HEALTH()"
    },
    "SET_ENTITY_INVINCIBLE": {
      "prefix": "SET_ENTITY_INVINCIBLE()",
      "body": ["SET_ENTITY_INVINCIBLE(${1:Entity entity}, ${2:BOOL toggle})"],
      "description": "SET_ENTITY_INVINCIBLE()"
    },
    "SET_ENTITY_IS_TARGET_PRIORITY": {
      "prefix": "SET_ENTITY_IS_TARGET_PRIORITY()",
      "body": [
        "SET_ENTITY_IS_TARGET_PRIORITY(${1:Entity entity}, ${2:BOOL p1}, ${3:float p2})"
      ],
      "description": "SET_ENTITY_IS_TARGET_PRIORITY()"
    },
    "SET_ENTITY_LIGHTS": {
      "prefix": "SET_ENTITY_LIGHTS()",
      "body": ["SET_ENTITY_LIGHTS(${1:Entity entity}, ${2:BOOL toggle})"],
      "description": "SET_ENTITY_LIGHTS()"
    },
    "SET_ENTITY_LOAD_COLLISION_FLAG": {
      "prefix": "SET_ENTITY_LOAD_COLLISION_FLAG()",
      "body": [
        "SET_ENTITY_LOAD_COLLISION_FLAG(${1:Entity entity}, ${2:BOOL toggle}, ${3:Any p2})"
      ],
      "description": "SET_ENTITY_LOAD_COLLISION_FLAG()"
    },
    "HAS_COLLISION_LOADED_AROUND_ENTITY": {
      "prefix": "HAS_COLLISION_LOADED_AROUND_ENTITY()",
      "body": ["HAS_COLLISION_LOADED_AROUND_ENTITY(${1:Entity entity})"],
      "description": "HAS_COLLISION_LOADED_AROUND_ENTITY()"
    },
    "SET_ENTITY_MAX_SPEED": {
      "prefix": "SET_ENTITY_MAX_SPEED()",
      "body": ["SET_ENTITY_MAX_SPEED(${1:Entity entity}, ${2:float speed})"],
      "description": "SET_ENTITY_MAX_SPEED()"
    },
    "SET_ENTITY_ONLY_DAMAGED_BY_PLAYER": {
      "prefix": "SET_ENTITY_ONLY_DAMAGED_BY_PLAYER()",
      "body": [
        "SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "SET_ENTITY_ONLY_DAMAGED_BY_PLAYER()"
    },
    "SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP": {
      "prefix": "SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP()",
      "body": [
        "SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(${1:Entity entity}, ${2:BOOL p1}, ${3:Any p2})"
      ],
      "description": "SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP()"
    },
    "SET_ENTITY_PROOFS": {
      "prefix": "SET_ENTITY_PROOFS()",
      "body": [
        "SET_ENTITY_PROOFS(${1:Entity entity}, ${2:BOOL bulletProof}, ${3:BOOL fireProof}, ${4:BOOL explosionProof}, ${5:BOOL collisionProof}, ${6:BOOL meleeProof}, ${7:BOOL steamProof}, ${8:BOOL p7}, ${9:BOOL waterProof})"
      ],
      "description": "SET_ENTITY_PROOFS()"
    },
    "GET_ENTITY_PROOFS": {
      "prefix": "GET_ENTITY_PROOFS()",
      "body": [
        "GET_ENTITY_PROOFS(${1:Entity entity}, ${2:BOOL* bulletProof}, ${3:BOOL* fireProof}, ${4:BOOL* explosionProof}, ${5:BOOL* collisionProof}, ${6:BOOL* meleeProof}, ${7:BOOL* steamProof}, ${8:BOOL* p7}, ${9:BOOL* drownProof})"
      ],
      "description": "GET_ENTITY_PROOFS()"
    },
    "SET_ENTITY_QUATERNION": {
      "prefix": "SET_ENTITY_QUATERNION()",
      "body": [
        "SET_ENTITY_QUATERNION(${1:Entity entity}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float w})"
      ],
      "description": "SET_ENTITY_QUATERNION()"
    },
    "SET_ENTITY_RECORDS_COLLISIONS": {
      "prefix": "SET_ENTITY_RECORDS_COLLISIONS()",
      "body": [
        "SET_ENTITY_RECORDS_COLLISIONS(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "SET_ENTITY_RECORDS_COLLISIONS()"
    },
    "SET_ENTITY_ROTATION": {
      "prefix": "SET_ENTITY_ROTATION()",
      "body": [
        "SET_ENTITY_ROTATION(${1:Entity entity}, ${2:float pitch}, ${3:float roll}, ${4:float yaw}, ${5:int rotationOrder}, ${6:BOOL p5})"
      ],
      "description": "SET_ENTITY_ROTATION()"
    },
    "SET_ENTITY_VISIBLE": {
      "prefix": "SET_ENTITY_VISIBLE()",
      "body": [
        "SET_ENTITY_VISIBLE(${1:Entity entity}, ${2:BOOL toggle}, ${3:BOOL p2})"
      ],
      "description": "SET_ENTITY_VISIBLE()"
    },
    "SET_ENTITY_WATER_REFLECTION_FLAG": {
      "prefix": "SET_ENTITY_WATER_REFLECTION_FLAG()",
      "body": [
        "SET_ENTITY_WATER_REFLECTION_FLAG(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "SET_ENTITY_WATER_REFLECTION_FLAG()"
    },
    "SET_ENTITY_MIRROR_REFLECTION_FLAG": {
      "prefix": "SET_ENTITY_MIRROR_REFLECTION_FLAG()",
      "body": [
        "SET_ENTITY_MIRROR_REFLECTION_FLAG(${1:Entity entity}, ${2:BOOL p1})"
      ],
      "description": "SET_ENTITY_MIRROR_REFLECTION_FLAG()"
    },
    "SET_ENTITY_VELOCITY": {
      "prefix": "SET_ENTITY_VELOCITY()",
      "body": [
        "SET_ENTITY_VELOCITY(${1:Entity entity}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "SET_ENTITY_VELOCITY()"
    },
    "SET_ENTITY_ANGULAR_VELOCITY": {
      "prefix": "SET_ENTITY_ANGULAR_VELOCITY()",
      "body": [
        "SET_ENTITY_ANGULAR_VELOCITY(${1:Entity entity}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "SET_ENTITY_ANGULAR_VELOCITY()"
    },
    "SET_ENTITY_HAS_GRAVITY": {
      "prefix": "SET_ENTITY_HAS_GRAVITY()",
      "body": ["SET_ENTITY_HAS_GRAVITY(${1:Entity entity}, ${2:BOOL toggle})"],
      "description": "SET_ENTITY_HAS_GRAVITY()"
    },
    "SET_ENTITY_LOD_DIST": {
      "prefix": "SET_ENTITY_LOD_DIST()",
      "body": ["SET_ENTITY_LOD_DIST(${1:Entity entity}, ${2:int value})"],
      "description": "SET_ENTITY_LOD_DIST()"
    },
    "GET_ENTITY_LOD_DIST": {
      "prefix": "GET_ENTITY_LOD_DIST()",
      "body": ["GET_ENTITY_LOD_DIST(${1:Entity entity})"],
      "description": "GET_ENTITY_LOD_DIST()"
    },
    "SET_ENTITY_ALPHA": {
      "prefix": "SET_ENTITY_ALPHA()",
      "body": [
        "SET_ENTITY_ALPHA(${1:Entity entity}, ${2:int alphaLevel}, ${3:BOOL skin})"
      ],
      "description": "SET_ENTITY_ALPHA()"
    },
    "GET_ENTITY_ALPHA": {
      "prefix": "GET_ENTITY_ALPHA()",
      "body": ["GET_ENTITY_ALPHA(${1:Entity entity})"],
      "description": "GET_ENTITY_ALPHA()"
    },
    "RESET_ENTITY_ALPHA": {
      "prefix": "RESET_ENTITY_ALPHA()",
      "body": ["RESET_ENTITY_ALPHA(${1:Entity entity})"],
      "description": "RESET_ENTITY_ALPHA()"
    },
    "RESET_PICKUP_ENTITY_GLOW": {
      "prefix": "RESET_PICKUP_ENTITY_GLOW()",
      "body": ["RESET_PICKUP_ENTITY_GLOW(${1:Entity entity})"],
      "description": "RESET_PICKUP_ENTITY_GLOW()"
    },
    "SET_PICKUP_COLLIDES_WITH_PROJECTILES": {
      "prefix": "SET_PICKUP_COLLIDES_WITH_PROJECTILES()",
      "body": ["SET_PICKUP_COLLIDES_WITH_PROJECTILES(${1:Any p0}, ${2:Any p1})"],
      "description": "SET_PICKUP_COLLIDES_WITH_PROJECTILES()"
    },
    "SET_ENTITY_SORT_BIAS": {
      "prefix": "SET_ENTITY_SORT_BIAS()",
      "body": ["SET_ENTITY_SORT_BIAS(${1:Entity entity}, ${2:float p1})"],
      "description": "SET_ENTITY_SORT_BIAS()"
    },
    "SET_ENTITY_ALWAYS_PRERENDER": {
      "prefix": "SET_ENTITY_ALWAYS_PRERENDER()",
      "body": [
        "SET_ENTITY_ALWAYS_PRERENDER(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "SET_ENTITY_ALWAYS_PRERENDER()"
    },
    "SET_ENTITY_RENDER_SCORCHED": {
      "prefix": "SET_ENTITY_RENDER_SCORCHED()",
      "body": [
        "SET_ENTITY_RENDER_SCORCHED(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "SET_ENTITY_RENDER_SCORCHED()"
    },
    "SET_ENTITY_TRAFFICLIGHT_OVERRIDE": {
      "prefix": "SET_ENTITY_TRAFFICLIGHT_OVERRIDE()",
      "body": [
        "SET_ENTITY_TRAFFICLIGHT_OVERRIDE(${1:Entity entity}, ${2:int state})"
      ],
      "description": "SET_ENTITY_TRAFFICLIGHT_OVERRIDE()"
    },
    "SET_ENTITY_IS_IN_VEHICLE": {
      "prefix": "SET_ENTITY_IS_IN_VEHICLE()",
      "body": ["SET_ENTITY_IS_IN_VEHICLE(${1:Entity entity})"],
      "description": "SET_ENTITY_IS_IN_VEHICLE()"
    },
    "CREATE_MODEL_SWAP": {
      "prefix": "CREATE_MODEL_SWAP()",
      "body": [
        "CREATE_MODEL_SWAP(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash originalModel}, ${6:Hash newModel}, ${7:BOOL p6})"
      ],
      "description": "CREATE_MODEL_SWAP()"
    },
    "REMOVE_MODEL_SWAP": {
      "prefix": "REMOVE_MODEL_SWAP()",
      "body": [
        "REMOVE_MODEL_SWAP(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash originalModel}, ${6:Hash newModel}, ${7:BOOL p6})"
      ],
      "description": "REMOVE_MODEL_SWAP()"
    },
    "CREATE_MODEL_HIDE": {
      "prefix": "CREATE_MODEL_HIDE()",
      "body": [
        "CREATE_MODEL_HIDE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash modelHash}, ${6:BOOL p5})"
      ],
      "description": "CREATE_MODEL_HIDE()"
    },
    "CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS": {
      "prefix": "CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS()",
      "body": [
        "CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash modelHash}, ${6:BOOL p5})"
      ],
      "description": "CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS()"
    },
    "REMOVE_MODEL_HIDE": {
      "prefix": "REMOVE_MODEL_HIDE()",
      "body": [
        "REMOVE_MODEL_HIDE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash modelHash}, ${6:BOOL p5})"
      ],
      "description": "REMOVE_MODEL_HIDE()"
    },
    "CREATE_FORCED_OBJECT": {
      "prefix": "CREATE_FORCED_OBJECT()",
      "body": [
        "CREATE_FORCED_OBJECT(${1:float x}, ${2:float y}, ${3:float z}, ${4:Any p3}, ${5:Hash modelHash}, ${6:BOOL p5})"
      ],
      "description": "CREATE_FORCED_OBJECT()"
    },
    "REMOVE_FORCED_OBJECT": {
      "prefix": "REMOVE_FORCED_OBJECT()",
      "body": [
        "REMOVE_FORCED_OBJECT(${1:float x}, ${2:float y}, ${3:float z}, ${4:float p3}, ${5:Hash modelHash})"
      ],
      "description": "REMOVE_FORCED_OBJECT()"
    },
    "SET_ENTITY_NO_COLLISION_ENTITY": {
      "prefix": "SET_ENTITY_NO_COLLISION_ENTITY()",
      "body": [
        "SET_ENTITY_NO_COLLISION_ENTITY(${1:Entity entity1}, ${2:Entity entity2}, ${3:BOOL thisFrameOnly})"
      ],
      "description": "SET_ENTITY_NO_COLLISION_ENTITY()"
    },
    "SET_ENTITY_MOTION_BLUR": {
      "prefix": "SET_ENTITY_MOTION_BLUR()",
      "body": ["SET_ENTITY_MOTION_BLUR(${1:Entity entity}, ${2:BOOL toggle})"],
      "description": "SET_ENTITY_MOTION_BLUR()"
    },
    "SET_CAN_AUTO_VAULT_ON_ENTITY": {
      "prefix": "SET_CAN_AUTO_VAULT_ON_ENTITY()",
      "body": [
        "SET_CAN_AUTO_VAULT_ON_ENTITY(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "SET_CAN_AUTO_VAULT_ON_ENTITY()"
    },
    "SET_CAN_CLIMB_ON_ENTITY": {
      "prefix": "SET_CAN_CLIMB_ON_ENTITY()",
      "body": ["SET_CAN_CLIMB_ON_ENTITY(${1:Entity entity}, ${2:BOOL toggle})"],
      "description": "SET_CAN_CLIMB_ON_ENTITY()"
    },
    "SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE": {
      "prefix": "SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE()",
      "body": [
        "SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE()"
    },
    "SET_ENTITY_NOWEAPONDECALS": {
      "prefix": "SET_ENTITY_NOWEAPONDECALS()",
      "body": ["SET_ENTITY_NOWEAPONDECALS(${1:Entity entity}, ${2:BOOL p1})"],
      "description": "SET_ENTITY_NOWEAPONDECALS()"
    },
    "SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION": {
      "prefix": "SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION()",
      "body": [
        "SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION(${1:Entity entity}, ${2:BOOL p1})"
      ],
      "description": "SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION()"
    },
    "GET_ENTITY_BONE_ROTATION": {
      "prefix": "GET_ENTITY_BONE_ROTATION()",
      "body": [
        "GET_ENTITY_BONE_ROTATION(${1:Entity entity}, ${2:int boneIndex})"
      ],
      "description": "GET_ENTITY_BONE_ROTATION()"
    },
    "GET_ENTITY_BONE_POSTION": {
      "prefix": "GET_ENTITY_BONE_POSTION()",
      "body": ["GET_ENTITY_BONE_POSTION(${1:Entity entity}, ${2:int boneIndex})"],
      "description": "GET_ENTITY_BONE_POSTION()"
    },
    "GET_ENTITY_BONE_OBJECT_ROTATION": {
      "prefix": "GET_ENTITY_BONE_OBJECT_ROTATION()",
      "body": [
        "GET_ENTITY_BONE_OBJECT_ROTATION(${1:Entity entity}, ${2:int boneIndex})"
      ],
      "description": "GET_ENTITY_BONE_OBJECT_ROTATION()"
    },
    "GET_ENTITY_BONE_OBJECT_POSTION": {
      "prefix": "GET_ENTITY_BONE_OBJECT_POSTION()",
      "body": [
        "GET_ENTITY_BONE_OBJECT_POSTION(${1:Entity entity}, ${2:int boneIndex})"
      ],
      "description": "GET_ENTITY_BONE_OBJECT_POSTION()"
    },
    "GET_ENTITY_BONE_COUNT": {
      "prefix": "GET_ENTITY_BONE_COUNT()",
      "body": ["GET_ENTITY_BONE_COUNT(${1:Entity entity})"],
      "description": "GET_ENTITY_BONE_COUNT()"
    },
    "ENABLE_ENTITY_BULLET_COLLISION": {
      "prefix": "ENABLE_ENTITY_BULLET_COLLISION()",
      "body": ["ENABLE_ENTITY_BULLET_COLLISION(${1:Entity entity})"],
      "description": "ENABLE_ENTITY_BULLET_COLLISION()"
    },
    "SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY": {
      "prefix": "SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY()",
      "body": [
        "SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY(${1:Entity entity1}, ${2:Entity entity2})"
      ],
      "description": "SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY()"
    },
    "SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY": {
      "prefix": "SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY()",
      "body": [
        "SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY(${1:Entity entity1}, ${2:Entity entity2})"
      ],
      "description": "SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY()"
    },
    "SET_ALLOW_MIGRATE_TO_SPECTATOR": {
      "prefix": "SET_ALLOW_MIGRATE_TO_SPECTATOR()",
      "body": ["SET_ALLOW_MIGRATE_TO_SPECTATOR(${1:Entity entity}, ${2:Any p1})"],
      "description": "SET_ALLOW_MIGRATE_TO_SPECTATOR()"
    },
    "GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY": {
      "prefix": "GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY()",
      "body": [
        "GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(${1:Entity entity}, ${2:Hash modelHash})"
      ],
      "description": "GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY()"
    },
    "SET_PICK_UP_BY_CARGOBOB_DISABLED": {
      "prefix": "SET_PICK_UP_BY_CARGOBOB_DISABLED()",
      "body": [
        "SET_PICK_UP_BY_CARGOBOB_DISABLED(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "SET_PICK_UP_BY_CARGOBOB_DISABLED()"
    },
    "SET_DECISION_MAKER": {
      "prefix": "SET_DECISION_MAKER()",
      "body": ["SET_DECISION_MAKER(${1:Ped ped}, ${2:Hash name})"],
      "description": "SET_DECISION_MAKER()"
    },
    "CLEAR_DECISION_MAKER_EVENT_RESPONSE": {
      "prefix": "CLEAR_DECISION_MAKER_EVENT_RESPONSE()",
      "body": [
        "CLEAR_DECISION_MAKER_EVENT_RESPONSE(${1:Hash name}, ${2:int eventType})"
      ],
      "description": "CLEAR_DECISION_MAKER_EVENT_RESPONSE()"
    },
    "BLOCK_DECISION_MAKER_EVENT": {
      "prefix": "BLOCK_DECISION_MAKER_EVENT()",
      "body": ["BLOCK_DECISION_MAKER_EVENT(${1:Hash name}, ${2:int eventType})"],
      "description": "BLOCK_DECISION_MAKER_EVENT()"
    },
    "UNBLOCK_DECISION_MAKER_EVENT": {
      "prefix": "UNBLOCK_DECISION_MAKER_EVENT()",
      "body": [
        "UNBLOCK_DECISION_MAKER_EVENT(${1:Hash name}, ${2:int eventType})"
      ],
      "description": "UNBLOCK_DECISION_MAKER_EVENT()"
    },
    "ADD_SHOCKING_EVENT_AT_POSITION": {
      "prefix": "ADD_SHOCKING_EVENT_AT_POSITION()",
      "body": [
        "ADD_SHOCKING_EVENT_AT_POSITION(${1:int eventType}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float duration})"
      ],
      "description": "ADD_SHOCKING_EVENT_AT_POSITION()"
    },
    "ADD_SHOCKING_EVENT_FOR_ENTITY": {
      "prefix": "ADD_SHOCKING_EVENT_FOR_ENTITY()",
      "body": [
        "ADD_SHOCKING_EVENT_FOR_ENTITY(${1:int eventType}, ${2:Entity entity}, ${3:float duration})"
      ],
      "description": "ADD_SHOCKING_EVENT_FOR_ENTITY()"
    },
    "IS_SHOCKING_EVENT_IN_SPHERE": {
      "prefix": "IS_SHOCKING_EVENT_IN_SPHERE()",
      "body": [
        "IS_SHOCKING_EVENT_IN_SPHERE(${1:int eventType}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius})"
      ],
      "description": "IS_SHOCKING_EVENT_IN_SPHERE()"
    },
    "REMOVE_SHOCKING_EVENT": {
      "prefix": "REMOVE_SHOCKING_EVENT()",
      "body": ["REMOVE_SHOCKING_EVENT(${1:ScrHandle event})"],
      "description": "REMOVE_SHOCKING_EVENT()"
    },
    "REMOVE_ALL_SHOCKING_EVENTS": {
      "prefix": "REMOVE_ALL_SHOCKING_EVENTS()",
      "body": ["REMOVE_ALL_SHOCKING_EVENTS(${1:BOOL p0})"],
      "description": "REMOVE_ALL_SHOCKING_EVENTS()"
    },
    "REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS": {
      "prefix": "REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS()",
      "body": ["REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS()"],
      "description": "REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS()"
    },
    "SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME": {
      "prefix": "SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME()",
      "body": ["SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME()"],
      "description": "SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME()"
    },
    "SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME": {
      "prefix": "SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME()",
      "body": ["SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME(${1:int eventType})"],
      "description": "SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME()"
    },
    "SUPPRESS_AGITATION_EVENTS_NEXT_FRAME": {
      "prefix": "SUPPRESS_AGITATION_EVENTS_NEXT_FRAME()",
      "body": ["SUPPRESS_AGITATION_EVENTS_NEXT_FRAME()"],
      "description": "SUPPRESS_AGITATION_EVENTS_NEXT_FRAME()"
    },
    "GET_NUM_TATTOO_SHOP_DLC_ITEMS": {
      "prefix": "GET_NUM_TATTOO_SHOP_DLC_ITEMS()",
      "body": ["GET_NUM_TATTOO_SHOP_DLC_ITEMS(${1:int character})"],
      "description": "GET_NUM_TATTOO_SHOP_DLC_ITEMS()"
    },
    "GET_TATTOO_SHOP_DLC_ITEM_DATA": {
      "prefix": "GET_TATTOO_SHOP_DLC_ITEM_DATA()",
      "body": [
        "GET_TATTOO_SHOP_DLC_ITEM_DATA(${1:int characterType}, ${2:int decorationIndex}, ${3:Any* outComponent})"
      ],
      "description": "GET_TATTOO_SHOP_DLC_ITEM_DATA()"
    },
    "GET_TATTOO_SHOP_DLC_ITEM_INDEX": {
      "prefix": "GET_TATTOO_SHOP_DLC_ITEM_INDEX()",
      "body": [
        "GET_TATTOO_SHOP_DLC_ITEM_INDEX(${1:Hash overlayHash}, ${2:Any p1}, ${3:int character})"
      ],
      "description": "GET_TATTOO_SHOP_DLC_ITEM_INDEX()"
    },
    "INIT_SHOP_PED_COMPONENT": {
      "prefix": "INIT_SHOP_PED_COMPONENT()",
      "body": ["INIT_SHOP_PED_COMPONENT(${1:Any* outComponent})"],
      "description": "INIT_SHOP_PED_COMPONENT()"
    },
    "INIT_SHOP_PED_PROP": {
      "prefix": "INIT_SHOP_PED_PROP()",
      "body": ["INIT_SHOP_PED_PROP(${1:Any* outProp})"],
      "description": "INIT_SHOP_PED_PROP()"
    },
    "SETUP_SHOP_PED_APPAREL_QUERY": {
      "prefix": "SETUP_SHOP_PED_APPAREL_QUERY()",
      "body": [
        "SETUP_SHOP_PED_APPAREL_QUERY(${1:int p0}, ${2:int p1}, ${3:int p2}, ${4:int p3})"
      ],
      "description": "SETUP_SHOP_PED_APPAREL_QUERY()"
    },
    "SETUP_SHOP_PED_APPAREL_QUERY_TU": {
      "prefix": "SETUP_SHOP_PED_APPAREL_QUERY_TU()",
      "body": [
        "SETUP_SHOP_PED_APPAREL_QUERY_TU(${1:int character}, ${2:int p1}, ${3:int p2}, ${4:BOOL p3}, ${5:int p4}, ${6:int componentId})"
      ],
      "description": "SETUP_SHOP_PED_APPAREL_QUERY_TU()"
    },
    "GET_SHOP_PED_QUERY_COMPONENT": {
      "prefix": "GET_SHOP_PED_QUERY_COMPONENT()",
      "body": [
        "GET_SHOP_PED_QUERY_COMPONENT(${1:int componentId}, ${2:Any* outComponent})"
      ],
      "description": "GET_SHOP_PED_QUERY_COMPONENT()"
    },
    "GET_SHOP_PED_QUERY_COMPONENT_INDEX": {
      "prefix": "GET_SHOP_PED_QUERY_COMPONENT_INDEX()",
      "body": ["GET_SHOP_PED_QUERY_COMPONENT_INDEX(${1:Hash componentHash})"],
      "description": "GET_SHOP_PED_QUERY_COMPONENT_INDEX()"
    },
    "GET_SHOP_PED_COMPONENT": {
      "prefix": "GET_SHOP_PED_COMPONENT()",
      "body": [
        "GET_SHOP_PED_COMPONENT(${1:Hash componentHash}, ${2:Any* outComponent})"
      ],
      "description": "GET_SHOP_PED_COMPONENT()"
    },
    "GET_SHOP_PED_QUERY_PROP": {
      "prefix": "GET_SHOP_PED_QUERY_PROP()",
      "body": [
        "GET_SHOP_PED_QUERY_PROP(${1:int componentId}, ${2:Any* outProp})"
      ],
      "description": "GET_SHOP_PED_QUERY_PROP()"
    },
    "GET_SHOP_PED_QUERY_PROP_INDEX": {
      "prefix": "GET_SHOP_PED_QUERY_PROP_INDEX()",
      "body": ["GET_SHOP_PED_QUERY_PROP_INDEX(${1:Hash componentHash})"],
      "description": "GET_SHOP_PED_QUERY_PROP_INDEX()"
    },
    "GET_SHOP_PED_PROP": {
      "prefix": "GET_SHOP_PED_PROP()",
      "body": ["GET_SHOP_PED_PROP(${1:Hash componentHash}, ${2:Any* outProp})"],
      "description": "GET_SHOP_PED_PROP()"
    },
    "GET_HASH_NAME_FOR_COMPONENT": {
      "prefix": "GET_HASH_NAME_FOR_COMPONENT()",
      "body": [
        "GET_HASH_NAME_FOR_COMPONENT(${1:Entity entity}, ${2:int componentId}, ${3:int drawableVariant}, ${4:int textureVariant})"
      ],
      "description": "GET_HASH_NAME_FOR_COMPONENT()"
    },
    "GET_HASH_NAME_FOR_PROP": {
      "prefix": "GET_HASH_NAME_FOR_PROP()",
      "body": [
        "GET_HASH_NAME_FOR_PROP(${1:Entity entity}, ${2:int componentId}, ${3:int propIndex}, ${4:int propTextureIndex})"
      ],
      "description": "GET_HASH_NAME_FOR_PROP()"
    },
    "GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT": {
      "prefix": "GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT()",
      "body": [
        "GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT(${1:Hash componentHash})"
      ],
      "description": "GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT()"
    },
    "GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT": {
      "prefix": "GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT()",
      "body": ["GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT(${1:Hash propHash})"],
      "description": "GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT()"
    },
    "GET_VARIANT_COMPONENT": {
      "prefix": "GET_VARIANT_COMPONENT()",
      "body": [
        "GET_VARIANT_COMPONENT(${1:Hash componentHash}, ${2:int variantComponentIndex}, ${3:Hash* nameHash}, ${4:int* enumValue}, ${5:int* componentType})"
      ],
      "description": "GET_VARIANT_COMPONENT()"
    },
    "GET_VARIANT_PROP": {
      "prefix": "GET_VARIANT_PROP()",
      "body": [
        "GET_VARIANT_PROP(${1:Hash componentHash}, ${2:int variantPropIndex}, ${3:Hash* nameHash}, ${4:int* enumValue}, ${5:int* anchorPoint})"
      ],
      "description": "GET_VARIANT_PROP()"
    },
    "GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT": {
      "prefix": "GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT()",
      "body": [
        "GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT(${1:Hash componentHash})"
      ],
      "description": "GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT()"
    },
    "GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT": {
      "prefix": "GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT()",
      "body": ["GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT(${1:Hash componentHash})"],
      "description": "GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT()"
    },
    "GET_FORCED_COMPONENT": {
      "prefix": "GET_FORCED_COMPONENT()",
      "body": [
        "GET_FORCED_COMPONENT(${1:Hash componentHash}, ${2:int forcedComponentIndex}, ${3:Hash* nameHash}, ${4:int* enumValue}, ${5:int* componentType})"
      ],
      "description": "GET_FORCED_COMPONENT()"
    },
    "GET_FORCED_PROP": {
      "prefix": "GET_FORCED_PROP()",
      "body": [
        "GET_FORCED_PROP(${1:Hash componentHash}, ${2:int forcedPropIndex}, ${3:Hash* nameHash}, ${4:int* enumValue}, ${5:int* anchorPoint})"
      ],
      "description": "GET_FORCED_PROP()"
    },
    "DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG": {
      "prefix": "DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG()",
      "body": [
        "DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG(${1:Hash componentHash}, ${2:Hash restrictionTagHash}, ${3:int componentId})"
      ],
      "description": "DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG()"
    },
    "DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG": {
      "prefix": "DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG()",
      "body": [
        "DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG(${1:Ped ped}, ${2:int componentId}, ${3:Hash restrictionTagHash})"
      ],
      "description": "DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG()"
    },
    "DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG": {
      "prefix": "DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG()",
      "body": [
        "DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG(${1:Ped ped}, ${2:int componentId}, ${3:Hash restrictionTagHash})"
      ],
      "description": "DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG()"
    },
    "SETUP_SHOP_PED_OUTFIT_QUERY": {
      "prefix": "SETUP_SHOP_PED_OUTFIT_QUERY()",
      "body": ["SETUP_SHOP_PED_OUTFIT_QUERY(${1:int character}, ${2:BOOL p1})"],
      "description": "SETUP_SHOP_PED_OUTFIT_QUERY()"
    },
    "GET_SHOP_PED_QUERY_OUTFIT": {
      "prefix": "GET_SHOP_PED_QUERY_OUTFIT()",
      "body": [
        "GET_SHOP_PED_QUERY_OUTFIT(${1:int outfitIndex}, ${2:Any* outfit})"
      ],
      "description": "GET_SHOP_PED_QUERY_OUTFIT()"
    },
    "GET_SHOP_PED_OUTFIT": {
      "prefix": "GET_SHOP_PED_OUTFIT()",
      "body": ["GET_SHOP_PED_OUTFIT(${1:Any p0}, ${2:Any* p1})"],
      "description": "GET_SHOP_PED_OUTFIT()"
    },
    "GET_SHOP_PED_OUTFIT_LOCATE": {
      "prefix": "GET_SHOP_PED_OUTFIT_LOCATE()",
      "body": ["GET_SHOP_PED_OUTFIT_LOCATE(${1:Any p0})"],
      "description": "GET_SHOP_PED_OUTFIT_LOCATE()"
    },
    "GET_SHOP_PED_OUTFIT_PROP_VARIANT": {
      "prefix": "GET_SHOP_PED_OUTFIT_PROP_VARIANT()",
      "body": [
        "GET_SHOP_PED_OUTFIT_PROP_VARIANT(${1:Hash outfitHash}, ${2:int variantIndex}, ${3:Any* outPropVariant})"
      ],
      "description": "GET_SHOP_PED_OUTFIT_PROP_VARIANT()"
    },
    "GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT": {
      "prefix": "GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT()",
      "body": [
        "GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT(${1:Hash outfitHash}, ${2:int variantIndex}, ${3:Any* outComponentVariant})"
      ],
      "description": "GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT()"
    },
    "GET_NUM_DLC_VEHICLES": {
      "prefix": "GET_NUM_DLC_VEHICLES()",
      "body": ["GET_NUM_DLC_VEHICLES()"],
      "description": "GET_NUM_DLC_VEHICLES()"
    },
    "GET_DLC_VEHICLE_MODEL": {
      "prefix": "GET_DLC_VEHICLE_MODEL()",
      "body": ["GET_DLC_VEHICLE_MODEL(${1:int dlcVehicleIndex})"],
      "description": "GET_DLC_VEHICLE_MODEL()"
    },
    "GET_DLC_VEHICLE_DATA": {
      "prefix": "GET_DLC_VEHICLE_DATA()",
      "body": [
        "GET_DLC_VEHICLE_DATA(${1:int dlcVehicleIndex}, ${2:Any* outData})"
      ],
      "description": "GET_DLC_VEHICLE_DATA()"
    },
    "GET_DLC_VEHICLE_FLAGS": {
      "prefix": "GET_DLC_VEHICLE_FLAGS()",
      "body": ["GET_DLC_VEHICLE_FLAGS(${1:int dlcVehicleIndex})"],
      "description": "GET_DLC_VEHICLE_FLAGS()"
    },
    "GET_NUM_DLC_WEAPONS": {
      "prefix": "GET_NUM_DLC_WEAPONS()",
      "body": ["GET_NUM_DLC_WEAPONS()"],
      "description": "GET_NUM_DLC_WEAPONS()"
    },
    "GET_NUM_DLC_WEAPONS_SP": {
      "prefix": "GET_NUM_DLC_WEAPONS_SP()",
      "body": ["GET_NUM_DLC_WEAPONS_SP()"],
      "description": "GET_NUM_DLC_WEAPONS_SP()"
    },
    "GET_DLC_WEAPON_DATA": {
      "prefix": "GET_DLC_WEAPON_DATA()",
      "body": ["GET_DLC_WEAPON_DATA(${1:int dlcWeaponIndex}, ${2:Any* outData})"],
      "description": "GET_DLC_WEAPON_DATA()"
    },
    "GET_DLC_WEAPON_DATA_SP": {
      "prefix": "GET_DLC_WEAPON_DATA_SP()",
      "body": [
        "GET_DLC_WEAPON_DATA_SP(${1:int dlcWeaponIndex}, ${2:Any* outData})"
      ],
      "description": "GET_DLC_WEAPON_DATA_SP()"
    },
    "GET_NUM_DLC_WEAPON_COMPONENTS": {
      "prefix": "GET_NUM_DLC_WEAPON_COMPONENTS()",
      "body": ["GET_NUM_DLC_WEAPON_COMPONENTS(${1:int dlcWeaponIndex})"],
      "description": "GET_NUM_DLC_WEAPON_COMPONENTS()"
    },
    "GET_NUM_DLC_WEAPON_COMPONENTS_SP": {
      "prefix": "GET_NUM_DLC_WEAPON_COMPONENTS_SP()",
      "body": ["GET_NUM_DLC_WEAPON_COMPONENTS_SP(${1:int dlcWeaponIndex})"],
      "description": "GET_NUM_DLC_WEAPON_COMPONENTS_SP()"
    },
    "GET_DLC_WEAPON_COMPONENT_DATA": {
      "prefix": "GET_DLC_WEAPON_COMPONENT_DATA()",
      "body": [
        "GET_DLC_WEAPON_COMPONENT_DATA(${1:int dlcWeaponIndex}, ${2:int dlcWeapCompIndex}, ${3:Any* ComponentDataPtr})"
      ],
      "description": "GET_DLC_WEAPON_COMPONENT_DATA()"
    },
    "GET_DLC_WEAPON_COMPONENT_DATA_SP": {
      "prefix": "GET_DLC_WEAPON_COMPONENT_DATA_SP()",
      "body": [
        "GET_DLC_WEAPON_COMPONENT_DATA_SP(${1:int dlcWeaponIndex}, ${2:int dlcWeapCompIndex}, ${3:Any* ComponentDataPtr})"
      ],
      "description": "GET_DLC_WEAPON_COMPONENT_DATA_SP()"
    },
    "IS_CONTENT_ITEM_LOCKED": {
      "prefix": "IS_CONTENT_ITEM_LOCKED()",
      "body": ["IS_CONTENT_ITEM_LOCKED(${1:Hash itemHash})"],
      "description": "IS_CONTENT_ITEM_LOCKED()"
    },
    "IS_DLC_VEHICLE_MOD": {
      "prefix": "IS_DLC_VEHICLE_MOD()",
      "body": ["IS_DLC_VEHICLE_MOD(${1:Hash hash})"],
      "description": "IS_DLC_VEHICLE_MOD()"
    },
    "GET_DLC_VEHICLE_MOD_LOCK_HASH": {
      "prefix": "GET_DLC_VEHICLE_MOD_LOCK_HASH()",
      "body": ["GET_DLC_VEHICLE_MOD_LOCK_HASH(${1:Hash hash})"],
      "description": "GET_DLC_VEHICLE_MOD_LOCK_HASH()"
    },
    "EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL": {
      "prefix": "EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL()",
      "body": ["EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(${1:Hash hash})"],
      "description": "EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL()"
    },
    "REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL": {
      "prefix": "REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL()",
      "body": ["REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(${1:Hash hash})"],
      "description": "REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL()"
    },
    "START_SCRIPT_FIRE": {
      "prefix": "START_SCRIPT_FIRE()",
      "body": [
        "START_SCRIPT_FIRE(${1:float X}, ${2:float Y}, ${3:float Z}, ${4:int maxChildren}, ${5:BOOL isGasFire})"
      ],
      "description": "START_SCRIPT_FIRE()"
    },
    "REMOVE_SCRIPT_FIRE": {
      "prefix": "REMOVE_SCRIPT_FIRE()",
      "body": ["REMOVE_SCRIPT_FIRE(${1:FireId fireHandle})"],
      "description": "REMOVE_SCRIPT_FIRE()"
    },
    "START_ENTITY_FIRE": {
      "prefix": "START_ENTITY_FIRE()",
      "body": ["START_ENTITY_FIRE(${1:Entity entity})"],
      "description": "START_ENTITY_FIRE()"
    },
    "STOP_ENTITY_FIRE": {
      "prefix": "STOP_ENTITY_FIRE()",
      "body": ["STOP_ENTITY_FIRE(${1:Entity entity})"],
      "description": "STOP_ENTITY_FIRE()"
    },
    "IS_ENTITY_ON_FIRE": {
      "prefix": "IS_ENTITY_ON_FIRE()",
      "body": ["IS_ENTITY_ON_FIRE(${1:Entity entity})"],
      "description": "IS_ENTITY_ON_FIRE()"
    },
    "GET_NUMBER_OF_FIRES_IN_RANGE": {
      "prefix": "GET_NUMBER_OF_FIRES_IN_RANGE()",
      "body": [
        "GET_NUMBER_OF_FIRES_IN_RANGE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius})"
      ],
      "description": "GET_NUMBER_OF_FIRES_IN_RANGE()"
    },
    "SET_FLAMMABILITY_MULTIPLIER": {
      "prefix": "SET_FLAMMABILITY_MULTIPLIER()",
      "body": ["SET_FLAMMABILITY_MULTIPLIER(${1:float p0})"],
      "description": "SET_FLAMMABILITY_MULTIPLIER()"
    },
    "STOP_FIRE_IN_RANGE": {
      "prefix": "STOP_FIRE_IN_RANGE()",
      "body": [
        "STOP_FIRE_IN_RANGE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius})"
      ],
      "description": "STOP_FIRE_IN_RANGE()"
    },
    "GET_CLOSEST_FIRE_POS": {
      "prefix": "GET_CLOSEST_FIRE_POS()",
      "body": [
        "GET_CLOSEST_FIRE_POS(${1:Vector3* outPosition}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "GET_CLOSEST_FIRE_POS()"
    },
    "ADD_EXPLOSION": {
      "prefix": "ADD_EXPLOSION()",
      "body": [
        "ADD_EXPLOSION(${1:float x}, ${2:float y}, ${3:float z}, ${4:int explosionType}, ${5:float damageScale}, ${6:BOOL isAudible}, ${7:BOOL isInvisible}, ${8:float cameraShake}, ${9:BOOL noDamage})"
      ],
      "description": "ADD_EXPLOSION()"
    },
    "ADD_OWNED_EXPLOSION": {
      "prefix": "ADD_OWNED_EXPLOSION()",
      "body": [
        "ADD_OWNED_EXPLOSION(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int explosionType}, ${6:float damageScale}, ${7:BOOL isAudible}, ${8:BOOL isInvisible}, ${9:float cameraShake})"
      ],
      "description": "ADD_OWNED_EXPLOSION()"
    },
    "ADD_EXPLOSION_WITH_USER_VFX": {
      "prefix": "ADD_EXPLOSION_WITH_USER_VFX()",
      "body": [
        "ADD_EXPLOSION_WITH_USER_VFX(${1:float x}, ${2:float y}, ${3:float z}, ${4:int explosionType}, ${5:Hash explosionFx}, ${6:float damageScale}, ${7:BOOL isAudible}, ${8:BOOL isInvisible}, ${9:float cameraShake})"
      ],
      "description": "ADD_EXPLOSION_WITH_USER_VFX()"
    },
    "IS_EXPLOSION_IN_AREA": {
      "prefix": "IS_EXPLOSION_IN_AREA()",
      "body": [
        "IS_EXPLOSION_IN_AREA(${1:int explosionType}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2})"
      ],
      "description": "IS_EXPLOSION_IN_AREA()"
    },
    "IS_EXPLOSION_ACTIVE_IN_AREA": {
      "prefix": "IS_EXPLOSION_ACTIVE_IN_AREA()",
      "body": [
        "IS_EXPLOSION_ACTIVE_IN_AREA(${1:int explosionType}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2})"
      ],
      "description": "IS_EXPLOSION_ACTIVE_IN_AREA()"
    },
    "IS_EXPLOSION_IN_SPHERE": {
      "prefix": "IS_EXPLOSION_IN_SPHERE()",
      "body": [
        "IS_EXPLOSION_IN_SPHERE(${1:int explosionType}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius})"
      ],
      "description": "IS_EXPLOSION_IN_SPHERE()"
    },
    "GET_OWNER_OF_EXPLOSION_IN_SPHERE": {
      "prefix": "GET_OWNER_OF_EXPLOSION_IN_SPHERE()",
      "body": [
        "GET_OWNER_OF_EXPLOSION_IN_SPHERE(${1:int explosionType}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius})"
      ],
      "description": "GET_OWNER_OF_EXPLOSION_IN_SPHERE()"
    },
    "IS_EXPLOSION_IN_ANGLED_AREA": {
      "prefix": "IS_EXPLOSION_IN_ANGLED_AREA()",
      "body": [
        "IS_EXPLOSION_IN_ANGLED_AREA(${1:int explosionType}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2}, ${8:float width})"
      ],
      "description": "IS_EXPLOSION_IN_ANGLED_AREA()"
    },
    "GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA": {
      "prefix": "GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA()",
      "body": [
        "GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA(${1:int explosionType}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2}, ${8:float radius})"
      ],
      "description": "GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA()"
    },
    "SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE": {
      "prefix": "SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE()",
      "body": ["SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE(${1:BOOL enabled})"],
      "description": "SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE()"
    },
    "DRAW_DEBUG_LINE": {
      "prefix": "DRAW_DEBUG_LINE()",
      "body": [
        "DRAW_DEBUG_LINE(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int r}, ${8:int g}, ${9:int b}, ${10:int alpha})"
      ],
      "description": "DRAW_DEBUG_LINE()"
    },
    "DRAW_DEBUG_LINE_WITH_TWO_COLOURS": {
      "prefix": "DRAW_DEBUG_LINE_WITH_TWO_COLOURS()",
      "body": [
        "DRAW_DEBUG_LINE_WITH_TWO_COLOURS(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int r1}, ${8:int g1}, ${9:int b1}, ${10:int r2}, ${11:int g2}, ${12:int b2}, ${13:int alpha1}, ${14:int alpha2})"
      ],
      "description": "DRAW_DEBUG_LINE_WITH_TWO_COLOURS()"
    },
    "DRAW_DEBUG_SPHERE": {
      "prefix": "DRAW_DEBUG_SPHERE()",
      "body": [
        "DRAW_DEBUG_SPHERE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:int red}, ${6:int green}, ${7:int blue}, ${8:int alpha})"
      ],
      "description": "DRAW_DEBUG_SPHERE()"
    },
    "DRAW_DEBUG_BOX": {
      "prefix": "DRAW_DEBUG_BOX()",
      "body": [
        "DRAW_DEBUG_BOX(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int r}, ${8:int g}, ${9:int b}, ${10:int alpha})"
      ],
      "description": "DRAW_DEBUG_BOX()"
    },
    "DRAW_DEBUG_CROSS": {
      "prefix": "DRAW_DEBUG_CROSS()",
      "body": [
        "DRAW_DEBUG_CROSS(${1:float x}, ${2:float y}, ${3:float z}, ${4:float size}, ${5:int red}, ${6:int green}, ${7:int blue}, ${8:int alpha})"
      ],
      "description": "DRAW_DEBUG_CROSS()"
    },
    "DRAW_DEBUG_TEXT": {
      "prefix": "DRAW_DEBUG_TEXT()",
      "body": [
        "DRAW_DEBUG_TEXT(${1:const char* text}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int red}, ${6:int green}, ${7:int blue}, ${8:int alpha})"
      ],
      "description": "DRAW_DEBUG_TEXT()"
    },
    "DRAW_DEBUG_TEXT_2D": {
      "prefix": "DRAW_DEBUG_TEXT_2D()",
      "body": [
        "DRAW_DEBUG_TEXT_2D(${1:const char* text}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int red}, ${6:int green}, ${7:int blue}, ${8:int alpha})"
      ],
      "description": "DRAW_DEBUG_TEXT_2D()"
    },
    "DRAW_LINE": {
      "prefix": "DRAW_LINE()",
      "body": [
        "DRAW_LINE(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int red}, ${8:int green}, ${9:int blue}, ${10:int alpha})"
      ],
      "description": "DRAW_LINE()"
    },
    "DRAW_POLY": {
      "prefix": "DRAW_POLY()",
      "body": [
        "DRAW_POLY(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float x3}, ${8:float y3}, ${9:float z3}, ${10:int red}, ${11:int green}, ${12:int blue}, ${13:int alpha})"
      ],
      "description": "DRAW_POLY()"
    },
    "DRAW_TEXTURED_POLY": {
      "prefix": "DRAW_TEXTURED_POLY()",
      "body": [
        "DRAW_TEXTURED_POLY(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float x3}, ${8:float y3}, ${9:float z3}, ${10:int red}, ${11:int green}, ${12:int blue}, ${13:int alpha}, ${14:const char* textureDict}, ${15:const char* textureName}, ${16:float u1}, ${17:float v1}, ${18:float w1}, ${19:float u2}, ${20:float v2}, ${21:float w2}, ${22:float u3}, ${23:float v3}, ${24:float w3})"
      ],
      "description": "DRAW_TEXTURED_POLY()"
    },
    "DRAW_TEXTURED_POLY_WITH_THREE_COLOURS": {
      "prefix": "DRAW_TEXTURED_POLY_WITH_THREE_COLOURS()",
      "body": [
        "DRAW_TEXTURED_POLY_WITH_THREE_COLOURS(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float x3}, ${8:float y3}, ${9:float z3}, ${10:float red1}, ${11:float green1}, ${12:float blue1}, ${13:int alpha1}, ${14:float red2}, ${15:float green2}, ${16:float blue2}, ${17:int alpha2}, ${18:float red3}, ${19:float green3}, ${20:float blue3}, ${21:int alpha3}, ${22:const char* textureDict}, ${23:const char* textureName}, ${24:float u1}, ${25:float v1}, ${26:float w1}, ${27:float u2}, ${28:float v2}, ${29:float w2}, ${30:float u3}, ${31:float v3}, ${32:float w3})"
      ],
      "description": "DRAW_TEXTURED_POLY_WITH_THREE_COLOURS()"
    },
    "DRAW_BOX": {
      "prefix": "DRAW_BOX()",
      "body": [
        "DRAW_BOX(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int red}, ${8:int green}, ${9:int blue}, ${10:int alpha})"
      ],
      "description": "DRAW_BOX()"
    },
    "SET_BACKFACECULLING": {
      "prefix": "SET_BACKFACECULLING()",
      "body": ["SET_BACKFACECULLING(${1:BOOL toggle})"],
      "description": "SET_BACKFACECULLING()"
    },
    "SET_DEPTHWRITING": {
      "prefix": "SET_DEPTHWRITING()",
      "body": ["SET_DEPTHWRITING(${1:BOOL toggle})"],
      "description": "SET_DEPTHWRITING()"
    },
    "BEGIN_TAKE_MISSION_CREATOR_PHOTO": {
      "prefix": "BEGIN_TAKE_MISSION_CREATOR_PHOTO()",
      "body": ["BEGIN_TAKE_MISSION_CREATOR_PHOTO()"],
      "description": "BEGIN_TAKE_MISSION_CREATOR_PHOTO()"
    },
    "GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO": {
      "prefix": "GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO()",
      "body": ["GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO()"],
      "description": "GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO()"
    },
    "FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO": {
      "prefix": "FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO()",
      "body": ["FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO()"],
      "description": "FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO()"
    },
    "LOAD_MISSION_CREATOR_PHOTO": {
      "prefix": "LOAD_MISSION_CREATOR_PHOTO()",
      "body": [
        "LOAD_MISSION_CREATOR_PHOTO(${1:Any* p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "LOAD_MISSION_CREATOR_PHOTO()"
    },
    "GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO": {
      "prefix": "GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO()",
      "body": ["GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO(${1:Any* p0})"],
      "description": "GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO()"
    },
    "BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW": {
      "prefix": "BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW()",
      "body": ["BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW()"],
      "description": "BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW()"
    },
    "GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW": {
      "prefix": "GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW()",
      "body": ["GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW()"],
      "description": "GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW()"
    },
    "FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW": {
      "prefix": "FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW()",
      "body": ["FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW()"],
      "description": "FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW()"
    },
    "BEGIN_TAKE_HIGH_QUALITY_PHOTO": {
      "prefix": "BEGIN_TAKE_HIGH_QUALITY_PHOTO()",
      "body": ["BEGIN_TAKE_HIGH_QUALITY_PHOTO()"],
      "description": "BEGIN_TAKE_HIGH_QUALITY_PHOTO()"
    },
    "GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO": {
      "prefix": "GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO()",
      "body": ["GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO()"],
      "description": "GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO()"
    },
    "FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO": {
      "prefix": "FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO()",
      "body": ["FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO()"],
      "description": "FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO()"
    },
    "SET_TAKEN_PHOTO_IS_MUGSHOT": {
      "prefix": "SET_TAKEN_PHOTO_IS_MUGSHOT()",
      "body": ["SET_TAKEN_PHOTO_IS_MUGSHOT(${1:BOOL toggle})"],
      "description": "SET_TAKEN_PHOTO_IS_MUGSHOT()"
    },
    "SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO": {
      "prefix": "SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO()",
      "body": [
        "SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO(${1:Any p0}, ${2:int p1})"
      ],
      "description": "SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO()"
    },
    "SET_ON_ISLAND_X_FOR_TAKEN_PHOTO": {
      "prefix": "SET_ON_ISLAND_X_FOR_TAKEN_PHOTO()",
      "body": ["SET_ON_ISLAND_X_FOR_TAKEN_PHOTO(${1:Any p0})"],
      "description": "SET_ON_ISLAND_X_FOR_TAKEN_PHOTO()"
    },
    "SAVE_HIGH_QUALITY_PHOTO": {
      "prefix": "SAVE_HIGH_QUALITY_PHOTO()",
      "body": ["SAVE_HIGH_QUALITY_PHOTO(${1:int unused})"],
      "description": "SAVE_HIGH_QUALITY_PHOTO()"
    },
    "GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO": {
      "prefix": "GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO()",
      "body": ["GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO()"],
      "description": "GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO()"
    },
    "BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO": {
      "prefix": "BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO()",
      "body": ["BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO(${1:Any p0})"],
      "description": "BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO()"
    },
    "GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO": {
      "prefix": "GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO()",
      "body": ["GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO(${1:int p0})"],
      "description": "GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO()"
    },
    "FREE_MEMORY_FOR_LOW_QUALITY_PHOTO": {
      "prefix": "FREE_MEMORY_FOR_LOW_QUALITY_PHOTO()",
      "body": ["FREE_MEMORY_FOR_LOW_QUALITY_PHOTO()"],
      "description": "FREE_MEMORY_FOR_LOW_QUALITY_PHOTO()"
    },
    "DRAW_LOW_QUALITY_PHOTO_TO_PHONE": {
      "prefix": "DRAW_LOW_QUALITY_PHOTO_TO_PHONE()",
      "body": ["DRAW_LOW_QUALITY_PHOTO_TO_PHONE(${1:BOOL p0}, ${2:BOOL p1})"],
      "description": "DRAW_LOW_QUALITY_PHOTO_TO_PHONE()"
    },
    "GET_MAXIMUM_NUMBER_OF_PHOTOS": {
      "prefix": "GET_MAXIMUM_NUMBER_OF_PHOTOS()",
      "body": ["GET_MAXIMUM_NUMBER_OF_PHOTOS()"],
      "description": "GET_MAXIMUM_NUMBER_OF_PHOTOS()"
    },
    "GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS": {
      "prefix": "GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS()",
      "body": ["GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS()"],
      "description": "GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS()"
    },
    "GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS": {
      "prefix": "GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS()",
      "body": ["GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS()"],
      "description": "GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS()"
    },
    "QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS": {
      "prefix": "QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS()",
      "body": ["QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS(${1:Any p0})"],
      "description": "QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS()"
    },
    "GET_STATUS_OF_SORTED_LIST_OPERATION": {
      "prefix": "GET_STATUS_OF_SORTED_LIST_OPERATION()",
      "body": ["GET_STATUS_OF_SORTED_LIST_OPERATION(${1:Any p0})"],
      "description": "GET_STATUS_OF_SORTED_LIST_OPERATION()"
    },
    "CLEAR_STATUS_OF_SORTED_LIST_OPERATION": {
      "prefix": "CLEAR_STATUS_OF_SORTED_LIST_OPERATION()",
      "body": ["CLEAR_STATUS_OF_SORTED_LIST_OPERATION()"],
      "description": "CLEAR_STATUS_OF_SORTED_LIST_OPERATION()"
    },
    "DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO": {
      "prefix": "DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO()",
      "body": ["DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO(${1:Any p0})"],
      "description": "DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO()"
    },
    "LOAD_HIGH_QUALITY_PHOTO": {
      "prefix": "LOAD_HIGH_QUALITY_PHOTO()",
      "body": ["LOAD_HIGH_QUALITY_PHOTO(${1:Any p0})"],
      "description": "LOAD_HIGH_QUALITY_PHOTO()"
    },
    "GET_LOAD_HIGH_QUALITY_PHOTO_STATUS": {
      "prefix": "GET_LOAD_HIGH_QUALITY_PHOTO_STATUS()",
      "body": ["GET_LOAD_HIGH_QUALITY_PHOTO_STATUS(${1:int p0})"],
      "description": "GET_LOAD_HIGH_QUALITY_PHOTO_STATUS()"
    },
    "DRAW_LIGHT_WITH_RANGEEX": {
      "prefix": "DRAW_LIGHT_WITH_RANGEEX()",
      "body": [
        "DRAW_LIGHT_WITH_RANGEEX(${1:float x}, ${2:float y}, ${3:float z}, ${4:int r}, ${5:int g}, ${6:int b}, ${7:float range}, ${8:float intensity}, ${9:float shadow})"
      ],
      "description": "DRAW_LIGHT_WITH_RANGEEX()"
    },
    "DRAW_LIGHT_WITH_RANGE": {
      "prefix": "DRAW_LIGHT_WITH_RANGE()",
      "body": [
        "DRAW_LIGHT_WITH_RANGE(${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:int colorR}, ${5:int colorG}, ${6:int colorB}, ${7:float range}, ${8:float intensity})"
      ],
      "description": "DRAW_LIGHT_WITH_RANGE()"
    },
    "DRAW_SPOT_LIGHT": {
      "prefix": "DRAW_SPOT_LIGHT()",
      "body": [
        "DRAW_SPOT_LIGHT(${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float dirX}, ${5:float dirY}, ${6:float dirZ}, ${7:int colorR}, ${8:int colorG}, ${9:int colorB}, ${10:float distance}, ${11:float brightness}, ${12:float hardness}, ${13:float radius}, ${14:float falloff})"
      ],
      "description": "DRAW_SPOT_LIGHT()"
    },
    "DRAW_SHADOWED_SPOT_LIGHT": {
      "prefix": "DRAW_SHADOWED_SPOT_LIGHT()",
      "body": [
        "DRAW_SHADOWED_SPOT_LIGHT(${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float dirX}, ${5:float dirY}, ${6:float dirZ}, ${7:int colorR}, ${8:int colorG}, ${9:int colorB}, ${10:float distance}, ${11:float brightness}, ${12:float roundness}, ${13:float radius}, ${14:float falloff}, ${15:int shadowId})"
      ],
      "description": "DRAW_SHADOWED_SPOT_LIGHT()"
    },
    "FADE_UP_PED_LIGHT": {
      "prefix": "FADE_UP_PED_LIGHT()",
      "body": ["FADE_UP_PED_LIGHT(${1:float p0})"],
      "description": "FADE_UP_PED_LIGHT()"
    },
    "UPDATE_LIGHTS_ON_ENTITY": {
      "prefix": "UPDATE_LIGHTS_ON_ENTITY()",
      "body": ["UPDATE_LIGHTS_ON_ENTITY(${1:Entity entity})"],
      "description": "UPDATE_LIGHTS_ON_ENTITY()"
    },
    "SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE": {
      "prefix": "SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE()",
      "body": ["SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE(${1:Any p0})"],
      "description": "SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE()"
    },
    "GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE": {
      "prefix": "GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE()",
      "body": ["GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE()"],
      "description": "GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE()"
    },
    "DRAW_MARKER": {
      "prefix": "DRAW_MARKER()",
      "body": [
        "DRAW_MARKER(${1:int type}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float dirX}, ${6:float dirY}, ${7:float dirZ}, ${8:float rotX}, ${9:float rotY}, ${10:float rotZ}, ${11:float scaleX}, ${12:float scaleY}, ${13:float scaleZ}, ${14:int red}, ${15:int green}, ${16:int blue}, ${17:int alpha}, ${18:BOOL bobUpAndDown}, ${19:BOOL faceCamera}, ${20:int p19}, ${21:BOOL rotate}, ${22:const char* textureDict}, ${23:const char* textureName}, ${24:BOOL drawOnEnts})"
      ],
      "description": "DRAW_MARKER()"
    },
    "DRAW_MARKER_EX": {
      "prefix": "DRAW_MARKER_EX()",
      "body": [
        "DRAW_MARKER_EX(${1:int type}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float dirX}, ${6:float dirY}, ${7:float dirZ}, ${8:float rotX}, ${9:float rotY}, ${10:float rotZ}, ${11:float scaleX}, ${12:float scaleY}, ${13:float scaleZ}, ${14:int red}, ${15:int green}, ${16:int blue}, ${17:int alpha}, ${18:BOOL bobUpAndDown}, ${19:BOOL faceCamera}, ${20:Any p19}, ${21:BOOL rotate}, ${22:const char* textureDict}, ${23:const char* textureName}, ${24:BOOL drawOnEnts}, ${25:BOOL p24}, ${26:BOOL p25})"
      ],
      "description": "DRAW_MARKER_EX()"
    },
    "DRAW_MARKER_SPHERE": {
      "prefix": "DRAW_MARKER_SPHERE()",
      "body": [
        "DRAW_MARKER_SPHERE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:int red}, ${6:int green}, ${7:int blue}, ${8:float alpha})"
      ],
      "description": "DRAW_MARKER_SPHERE()"
    },
    "CREATE_CHECKPOINT": {
      "prefix": "CREATE_CHECKPOINT()",
      "body": [
        "CREATE_CHECKPOINT(${1:int type}, ${2:float posX1}, ${3:float posY1}, ${4:float posZ1}, ${5:float posX2}, ${6:float posY2}, ${7:float posZ2}, ${8:float diameter}, ${9:int red}, ${10:int green}, ${11:int blue}, ${12:int alpha}, ${13:int reserved})"
      ],
      "description": "CREATE_CHECKPOINT()"
    },
    "SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE": {
      "prefix": "SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE()",
      "body": [
        "SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE(${1:int checkpoint}, ${2:float scale})"
      ],
      "description": "SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE()"
    },
    "SET_CHECKPOINT_INSIDE_CYLINDER_SCALE": {
      "prefix": "SET_CHECKPOINT_INSIDE_CYLINDER_SCALE()",
      "body": [
        "SET_CHECKPOINT_INSIDE_CYLINDER_SCALE(${1:int checkpoint}, ${2:float scale})"
      ],
      "description": "SET_CHECKPOINT_INSIDE_CYLINDER_SCALE()"
    },
    "SET_CHECKPOINT_CYLINDER_HEIGHT": {
      "prefix": "SET_CHECKPOINT_CYLINDER_HEIGHT()",
      "body": [
        "SET_CHECKPOINT_CYLINDER_HEIGHT(${1:int checkpoint}, ${2:float nearHeight}, ${3:float farHeight}, ${4:float radius})"
      ],
      "description": "SET_CHECKPOINT_CYLINDER_HEIGHT()"
    },
    "SET_CHECKPOINT_RGBA": {
      "prefix": "SET_CHECKPOINT_RGBA()",
      "body": [
        "SET_CHECKPOINT_RGBA(${1:int checkpoint}, ${2:int red}, ${3:int green}, ${4:int blue}, ${5:int alpha})"
      ],
      "description": "SET_CHECKPOINT_RGBA()"
    },
    "SET_CHECKPOINT_RGBA2": {
      "prefix": "SET_CHECKPOINT_RGBA2()",
      "body": [
        "SET_CHECKPOINT_RGBA2(${1:int checkpoint}, ${2:int red}, ${3:int green}, ${4:int blue}, ${5:int alpha})"
      ],
      "description": "SET_CHECKPOINT_RGBA2()"
    },
    "SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM": {
      "prefix": "SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM()",
      "body": [
        "SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM(${1:int checkpoint}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float unkX}, ${6:float unkY}, ${7:float unkZ})"
      ],
      "description": "SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM()"
    },
    "SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING": {
      "prefix": "SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING()",
      "body": ["SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING(${1:int checkpoint})"],
      "description": "SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING()"
    },
    "SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT": {
      "prefix": "SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT()",
      "body": [
        "SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT(${1:int checkpoint})"
      ],
      "description": "SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT()"
    },
    "SET_CHECKPOINT_FORCE_DIRECTION": {
      "prefix": "SET_CHECKPOINT_FORCE_DIRECTION()",
      "body": ["SET_CHECKPOINT_FORCE_DIRECTION(${1:int checkpoint})"],
      "description": "SET_CHECKPOINT_FORCE_DIRECTION()"
    },
    "SET_CHECKPOINT_DIRECTION": {
      "prefix": "SET_CHECKPOINT_DIRECTION()",
      "body": [
        "SET_CHECKPOINT_DIRECTION(${1:int checkpoint}, ${2:float posX}, ${3:float posY}, ${4:float posZ})"
      ],
      "description": "SET_CHECKPOINT_DIRECTION()"
    },
    "DELETE_CHECKPOINT": {
      "prefix": "DELETE_CHECKPOINT()",
      "body": ["DELETE_CHECKPOINT(${1:int checkpoint})"],
      "description": "DELETE_CHECKPOINT()"
    },
    "DONT_RENDER_IN_GAME_UI": {
      "prefix": "DONT_RENDER_IN_GAME_UI()",
      "body": ["DONT_RENDER_IN_GAME_UI(${1:BOOL p0})"],
      "description": "DONT_RENDER_IN_GAME_UI()"
    },
    "FORCE_RENDER_IN_GAME_UI": {
      "prefix": "FORCE_RENDER_IN_GAME_UI()",
      "body": ["FORCE_RENDER_IN_GAME_UI(${1:BOOL toggle})"],
      "description": "FORCE_RENDER_IN_GAME_UI()"
    },
    "REQUEST_STREAMED_TEXTURE_DICT": {
      "prefix": "REQUEST_STREAMED_TEXTURE_DICT()",
      "body": [
        "REQUEST_STREAMED_TEXTURE_DICT(${1:const char* textureDict}, ${2:BOOL p1})"
      ],
      "description": "REQUEST_STREAMED_TEXTURE_DICT()"
    },
    "HAS_STREAMED_TEXTURE_DICT_LOADED": {
      "prefix": "HAS_STREAMED_TEXTURE_DICT_LOADED()",
      "body": ["HAS_STREAMED_TEXTURE_DICT_LOADED(${1:const char* textureDict})"],
      "description": "HAS_STREAMED_TEXTURE_DICT_LOADED()"
    },
    "SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED": {
      "prefix": "SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED()",
      "body": [
        "SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(${1:const char* textureDict})"
      ],
      "description": "SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED()"
    },
    "DRAW_RECT": {
      "prefix": "DRAW_RECT()",
      "body": [
        "DRAW_RECT(${1:float x}, ${2:float y}, ${3:float width}, ${4:float height}, ${5:int r}, ${6:int g}, ${7:int b}, ${8:int a}, ${9:BOOL p8})"
      ],
      "description": "DRAW_RECT()"
    },
    "SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU": {
      "prefix": "SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU()",
      "body": ["SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(${1:BOOL toggle})"],
      "description": "SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU()"
    },
    "SET_SCRIPT_GFX_DRAW_ORDER": {
      "prefix": "SET_SCRIPT_GFX_DRAW_ORDER()",
      "body": ["SET_SCRIPT_GFX_DRAW_ORDER(${1:int drawOrder})"],
      "description": "SET_SCRIPT_GFX_DRAW_ORDER()"
    },
    "SET_SCRIPT_GFX_ALIGN": {
      "prefix": "SET_SCRIPT_GFX_ALIGN()",
      "body": [
        "SET_SCRIPT_GFX_ALIGN(${1:int horizontalAlign}, ${2:int verticalAlign})"
      ],
      "description": "SET_SCRIPT_GFX_ALIGN()"
    },
    "RESET_SCRIPT_GFX_ALIGN": {
      "prefix": "RESET_SCRIPT_GFX_ALIGN()",
      "body": ["RESET_SCRIPT_GFX_ALIGN()"],
      "description": "RESET_SCRIPT_GFX_ALIGN()"
    },
    "SET_SCRIPT_GFX_ALIGN_PARAMS": {
      "prefix": "SET_SCRIPT_GFX_ALIGN_PARAMS()",
      "body": [
        "SET_SCRIPT_GFX_ALIGN_PARAMS(${1:float x}, ${2:float y}, ${3:float w}, ${4:float h})"
      ],
      "description": "SET_SCRIPT_GFX_ALIGN_PARAMS()"
    },
    "GET_SCRIPT_GFX_ALIGN_POSITION": {
      "prefix": "GET_SCRIPT_GFX_ALIGN_POSITION()",
      "body": [
        "GET_SCRIPT_GFX_ALIGN_POSITION(${1:float x}, ${2:float y}, ${3:float* calculatedX}, ${4:float* calculatedY})"
      ],
      "description": "GET_SCRIPT_GFX_ALIGN_POSITION()"
    },
    "GET_SAFE_ZONE_SIZE": {
      "prefix": "GET_SAFE_ZONE_SIZE()",
      "body": ["GET_SAFE_ZONE_SIZE()"],
      "description": "GET_SAFE_ZONE_SIZE()"
    },
    "DRAW_SPRITE": {
      "prefix": "DRAW_SPRITE()",
      "body": [
        "DRAW_SPRITE(${1:const char* textureDict}, ${2:const char* textureName}, ${3:float screenX}, ${4:float screenY}, ${5:float width}, ${6:float height}, ${7:float heading}, ${8:int red}, ${9:int green}, ${10:int blue}, ${11:int alpha}, ${12:BOOL p11}, ${13:Any p12})"
      ],
      "description": "DRAW_SPRITE()"
    },
    "DRAW_SPRITE_ARX": {
      "prefix": "DRAW_SPRITE_ARX()",
      "body": [
        "DRAW_SPRITE_ARX(${1:const char* textureDict}, ${2:const char* textureName}, ${3:float x}, ${4:float y}, ${5:float width}, ${6:float height}, ${7:float p6}, ${8:int red}, ${9:int green}, ${10:int blue}, ${11:int alpha}, ${12:Any p11}, ${13:Any p12})"
      ],
      "description": "DRAW_SPRITE_ARX()"
    },
    "DRAW_SPRITE_NAMED_RENDERTARGET": {
      "prefix": "DRAW_SPRITE_NAMED_RENDERTARGET()",
      "body": [
        "DRAW_SPRITE_NAMED_RENDERTARGET(${1:const char* textureDict}, ${2:const char* textureName}, ${3:float screenX}, ${4:float screenY}, ${5:float width}, ${6:float height}, ${7:float heading}, ${8:int red}, ${9:int green}, ${10:int blue}, ${11:int alpha}, ${12:Any p11})"
      ],
      "description": "DRAW_SPRITE_NAMED_RENDERTARGET()"
    },
    "DRAW_SPRITE_ARX_WITH_UV": {
      "prefix": "DRAW_SPRITE_ARX_WITH_UV()",
      "body": [
        "DRAW_SPRITE_ARX_WITH_UV(${1:const char* textureDict}, ${2:const char* textureName}, ${3:float x}, ${4:float y}, ${5:float width}, ${6:float height}, ${7:float u1}, ${8:float v1}, ${9:float u2}, ${10:float v2}, ${11:float heading}, ${12:int red}, ${13:int green}, ${14:int blue}, ${15:int alpha}, ${16:Any p15})"
      ],
      "description": "DRAW_SPRITE_ARX_WITH_UV()"
    },
    "ADD_ENTITY_ICON": {
      "prefix": "ADD_ENTITY_ICON()",
      "body": ["ADD_ENTITY_ICON(${1:Entity entity}, ${2:const char* icon})"],
      "description": "ADD_ENTITY_ICON()"
    },
    "SET_ENTITY_ICON_VISIBILITY": {
      "prefix": "SET_ENTITY_ICON_VISIBILITY()",
      "body": [
        "SET_ENTITY_ICON_VISIBILITY(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "SET_ENTITY_ICON_VISIBILITY()"
    },
    "SET_ENTITY_ICON_COLOR": {
      "prefix": "SET_ENTITY_ICON_COLOR()",
      "body": [
        "SET_ENTITY_ICON_COLOR(${1:Entity entity}, ${2:int red}, ${3:int green}, ${4:int blue}, ${5:int alpha})"
      ],
      "description": "SET_ENTITY_ICON_COLOR()"
    },
    "SET_DRAW_ORIGIN": {
      "prefix": "SET_DRAW_ORIGIN()",
      "body": [
        "SET_DRAW_ORIGIN(${1:float x}, ${2:float y}, ${3:float z}, ${4:BOOL p3})"
      ],
      "description": "SET_DRAW_ORIGIN()"
    },
    "CLEAR_DRAW_ORIGIN": {
      "prefix": "CLEAR_DRAW_ORIGIN()",
      "body": ["CLEAR_DRAW_ORIGIN()"],
      "description": "CLEAR_DRAW_ORIGIN()"
    },
    "SET_BINK_MOVIE": {
      "prefix": "SET_BINK_MOVIE()",
      "body": ["SET_BINK_MOVIE(${1:const char* name})"],
      "description": "SET_BINK_MOVIE()"
    },
    "PLAY_BINK_MOVIE": {
      "prefix": "PLAY_BINK_MOVIE()",
      "body": ["PLAY_BINK_MOVIE(${1:int binkMovie})"],
      "description": "PLAY_BINK_MOVIE()"
    },
    "STOP_BINK_MOVIE": {
      "prefix": "STOP_BINK_MOVIE()",
      "body": ["STOP_BINK_MOVIE(${1:int binkMovie})"],
      "description": "STOP_BINK_MOVIE()"
    },
    "RELEASE_BINK_MOVIE": {
      "prefix": "RELEASE_BINK_MOVIE()",
      "body": ["RELEASE_BINK_MOVIE(${1:int binkMovie})"],
      "description": "RELEASE_BINK_MOVIE()"
    },
    "DRAW_BINK_MOVIE": {
      "prefix": "DRAW_BINK_MOVIE()",
      "body": [
        "DRAW_BINK_MOVIE(${1:int binkMovie}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:int r}, ${8:int g}, ${9:int b}, ${10:int a})"
      ],
      "description": "DRAW_BINK_MOVIE()"
    },
    "SET_BINK_MOVIE_TIME": {
      "prefix": "SET_BINK_MOVIE_TIME()",
      "body": ["SET_BINK_MOVIE_TIME(${1:int binkMovie}, ${2:float progress})"],
      "description": "SET_BINK_MOVIE_TIME()"
    },
    "GET_BINK_MOVIE_TIME": {
      "prefix": "GET_BINK_MOVIE_TIME()",
      "body": ["GET_BINK_MOVIE_TIME(${1:int binkMovie})"],
      "description": "GET_BINK_MOVIE_TIME()"
    },
    "SET_BINK_MOVIE_VOLUME": {
      "prefix": "SET_BINK_MOVIE_VOLUME()",
      "body": ["SET_BINK_MOVIE_VOLUME(${1:int binkMovie}, ${2:float value})"],
      "description": "SET_BINK_MOVIE_VOLUME()"
    },
    "ATTACH_TV_AUDIO_TO_ENTITY": {
      "prefix": "ATTACH_TV_AUDIO_TO_ENTITY()",
      "body": ["ATTACH_TV_AUDIO_TO_ENTITY(${1:Entity entity})"],
      "description": "ATTACH_TV_AUDIO_TO_ENTITY()"
    },
    "SET_BINK_MOVIE_AUDIO_FRONTEND": {
      "prefix": "SET_BINK_MOVIE_AUDIO_FRONTEND()",
      "body": ["SET_BINK_MOVIE_AUDIO_FRONTEND(${1:int binkMovie}, ${2:BOOL p1})"],
      "description": "SET_BINK_MOVIE_AUDIO_FRONTEND()"
    },
    "SET_TV_AUDIO_FRONTEND": {
      "prefix": "SET_TV_AUDIO_FRONTEND()",
      "body": ["SET_TV_AUDIO_FRONTEND(${1:BOOL toggle})"],
      "description": "SET_TV_AUDIO_FRONTEND()"
    },
    "SET_BINK_SHOULD_SKIP": {
      "prefix": "SET_BINK_SHOULD_SKIP()",
      "body": ["SET_BINK_SHOULD_SKIP(${1:int binkMovie}, ${2:BOOL bShouldSkip})"],
      "description": "SET_BINK_SHOULD_SKIP()"
    },
    "LOAD_MOVIE_MESH_SET": {
      "prefix": "LOAD_MOVIE_MESH_SET()",
      "body": ["LOAD_MOVIE_MESH_SET(${1:const char* movieMeshSetName})"],
      "description": "LOAD_MOVIE_MESH_SET()"
    },
    "RELEASE_MOVIE_MESH_SET": {
      "prefix": "RELEASE_MOVIE_MESH_SET()",
      "body": ["RELEASE_MOVIE_MESH_SET(${1:int movieMeshSet})"],
      "description": "RELEASE_MOVIE_MESH_SET()"
    },
    "QUERY_MOVIE_MESH_SET_STATE": {
      "prefix": "QUERY_MOVIE_MESH_SET_STATE()",
      "body": ["QUERY_MOVIE_MESH_SET_STATE(${1:Any p0})"],
      "description": "QUERY_MOVIE_MESH_SET_STATE()"
    },
    "GET_SCREEN_RESOLUTION": {
      "prefix": "GET_SCREEN_RESOLUTION()",
      "body": ["GET_SCREEN_RESOLUTION(${1:int* x}, ${2:int* y})"],
      "description": "GET_SCREEN_RESOLUTION()"
    },
    "GET_ACTUAL_SCREEN_RESOLUTION": {
      "prefix": "GET_ACTUAL_SCREEN_RESOLUTION()",
      "body": ["GET_ACTUAL_SCREEN_RESOLUTION(${1:int* x}, ${2:int* y})"],
      "description": "GET_ACTUAL_SCREEN_RESOLUTION()"
    },
    "GET_ASPECT_RATIO": {
      "prefix": "GET_ASPECT_RATIO()",
      "body": ["GET_ASPECT_RATIO(${1:BOOL b})"],
      "description": "GET_ASPECT_RATIO()"
    },
    "GET_SCREEN_ASPECT_RATIO": {
      "prefix": "GET_SCREEN_ASPECT_RATIO()",
      "body": ["GET_SCREEN_ASPECT_RATIO()"],
      "description": "GET_SCREEN_ASPECT_RATIO()"
    },
    "GET_IS_WIDESCREEN": {
      "prefix": "GET_IS_WIDESCREEN()",
      "body": ["GET_IS_WIDESCREEN()"],
      "description": "GET_IS_WIDESCREEN()"
    },
    "GET_IS_HIDEF": {
      "prefix": "GET_IS_HIDEF()",
      "body": ["GET_IS_HIDEF()"],
      "description": "GET_IS_HIDEF()"
    },
    "ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9": {
      "prefix": "ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9()",
      "body": ["ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9()"],
      "description": "ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9()"
    },
    "SET_NIGHTVISION": {
      "prefix": "SET_NIGHTVISION()",
      "body": ["SET_NIGHTVISION(${1:BOOL toggle})"],
      "description": "SET_NIGHTVISION()"
    },
    "GET_REQUESTINGNIGHTVISION": {
      "prefix": "GET_REQUESTINGNIGHTVISION()",
      "body": ["GET_REQUESTINGNIGHTVISION()"],
      "description": "GET_REQUESTINGNIGHTVISION()"
    },
    "GET_USINGNIGHTVISION": {
      "prefix": "GET_USINGNIGHTVISION()",
      "body": ["GET_USINGNIGHTVISION()"],
      "description": "GET_USINGNIGHTVISION()"
    },
    "SET_EXPOSURETWEAK": {
      "prefix": "SET_EXPOSURETWEAK()",
      "body": ["SET_EXPOSURETWEAK(${1:BOOL toggle})"],
      "description": "SET_EXPOSURETWEAK()"
    },
    "FORCE_EXPOSURE_READBACK": {
      "prefix": "FORCE_EXPOSURE_READBACK()",
      "body": ["FORCE_EXPOSURE_READBACK(${1:BOOL toggle})"],
      "description": "FORCE_EXPOSURE_READBACK()"
    },
    "OVERRIDE_NIGHTVISION_LIGHT_RANGE": {
      "prefix": "OVERRIDE_NIGHTVISION_LIGHT_RANGE()",
      "body": ["OVERRIDE_NIGHTVISION_LIGHT_RANGE(${1:float p0})"],
      "description": "OVERRIDE_NIGHTVISION_LIGHT_RANGE()"
    },
    "SET_NOISEOVERIDE": {
      "prefix": "SET_NOISEOVERIDE()",
      "body": ["SET_NOISEOVERIDE(${1:BOOL toggle})"],
      "description": "SET_NOISEOVERIDE()"
    },
    "SET_NOISINESSOVERIDE": {
      "prefix": "SET_NOISINESSOVERIDE()",
      "body": ["SET_NOISINESSOVERIDE(${1:float value})"],
      "description": "SET_NOISINESSOVERIDE()"
    },
    "GET_SCREEN_COORD_FROM_WORLD_COORD": {
      "prefix": "GET_SCREEN_COORD_FROM_WORLD_COORD()",
      "body": [
        "GET_SCREEN_COORD_FROM_WORLD_COORD(${1:float worldX}, ${2:float worldY}, ${3:float worldZ}, ${4:float* screenX}, ${5:float* screenY})"
      ],
      "description": "GET_SCREEN_COORD_FROM_WORLD_COORD()"
    },
    "GET_TEXTURE_RESOLUTION": {
      "prefix": "GET_TEXTURE_RESOLUTION()",
      "body": [
        "GET_TEXTURE_RESOLUTION(${1:const char* textureDict}, ${2:const char* textureName})"
      ],
      "description": "GET_TEXTURE_RESOLUTION()"
    },
    "OVERRIDE_PED_CREW_LOGO_TEXTURE": {
      "prefix": "OVERRIDE_PED_CREW_LOGO_TEXTURE()",
      "body": [
        "OVERRIDE_PED_CREW_LOGO_TEXTURE(${1:Ped ped}, ${2:const char* txd}, ${3:const char* txn})"
      ],
      "description": "OVERRIDE_PED_CREW_LOGO_TEXTURE()"
    },
    "SET_DISTANCE_BLUR_STRENGTH_OVERRIDE": {
      "prefix": "SET_DISTANCE_BLUR_STRENGTH_OVERRIDE()",
      "body": ["SET_DISTANCE_BLUR_STRENGTH_OVERRIDE(${1:float p0})"],
      "description": "SET_DISTANCE_BLUR_STRENGTH_OVERRIDE()"
    },
    "SET_FLASH": {
      "prefix": "SET_FLASH()",
      "body": [
        "SET_FLASH(${1:float p0}, ${2:float p1}, ${3:float fadeIn}, ${4:float duration}, ${5:float fadeOut})"
      ],
      "description": "SET_FLASH()"
    },
    "DISABLE_OCCLUSION_THIS_FRAME": {
      "prefix": "DISABLE_OCCLUSION_THIS_FRAME()",
      "body": ["DISABLE_OCCLUSION_THIS_FRAME()"],
      "description": "DISABLE_OCCLUSION_THIS_FRAME()"
    },
    "SET_ARTIFICIAL_LIGHTS_STATE": {
      "prefix": "SET_ARTIFICIAL_LIGHTS_STATE()",
      "body": ["SET_ARTIFICIAL_LIGHTS_STATE(${1:BOOL state})"],
      "description": "SET_ARTIFICIAL_LIGHTS_STATE()"
    },
    "SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE": {
      "prefix": "SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE()",
      "body": ["SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE(${1:BOOL toggle})"],
      "description": "SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE()"
    },
    "DISABLE_HDTEX_THIS_FRAME": {
      "prefix": "DISABLE_HDTEX_THIS_FRAME()",
      "body": ["DISABLE_HDTEX_THIS_FRAME()"],
      "description": "DISABLE_HDTEX_THIS_FRAME()"
    },
    "CREATE_TRACKED_POINT": {
      "prefix": "CREATE_TRACKED_POINT()",
      "body": ["CREATE_TRACKED_POINT()"],
      "description": "CREATE_TRACKED_POINT()"
    },
    "SET_TRACKED_POINT_INFO": {
      "prefix": "SET_TRACKED_POINT_INFO()",
      "body": [
        "SET_TRACKED_POINT_INFO(${1:int point}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius})"
      ],
      "description": "SET_TRACKED_POINT_INFO()"
    },
    "IS_TRACKED_POINT_VISIBLE": {
      "prefix": "IS_TRACKED_POINT_VISIBLE()",
      "body": ["IS_TRACKED_POINT_VISIBLE(${1:int point})"],
      "description": "IS_TRACKED_POINT_VISIBLE()"
    },
    "DESTROY_TRACKED_POINT": {
      "prefix": "DESTROY_TRACKED_POINT()",
      "body": ["DESTROY_TRACKED_POINT(${1:int point})"],
      "description": "DESTROY_TRACKED_POINT()"
    },
    "SET_GRASS_CULL_SPHERE": {
      "prefix": "SET_GRASS_CULL_SPHERE()",
      "body": [
        "SET_GRASS_CULL_SPHERE(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
      ],
      "description": "SET_GRASS_CULL_SPHERE()"
    },
    "REMOVE_GRASS_CULL_SPHERE": {
      "prefix": "REMOVE_GRASS_CULL_SPHERE()",
      "body": ["REMOVE_GRASS_CULL_SPHERE(${1:int handle})"],
      "description": "REMOVE_GRASS_CULL_SPHERE()"
    },
    "PROCGRASS_ENABLE_CULLSPHERE": {
      "prefix": "PROCGRASS_ENABLE_CULLSPHERE()",
      "body": [
        "PROCGRASS_ENABLE_CULLSPHERE(${1:int handle}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float scale})"
      ],
      "description": "PROCGRASS_ENABLE_CULLSPHERE()"
    },
    "PROCGRASS_DISABLE_CULLSPHERE": {
      "prefix": "PROCGRASS_DISABLE_CULLSPHERE()",
      "body": ["PROCGRASS_DISABLE_CULLSPHERE(${1:int handle})"],
      "description": "PROCGRASS_DISABLE_CULLSPHERE()"
    },
    "PROCGRASS_IS_CULLSPHERE_ENABLED": {
      "prefix": "PROCGRASS_IS_CULLSPHERE_ENABLED()",
      "body": ["PROCGRASS_IS_CULLSPHERE_ENABLED(${1:int handle})"],
      "description": "PROCGRASS_IS_CULLSPHERE_ENABLED()"
    },
    "PROCGRASS_ENABLE_AMBSCALESCAN": {
      "prefix": "PROCGRASS_ENABLE_AMBSCALESCAN()",
      "body": ["PROCGRASS_ENABLE_AMBSCALESCAN()"],
      "description": "PROCGRASS_ENABLE_AMBSCALESCAN()"
    },
    "PROCGRASS_DISABLE_AMBSCALESCAN": {
      "prefix": "PROCGRASS_DISABLE_AMBSCALESCAN()",
      "body": ["PROCGRASS_DISABLE_AMBSCALESCAN()"],
      "description": "PROCGRASS_DISABLE_AMBSCALESCAN()"
    },
    "DISABLE_PROCOBJ_CREATION": {
      "prefix": "DISABLE_PROCOBJ_CREATION()",
      "body": ["DISABLE_PROCOBJ_CREATION()"],
      "description": "DISABLE_PROCOBJ_CREATION()"
    },
    "ENABLE_PROCOBJ_CREATION": {
      "prefix": "ENABLE_PROCOBJ_CREATION()",
      "body": ["ENABLE_PROCOBJ_CREATION()"],
      "description": "ENABLE_PROCOBJ_CREATION()"
    },
    "GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE": {
      "prefix": "GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE()",
      "body": [
        "GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE(${1:float x}, ${2:float y}, ${3:float z}, ${4:Any p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float scale})"
      ],
      "description": "GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE()"
    },
    "GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE": {
      "prefix": "GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE()",
      "body": [
        "GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:float p4}, ${6:float p5}, ${7:float p6})"
      ],
      "description": "GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE()"
    },
    "GRASSBATCH_DISABLE_FLATTENING": {
      "prefix": "GRASSBATCH_DISABLE_FLATTENING()",
      "body": ["GRASSBATCH_DISABLE_FLATTENING()"],
      "description": "GRASSBATCH_DISABLE_FLATTENING()"
    },
    "CASCADE_SHADOWS_INIT_SESSION": {
      "prefix": "CASCADE_SHADOWS_INIT_SESSION()",
      "body": ["CASCADE_SHADOWS_INIT_SESSION()"],
      "description": "CASCADE_SHADOWS_INIT_SESSION()"
    },
    "CASCADE_SHADOWS_SET_CASCADE_BOUNDS": {
      "prefix": "CASCADE_SHADOWS_SET_CASCADE_BOUNDS()",
      "body": [
        "CASCADE_SHADOWS_SET_CASCADE_BOUNDS(${1:Any p0}, ${2:BOOL p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:BOOL p6}, ${8:float p7})"
      ],
      "description": "CASCADE_SHADOWS_SET_CASCADE_BOUNDS()"
    },
    "CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE": {
      "prefix": "CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE()",
      "body": ["CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE(${1:float p0})"],
      "description": "CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE()"
    },
    "CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE": {
      "prefix": "CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE()",
      "body": ["CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE(${1:float p0})"],
      "description": "CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE()"
    },
    "CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT": {
      "prefix": "CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT()",
      "body": ["CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT(${1:float p0})"],
      "description": "CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT()"
    },
    "CASCADE_SHADOWS_SET_BOUND_POSITION": {
      "prefix": "CASCADE_SHADOWS_SET_BOUND_POSITION()",
      "body": ["CASCADE_SHADOWS_SET_BOUND_POSITION(${1:Any p0})"],
      "description": "CASCADE_SHADOWS_SET_BOUND_POSITION()"
    },
    "CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER": {
      "prefix": "CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER()",
      "body": ["CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER(${1:BOOL toggle})"],
      "description": "CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER()"
    },
    "CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED": {
      "prefix": "CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED()",
      "body": ["CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED(${1:BOOL p0})"],
      "description": "CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED()"
    },
    "CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE": {
      "prefix": "CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE()",
      "body": ["CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE(${1:const char* type})"],
      "description": "CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE()"
    },
    "CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE": {
      "prefix": "CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE()",
      "body": ["CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE()"],
      "description": "CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE()"
    },
    "CASCADE_SHADOWS_SET_AIRCRAFT_MODE": {
      "prefix": "CASCADE_SHADOWS_SET_AIRCRAFT_MODE()",
      "body": ["CASCADE_SHADOWS_SET_AIRCRAFT_MODE(${1:BOOL p0})"],
      "description": "CASCADE_SHADOWS_SET_AIRCRAFT_MODE()"
    },
    "CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE": {
      "prefix": "CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE()",
      "body": ["CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE(${1:BOOL p0})"],
      "description": "CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE()"
    },
    "CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE": {
      "prefix": "CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE()",
      "body": ["CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE(${1:float p0})"],
      "description": "CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE()"
    },
    "CASCADE_SHADOWS_ENABLE_FREEZER": {
      "prefix": "CASCADE_SHADOWS_ENABLE_FREEZER()",
      "body": ["CASCADE_SHADOWS_ENABLE_FREEZER(${1:BOOL p0})"],
      "description": "CASCADE_SHADOWS_ENABLE_FREEZER()"
    },
    "WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY": {
      "prefix": "WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY()",
      "body": ["WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY(${1:Any p0})"],
      "description": "WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY()"
    },
    "GOLF_TRAIL_SET_ENABLED": {
      "prefix": "GOLF_TRAIL_SET_ENABLED()",
      "body": ["GOLF_TRAIL_SET_ENABLED(${1:BOOL toggle})"],
      "description": "GOLF_TRAIL_SET_ENABLED()"
    },
    "GOLF_TRAIL_SET_PATH": {
      "prefix": "GOLF_TRAIL_SET_PATH()",
      "body": [
        "GOLF_TRAIL_SET_PATH(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:BOOL p8})"
      ],
      "description": "GOLF_TRAIL_SET_PATH()"
    },
    "GOLF_TRAIL_SET_RADIUS": {
      "prefix": "GOLF_TRAIL_SET_RADIUS()",
      "body": [
        "GOLF_TRAIL_SET_RADIUS(${1:float p0}, ${2:float p1}, ${3:float p2})"
      ],
      "description": "GOLF_TRAIL_SET_RADIUS()"
    },
    "GOLF_TRAIL_SET_COLOUR": {
      "prefix": "GOLF_TRAIL_SET_COLOUR()",
      "body": [
        "GOLF_TRAIL_SET_COLOUR(${1:int p0}, ${2:int p1}, ${3:int p2}, ${4:int p3}, ${5:int p4}, ${6:int p5}, ${7:int p6}, ${8:int p7}, ${9:int p8}, ${10:int p9}, ${11:int p10}, ${12:int p11})"
      ],
      "description": "GOLF_TRAIL_SET_COLOUR()"
    },
    "GOLF_TRAIL_SET_TESSELLATION": {
      "prefix": "GOLF_TRAIL_SET_TESSELLATION()",
      "body": ["GOLF_TRAIL_SET_TESSELLATION(${1:int p0}, ${2:int p1})"],
      "description": "GOLF_TRAIL_SET_TESSELLATION()"
    },
    "GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE": {
      "prefix": "GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE()",
      "body": ["GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE(${1:BOOL p0})"],
      "description": "GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE()"
    },
    "GOLF_TRAIL_SET_FIXED_CONTROL_POINT": {
      "prefix": "GOLF_TRAIL_SET_FIXED_CONTROL_POINT()",
      "body": [
        "GOLF_TRAIL_SET_FIXED_CONTROL_POINT(${1:int type}, ${2:float xPos}, ${3:float yPos}, ${4:float zPos}, ${5:float p4}, ${6:int red}, ${7:int green}, ${8:int blue}, ${9:int alpha})"
      ],
      "description": "GOLF_TRAIL_SET_FIXED_CONTROL_POINT()"
    },
    "GOLF_TRAIL_SET_SHADER_PARAMS": {
      "prefix": "GOLF_TRAIL_SET_SHADER_PARAMS()",
      "body": [
        "GOLF_TRAIL_SET_SHADER_PARAMS(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4})"
      ],
      "description": "GOLF_TRAIL_SET_SHADER_PARAMS()"
    },
    "GOLF_TRAIL_SET_FACING": {
      "prefix": "GOLF_TRAIL_SET_FACING()",
      "body": ["GOLF_TRAIL_SET_FACING(${1:BOOL p0})"],
      "description": "GOLF_TRAIL_SET_FACING()"
    },
    "GOLF_TRAIL_GET_MAX_HEIGHT": {
      "prefix": "GOLF_TRAIL_GET_MAX_HEIGHT()",
      "body": ["GOLF_TRAIL_GET_MAX_HEIGHT()"],
      "description": "GOLF_TRAIL_GET_MAX_HEIGHT()"
    },
    "GOLF_TRAIL_GET_VISUAL_CONTROL_POINT": {
      "prefix": "GOLF_TRAIL_GET_VISUAL_CONTROL_POINT()",
      "body": ["GOLF_TRAIL_GET_VISUAL_CONTROL_POINT(${1:int p0})"],
      "description": "GOLF_TRAIL_GET_VISUAL_CONTROL_POINT()"
    },
    "SET_SEETHROUGH": {
      "prefix": "SET_SEETHROUGH()",
      "body": ["SET_SEETHROUGH(${1:BOOL toggle})"],
      "description": "SET_SEETHROUGH()"
    },
    "GET_USINGSEETHROUGH": {
      "prefix": "GET_USINGSEETHROUGH()",
      "body": ["GET_USINGSEETHROUGH()"],
      "description": "GET_USINGSEETHROUGH()"
    },
    "SEETHROUGH_RESET": {
      "prefix": "SEETHROUGH_RESET()",
      "body": ["SEETHROUGH_RESET()"],
      "description": "SEETHROUGH_RESET()"
    },
    "SEETHROUGH_SET_FADE_STARTDISTANCE": {
      "prefix": "SEETHROUGH_SET_FADE_STARTDISTANCE()",
      "body": ["SEETHROUGH_SET_FADE_STARTDISTANCE(${1:float distance})"],
      "description": "SEETHROUGH_SET_FADE_STARTDISTANCE()"
    },
    "SEETHROUGH_SET_FADE_ENDDISTANCE": {
      "prefix": "SEETHROUGH_SET_FADE_ENDDISTANCE()",
      "body": ["SEETHROUGH_SET_FADE_ENDDISTANCE(${1:float distance})"],
      "description": "SEETHROUGH_SET_FADE_ENDDISTANCE()"
    },
    "SEETHROUGH_GET_MAX_THICKNESS": {
      "prefix": "SEETHROUGH_GET_MAX_THICKNESS()",
      "body": ["SEETHROUGH_GET_MAX_THICKNESS()"],
      "description": "SEETHROUGH_GET_MAX_THICKNESS()"
    },
    "SEETHROUGH_SET_MAX_THICKNESS": {
      "prefix": "SEETHROUGH_SET_MAX_THICKNESS()",
      "body": ["SEETHROUGH_SET_MAX_THICKNESS(${1:float thickness})"],
      "description": "SEETHROUGH_SET_MAX_THICKNESS()"
    },
    "SEETHROUGH_SET_NOISE_MIN": {
      "prefix": "SEETHROUGH_SET_NOISE_MIN()",
      "body": ["SEETHROUGH_SET_NOISE_MIN(${1:float amount})"],
      "description": "SEETHROUGH_SET_NOISE_MIN()"
    },
    "SEETHROUGH_SET_NOISE_MAX": {
      "prefix": "SEETHROUGH_SET_NOISE_MAX()",
      "body": ["SEETHROUGH_SET_NOISE_MAX(${1:float amount})"],
      "description": "SEETHROUGH_SET_NOISE_MAX()"
    },
    "SEETHROUGH_SET_HILIGHT_INTENSITY": {
      "prefix": "SEETHROUGH_SET_HILIGHT_INTENSITY()",
      "body": ["SEETHROUGH_SET_HILIGHT_INTENSITY(${1:float intensity})"],
      "description": "SEETHROUGH_SET_HILIGHT_INTENSITY()"
    },
    "SEETHROUGH_SET_HIGHLIGHT_NOISE": {
      "prefix": "SEETHROUGH_SET_HIGHLIGHT_NOISE()",
      "body": ["SEETHROUGH_SET_HIGHLIGHT_NOISE(${1:float noise})"],
      "description": "SEETHROUGH_SET_HIGHLIGHT_NOISE()"
    },
    "SEETHROUGH_SET_HEATSCALE": {
      "prefix": "SEETHROUGH_SET_HEATSCALE()",
      "body": ["SEETHROUGH_SET_HEATSCALE(${1:int index}, ${2:float heatScale})"],
      "description": "SEETHROUGH_SET_HEATSCALE()"
    },
    "SEETHROUGH_SET_COLOR_NEAR": {
      "prefix": "SEETHROUGH_SET_COLOR_NEAR()",
      "body": [
        "SEETHROUGH_SET_COLOR_NEAR(${1:int red}, ${2:int green}, ${3:int blue})"
      ],
      "description": "SEETHROUGH_SET_COLOR_NEAR()"
    },
    "SET_MOTIONBLUR_MAX_VEL_SCALER": {
      "prefix": "SET_MOTIONBLUR_MAX_VEL_SCALER()",
      "body": ["SET_MOTIONBLUR_MAX_VEL_SCALER(${1:float p0})"],
      "description": "SET_MOTIONBLUR_MAX_VEL_SCALER()"
    },
    "GET_MOTIONBLUR_MAX_VEL_SCALER": {
      "prefix": "GET_MOTIONBLUR_MAX_VEL_SCALER()",
      "body": ["GET_MOTIONBLUR_MAX_VEL_SCALER()"],
      "description": "GET_MOTIONBLUR_MAX_VEL_SCALER()"
    },
    "SET_FORCE_MOTIONBLUR": {
      "prefix": "SET_FORCE_MOTIONBLUR()",
      "body": ["SET_FORCE_MOTIONBLUR(${1:BOOL toggle})"],
      "description": "SET_FORCE_MOTIONBLUR()"
    },
    "TOGGLE_PLAYER_DAMAGE_OVERLAY": {
      "prefix": "TOGGLE_PLAYER_DAMAGE_OVERLAY()",
      "body": ["TOGGLE_PLAYER_DAMAGE_OVERLAY(${1:BOOL toggle})"],
      "description": "TOGGLE_PLAYER_DAMAGE_OVERLAY()"
    },
    "RESET_ADAPTATION": {
      "prefix": "RESET_ADAPTATION()",
      "body": ["RESET_ADAPTATION(${1:int p0})"],
      "description": "RESET_ADAPTATION()"
    },
    "TRIGGER_SCREENBLUR_FADE_IN": {
      "prefix": "TRIGGER_SCREENBLUR_FADE_IN()",
      "body": ["TRIGGER_SCREENBLUR_FADE_IN(${1:float transitionTime})"],
      "description": "TRIGGER_SCREENBLUR_FADE_IN()"
    },
    "TRIGGER_SCREENBLUR_FADE_OUT": {
      "prefix": "TRIGGER_SCREENBLUR_FADE_OUT()",
      "body": ["TRIGGER_SCREENBLUR_FADE_OUT(${1:float transitionTime})"],
      "description": "TRIGGER_SCREENBLUR_FADE_OUT()"
    },
    "DISABLE_SCREENBLUR_FADE": {
      "prefix": "DISABLE_SCREENBLUR_FADE()",
      "body": ["DISABLE_SCREENBLUR_FADE()"],
      "description": "DISABLE_SCREENBLUR_FADE()"
    },
    "GET_SCREENBLUR_FADE_CURRENT_TIME": {
      "prefix": "GET_SCREENBLUR_FADE_CURRENT_TIME()",
      "body": ["GET_SCREENBLUR_FADE_CURRENT_TIME()"],
      "description": "GET_SCREENBLUR_FADE_CURRENT_TIME()"
    },
    "IS_SCREENBLUR_FADE_RUNNING": {
      "prefix": "IS_SCREENBLUR_FADE_RUNNING()",
      "body": ["IS_SCREENBLUR_FADE_RUNNING()"],
      "description": "IS_SCREENBLUR_FADE_RUNNING()"
    },
    "TOGGLE_PAUSED_RENDERPHASES": {
      "prefix": "TOGGLE_PAUSED_RENDERPHASES()",
      "body": ["TOGGLE_PAUSED_RENDERPHASES(${1:BOOL toggle})"],
      "description": "TOGGLE_PAUSED_RENDERPHASES()"
    },
    "GET_TOGGLE_PAUSED_RENDERPHASES_STATUS": {
      "prefix": "GET_TOGGLE_PAUSED_RENDERPHASES_STATUS()",
      "body": ["GET_TOGGLE_PAUSED_RENDERPHASES_STATUS()"],
      "description": "GET_TOGGLE_PAUSED_RENDERPHASES_STATUS()"
    },
    "RESET_PAUSED_RENDERPHASES": {
      "prefix": "RESET_PAUSED_RENDERPHASES()",
      "body": ["RESET_PAUSED_RENDERPHASES()"],
      "description": "RESET_PAUSED_RENDERPHASES()"
    },
    "GRAB_PAUSEMENU_OWNERSHIP": {
      "prefix": "GRAB_PAUSEMENU_OWNERSHIP()",
      "body": ["GRAB_PAUSEMENU_OWNERSHIP()"],
      "description": "GRAB_PAUSEMENU_OWNERSHIP()"
    },
    "SET_HIDOF_OVERRIDE": {
      "prefix": "SET_HIDOF_OVERRIDE()",
      "body": [
        "SET_HIDOF_OVERRIDE(${1:BOOL p0}, ${2:BOOL p1}, ${3:float nearplaneOut}, ${4:float nearplaneIn}, ${5:float farplaneOut}, ${6:float farplaneIn})"
      ],
      "description": "SET_HIDOF_OVERRIDE()"
    },
    "SET_LOCK_ADAPTIVE_DOF_DISTANCE": {
      "prefix": "SET_LOCK_ADAPTIVE_DOF_DISTANCE()",
      "body": ["SET_LOCK_ADAPTIVE_DOF_DISTANCE(${1:BOOL p0})"],
      "description": "SET_LOCK_ADAPTIVE_DOF_DISTANCE()"
    },
    "PHONEPHOTOEDITOR_TOGGLE": {
      "prefix": "PHONEPHOTOEDITOR_TOGGLE()",
      "body": ["PHONEPHOTOEDITOR_TOGGLE(${1:BOOL p0})"],
      "description": "PHONEPHOTOEDITOR_TOGGLE()"
    },
    "PHONEPHOTOEDITOR_IS_ACTIVE": {
      "prefix": "PHONEPHOTOEDITOR_IS_ACTIVE()",
      "body": ["PHONEPHOTOEDITOR_IS_ACTIVE()"],
      "description": "PHONEPHOTOEDITOR_IS_ACTIVE()"
    },
    "PHONEPHOTOEDITOR_SET_FRAME_TXD": {
      "prefix": "PHONEPHOTOEDITOR_SET_FRAME_TXD()",
      "body": [
        "PHONEPHOTOEDITOR_SET_FRAME_TXD(${1:const char* textureDict}, ${2:BOOL p1})"
      ],
      "description": "PHONEPHOTOEDITOR_SET_FRAME_TXD()"
    },
    "START_PARTICLE_FX_NON_LOOPED_AT_COORD": {
      "prefix": "START_PARTICLE_FX_NON_LOOPED_AT_COORD()",
      "body": [
        "START_PARTICLE_FX_NON_LOOPED_AT_COORD(${1:const char* effectName}, ${2:float xPos}, ${3:float yPos}, ${4:float zPos}, ${5:float xRot}, ${6:float yRot}, ${7:float zRot}, ${8:float scale}, ${9:BOOL xAxis}, ${10:BOOL yAxis}, ${11:BOOL zAxis})"
      ],
      "description": "START_PARTICLE_FX_NON_LOOPED_AT_COORD()"
    },
    "START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD": {
      "prefix": "START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD()",
      "body": [
        "START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD(${1:const char* effectName}, ${2:float xPos}, ${3:float yPos}, ${4:float zPos}, ${5:float xRot}, ${6:float yRot}, ${7:float zRot}, ${8:float scale}, ${9:BOOL xAxis}, ${10:BOOL yAxis}, ${11:BOOL zAxis}, ${12:BOOL p11})"
      ],
      "description": "START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD()"
    },
    "START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE": {
      "prefix": "START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE()",
      "body": [
        "START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(${1:const char* effectName}, ${2:Ped ped}, ${3:float offsetX}, ${4:float offsetY}, ${5:float offsetZ}, ${6:float rotX}, ${7:float rotY}, ${8:float rotZ}, ${9:int boneIndex}, ${10:float scale}, ${11:BOOL axisX}, ${12:BOOL axisY}, ${13:BOOL axisZ})"
      ],
      "description": "START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE()"
    },
    "START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE": {
      "prefix": "START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE()",
      "body": [
        "START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(${1:const char* effectName}, ${2:Ped ped}, ${3:float offsetX}, ${4:float offsetY}, ${5:float offsetZ}, ${6:float rotX}, ${7:float rotY}, ${8:float rotZ}, ${9:int boneIndex}, ${10:float scale}, ${11:BOOL axisX}, ${12:BOOL axisY}, ${13:BOOL axisZ})"
      ],
      "description": "START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE()"
    },
    "START_PARTICLE_FX_NON_LOOPED_ON_ENTITY": {
      "prefix": "START_PARTICLE_FX_NON_LOOPED_ON_ENTITY()",
      "body": [
        "START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(${1:const char* effectName}, ${2:Entity entity}, ${3:float offsetX}, ${4:float offsetY}, ${5:float offsetZ}, ${6:float rotX}, ${7:float rotY}, ${8:float rotZ}, ${9:float scale}, ${10:BOOL axisX}, ${11:BOOL axisY}, ${12:BOOL axisZ})"
      ],
      "description": "START_PARTICLE_FX_NON_LOOPED_ON_ENTITY()"
    },
    "START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY": {
      "prefix": "START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY()",
      "body": [
        "START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY(${1:const char* effectName}, ${2:Entity entity}, ${3:float offsetX}, ${4:float offsetY}, ${5:float offsetZ}, ${6:float rotX}, ${7:float rotY}, ${8:float rotZ}, ${9:float scale}, ${10:BOOL axisX}, ${11:BOOL axisY}, ${12:BOOL axisZ})"
      ],
      "description": "START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY()"
    },
    "START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE": {
      "prefix": "START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE()",
      "body": [
        "START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE(${1:const char* effectName}, ${2:Entity entity}, ${3:float offsetX}, ${4:float offsetY}, ${5:float offsetZ}, ${6:float rotX}, ${7:float rotY}, ${8:float rotZ}, ${9:int boneIndex}, ${10:float scale}, ${11:BOOL axisX}, ${12:BOOL axisY}, ${13:BOOL axisZ})"
      ],
      "description": "START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE()"
    },
    "SET_PARTICLE_FX_NON_LOOPED_COLOUR": {
      "prefix": "SET_PARTICLE_FX_NON_LOOPED_COLOUR()",
      "body": [
        "SET_PARTICLE_FX_NON_LOOPED_COLOUR(${1:float r}, ${2:float g}, ${3:float b})"
      ],
      "description": "SET_PARTICLE_FX_NON_LOOPED_COLOUR()"
    },
    "SET_PARTICLE_FX_NON_LOOPED_ALPHA": {
      "prefix": "SET_PARTICLE_FX_NON_LOOPED_ALPHA()",
      "body": ["SET_PARTICLE_FX_NON_LOOPED_ALPHA(${1:float alpha})"],
      "description": "SET_PARTICLE_FX_NON_LOOPED_ALPHA()"
    },
    "SET_PARTICLE_FX_NON_LOOPED_SCALE": {
      "prefix": "SET_PARTICLE_FX_NON_LOOPED_SCALE()",
      "body": ["SET_PARTICLE_FX_NON_LOOPED_SCALE(${1:float scale})"],
      "description": "SET_PARTICLE_FX_NON_LOOPED_SCALE()"
    },
    "SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE": {
      "prefix": "SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE()",
      "body": [
        "SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE(${1:float p0}, ${2:float p1}, ${3:float scale})"
      ],
      "description": "SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE()"
    },
    "SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR": {
      "prefix": "SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR()",
      "body": ["SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR(${1:BOOL toggle})"],
      "description": "SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR()"
    },
    "START_PARTICLE_FX_LOOPED_AT_COORD": {
      "prefix": "START_PARTICLE_FX_LOOPED_AT_COORD()",
      "body": [
        "START_PARTICLE_FX_LOOPED_AT_COORD(${1:const char* effectName}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float xRot}, ${6:float yRot}, ${7:float zRot}, ${8:float scale}, ${9:BOOL xAxis}, ${10:BOOL yAxis}, ${11:BOOL zAxis}, ${12:BOOL p11})"
      ],
      "description": "START_PARTICLE_FX_LOOPED_AT_COORD()"
    },
    "START_PARTICLE_FX_LOOPED_ON_PED_BONE": {
      "prefix": "START_PARTICLE_FX_LOOPED_ON_PED_BONE()",
      "body": [
        "START_PARTICLE_FX_LOOPED_ON_PED_BONE(${1:const char* effectName}, ${2:Ped ped}, ${3:float xOffset}, ${4:float yOffset}, ${5:float zOffset}, ${6:float xRot}, ${7:float yRot}, ${8:float zRot}, ${9:int boneIndex}, ${10:float scale}, ${11:BOOL xAxis}, ${12:BOOL yAxis}, ${13:BOOL zAxis})"
      ],
      "description": "START_PARTICLE_FX_LOOPED_ON_PED_BONE()"
    },
    "START_PARTICLE_FX_LOOPED_ON_ENTITY": {
      "prefix": "START_PARTICLE_FX_LOOPED_ON_ENTITY()",
      "body": [
        "START_PARTICLE_FX_LOOPED_ON_ENTITY(${1:const char* effectName}, ${2:Entity entity}, ${3:float xOffset}, ${4:float yOffset}, ${5:float zOffset}, ${6:float xRot}, ${7:float yRot}, ${8:float zRot}, ${9:float scale}, ${10:BOOL xAxis}, ${11:BOOL yAxis}, ${12:BOOL zAxis})"
      ],
      "description": "START_PARTICLE_FX_LOOPED_ON_ENTITY()"
    },
    "START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE": {
      "prefix": "START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE()",
      "body": [
        "START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(${1:const char* effectName}, ${2:Entity entity}, ${3:float xOffset}, ${4:float yOffset}, ${5:float zOffset}, ${6:float xRot}, ${7:float yRot}, ${8:float zRot}, ${9:int boneIndex}, ${10:float scale}, ${11:BOOL xAxis}, ${12:BOOL yAxis}, ${13:BOOL zAxis})"
      ],
      "description": "START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE()"
    },
    "START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY": {
      "prefix": "START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY()",
      "body": [
        "START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY(${1:const char* effectName}, ${2:Entity entity}, ${3:float xOffset}, ${4:float yOffset}, ${5:float zOffset}, ${6:float xRot}, ${7:float yRot}, ${8:float zRot}, ${9:float scale}, ${10:BOOL xAxis}, ${11:BOOL yAxis}, ${12:BOOL zAxis}, ${13:float r}, ${14:float g}, ${15:float b}, ${16:float a})"
      ],
      "description": "START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY()"
    },
    "START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE": {
      "prefix": "START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE()",
      "body": [
        "START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(${1:const char* effectName}, ${2:Entity entity}, ${3:float xOffset}, ${4:float yOffset}, ${5:float zOffset}, ${6:float xRot}, ${7:float yRot}, ${8:float zRot}, ${9:int boneIndex}, ${10:float scale}, ${11:BOOL xAxis}, ${12:BOOL yAxis}, ${13:BOOL zAxis}, ${14:float r}, ${15:float g}, ${16:float b}, ${17:float a})"
      ],
      "description": "START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE()"
    },
    "STOP_PARTICLE_FX_LOOPED": {
      "prefix": "STOP_PARTICLE_FX_LOOPED()",
      "body": ["STOP_PARTICLE_FX_LOOPED(${1:int ptfxHandle}, ${2:BOOL p1})"],
      "description": "STOP_PARTICLE_FX_LOOPED()"
    },
    "REMOVE_PARTICLE_FX": {
      "prefix": "REMOVE_PARTICLE_FX()",
      "body": ["REMOVE_PARTICLE_FX(${1:int ptfxHandle}, ${2:BOOL p1})"],
      "description": "REMOVE_PARTICLE_FX()"
    },
    "REMOVE_PARTICLE_FX_FROM_ENTITY": {
      "prefix": "REMOVE_PARTICLE_FX_FROM_ENTITY()",
      "body": ["REMOVE_PARTICLE_FX_FROM_ENTITY(${1:Entity entity})"],
      "description": "REMOVE_PARTICLE_FX_FROM_ENTITY()"
    },
    "REMOVE_PARTICLE_FX_IN_RANGE": {
      "prefix": "REMOVE_PARTICLE_FX_IN_RANGE()",
      "body": [
        "REMOVE_PARTICLE_FX_IN_RANGE(${1:float X}, ${2:float Y}, ${3:float Z}, ${4:float radius})"
      ],
      "description": "REMOVE_PARTICLE_FX_IN_RANGE()"
    },
    "FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR": {
      "prefix": "FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR()",
      "body": ["FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR(${1:Any p0}, ${2:Any p1})"],
      "description": "FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR()"
    },
    "DOES_PARTICLE_FX_LOOPED_EXIST": {
      "prefix": "DOES_PARTICLE_FX_LOOPED_EXIST()",
      "body": ["DOES_PARTICLE_FX_LOOPED_EXIST(${1:int ptfxHandle})"],
      "description": "DOES_PARTICLE_FX_LOOPED_EXIST()"
    },
    "SET_PARTICLE_FX_LOOPED_OFFSETS": {
      "prefix": "SET_PARTICLE_FX_LOOPED_OFFSETS()",
      "body": [
        "SET_PARTICLE_FX_LOOPED_OFFSETS(${1:int ptfxHandle}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float rotX}, ${6:float rotY}, ${7:float rotZ})"
      ],
      "description": "SET_PARTICLE_FX_LOOPED_OFFSETS()"
    },
    "SET_PARTICLE_FX_LOOPED_EVOLUTION": {
      "prefix": "SET_PARTICLE_FX_LOOPED_EVOLUTION()",
      "body": [
        "SET_PARTICLE_FX_LOOPED_EVOLUTION(${1:int ptfxHandle}, ${2:const char* propertyName}, ${3:float amount}, ${4:BOOL noNetwork})"
      ],
      "description": "SET_PARTICLE_FX_LOOPED_EVOLUTION()"
    },
    "SET_PARTICLE_FX_LOOPED_COLOUR": {
      "prefix": "SET_PARTICLE_FX_LOOPED_COLOUR()",
      "body": [
        "SET_PARTICLE_FX_LOOPED_COLOUR(${1:int ptfxHandle}, ${2:float r}, ${3:float g}, ${4:float b}, ${5:BOOL p4})"
      ],
      "description": "SET_PARTICLE_FX_LOOPED_COLOUR()"
    },
    "SET_PARTICLE_FX_LOOPED_ALPHA": {
      "prefix": "SET_PARTICLE_FX_LOOPED_ALPHA()",
      "body": [
        "SET_PARTICLE_FX_LOOPED_ALPHA(${1:int ptfxHandle}, ${2:float alpha})"
      ],
      "description": "SET_PARTICLE_FX_LOOPED_ALPHA()"
    },
    "SET_PARTICLE_FX_LOOPED_SCALE": {
      "prefix": "SET_PARTICLE_FX_LOOPED_SCALE()",
      "body": [
        "SET_PARTICLE_FX_LOOPED_SCALE(${1:int ptfxHandle}, ${2:float scale})"
      ],
      "description": "SET_PARTICLE_FX_LOOPED_SCALE()"
    },
    "SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST": {
      "prefix": "SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST()",
      "body": [
        "SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST(${1:int ptfxHandle}, ${2:float range})"
      ],
      "description": "SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST()"
    },
    "_SET_PARTICLE_FX_LOOPED_CAMERA_BIAS": {
      "prefix": "_SET_PARTICLE_FX_LOOPED_CAMERA_BIAS()",
      "body": [
        "_SET_PARTICLE_FX_LOOPED_CAMERA_BIAS(${1:int ptfxHandle}, ${2:float p1})"
      ],
      "description": "_SET_PARTICLE_FX_LOOPED_CAMERA_BIAS()"
    },
    "SET_PARTICLE_FX_CAM_INSIDE_VEHICLE": {
      "prefix": "SET_PARTICLE_FX_CAM_INSIDE_VEHICLE()",
      "body": ["SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(${1:BOOL p0})"],
      "description": "SET_PARTICLE_FX_CAM_INSIDE_VEHICLE()"
    },
    "SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE": {
      "prefix": "SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE()",
      "body": [
        "SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE()"
    },
    "SET_PARTICLE_FX_SHOOTOUT_BOAT": {
      "prefix": "SET_PARTICLE_FX_SHOOTOUT_BOAT()",
      "body": ["SET_PARTICLE_FX_SHOOTOUT_BOAT(${1:Any p0})"],
      "description": "SET_PARTICLE_FX_SHOOTOUT_BOAT()"
    },
    "CLEAR_PARTICLE_FX_SHOOTOUT_BOAT": {
      "prefix": "CLEAR_PARTICLE_FX_SHOOTOUT_BOAT()",
      "body": ["CLEAR_PARTICLE_FX_SHOOTOUT_BOAT()"],
      "description": "CLEAR_PARTICLE_FX_SHOOTOUT_BOAT()"
    },
    "SET_PARTICLE_FX_BLOOD_SCALE": {
      "prefix": "SET_PARTICLE_FX_BLOOD_SCALE()",
      "body": ["SET_PARTICLE_FX_BLOOD_SCALE(${1:Any p0})"],
      "description": "SET_PARTICLE_FX_BLOOD_SCALE()"
    },
    "DISABLE_IN_WATER_PTFX": {
      "prefix": "DISABLE_IN_WATER_PTFX()",
      "body": ["DISABLE_IN_WATER_PTFX(${1:BOOL toggle})"],
      "description": "DISABLE_IN_WATER_PTFX()"
    },
    "DISABLE_DOWNWASH_PTFX": {
      "prefix": "DISABLE_DOWNWASH_PTFX()",
      "body": ["DISABLE_DOWNWASH_PTFX(${1:BOOL toggle})"],
      "description": "DISABLE_DOWNWASH_PTFX()"
    },
    "SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE": {
      "prefix": "SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE()",
      "body": ["SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE(${1:float scale})"],
      "description": "SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE()"
    },
    "ENABLE_CLOWN_BLOOD_VFX": {
      "prefix": "ENABLE_CLOWN_BLOOD_VFX()",
      "body": ["ENABLE_CLOWN_BLOOD_VFX(${1:BOOL toggle})"],
      "description": "ENABLE_CLOWN_BLOOD_VFX()"
    },
    "ENABLE_ALIEN_BLOOD_VFX": {
      "prefix": "ENABLE_ALIEN_BLOOD_VFX()",
      "body": ["ENABLE_ALIEN_BLOOD_VFX(${1:BOOL toggle})"],
      "description": "ENABLE_ALIEN_BLOOD_VFX()"
    },
    "SET_PARTICLE_FX_BULLET_IMPACT_SCALE": {
      "prefix": "SET_PARTICLE_FX_BULLET_IMPACT_SCALE()",
      "body": ["SET_PARTICLE_FX_BULLET_IMPACT_SCALE(${1:float scale})"],
      "description": "SET_PARTICLE_FX_BULLET_IMPACT_SCALE()"
    },
    "SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE": {
      "prefix": "SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE()",
      "body": ["SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE(${1:float p0})"],
      "description": "SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE()"
    },
    "SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT": {
      "prefix": "SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT()",
      "body": ["SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT(${1:BOOL p0})"],
      "description": "SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT()"
    },
    "SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE": {
      "prefix": "SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE()",
      "body": ["SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE(${1:float p0})"],
      "description": "SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE()"
    },
    "SET_PARTICLE_FX_FOOT_LODRANGE_SCALE": {
      "prefix": "SET_PARTICLE_FX_FOOT_LODRANGE_SCALE()",
      "body": ["SET_PARTICLE_FX_FOOT_LODRANGE_SCALE(${1:float p0})"],
      "description": "SET_PARTICLE_FX_FOOT_LODRANGE_SCALE()"
    },
    "SET_PARTICLE_FX_FOOT_OVERRIDE_NAME": {
      "prefix": "SET_PARTICLE_FX_FOOT_OVERRIDE_NAME()",
      "body": ["SET_PARTICLE_FX_FOOT_OVERRIDE_NAME(${1:const char* p0})"],
      "description": "SET_PARTICLE_FX_FOOT_OVERRIDE_NAME()"
    },
    "SET_SKIDMARK_RANGE_SCALE": {
      "prefix": "SET_SKIDMARK_RANGE_SCALE()",
      "body": ["SET_SKIDMARK_RANGE_SCALE(${1:float scale})"],
      "description": "SET_SKIDMARK_RANGE_SCALE()"
    },
    "SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG": {
      "prefix": "SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG()",
      "body": ["SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG(${1:Any p0})"],
      "description": "SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG()"
    },
    "REGISTER_POSTFX_BULLET_IMPACT": {
      "prefix": "REGISTER_POSTFX_BULLET_IMPACT()",
      "body": [
        "REGISTER_POSTFX_BULLET_IMPACT(${1:float weaponWorldPosX}, ${2:float weaponWorldPosY}, ${3:float weaponWorldPosZ}, ${4:float intensity})"
      ],
      "description": "REGISTER_POSTFX_BULLET_IMPACT()"
    },
    "FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD": {
      "prefix": "FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD()",
      "body": ["FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD(${1:BOOL p0})"],
      "description": "FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD()"
    },
    "USE_PARTICLE_FX_ASSET": {
      "prefix": "USE_PARTICLE_FX_ASSET()",
      "body": ["USE_PARTICLE_FX_ASSET(${1:const char* name})"],
      "description": "USE_PARTICLE_FX_ASSET()"
    },
    "SET_PARTICLE_FX_OVERRIDE": {
      "prefix": "SET_PARTICLE_FX_OVERRIDE()",
      "body": [
        "SET_PARTICLE_FX_OVERRIDE(${1:const char* oldAsset}, ${2:const char* newAsset})"
      ],
      "description": "SET_PARTICLE_FX_OVERRIDE()"
    },
    "RESET_PARTICLE_FX_OVERRIDE": {
      "prefix": "RESET_PARTICLE_FX_OVERRIDE()",
      "body": ["RESET_PARTICLE_FX_OVERRIDE(${1:const char* name})"],
      "description": "RESET_PARTICLE_FX_OVERRIDE()"
    },
    "_START_VEHICLE_PARTICLE_FX_LOOPED": {
      "prefix": "_START_VEHICLE_PARTICLE_FX_LOOPED()",
      "body": [
        "_START_VEHICLE_PARTICLE_FX_LOOPED(${1:Vehicle vehicle}, ${2:const char* effectName}, ${3:BOOL frontBack}, ${4:BOOL leftRight}, ${5:BOOL localOnly})"
      ],
      "description": "_START_VEHICLE_PARTICLE_FX_LOOPED()"
    },
    "SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS": {
      "prefix": "SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS()",
      "body": ["SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS(${1:BOOL p0})"],
      "description": "SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS()"
    },
    "SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL": {
      "prefix": "SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL()",
      "body": ["SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL(${1:float p0})"],
      "description": "SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL()"
    },
    "WASH_DECALS_IN_RANGE": {
      "prefix": "WASH_DECALS_IN_RANGE()",
      "body": [
        "WASH_DECALS_IN_RANGE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float range}, ${5:float p4})"
      ],
      "description": "WASH_DECALS_IN_RANGE()"
    },
    "WASH_DECALS_FROM_VEHICLE": {
      "prefix": "WASH_DECALS_FROM_VEHICLE()",
      "body": ["WASH_DECALS_FROM_VEHICLE(${1:Vehicle vehicle}, ${2:float p1})"],
      "description": "WASH_DECALS_FROM_VEHICLE()"
    },
    "FADE_DECALS_IN_RANGE": {
      "prefix": "FADE_DECALS_IN_RANGE()",
      "body": [
        "FADE_DECALS_IN_RANGE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float p3}, ${5:float p4})"
      ],
      "description": "FADE_DECALS_IN_RANGE()"
    },
    "REMOVE_DECALS_IN_RANGE": {
      "prefix": "REMOVE_DECALS_IN_RANGE()",
      "body": [
        "REMOVE_DECALS_IN_RANGE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float range})"
      ],
      "description": "REMOVE_DECALS_IN_RANGE()"
    },
    "REMOVE_DECALS_FROM_OBJECT": {
      "prefix": "REMOVE_DECALS_FROM_OBJECT()",
      "body": ["REMOVE_DECALS_FROM_OBJECT(${1:Object obj})"],
      "description": "REMOVE_DECALS_FROM_OBJECT()"
    },
    "REMOVE_DECALS_FROM_OBJECT_FACING": {
      "prefix": "REMOVE_DECALS_FROM_OBJECT_FACING()",
      "body": [
        "REMOVE_DECALS_FROM_OBJECT_FACING(${1:Object obj}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "REMOVE_DECALS_FROM_OBJECT_FACING()"
    },
    "REMOVE_DECALS_FROM_VEHICLE": {
      "prefix": "REMOVE_DECALS_FROM_VEHICLE()",
      "body": ["REMOVE_DECALS_FROM_VEHICLE(${1:Vehicle vehicle})"],
      "description": "REMOVE_DECALS_FROM_VEHICLE()"
    },
    "ADD_DECAL": {
      "prefix": "ADD_DECAL()",
      "body": [
        "ADD_DECAL(${1:int decalType}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:float p9}, ${11:float width}, ${12:float height}, ${13:float rCoef}, ${14:float gCoef}, ${15:float bCoef}, ${16:float opacity}, ${17:float timeout}, ${18:BOOL p17}, ${19:BOOL p18}, ${20:BOOL p19})"
      ],
      "description": "ADD_DECAL()"
    },
    "ADD_PETROL_DECAL": {
      "prefix": "ADD_PETROL_DECAL()",
      "body": [
        "ADD_PETROL_DECAL(${1:float x}, ${2:float y}, ${3:float z}, ${4:float groundLvl}, ${5:float width}, ${6:float transparency})"
      ],
      "description": "ADD_PETROL_DECAL()"
    },
    "ADD_OIL_DECAL": {
      "prefix": "ADD_OIL_DECAL()",
      "body": [
        "ADD_OIL_DECAL(${1:float x}, ${2:float y}, ${3:float z}, ${4:float groundLvl}, ${5:float width}, ${6:float transparency})"
      ],
      "description": "ADD_OIL_DECAL()"
    },
    "START_PETROL_TRAIL_DECALS": {
      "prefix": "START_PETROL_TRAIL_DECALS()",
      "body": ["START_PETROL_TRAIL_DECALS(${1:float p0})"],
      "description": "START_PETROL_TRAIL_DECALS()"
    },
    "ADD_PETROL_TRAIL_DECAL_INFO": {
      "prefix": "ADD_PETROL_TRAIL_DECAL_INFO()",
      "body": [
        "ADD_PETROL_TRAIL_DECAL_INFO(${1:float x}, ${2:float y}, ${3:float z}, ${4:float p3})"
      ],
      "description": "ADD_PETROL_TRAIL_DECAL_INFO()"
    },
    "END_PETROL_TRAIL_DECALS": {
      "prefix": "END_PETROL_TRAIL_DECALS()",
      "body": ["END_PETROL_TRAIL_DECALS()"],
      "description": "END_PETROL_TRAIL_DECALS()"
    },
    "REMOVE_DECAL": {
      "prefix": "REMOVE_DECAL()",
      "body": ["REMOVE_DECAL(${1:int decal})"],
      "description": "REMOVE_DECAL()"
    },
    "IS_DECAL_ALIVE": {
      "prefix": "IS_DECAL_ALIVE()",
      "body": ["IS_DECAL_ALIVE(${1:int decal})"],
      "description": "IS_DECAL_ALIVE()"
    },
    "GET_DECAL_WASH_LEVEL": {
      "prefix": "GET_DECAL_WASH_LEVEL()",
      "body": ["GET_DECAL_WASH_LEVEL(${1:int decal})"],
      "description": "GET_DECAL_WASH_LEVEL()"
    },
    "SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME": {
      "prefix": "SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME()",
      "body": ["SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME()"],
      "description": "SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME()"
    },
    "SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME": {
      "prefix": "SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME()",
      "body": ["SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME()"],
      "description": "SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME()"
    },
    "SET_DISABLE_DECAL_RENDERING_THIS_FRAME": {
      "prefix": "SET_DISABLE_DECAL_RENDERING_THIS_FRAME()",
      "body": ["SET_DISABLE_DECAL_RENDERING_THIS_FRAME()"],
      "description": "SET_DISABLE_DECAL_RENDERING_THIS_FRAME()"
    },
    "GET_IS_PETROL_DECAL_IN_RANGE": {
      "prefix": "GET_IS_PETROL_DECAL_IN_RANGE()",
      "body": [
        "GET_IS_PETROL_DECAL_IN_RANGE(${1:float xCoord}, ${2:float yCoord}, ${3:float zCoord}, ${4:float radius})"
      ],
      "description": "GET_IS_PETROL_DECAL_IN_RANGE()"
    },
    "PATCH_DECAL_DIFFUSE_MAP": {
      "prefix": "PATCH_DECAL_DIFFUSE_MAP()",
      "body": [
        "PATCH_DECAL_DIFFUSE_MAP(${1:int decalType}, ${2:const char* textureDict}, ${3:const char* textureName})"
      ],
      "description": "PATCH_DECAL_DIFFUSE_MAP()"
    },
    "UNPATCH_DECAL_DIFFUSE_MAP": {
      "prefix": "UNPATCH_DECAL_DIFFUSE_MAP()",
      "body": ["UNPATCH_DECAL_DIFFUSE_MAP(${1:int decalType})"],
      "description": "UNPATCH_DECAL_DIFFUSE_MAP()"
    },
    "MOVE_VEHICLE_DECALS": {
      "prefix": "MOVE_VEHICLE_DECALS()",
      "body": ["MOVE_VEHICLE_DECALS(${1:Any p0}, ${2:Any p1})"],
      "description": "MOVE_VEHICLE_DECALS()"
    },
    "ADD_VEHICLE_CREW_EMBLEM": {
      "prefix": "ADD_VEHICLE_CREW_EMBLEM()",
      "body": [
        "ADD_VEHICLE_CREW_EMBLEM(${1:Vehicle vehicle}, ${2:Ped ped}, ${3:int boneIndex}, ${4:float x1}, ${5:float x2}, ${6:float x3}, ${7:float y1}, ${8:float y2}, ${9:float y3}, ${10:float z1}, ${11:float z2}, ${12:float z3}, ${13:float scale}, ${14:Any p13}, ${15:int alpha})"
      ],
      "description": "ADD_VEHICLE_CREW_EMBLEM()"
    },
    "ABORT_VEHICLE_CREW_EMBLEM_REQUEST": {
      "prefix": "ABORT_VEHICLE_CREW_EMBLEM_REQUEST()",
      "body": ["ABORT_VEHICLE_CREW_EMBLEM_REQUEST(${1:int* p0})"],
      "description": "ABORT_VEHICLE_CREW_EMBLEM_REQUEST()"
    },
    "REMOVE_VEHICLE_CREW_EMBLEM": {
      "prefix": "REMOVE_VEHICLE_CREW_EMBLEM()",
      "body": ["REMOVE_VEHICLE_CREW_EMBLEM(${1:Vehicle vehicle}, ${2:int p1})"],
      "description": "REMOVE_VEHICLE_CREW_EMBLEM()"
    },
    "GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE": {
      "prefix": "GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE()",
      "body": [
        "GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE(${1:Vehicle vehicle}, ${2:int p1})"
      ],
      "description": "GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE()"
    },
    "DOES_VEHICLE_HAVE_CREW_EMBLEM": {
      "prefix": "DOES_VEHICLE_HAVE_CREW_EMBLEM()",
      "body": [
        "DOES_VEHICLE_HAVE_CREW_EMBLEM(${1:Vehicle vehicle}, ${2:int p1})"
      ],
      "description": "DOES_VEHICLE_HAVE_CREW_EMBLEM()"
    },
    "DISABLE_COMPOSITE_SHOTGUN_DECALS": {
      "prefix": "DISABLE_COMPOSITE_SHOTGUN_DECALS()",
      "body": ["DISABLE_COMPOSITE_SHOTGUN_DECALS(${1:BOOL toggle})"],
      "description": "DISABLE_COMPOSITE_SHOTGUN_DECALS()"
    },
    "DISABLE_SCUFF_DECALS": {
      "prefix": "DISABLE_SCUFF_DECALS()",
      "body": ["DISABLE_SCUFF_DECALS(${1:BOOL toggle})"],
      "description": "DISABLE_SCUFF_DECALS()"
    },
    "SET_DECAL_BULLET_IMPACT_RANGE_SCALE": {
      "prefix": "SET_DECAL_BULLET_IMPACT_RANGE_SCALE()",
      "body": ["SET_DECAL_BULLET_IMPACT_RANGE_SCALE(${1:float p0})"],
      "description": "SET_DECAL_BULLET_IMPACT_RANGE_SCALE()"
    },
    "OVERRIDE_INTERIOR_SMOKE_NAME": {
      "prefix": "OVERRIDE_INTERIOR_SMOKE_NAME()",
      "body": ["OVERRIDE_INTERIOR_SMOKE_NAME(${1:const char* name})"],
      "description": "OVERRIDE_INTERIOR_SMOKE_NAME()"
    },
    "OVERRIDE_INTERIOR_SMOKE_LEVEL": {
      "prefix": "OVERRIDE_INTERIOR_SMOKE_LEVEL()",
      "body": ["OVERRIDE_INTERIOR_SMOKE_LEVEL(${1:float level})"],
      "description": "OVERRIDE_INTERIOR_SMOKE_LEVEL()"
    },
    "OVERRIDE_INTERIOR_SMOKE_END": {
      "prefix": "OVERRIDE_INTERIOR_SMOKE_END()",
      "body": ["OVERRIDE_INTERIOR_SMOKE_END()"],
      "description": "OVERRIDE_INTERIOR_SMOKE_END()"
    },
    "REGISTER_NOIR_LENS_EFFECT": {
      "prefix": "REGISTER_NOIR_LENS_EFFECT()",
      "body": ["REGISTER_NOIR_LENS_EFFECT()"],
      "description": "REGISTER_NOIR_LENS_EFFECT()"
    },
    "DISABLE_VEHICLE_DISTANTLIGHTS": {
      "prefix": "DISABLE_VEHICLE_DISTANTLIGHTS()",
      "body": ["DISABLE_VEHICLE_DISTANTLIGHTS(${1:BOOL toggle})"],
      "description": "DISABLE_VEHICLE_DISTANTLIGHTS()"
    },
    "RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS": {
      "prefix": "RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS()",
      "body": ["RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS(${1:BOOL p0})"],
      "description": "RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS()"
    },
    "REQUEST_EARLY_LIGHT_CHECK": {
      "prefix": "REQUEST_EARLY_LIGHT_CHECK()",
      "body": ["REQUEST_EARLY_LIGHT_CHECK()"],
      "description": "REQUEST_EARLY_LIGHT_CHECK()"
    },
    "USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED": {
      "prefix": "USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED()",
      "body": ["USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED(${1:BOOL toggle})"],
      "description": "USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED()"
    },
    "_FORCE_ALLOW_SNOW_FOOT_VFX_ON_ICE": {
      "prefix": "_FORCE_ALLOW_SNOW_FOOT_VFX_ON_ICE()",
      "body": ["_FORCE_ALLOW_SNOW_FOOT_VFX_ON_ICE(${1:BOOL toggle})"],
      "description": "_FORCE_ALLOW_SNOW_FOOT_VFX_ON_ICE()"
    },
    "USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED": {
      "prefix": "USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED()",
      "body": ["USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED(${1:BOOL toggle})"],
      "description": "USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED()"
    },
    "DISABLE_REGION_VFX": {
      "prefix": "DISABLE_REGION_VFX()",
      "body": ["DISABLE_REGION_VFX(${1:Any p0})"],
      "description": "DISABLE_REGION_VFX()"
    },
    "_FORCE_GROUND_SNOW_PASS": {
      "prefix": "_FORCE_GROUND_SNOW_PASS()",
      "body": ["_FORCE_GROUND_SNOW_PASS(${1:BOOL toggle})"],
      "description": "_FORCE_GROUND_SNOW_PASS()"
    },
    "PRESET_INTERIOR_AMBIENT_CACHE": {
      "prefix": "PRESET_INTERIOR_AMBIENT_CACHE()",
      "body": [
        "PRESET_INTERIOR_AMBIENT_CACHE(${1:const char* timecycleModifierName})"
      ],
      "description": "PRESET_INTERIOR_AMBIENT_CACHE()"
    },
    "SET_TIMECYCLE_MODIFIER": {
      "prefix": "SET_TIMECYCLE_MODIFIER()",
      "body": ["SET_TIMECYCLE_MODIFIER(${1:const char* modifierName})"],
      "description": "SET_TIMECYCLE_MODIFIER()"
    },
    "SET_TIMECYCLE_MODIFIER_STRENGTH": {
      "prefix": "SET_TIMECYCLE_MODIFIER_STRENGTH()",
      "body": ["SET_TIMECYCLE_MODIFIER_STRENGTH(${1:float strength})"],
      "description": "SET_TIMECYCLE_MODIFIER_STRENGTH()"
    },
    "SET_TRANSITION_TIMECYCLE_MODIFIER": {
      "prefix": "SET_TRANSITION_TIMECYCLE_MODIFIER()",
      "body": [
        "SET_TRANSITION_TIMECYCLE_MODIFIER(${1:const char* modifierName}, ${2:float transition})"
      ],
      "description": "SET_TRANSITION_TIMECYCLE_MODIFIER()"
    },
    "SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER": {
      "prefix": "SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER()",
      "body": ["SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER(${1:float strength})"],
      "description": "SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER()"
    },
    "CLEAR_TIMECYCLE_MODIFIER": {
      "prefix": "CLEAR_TIMECYCLE_MODIFIER()",
      "body": ["CLEAR_TIMECYCLE_MODIFIER()"],
      "description": "CLEAR_TIMECYCLE_MODIFIER()"
    },
    "GET_TIMECYCLE_MODIFIER_INDEX": {
      "prefix": "GET_TIMECYCLE_MODIFIER_INDEX()",
      "body": ["GET_TIMECYCLE_MODIFIER_INDEX()"],
      "description": "GET_TIMECYCLE_MODIFIER_INDEX()"
    },
    "GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX": {
      "prefix": "GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX()",
      "body": ["GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX()"],
      "description": "GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX()"
    },
    "GET_IS_TIMECYCLE_TRANSITIONING_OUT": {
      "prefix": "GET_IS_TIMECYCLE_TRANSITIONING_OUT()",
      "body": ["GET_IS_TIMECYCLE_TRANSITIONING_OUT()"],
      "description": "GET_IS_TIMECYCLE_TRANSITIONING_OUT()"
    },
    "PUSH_TIMECYCLE_MODIFIER": {
      "prefix": "PUSH_TIMECYCLE_MODIFIER()",
      "body": ["PUSH_TIMECYCLE_MODIFIER()"],
      "description": "PUSH_TIMECYCLE_MODIFIER()"
    },
    "POP_TIMECYCLE_MODIFIER": {
      "prefix": "POP_TIMECYCLE_MODIFIER()",
      "body": ["POP_TIMECYCLE_MODIFIER()"],
      "description": "POP_TIMECYCLE_MODIFIER()"
    },
    "SET_CURRENT_PLAYER_TCMODIFIER": {
      "prefix": "SET_CURRENT_PLAYER_TCMODIFIER()",
      "body": ["SET_CURRENT_PLAYER_TCMODIFIER(${1:const char* modifierName})"],
      "description": "SET_CURRENT_PLAYER_TCMODIFIER()"
    },
    "SET_PLAYER_TCMODIFIER_TRANSITION": {
      "prefix": "SET_PLAYER_TCMODIFIER_TRANSITION()",
      "body": ["SET_PLAYER_TCMODIFIER_TRANSITION(${1:float value})"],
      "description": "SET_PLAYER_TCMODIFIER_TRANSITION()"
    },
    "SET_NEXT_PLAYER_TCMODIFIER": {
      "prefix": "SET_NEXT_PLAYER_TCMODIFIER()",
      "body": ["SET_NEXT_PLAYER_TCMODIFIER(${1:const char* modifierName})"],
      "description": "SET_NEXT_PLAYER_TCMODIFIER()"
    },
    "ADD_TCMODIFIER_OVERRIDE": {
      "prefix": "ADD_TCMODIFIER_OVERRIDE()",
      "body": [
        "ADD_TCMODIFIER_OVERRIDE(${1:const char* modifierName1}, ${2:const char* modifierName2})"
      ],
      "description": "ADD_TCMODIFIER_OVERRIDE()"
    },
    "CLEAR_ALL_TCMODIFIER_OVERRIDES": {
      "prefix": "CLEAR_ALL_TCMODIFIER_OVERRIDES()",
      "body": ["CLEAR_ALL_TCMODIFIER_OVERRIDES(${1:const char* p0})"],
      "description": "CLEAR_ALL_TCMODIFIER_OVERRIDES()"
    },
    "SET_EXTRA_TCMODIFIER": {
      "prefix": "SET_EXTRA_TCMODIFIER()",
      "body": ["SET_EXTRA_TCMODIFIER(${1:const char* modifierName})"],
      "description": "SET_EXTRA_TCMODIFIER()"
    },
    "CLEAR_EXTRA_TCMODIFIER": {
      "prefix": "CLEAR_EXTRA_TCMODIFIER()",
      "body": ["CLEAR_EXTRA_TCMODIFIER()"],
      "description": "CLEAR_EXTRA_TCMODIFIER()"
    },
    "GET_EXTRA_TCMODIFIER": {
      "prefix": "GET_EXTRA_TCMODIFIER()",
      "body": ["GET_EXTRA_TCMODIFIER()"],
      "description": "GET_EXTRA_TCMODIFIER()"
    },
    "ENABLE_MOON_CYCLE_OVERRIDE": {
      "prefix": "ENABLE_MOON_CYCLE_OVERRIDE()",
      "body": ["ENABLE_MOON_CYCLE_OVERRIDE(${1:float strength})"],
      "description": "ENABLE_MOON_CYCLE_OVERRIDE()"
    },
    "DISABLE_MOON_CYCLE_OVERRIDE": {
      "prefix": "DISABLE_MOON_CYCLE_OVERRIDE()",
      "body": ["DISABLE_MOON_CYCLE_OVERRIDE()"],
      "description": "DISABLE_MOON_CYCLE_OVERRIDE()"
    },
    "REQUEST_SCALEFORM_MOVIE": {
      "prefix": "REQUEST_SCALEFORM_MOVIE()",
      "body": ["REQUEST_SCALEFORM_MOVIE(${1:const char* scaleformName})"],
      "description": "REQUEST_SCALEFORM_MOVIE()"
    },
    "REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN": {
      "prefix": "REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN()",
      "body": [
        "REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN(${1:const char* scaleformName})"
      ],
      "description": "REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN()"
    },
    "REQUEST_SCALEFORM_MOVIE_INSTANCE": {
      "prefix": "REQUEST_SCALEFORM_MOVIE_INSTANCE()",
      "body": [
        "REQUEST_SCALEFORM_MOVIE_INSTANCE(${1:const char* scaleformName})"
      ],
      "description": "REQUEST_SCALEFORM_MOVIE_INSTANCE()"
    },
    "REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED": {
      "prefix": "REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED()",
      "body": [
        "REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED(${1:const char* scaleformName})"
      ],
      "description": "REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED()"
    },
    "HAS_SCALEFORM_MOVIE_LOADED": {
      "prefix": "HAS_SCALEFORM_MOVIE_LOADED()",
      "body": ["HAS_SCALEFORM_MOVIE_LOADED(${1:int scaleformHandle})"],
      "description": "HAS_SCALEFORM_MOVIE_LOADED()"
    },
    "IS_ACTIVE_SCALEFORM_MOVIE_DELETING": {
      "prefix": "IS_ACTIVE_SCALEFORM_MOVIE_DELETING()",
      "body": ["IS_ACTIVE_SCALEFORM_MOVIE_DELETING(${1:int val})"],
      "description": "IS_ACTIVE_SCALEFORM_MOVIE_DELETING()"
    },
    "IS_SCALEFORM_MOVIE_DELETING": {
      "prefix": "IS_SCALEFORM_MOVIE_DELETING()",
      "body": ["IS_SCALEFORM_MOVIE_DELETING(${1:int val})"],
      "description": "IS_SCALEFORM_MOVIE_DELETING()"
    },
    "HAS_SCALEFORM_MOVIE_FILENAME_LOADED": {
      "prefix": "HAS_SCALEFORM_MOVIE_FILENAME_LOADED()",
      "body": [
        "HAS_SCALEFORM_MOVIE_FILENAME_LOADED(${1:const char* scaleformName})"
      ],
      "description": "HAS_SCALEFORM_MOVIE_FILENAME_LOADED()"
    },
    "HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT": {
      "prefix": "HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT()",
      "body": [
        "HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT(${1:int scaleformHandle})"
      ],
      "description": "HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT()"
    },
    "SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED": {
      "prefix": "SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED()",
      "body": [
        "SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED(${1:int* scaleformHandle})"
      ],
      "description": "SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED()"
    },
    "SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME": {
      "prefix": "SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME()",
      "body": [
        "SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME(${1:int scaleform}, ${2:BOOL toggle})"
      ],
      "description": "SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME()"
    },
    "SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT": {
      "prefix": "SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT()",
      "body": [
        "SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT(${1:int scaleformHandle}, ${2:BOOL toggle})"
      ],
      "description": "SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT()"
    },
    "SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT": {
      "prefix": "SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT()",
      "body": [
        "SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT(${1:int scaleformHandle}, ${2:BOOL toggle})"
      ],
      "description": "SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT()"
    },
    "DRAW_SCALEFORM_MOVIE": {
      "prefix": "DRAW_SCALEFORM_MOVIE()",
      "body": [
        "DRAW_SCALEFORM_MOVIE(${1:int scaleformHandle}, ${2:float x}, ${3:float y}, ${4:float width}, ${5:float height}, ${6:int red}, ${7:int green}, ${8:int blue}, ${9:int alpha}, ${10:int p9})"
      ],
      "description": "DRAW_SCALEFORM_MOVIE()"
    },
    "DRAW_SCALEFORM_MOVIE_FULLSCREEN": {
      "prefix": "DRAW_SCALEFORM_MOVIE_FULLSCREEN()",
      "body": [
        "DRAW_SCALEFORM_MOVIE_FULLSCREEN(${1:int scaleform}, ${2:int red}, ${3:int green}, ${4:int blue}, ${5:int alpha}, ${6:int p5})"
      ],
      "description": "DRAW_SCALEFORM_MOVIE_FULLSCREEN()"
    },
    "DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED": {
      "prefix": "DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED()",
      "body": [
        "DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED(${1:int scaleform1}, ${2:int scaleform2}, ${3:int red}, ${4:int green}, ${5:int blue}, ${6:int alpha})"
      ],
      "description": "DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED()"
    },
    "DRAW_SCALEFORM_MOVIE_3D": {
      "prefix": "DRAW_SCALEFORM_MOVIE_3D()",
      "body": [
        "DRAW_SCALEFORM_MOVIE_3D(${1:int scaleform}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float rotX}, ${6:float rotY}, ${7:float rotZ}, ${8:float p7}, ${9:float p8}, ${10:float p9}, ${11:float scaleX}, ${12:float scaleY}, ${13:float scaleZ}, ${14:int rotationOrder})"
      ],
      "description": "DRAW_SCALEFORM_MOVIE_3D()"
    },
    "DRAW_SCALEFORM_MOVIE_3D_SOLID": {
      "prefix": "DRAW_SCALEFORM_MOVIE_3D_SOLID()",
      "body": [
        "DRAW_SCALEFORM_MOVIE_3D_SOLID(${1:int scaleform}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float rotX}, ${6:float rotY}, ${7:float rotZ}, ${8:float p7}, ${9:float p8}, ${10:float p9}, ${11:float scaleX}, ${12:float scaleY}, ${13:float scaleZ}, ${14:int rotationOrder})"
      ],
      "description": "DRAW_SCALEFORM_MOVIE_3D_SOLID()"
    },
    "CALL_SCALEFORM_MOVIE_METHOD": {
      "prefix": "CALL_SCALEFORM_MOVIE_METHOD()",
      "body": [
        "CALL_SCALEFORM_MOVIE_METHOD(${1:int scaleform}, ${2:const char* method})"
      ],
      "description": "CALL_SCALEFORM_MOVIE_METHOD()"
    },
    "CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER": {
      "prefix": "CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER()",
      "body": [
        "CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER(${1:int scaleform}, ${2:const char* methodName}, ${3:float param1}, ${4:float param2}, ${5:float param3}, ${6:float param4}, ${7:float param5})"
      ],
      "description": "CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER()"
    },
    "CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING": {
      "prefix": "CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING()",
      "body": [
        "CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING(${1:int scaleform}, ${2:const char* methodName}, ${3:const char* param1}, ${4:const char* param2}, ${5:const char* param3}, ${6:const char* param4}, ${7:const char* param5})"
      ],
      "description": "CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING()"
    },
    "CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING": {
      "prefix": "CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING()",
      "body": [
        "CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(${1:int scaleform}, ${2:const char* methodName}, ${3:float floatParam1}, ${4:float floatParam2}, ${5:float floatParam3}, ${6:float floatParam4}, ${7:float floatParam5}, ${8:const char* stringParam1}, ${9:const char* stringParam2}, ${10:const char* stringParam3}, ${11:const char* stringParam4}, ${12:const char* stringParam5})"
      ],
      "description": "CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING()"
    },
    "BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD": {
      "prefix": "BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD()",
      "body": [
        "BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD(${1:int hudComponent}, ${2:const char* methodName})"
      ],
      "description": "BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD()"
    },
    "BEGIN_SCALEFORM_MOVIE_METHOD": {
      "prefix": "BEGIN_SCALEFORM_MOVIE_METHOD()",
      "body": [
        "BEGIN_SCALEFORM_MOVIE_METHOD(${1:int scaleform}, ${2:const char* methodName})"
      ],
      "description": "BEGIN_SCALEFORM_MOVIE_METHOD()"
    },
    "BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND": {
      "prefix": "BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND()",
      "body": [
        "BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND(${1:const char* methodName})"
      ],
      "description": "BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND()"
    },
    "BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER": {
      "prefix": "BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER()",
      "body": [
        "BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER(${1:const char* methodName})"
      ],
      "description": "BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER()"
    },
    "END_SCALEFORM_MOVIE_METHOD": {
      "prefix": "END_SCALEFORM_MOVIE_METHOD()",
      "body": ["END_SCALEFORM_MOVIE_METHOD()"],
      "description": "END_SCALEFORM_MOVIE_METHOD()"
    },
    "END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE": {
      "prefix": "END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE()",
      "body": ["END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE()"],
      "description": "END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE()"
    },
    "IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY": {
      "prefix": "IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY()",
      "body": [
        "IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY(${1:int methodReturn})"
      ],
      "description": "IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY()"
    },
    "GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT": {
      "prefix": "GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT()",
      "body": [
        "GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(${1:int methodReturn})"
      ],
      "description": "GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT()"
    },
    "GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL": {
      "prefix": "GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL()",
      "body": [
        "GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL(${1:int methodReturn})"
      ],
      "description": "GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL()"
    },
    "SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT": {
      "prefix": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT()",
      "body": ["SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(${1:int value})"],
      "description": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT()"
    },
    "SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT": {
      "prefix": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT()",
      "body": ["SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(${1:float value})"],
      "description": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT()"
    },
    "SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL": {
      "prefix": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL()",
      "body": ["SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(${1:BOOL value})"],
      "description": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL()"
    },
    "BEGIN_TEXT_COMMAND_SCALEFORM_STRING": {
      "prefix": "BEGIN_TEXT_COMMAND_SCALEFORM_STRING()",
      "body": [
        "BEGIN_TEXT_COMMAND_SCALEFORM_STRING(${1:const char* componentType})"
      ],
      "description": "BEGIN_TEXT_COMMAND_SCALEFORM_STRING()"
    },
    "END_TEXT_COMMAND_SCALEFORM_STRING": {
      "prefix": "END_TEXT_COMMAND_SCALEFORM_STRING()",
      "body": ["END_TEXT_COMMAND_SCALEFORM_STRING()"],
      "description": "END_TEXT_COMMAND_SCALEFORM_STRING()"
    },
    "END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING": {
      "prefix": "END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING()",
      "body": ["END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING()"],
      "description": "END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING()"
    },
    "SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING": {
      "prefix": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING()",
      "body": [
        "SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(${1:const char* string})"
      ],
      "description": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING()"
    },
    "SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING": {
      "prefix": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING()",
      "body": [
        "SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING(${1:const char* string})"
      ],
      "description": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING()"
    },
    "SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING": {
      "prefix": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING()",
      "body": [
        "SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(${1:const char* string})"
      ],
      "description": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING()"
    },
    "DOES_LATEST_BRIEF_STRING_EXIST": {
      "prefix": "DOES_LATEST_BRIEF_STRING_EXIST()",
      "body": ["DOES_LATEST_BRIEF_STRING_EXIST(${1:int p0})"],
      "description": "DOES_LATEST_BRIEF_STRING_EXIST()"
    },
    "SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING": {
      "prefix": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING()",
      "body": [
        "SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING(${1:int value})"
      ],
      "description": "SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING()"
    },
    "REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE": {
      "prefix": "REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE()",
      "body": ["REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE(${1:int hudComponent})"],
      "description": "REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE()"
    },
    "HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED": {
      "prefix": "HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED()",
      "body": ["HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED(${1:int hudComponent})"],
      "description": "HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED()"
    },
    "REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE": {
      "prefix": "REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE()",
      "body": ["REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE(${1:int hudComponent})"],
      "description": "REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE()"
    },
    "PASS_KEYBOARD_INPUT_TO_SCALEFORM": {
      "prefix": "PASS_KEYBOARD_INPUT_TO_SCALEFORM()",
      "body": ["PASS_KEYBOARD_INPUT_TO_SCALEFORM(${1:int scaleformHandle})"],
      "description": "PASS_KEYBOARD_INPUT_TO_SCALEFORM()"
    },
    "SET_TV_CHANNEL": {
      "prefix": "SET_TV_CHANNEL()",
      "body": ["SET_TV_CHANNEL(${1:int channel})"],
      "description": "SET_TV_CHANNEL()"
    },
    "GET_TV_CHANNEL": {
      "prefix": "GET_TV_CHANNEL()",
      "body": ["GET_TV_CHANNEL()"],
      "description": "GET_TV_CHANNEL()"
    },
    "SET_TV_VOLUME": {
      "prefix": "SET_TV_VOLUME()",
      "body": ["SET_TV_VOLUME(${1:float volume})"],
      "description": "SET_TV_VOLUME()"
    },
    "GET_TV_VOLUME": {
      "prefix": "GET_TV_VOLUME()",
      "body": ["GET_TV_VOLUME()"],
      "description": "GET_TV_VOLUME()"
    },
    "DRAW_TV_CHANNEL": {
      "prefix": "DRAW_TV_CHANNEL()",
      "body": [
        "DRAW_TV_CHANNEL(${1:float xPos}, ${2:float yPos}, ${3:float xScale}, ${4:float yScale}, ${5:float rotation}, ${6:int red}, ${7:int green}, ${8:int blue}, ${9:int alpha})"
      ],
      "description": "DRAW_TV_CHANNEL()"
    },
    "SET_TV_CHANNEL_PLAYLIST": {
      "prefix": "SET_TV_CHANNEL_PLAYLIST()",
      "body": [
        "SET_TV_CHANNEL_PLAYLIST(${1:int tvChannel}, ${2:const char* playlistName}, ${3:BOOL restart})"
      ],
      "description": "SET_TV_CHANNEL_PLAYLIST()"
    },
    "SET_TV_CHANNEL_PLAYLIST_AT_HOUR": {
      "prefix": "SET_TV_CHANNEL_PLAYLIST_AT_HOUR()",
      "body": [
        "SET_TV_CHANNEL_PLAYLIST_AT_HOUR(${1:int tvChannel}, ${2:const char* playlistName}, ${3:int hour})"
      ],
      "description": "SET_TV_CHANNEL_PLAYLIST_AT_HOUR()"
    },
    "_SET_TV_CHANNEL_PLAYLIST_DIRTY": {
      "prefix": "_SET_TV_CHANNEL_PLAYLIST_DIRTY()",
      "body": [
        "_SET_TV_CHANNEL_PLAYLIST_DIRTY(${1:int tvChannel}, ${2:BOOL p1})"
      ],
      "description": "_SET_TV_CHANNEL_PLAYLIST_DIRTY()"
    },
    "CLEAR_TV_CHANNEL_PLAYLIST": {
      "prefix": "CLEAR_TV_CHANNEL_PLAYLIST()",
      "body": ["CLEAR_TV_CHANNEL_PLAYLIST(${1:int tvChannel})"],
      "description": "CLEAR_TV_CHANNEL_PLAYLIST()"
    },
    "IS_PLAYLIST_ON_CHANNEL": {
      "prefix": "IS_PLAYLIST_ON_CHANNEL()",
      "body": ["IS_PLAYLIST_ON_CHANNEL(${1:int tvChannel}, ${2:Any p1})"],
      "description": "IS_PLAYLIST_ON_CHANNEL()"
    },
    "IS_TVSHOW_CURRENTLY_PLAYING": {
      "prefix": "IS_TVSHOW_CURRENTLY_PLAYING()",
      "body": ["IS_TVSHOW_CURRENTLY_PLAYING(${1:Hash videoCliphash})"],
      "description": "IS_TVSHOW_CURRENTLY_PLAYING()"
    },
    "ENABLE_MOVIE_KEYFRAME_WAIT": {
      "prefix": "ENABLE_MOVIE_KEYFRAME_WAIT()",
      "body": ["ENABLE_MOVIE_KEYFRAME_WAIT(${1:BOOL toggle})"],
      "description": "ENABLE_MOVIE_KEYFRAME_WAIT()"
    },
    "SET_TV_PLAYER_WATCHING_THIS_FRAME": {
      "prefix": "SET_TV_PLAYER_WATCHING_THIS_FRAME()",
      "body": ["SET_TV_PLAYER_WATCHING_THIS_FRAME(${1:Any p0})"],
      "description": "SET_TV_PLAYER_WATCHING_THIS_FRAME()"
    },
    "GET_CURRENT_TV_CLIP_NAMEHASH": {
      "prefix": "GET_CURRENT_TV_CLIP_NAMEHASH()",
      "body": ["GET_CURRENT_TV_CLIP_NAMEHASH()"],
      "description": "GET_CURRENT_TV_CLIP_NAMEHASH()"
    },
    "ENABLE_MOVIE_SUBTITLES": {
      "prefix": "ENABLE_MOVIE_SUBTITLES()",
      "body": ["ENABLE_MOVIE_SUBTITLES(${1:BOOL toggle})"],
      "description": "ENABLE_MOVIE_SUBTITLES()"
    },
    "UI3DSCENE_IS_AVAILABLE": {
      "prefix": "UI3DSCENE_IS_AVAILABLE()",
      "body": ["UI3DSCENE_IS_AVAILABLE()"],
      "description": "UI3DSCENE_IS_AVAILABLE()"
    },
    "UI3DSCENE_PUSH_PRESET": {
      "prefix": "UI3DSCENE_PUSH_PRESET()",
      "body": ["UI3DSCENE_PUSH_PRESET(${1:const char* presetName})"],
      "description": "UI3DSCENE_PUSH_PRESET()"
    },
    "UI3DSCENE_ASSIGN_PED_TO_SLOT": {
      "prefix": "UI3DSCENE_ASSIGN_PED_TO_SLOT()",
      "body": [
        "UI3DSCENE_ASSIGN_PED_TO_SLOT(${1:const char* presetName}, ${2:Ped ped}, ${3:int slot}, ${4:float posX}, ${5:float posY}, ${6:float posZ})"
      ],
      "description": "UI3DSCENE_ASSIGN_PED_TO_SLOT()"
    },
    "UI3DSCENE_CLEAR_PATCHED_DATA": {
      "prefix": "UI3DSCENE_CLEAR_PATCHED_DATA()",
      "body": ["UI3DSCENE_CLEAR_PATCHED_DATA()"],
      "description": "UI3DSCENE_CLEAR_PATCHED_DATA()"
    },
    "UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT": {
      "prefix": "UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT()",
      "body": ["UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT(${1:BOOL toggle})"],
      "description": "UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT()"
    },
    "TERRAINGRID_ACTIVATE": {
      "prefix": "TERRAINGRID_ACTIVATE()",
      "body": ["TERRAINGRID_ACTIVATE(${1:BOOL toggle})"],
      "description": "TERRAINGRID_ACTIVATE()"
    },
    "TERRAINGRID_SET_PARAMS": {
      "prefix": "TERRAINGRID_SET_PARAMS()",
      "body": [
        "TERRAINGRID_SET_PARAMS(${1:float x}, ${2:float y}, ${3:float z}, ${4:float forwardX}, ${5:float forwardY}, ${6:float forwardZ}, ${7:float sizeX}, ${8:float sizeY}, ${9:float sizeZ}, ${10:float gridScale}, ${11:float glowIntensity}, ${12:float normalHeight}, ${13:float heightDiff})"
      ],
      "description": "TERRAINGRID_SET_PARAMS()"
    },
    "TERRAINGRID_SET_COLOURS": {
      "prefix": "TERRAINGRID_SET_COLOURS()",
      "body": [
        "TERRAINGRID_SET_COLOURS(${1:int lowR}, ${2:int lowG}, ${3:int lowB}, ${4:int lowAlpha}, ${5:int r}, ${6:int g}, ${7:int b}, ${8:int alpha}, ${9:int highR}, ${10:int highG}, ${11:int highB}, ${12:int highAlpha})"
      ],
      "description": "TERRAINGRID_SET_COLOURS()"
    },
    "ANIMPOSTFX_PLAY": {
      "prefix": "ANIMPOSTFX_PLAY()",
      "body": [
        "ANIMPOSTFX_PLAY(${1:const char* effectName}, ${2:int duration}, ${3:BOOL looped})"
      ],
      "description": "ANIMPOSTFX_PLAY()"
    },
    "ANIMPOSTFX_STOP": {
      "prefix": "ANIMPOSTFX_STOP()",
      "body": ["ANIMPOSTFX_STOP(${1:const char* effectName})"],
      "description": "ANIMPOSTFX_STOP()"
    },
    "ANIMPOSTFX_GET_CURRENT_TIME": {
      "prefix": "ANIMPOSTFX_GET_CURRENT_TIME()",
      "body": ["ANIMPOSTFX_GET_CURRENT_TIME(${1:const char* effectName})"],
      "description": "ANIMPOSTFX_GET_CURRENT_TIME()"
    },
    "ANIMPOSTFX_IS_RUNNING": {
      "prefix": "ANIMPOSTFX_IS_RUNNING()",
      "body": ["ANIMPOSTFX_IS_RUNNING(${1:const char* effectName})"],
      "description": "ANIMPOSTFX_IS_RUNNING()"
    },
    "ANIMPOSTFX_STOP_ALL": {
      "prefix": "ANIMPOSTFX_STOP_ALL()",
      "body": ["ANIMPOSTFX_STOP_ALL()"],
      "description": "ANIMPOSTFX_STOP_ALL()"
    },
    "ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS": {
      "prefix": "ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS()",
      "body": ["ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS(${1:const char* effectName})"],
      "description": "ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS()"
    },
    "BEGIN_TEXT_COMMAND_BUSYSPINNER_ON": {
      "prefix": "BEGIN_TEXT_COMMAND_BUSYSPINNER_ON()",
      "body": ["BEGIN_TEXT_COMMAND_BUSYSPINNER_ON(${1:const char* string})"],
      "description": "BEGIN_TEXT_COMMAND_BUSYSPINNER_ON()"
    },
    "END_TEXT_COMMAND_BUSYSPINNER_ON": {
      "prefix": "END_TEXT_COMMAND_BUSYSPINNER_ON()",
      "body": ["END_TEXT_COMMAND_BUSYSPINNER_ON(${1:int busySpinnerType})"],
      "description": "END_TEXT_COMMAND_BUSYSPINNER_ON()"
    },
    "BUSYSPINNER_OFF": {
      "prefix": "BUSYSPINNER_OFF()",
      "body": ["BUSYSPINNER_OFF()"],
      "description": "BUSYSPINNER_OFF()"
    },
    "PRELOAD_BUSYSPINNER": {
      "prefix": "PRELOAD_BUSYSPINNER()",
      "body": ["PRELOAD_BUSYSPINNER()"],
      "description": "PRELOAD_BUSYSPINNER()"
    },
    "BUSYSPINNER_IS_ON": {
      "prefix": "BUSYSPINNER_IS_ON()",
      "body": ["BUSYSPINNER_IS_ON()"],
      "description": "BUSYSPINNER_IS_ON()"
    },
    "BUSYSPINNER_IS_DISPLAYING": {
      "prefix": "BUSYSPINNER_IS_DISPLAYING()",
      "body": ["BUSYSPINNER_IS_DISPLAYING()"],
      "description": "BUSYSPINNER_IS_DISPLAYING()"
    },
    "DISABLE_PAUSEMENU_SPINNER": {
      "prefix": "DISABLE_PAUSEMENU_SPINNER()",
      "body": ["DISABLE_PAUSEMENU_SPINNER(${1:BOOL p0})"],
      "description": "DISABLE_PAUSEMENU_SPINNER()"
    },
    "SET_MOUSE_CURSOR_THIS_FRAME": {
      "prefix": "SET_MOUSE_CURSOR_THIS_FRAME()",
      "body": ["SET_MOUSE_CURSOR_THIS_FRAME()"],
      "description": "SET_MOUSE_CURSOR_THIS_FRAME()"
    },
    "SET_MOUSE_CURSOR_STYLE": {
      "prefix": "SET_MOUSE_CURSOR_STYLE()",
      "body": ["SET_MOUSE_CURSOR_STYLE(${1:int spriteId})"],
      "description": "SET_MOUSE_CURSOR_STYLE()"
    },
    "SET_MOUSE_CURSOR_VISIBLE": {
      "prefix": "SET_MOUSE_CURSOR_VISIBLE()",
      "body": ["SET_MOUSE_CURSOR_VISIBLE(${1:BOOL toggle})"],
      "description": "SET_MOUSE_CURSOR_VISIBLE()"
    },
    "IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS": {
      "prefix": "IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS()",
      "body": ["IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS()"],
      "description": "IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS()"
    },
    "GET_MOUSE_EVENT": {
      "prefix": "GET_MOUSE_EVENT()",
      "body": [
        "GET_MOUSE_EVENT(${1:int scaleformHandle}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})"
      ],
      "description": "GET_MOUSE_EVENT()"
    },
    "THEFEED_ONLY_SHOW_TOOLTIPS": {
      "prefix": "THEFEED_ONLY_SHOW_TOOLTIPS()",
      "body": ["THEFEED_ONLY_SHOW_TOOLTIPS(${1:BOOL toggle})"],
      "description": "THEFEED_ONLY_SHOW_TOOLTIPS()"
    },
    "THEFEED_SET_SCRIPTED_MENU_HEIGHT": {
      "prefix": "THEFEED_SET_SCRIPTED_MENU_HEIGHT()",
      "body": ["THEFEED_SET_SCRIPTED_MENU_HEIGHT(${1:float pos})"],
      "description": "THEFEED_SET_SCRIPTED_MENU_HEIGHT()"
    },
    "THEFEED_HIDE": {
      "prefix": "THEFEED_HIDE()",
      "body": ["THEFEED_HIDE()"],
      "description": "THEFEED_HIDE()"
    },
    "THEFEED_HIDE_THIS_FRAME": {
      "prefix": "THEFEED_HIDE_THIS_FRAME()",
      "body": ["THEFEED_HIDE_THIS_FRAME()"],
      "description": "THEFEED_HIDE_THIS_FRAME()"
    },
    "THEFEED_SHOW": {
      "prefix": "THEFEED_SHOW()",
      "body": ["THEFEED_SHOW()"],
      "description": "THEFEED_SHOW()"
    },
    "THEFEED_FLUSH_QUEUE": {
      "prefix": "THEFEED_FLUSH_QUEUE()",
      "body": ["THEFEED_FLUSH_QUEUE()"],
      "description": "THEFEED_FLUSH_QUEUE()"
    },
    "THEFEED_REMOVE_ITEM": {
      "prefix": "THEFEED_REMOVE_ITEM()",
      "body": ["THEFEED_REMOVE_ITEM(${1:int notificationId})"],
      "description": "THEFEED_REMOVE_ITEM()"
    },
    "THEFEED_FORCE_RENDER_ON": {
      "prefix": "THEFEED_FORCE_RENDER_ON()",
      "body": ["THEFEED_FORCE_RENDER_ON()"],
      "description": "THEFEED_FORCE_RENDER_ON()"
    },
    "THEFEED_FORCE_RENDER_OFF": {
      "prefix": "THEFEED_FORCE_RENDER_OFF()",
      "body": ["THEFEED_FORCE_RENDER_OFF()"],
      "description": "THEFEED_FORCE_RENDER_OFF()"
    },
    "THEFEED_PAUSE": {
      "prefix": "THEFEED_PAUSE()",
      "body": ["THEFEED_PAUSE()"],
      "description": "THEFEED_PAUSE()"
    },
    "THEFEED_RESUME": {
      "prefix": "THEFEED_RESUME()",
      "body": ["THEFEED_RESUME()"],
      "description": "THEFEED_RESUME()"
    },
    "THEFEED_IS_PAUSED": {
      "prefix": "THEFEED_IS_PAUSED()",
      "body": ["THEFEED_IS_PAUSED()"],
      "description": "THEFEED_IS_PAUSED()"
    },
    "THEFEED_REPORT_LOGO_ON": {
      "prefix": "THEFEED_REPORT_LOGO_ON()",
      "body": ["THEFEED_REPORT_LOGO_ON()"],
      "description": "THEFEED_REPORT_LOGO_ON()"
    },
    "THEFEED_REPORT_LOGO_OFF": {
      "prefix": "THEFEED_REPORT_LOGO_OFF()",
      "body": ["THEFEED_REPORT_LOGO_OFF()"],
      "description": "THEFEED_REPORT_LOGO_OFF()"
    },
    "THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID": {
      "prefix": "THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID()",
      "body": ["THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID()"],
      "description": "THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID()"
    },
    "THEFEED_AUTO_POST_GAMETIPS_ON": {
      "prefix": "THEFEED_AUTO_POST_GAMETIPS_ON()",
      "body": ["THEFEED_AUTO_POST_GAMETIPS_ON()"],
      "description": "THEFEED_AUTO_POST_GAMETIPS_ON()"
    },
    "THEFEED_AUTO_POST_GAMETIPS_OFF": {
      "prefix": "THEFEED_AUTO_POST_GAMETIPS_OFF()",
      "body": ["THEFEED_AUTO_POST_GAMETIPS_OFF()"],
      "description": "THEFEED_AUTO_POST_GAMETIPS_OFF()"
    },
    "THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST": {
      "prefix": "THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST()",
      "body": [
        "THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(${1:int hudColorIndex})"
      ],
      "description": "THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST()"
    },
    "THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE": {
      "prefix": "THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE()",
      "body": [
        "THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE(${1:int red}, ${2:int green}, ${3:int blue}, ${4:int alpha})"
      ],
      "description": "THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE()"
    },
    "THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE": {
      "prefix": "THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE()",
      "body": [
        "THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE(${1:int count})"
      ],
      "description": "THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE()"
    },
    "THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE": {
      "prefix": "THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE()",
      "body": [
        "THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE(${1:BOOL toggle})"
      ],
      "description": "THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE()"
    },
    "THEFEED_RESET_ALL_PARAMETERS": {
      "prefix": "THEFEED_RESET_ALL_PARAMETERS()",
      "body": ["THEFEED_RESET_ALL_PARAMETERS()"],
      "description": "THEFEED_RESET_ALL_PARAMETERS()"
    },
    "THEFEED_FREEZE_NEXT_POST": {
      "prefix": "THEFEED_FREEZE_NEXT_POST()",
      "body": ["THEFEED_FREEZE_NEXT_POST()"],
      "description": "THEFEED_FREEZE_NEXT_POST()"
    },
    "THEFEED_CLEAR_FROZEN_POST": {
      "prefix": "THEFEED_CLEAR_FROZEN_POST()",
      "body": ["THEFEED_CLEAR_FROZEN_POST()"],
      "description": "THEFEED_CLEAR_FROZEN_POST()"
    },
    "THEFEED_SET_SNAP_FEED_ITEM_POSITIONS": {
      "prefix": "THEFEED_SET_SNAP_FEED_ITEM_POSITIONS()",
      "body": ["THEFEED_SET_SNAP_FEED_ITEM_POSITIONS(${1:BOOL p0})"],
      "description": "THEFEED_SET_SNAP_FEED_ITEM_POSITIONS()"
    },
    "THEFEED_UPDATE_ITEM_TEXTURE": {
      "prefix": "THEFEED_UPDATE_ITEM_TEXTURE()",
      "body": [
        "THEFEED_UPDATE_ITEM_TEXTURE(${1:const char* txdString1}, ${2:const char* txnString1}, ${3:const char* txdString2}, ${4:const char* txnString2})"
      ],
      "description": "THEFEED_UPDATE_ITEM_TEXTURE()"
    },
    "BEGIN_TEXT_COMMAND_THEFEED_POST": {
      "prefix": "BEGIN_TEXT_COMMAND_THEFEED_POST()",
      "body": ["BEGIN_TEXT_COMMAND_THEFEED_POST(${1:const char* text})"],
      "description": "BEGIN_TEXT_COMMAND_THEFEED_POST()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_STATS": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_STATS()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_STATS(${1:const char* statTitle}, ${2:int iconEnum}, ${3:BOOL stepVal}, ${4:int barValue}, ${5:BOOL isImportant}, ${6:const char* pictureTextureDict}, ${7:const char* pictureTextureName})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_STATS()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT(${1:const char* txdName}, ${2:const char* textureName}, ${3:BOOL flash}, ${4:int iconType}, ${5:const char* sender}, ${6:const char* subject})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL(${1:const char* txdName}, ${2:const char* textureName}, ${3:BOOL flash}, ${4:int iconType}, ${5:const char* sender}, ${6:const char* subject})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU(${1:const char* txdName}, ${2:const char* textureName}, ${3:BOOL flash}, ${4:int iconType}, ${5:const char* sender}, ${6:const char* subject}, ${7:float duration})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG(${1:const char* txdName}, ${2:const char* textureName}, ${3:BOOL flash}, ${4:int iconType}, ${5:const char* sender}, ${6:const char* subject}, ${7:float duration}, ${8:const char* clanTag})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON(${1:const char* txdName}, ${2:const char* textureName}, ${3:BOOL flash}, ${4:int iconType1}, ${5:const char* sender}, ${6:const char* subject}, ${7:float duration}, ${8:const char* clanTag}, ${9:int iconType2}, ${10:int p9})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_TICKER": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_TICKER()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_TICKER(${1:BOOL blink}, ${2:BOOL p1})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_TICKER()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED(${1:BOOL blink}, ${2:BOOL p1})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS(${1:BOOL blink}, ${2:BOOL p1})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_AWARD": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_AWARD()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_AWARD(${1:const char* textureDict}, ${2:const char* textureName}, ${3:int rpBonus}, ${4:int colorOverlay}, ${5:const char* titleLabel})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_AWARD()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_CREWTAG": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_CREWTAG()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_CREWTAG(${1:BOOL p0}, ${2:BOOL p1}, ${3:int* p2}, ${4:int p3}, ${5:BOOL isLeader}, ${6:BOOL unk0}, ${7:int clanDesc}, ${8:int R}, ${9:int G}, ${10:int B})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_CREWTAG()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME(${1:BOOL p0}, ${2:BOOL p1}, ${3:int* p2}, ${4:int p3}, ${5:BOOL isLeader}, ${6:BOOL unk0}, ${7:int clanDesc}, ${8:const char* playerName}, ${9:int R}, ${10:int G}, ${11:int B})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_UNLOCK": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_UNLOCK()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_UNLOCK(${1:const char* gxtLabel1}, ${2:int p1}, ${3:const char* gxtLabel2})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_UNLOCK()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU(${1:const char* gxtLabel1}, ${2:int p1}, ${3:const char* gxtLabel2}, ${4:int p3})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_MPTICKER": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_MPTICKER()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_MPTICKER(${1:BOOL blink}, ${2:BOOL p1})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_MPTICKER()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG(${1:const char* p0}, ${2:const char* p1}, ${3:const char* p2}, ${4:BOOL p3}, ${5:BOOL p4})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU(${1:const char* txdName1}, ${2:const char* textureName1}, ${3:int count1}, ${4:const char* txdName2}, ${5:const char* textureName2}, ${6:int count2}, ${7:int hudColor1}, ${8:int hudColor2})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_REPLAY": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_REPLAY()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_REPLAY(${1:int type}, ${2:int image}, ${3:const char* text})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_REPLAY()"
    },
    "END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT": {
      "prefix": "END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT()",
      "body": [
        "END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(${1:int type}, ${2:const char* button}, ${3:const char* text})"
      ],
      "description": "END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT()"
    },
    "BEGIN_TEXT_COMMAND_PRINT": {
      "prefix": "BEGIN_TEXT_COMMAND_PRINT()",
      "body": ["BEGIN_TEXT_COMMAND_PRINT(${1:const char* GxtEntry})"],
      "description": "BEGIN_TEXT_COMMAND_PRINT()"
    },
    "END_TEXT_COMMAND_PRINT": {
      "prefix": "END_TEXT_COMMAND_PRINT()",
      "body": [
        "END_TEXT_COMMAND_PRINT(${1:int duration}, ${2:BOOL drawImmediately})"
      ],
      "description": "END_TEXT_COMMAND_PRINT()"
    },
    "BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED": {
      "prefix": "BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED()",
      "body": ["BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(${1:const char* text})"],
      "description": "BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED()"
    },
    "END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED": {
      "prefix": "END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED()",
      "body": ["END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED()"],
      "description": "END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED()"
    },
    "BEGIN_TEXT_COMMAND_DISPLAY_TEXT": {
      "prefix": "BEGIN_TEXT_COMMAND_DISPLAY_TEXT()",
      "body": ["BEGIN_TEXT_COMMAND_DISPLAY_TEXT(${1:const char* text})"],
      "description": "BEGIN_TEXT_COMMAND_DISPLAY_TEXT()"
    },
    "END_TEXT_COMMAND_DISPLAY_TEXT": {
      "prefix": "END_TEXT_COMMAND_DISPLAY_TEXT()",
      "body": [
        "END_TEXT_COMMAND_DISPLAY_TEXT(${1:float x}, ${2:float y}, ${3:int p2})"
      ],
      "description": "END_TEXT_COMMAND_DISPLAY_TEXT()"
    },
    "BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT": {
      "prefix": "BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT()",
      "body": [
        "BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(${1:const char* text})"
      ],
      "description": "BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT()"
    },
    "END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT": {
      "prefix": "END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT()",
      "body": ["END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(${1:BOOL p0})"],
      "description": "END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT()"
    },
    "BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING": {
      "prefix": "BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING()",
      "body": [
        "BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(${1:const char* entry})"
      ],
      "description": "BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING()"
    },
    "END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING": {
      "prefix": "END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING()",
      "body": [
        "END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(${1:float x}, ${2:float y})"
      ],
      "description": "END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING()"
    },
    "BEGIN_TEXT_COMMAND_DISPLAY_HELP": {
      "prefix": "BEGIN_TEXT_COMMAND_DISPLAY_HELP()",
      "body": ["BEGIN_TEXT_COMMAND_DISPLAY_HELP(${1:const char* inputType})"],
      "description": "BEGIN_TEXT_COMMAND_DISPLAY_HELP()"
    },
    "END_TEXT_COMMAND_DISPLAY_HELP": {
      "prefix": "END_TEXT_COMMAND_DISPLAY_HELP()",
      "body": [
        "END_TEXT_COMMAND_DISPLAY_HELP(${1:int p0}, ${2:BOOL loop}, ${3:BOOL beep}, ${4:int shape})"
      ],
      "description": "END_TEXT_COMMAND_DISPLAY_HELP()"
    },
    "BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED": {
      "prefix": "BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED()",
      "body": [
        "BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(${1:const char* labelName})"
      ],
      "description": "BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED()"
    },
    "END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED": {
      "prefix": "END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED()",
      "body": [
        "END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(${1:int p0})"
      ],
      "description": "END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED()"
    },
    "BEGIN_TEXT_COMMAND_SET_BLIP_NAME": {
      "prefix": "BEGIN_TEXT_COMMAND_SET_BLIP_NAME()",
      "body": ["BEGIN_TEXT_COMMAND_SET_BLIP_NAME(${1:const char* textLabel})"],
      "description": "BEGIN_TEXT_COMMAND_SET_BLIP_NAME()"
    },
    "END_TEXT_COMMAND_SET_BLIP_NAME": {
      "prefix": "END_TEXT_COMMAND_SET_BLIP_NAME()",
      "body": ["END_TEXT_COMMAND_SET_BLIP_NAME(${1:Blip blip})"],
      "description": "END_TEXT_COMMAND_SET_BLIP_NAME()"
    },
    "BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS": {
      "prefix": "BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS()",
      "body": [
        "BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(${1:const char* p0})"
      ],
      "description": "BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS()"
    },
    "END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS": {
      "prefix": "END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS()",
      "body": ["END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(${1:BOOL p0})"],
      "description": "END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS()"
    },
    "BEGIN_TEXT_COMMAND_CLEAR_PRINT": {
      "prefix": "BEGIN_TEXT_COMMAND_CLEAR_PRINT()",
      "body": ["BEGIN_TEXT_COMMAND_CLEAR_PRINT(${1:const char* text})"],
      "description": "BEGIN_TEXT_COMMAND_CLEAR_PRINT()"
    },
    "END_TEXT_COMMAND_CLEAR_PRINT": {
      "prefix": "END_TEXT_COMMAND_CLEAR_PRINT()",
      "body": ["END_TEXT_COMMAND_CLEAR_PRINT()"],
      "description": "END_TEXT_COMMAND_CLEAR_PRINT()"
    },
    "BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT": {
      "prefix": "BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT()",
      "body": [
        "BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(${1:const char* gxtEntry})"
      ],
      "description": "BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT()"
    },
    "END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT": {
      "prefix": "END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT()",
      "body": ["END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(${1:int p0})"],
      "description": "END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT()"
    },
    "ADD_TEXT_COMPONENT_INTEGER": {
      "prefix": "ADD_TEXT_COMPONENT_INTEGER()",
      "body": ["ADD_TEXT_COMPONENT_INTEGER(${1:int value})"],
      "description": "ADD_TEXT_COMPONENT_INTEGER()"
    },
    "ADD_TEXT_COMPONENT_FLOAT": {
      "prefix": "ADD_TEXT_COMPONENT_FLOAT()",
      "body": [
        "ADD_TEXT_COMPONENT_FLOAT(${1:float value}, ${2:int decimalPlaces})"
      ],
      "description": "ADD_TEXT_COMPONENT_FLOAT()"
    },
    "ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL": {
      "prefix": "ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL()",
      "body": [
        "ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(${1:const char* labelName})"
      ],
      "description": "ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL()"
    },
    "ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY": {
      "prefix": "ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY()",
      "body": [
        "ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(${1:Hash gxtEntryHash})"
      ],
      "description": "ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY()"
    },
    "ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME": {
      "prefix": "ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME()",
      "body": ["ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME(${1:Blip blip})"],
      "description": "ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME()"
    },
    "ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME": {
      "prefix": "ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME()",
      "body": ["ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(${1:const char* text})"],
      "description": "ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME()"
    },
    "ADD_TEXT_COMPONENT_SUBSTRING_TIME": {
      "prefix": "ADD_TEXT_COMPONENT_SUBSTRING_TIME()",
      "body": [
        "ADD_TEXT_COMPONENT_SUBSTRING_TIME(${1:int timestamp}, ${2:int flags})"
      ],
      "description": "ADD_TEXT_COMPONENT_SUBSTRING_TIME()"
    },
    "ADD_TEXT_COMPONENT_FORMATTED_INTEGER": {
      "prefix": "ADD_TEXT_COMPONENT_FORMATTED_INTEGER()",
      "body": [
        "ADD_TEXT_COMPONENT_FORMATTED_INTEGER(${1:int value}, ${2:BOOL commaSeparated})"
      ],
      "description": "ADD_TEXT_COMPONENT_FORMATTED_INTEGER()"
    },
    "ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER": {
      "prefix": "ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER()",
      "body": [
        "ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER(${1:const char* p0}, ${2:int p1})"
      ],
      "description": "ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER()"
    },
    "ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE": {
      "prefix": "ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE()",
      "body": ["ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE(${1:const char* website})"],
      "description": "ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE()"
    },
    "ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY": {
      "prefix": "ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY()",
      "body": [
        "ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY(${1:const char* string})"
      ],
      "description": "ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY()"
    },
    "SET_COLOUR_OF_NEXT_TEXT_COMPONENT": {
      "prefix": "SET_COLOUR_OF_NEXT_TEXT_COMPONENT()",
      "body": ["SET_COLOUR_OF_NEXT_TEXT_COMPONENT(${1:int hudColor})"],
      "description": "SET_COLOUR_OF_NEXT_TEXT_COMPONENT()"
    },
    "CLEAR_PRINTS": {
      "prefix": "CLEAR_PRINTS()",
      "body": ["CLEAR_PRINTS()"],
      "description": "CLEAR_PRINTS()"
    },
    "CLEAR_BRIEF": {
      "prefix": "CLEAR_BRIEF()",
      "body": ["CLEAR_BRIEF()"],
      "description": "CLEAR_BRIEF()"
    },
    "CLEAR_ALL_HELP_MESSAGES": {
      "prefix": "CLEAR_ALL_HELP_MESSAGES()",
      "body": ["CLEAR_ALL_HELP_MESSAGES()"],
      "description": "CLEAR_ALL_HELP_MESSAGES()"
    },
    "CLEAR_THIS_PRINT": {
      "prefix": "CLEAR_THIS_PRINT()",
      "body": ["CLEAR_THIS_PRINT(${1:const char* p0})"],
      "description": "CLEAR_THIS_PRINT()"
    },
    "CLEAR_SMALL_PRINTS": {
      "prefix": "CLEAR_SMALL_PRINTS()",
      "body": ["CLEAR_SMALL_PRINTS()"],
      "description": "CLEAR_SMALL_PRINTS()"
    },
    "DOES_TEXT_BLOCK_EXIST": {
      "prefix": "DOES_TEXT_BLOCK_EXIST()",
      "body": ["DOES_TEXT_BLOCK_EXIST(${1:const char* gxt})"],
      "description": "DOES_TEXT_BLOCK_EXIST()"
    },
    "REQUEST_ADDITIONAL_TEXT": {
      "prefix": "REQUEST_ADDITIONAL_TEXT()",
      "body": ["REQUEST_ADDITIONAL_TEXT(${1:const char* gxt}, ${2:int slot})"],
      "description": "REQUEST_ADDITIONAL_TEXT()"
    },
    "REQUEST_ADDITIONAL_TEXT_FOR_DLC": {
      "prefix": "REQUEST_ADDITIONAL_TEXT_FOR_DLC()",
      "body": [
        "REQUEST_ADDITIONAL_TEXT_FOR_DLC(${1:const char* gxt}, ${2:int slot})"
      ],
      "description": "REQUEST_ADDITIONAL_TEXT_FOR_DLC()"
    },
    "HAS_ADDITIONAL_TEXT_LOADED": {
      "prefix": "HAS_ADDITIONAL_TEXT_LOADED()",
      "body": ["HAS_ADDITIONAL_TEXT_LOADED(${1:int slot})"],
      "description": "HAS_ADDITIONAL_TEXT_LOADED()"
    },
    "CLEAR_ADDITIONAL_TEXT": {
      "prefix": "CLEAR_ADDITIONAL_TEXT()",
      "body": ["CLEAR_ADDITIONAL_TEXT(${1:int p0}, ${2:BOOL p1})"],
      "description": "CLEAR_ADDITIONAL_TEXT()"
    },
    "IS_STREAMING_ADDITIONAL_TEXT": {
      "prefix": "IS_STREAMING_ADDITIONAL_TEXT()",
      "body": ["IS_STREAMING_ADDITIONAL_TEXT(${1:int p0})"],
      "description": "IS_STREAMING_ADDITIONAL_TEXT()"
    },
    "HAS_THIS_ADDITIONAL_TEXT_LOADED": {
      "prefix": "HAS_THIS_ADDITIONAL_TEXT_LOADED()",
      "body": [
        "HAS_THIS_ADDITIONAL_TEXT_LOADED(${1:const char* gxt}, ${2:int slot})"
      ],
      "description": "HAS_THIS_ADDITIONAL_TEXT_LOADED()"
    },
    "IS_MESSAGE_BEING_DISPLAYED": {
      "prefix": "IS_MESSAGE_BEING_DISPLAYED()",
      "body": ["IS_MESSAGE_BEING_DISPLAYED()"],
      "description": "IS_MESSAGE_BEING_DISPLAYED()"
    },
    "DOES_TEXT_LABEL_EXIST": {
      "prefix": "DOES_TEXT_LABEL_EXIST()",
      "body": ["DOES_TEXT_LABEL_EXIST(${1:const char* gxt})"],
      "description": "DOES_TEXT_LABEL_EXIST()"
    },
    "GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL": {
      "prefix": "GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL()",
      "body": ["GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL(${1:const char* gxt})"],
      "description": "GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL()"
    },
    "GET_LENGTH_OF_LITERAL_STRING": {
      "prefix": "GET_LENGTH_OF_LITERAL_STRING()",
      "body": ["GET_LENGTH_OF_LITERAL_STRING(${1:const char* string})"],
      "description": "GET_LENGTH_OF_LITERAL_STRING()"
    },
    "GET_LENGTH_OF_LITERAL_STRING_IN_BYTES": {
      "prefix": "GET_LENGTH_OF_LITERAL_STRING_IN_BYTES()",
      "body": ["GET_LENGTH_OF_LITERAL_STRING_IN_BYTES(${1:const char* string})"],
      "description": "GET_LENGTH_OF_LITERAL_STRING_IN_BYTES()"
    },
    "IS_HUD_PREFERENCE_SWITCHED_ON": {
      "prefix": "IS_HUD_PREFERENCE_SWITCHED_ON()",
      "body": ["IS_HUD_PREFERENCE_SWITCHED_ON()"],
      "description": "IS_HUD_PREFERENCE_SWITCHED_ON()"
    },
    "IS_RADAR_PREFERENCE_SWITCHED_ON": {
      "prefix": "IS_RADAR_PREFERENCE_SWITCHED_ON()",
      "body": ["IS_RADAR_PREFERENCE_SWITCHED_ON()"],
      "description": "IS_RADAR_PREFERENCE_SWITCHED_ON()"
    },
    "IS_SUBTITLE_PREFERENCE_SWITCHED_ON": {
      "prefix": "IS_SUBTITLE_PREFERENCE_SWITCHED_ON()",
      "body": ["IS_SUBTITLE_PREFERENCE_SWITCHED_ON()"],
      "description": "IS_SUBTITLE_PREFERENCE_SWITCHED_ON()"
    },
    "DISPLAY_HUD": {
      "prefix": "DISPLAY_HUD()",
      "body": ["DISPLAY_HUD(${1:BOOL toggle})"],
      "description": "DISPLAY_HUD()"
    },
    "DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME": {
      "prefix": "DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME()",
      "body": ["DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME()"],
      "description": "DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME()"
    },
    "DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME": {
      "prefix": "DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME()",
      "body": ["DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME()"],
      "description": "DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME()"
    },
    "DISPLAY_RADAR": {
      "prefix": "DISPLAY_RADAR()",
      "body": ["DISPLAY_RADAR(${1:BOOL toggle})"],
      "description": "DISPLAY_RADAR()"
    },
    "SET_FAKE_SPECTATOR_MODE": {
      "prefix": "SET_FAKE_SPECTATOR_MODE()",
      "body": ["SET_FAKE_SPECTATOR_MODE(${1:BOOL toggle})"],
      "description": "SET_FAKE_SPECTATOR_MODE()"
    },
    "GET_FAKE_SPECTATOR_MODE": {
      "prefix": "GET_FAKE_SPECTATOR_MODE()",
      "body": ["GET_FAKE_SPECTATOR_MODE()"],
      "description": "GET_FAKE_SPECTATOR_MODE()"
    },
    "IS_HUD_HIDDEN": {
      "prefix": "IS_HUD_HIDDEN()",
      "body": ["IS_HUD_HIDDEN()"],
      "description": "IS_HUD_HIDDEN()"
    },
    "IS_RADAR_HIDDEN": {
      "prefix": "IS_RADAR_HIDDEN()",
      "body": ["IS_RADAR_HIDDEN()"],
      "description": "IS_RADAR_HIDDEN()"
    },
    "IS_MINIMAP_RENDERING": {
      "prefix": "IS_MINIMAP_RENDERING()",
      "body": ["IS_MINIMAP_RENDERING()"],
      "description": "IS_MINIMAP_RENDERING()"
    },
    "USE_VEHICLE_TARGETING_RETICULE": {
      "prefix": "USE_VEHICLE_TARGETING_RETICULE()",
      "body": ["USE_VEHICLE_TARGETING_RETICULE(${1:Any p0})"],
      "description": "USE_VEHICLE_TARGETING_RETICULE()"
    },
    "_USE_VEHICLE_TARGETING_RETICULE_ON_VEHICLES": {
      "prefix": "_USE_VEHICLE_TARGETING_RETICULE_ON_VEHICLES()",
      "body": ["_USE_VEHICLE_TARGETING_RETICULE_ON_VEHICLES(${1:BOOL enable})"],
      "description": "_USE_VEHICLE_TARGETING_RETICULE_ON_VEHICLES()"
    },
    "ADD_VALID_VEHICLE_HIT_HASH": {
      "prefix": "ADD_VALID_VEHICLE_HIT_HASH()",
      "body": ["ADD_VALID_VEHICLE_HIT_HASH(${1:Any p0})"],
      "description": "ADD_VALID_VEHICLE_HIT_HASH()"
    },
    "CLEAR_VALID_VEHICLE_HIT_HASHES": {
      "prefix": "CLEAR_VALID_VEHICLE_HIT_HASHES()",
      "body": ["CLEAR_VALID_VEHICLE_HIT_HASHES()"],
      "description": "CLEAR_VALID_VEHICLE_HIT_HASHES()"
    },
    "SET_BLIP_ROUTE": {
      "prefix": "SET_BLIP_ROUTE()",
      "body": ["SET_BLIP_ROUTE(${1:Blip blip}, ${2:BOOL enabled})"],
      "description": "SET_BLIP_ROUTE()"
    },
    "CLEAR_ALL_BLIP_ROUTES": {
      "prefix": "CLEAR_ALL_BLIP_ROUTES()",
      "body": ["CLEAR_ALL_BLIP_ROUTES()"],
      "description": "CLEAR_ALL_BLIP_ROUTES()"
    },
    "SET_BLIP_ROUTE_COLOUR": {
      "prefix": "SET_BLIP_ROUTE_COLOUR()",
      "body": ["SET_BLIP_ROUTE_COLOUR(${1:Blip blip}, ${2:int colour})"],
      "description": "SET_BLIP_ROUTE_COLOUR()"
    },
    "SET_FORCE_SHOW_GPS": {
      "prefix": "SET_FORCE_SHOW_GPS()",
      "body": ["SET_FORCE_SHOW_GPS(${1:BOOL toggle})"],
      "description": "SET_FORCE_SHOW_GPS()"
    },
    "SET_USE_SET_DESTINATION_IN_PAUSE_MAP": {
      "prefix": "SET_USE_SET_DESTINATION_IN_PAUSE_MAP()",
      "body": ["SET_USE_SET_DESTINATION_IN_PAUSE_MAP(${1:BOOL toggle})"],
      "description": "SET_USE_SET_DESTINATION_IN_PAUSE_MAP()"
    },
    "SET_BLOCK_WANTED_FLASH": {
      "prefix": "SET_BLOCK_WANTED_FLASH()",
      "body": ["SET_BLOCK_WANTED_FLASH(${1:BOOL disabled})"],
      "description": "SET_BLOCK_WANTED_FLASH()"
    },
    "ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS": {
      "prefix": "ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS()",
      "body": ["ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS(${1:BOOL p0})"],
      "description": "ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS()"
    },
    "FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST": {
      "prefix": "FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST()",
      "body": ["FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST(${1:int p0})"],
      "description": "FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST()"
    },
    "SET_RADAR_ZOOM_PRECISE": {
      "prefix": "SET_RADAR_ZOOM_PRECISE()",
      "body": ["SET_RADAR_ZOOM_PRECISE(${1:float zoom})"],
      "description": "SET_RADAR_ZOOM_PRECISE()"
    },
    "SET_RADAR_ZOOM": {
      "prefix": "SET_RADAR_ZOOM()",
      "body": ["SET_RADAR_ZOOM(${1:int zoomLevel})"],
      "description": "SET_RADAR_ZOOM()"
    },
    "SET_RADAR_ZOOM_TO_BLIP": {
      "prefix": "SET_RADAR_ZOOM_TO_BLIP()",
      "body": ["SET_RADAR_ZOOM_TO_BLIP(${1:Blip blip}, ${2:float zoom})"],
      "description": "SET_RADAR_ZOOM_TO_BLIP()"
    },
    "SET_RADAR_ZOOM_TO_DISTANCE": {
      "prefix": "SET_RADAR_ZOOM_TO_DISTANCE()",
      "body": ["SET_RADAR_ZOOM_TO_DISTANCE(${1:float zoom})"],
      "description": "SET_RADAR_ZOOM_TO_DISTANCE()"
    },
    "UPDATE_RADAR_ZOOM_TO_BLIP": {
      "prefix": "UPDATE_RADAR_ZOOM_TO_BLIP()",
      "body": ["UPDATE_RADAR_ZOOM_TO_BLIP()"],
      "description": "UPDATE_RADAR_ZOOM_TO_BLIP()"
    },
    "GET_HUD_COLOUR": {
      "prefix": "GET_HUD_COLOUR()",
      "body": [
        "GET_HUD_COLOUR(${1:int hudColorIndex}, ${2:int* r}, ${3:int* g}, ${4:int* b}, ${5:int* a})"
      ],
      "description": "GET_HUD_COLOUR()"
    },
    "SET_SCRIPT_VARIABLE_HUD_COLOUR": {
      "prefix": "SET_SCRIPT_VARIABLE_HUD_COLOUR()",
      "body": [
        "SET_SCRIPT_VARIABLE_HUD_COLOUR(${1:int r}, ${2:int g}, ${3:int b}, ${4:int a})"
      ],
      "description": "SET_SCRIPT_VARIABLE_HUD_COLOUR()"
    },
    "SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR": {
      "prefix": "SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR()",
      "body": [
        "SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR(${1:int r}, ${2:int g}, ${3:int b}, ${4:int a})"
      ],
      "description": "SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR()"
    },
    "REPLACE_HUD_COLOUR": {
      "prefix": "REPLACE_HUD_COLOUR()",
      "body": [
        "REPLACE_HUD_COLOUR(${1:int hudColorIndex}, ${2:int hudColorIndex2})"
      ],
      "description": "REPLACE_HUD_COLOUR()"
    },
    "REPLACE_HUD_COLOUR_WITH_RGBA": {
      "prefix": "REPLACE_HUD_COLOUR_WITH_RGBA()",
      "body": [
        "REPLACE_HUD_COLOUR_WITH_RGBA(${1:int hudColorIndex}, ${2:int r}, ${3:int g}, ${4:int b}, ${5:int a})"
      ],
      "description": "REPLACE_HUD_COLOUR_WITH_RGBA()"
    },
    "SET_ABILITY_BAR_VISIBILITY": {
      "prefix": "SET_ABILITY_BAR_VISIBILITY()",
      "body": ["SET_ABILITY_BAR_VISIBILITY(${1:BOOL visible})"],
      "description": "SET_ABILITY_BAR_VISIBILITY()"
    },
    "SET_ALLOW_ABILITY_BAR": {
      "prefix": "SET_ALLOW_ABILITY_BAR()",
      "body": ["SET_ALLOW_ABILITY_BAR(${1:BOOL toggle})"],
      "description": "SET_ALLOW_ABILITY_BAR()"
    },
    "FLASH_ABILITY_BAR": {
      "prefix": "FLASH_ABILITY_BAR()",
      "body": ["FLASH_ABILITY_BAR(${1:int millisecondsToFlash})"],
      "description": "FLASH_ABILITY_BAR()"
    },
    "SET_ABILITY_BAR_VALUE": {
      "prefix": "SET_ABILITY_BAR_VALUE()",
      "body": ["SET_ABILITY_BAR_VALUE(${1:float p0}, ${2:float p1})"],
      "description": "SET_ABILITY_BAR_VALUE()"
    },
    "FLASH_WANTED_DISPLAY": {
      "prefix": "FLASH_WANTED_DISPLAY()",
      "body": ["FLASH_WANTED_DISPLAY(${1:BOOL p0})"],
      "description": "FLASH_WANTED_DISPLAY()"
    },
    "FORCE_OFF_WANTED_STAR_FLASH": {
      "prefix": "FORCE_OFF_WANTED_STAR_FLASH()",
      "body": ["FORCE_OFF_WANTED_STAR_FLASH(${1:BOOL toggle})"],
      "description": "FORCE_OFF_WANTED_STAR_FLASH()"
    },
    "SET_CUSTOM_MP_HUD_COLOR": {
      "prefix": "SET_CUSTOM_MP_HUD_COLOR()",
      "body": ["SET_CUSTOM_MP_HUD_COLOR(${1:int hudColorId})"],
      "description": "SET_CUSTOM_MP_HUD_COLOR()"
    },
    "GET_RENDERED_CHARACTER_HEIGHT": {
      "prefix": "GET_RENDERED_CHARACTER_HEIGHT()",
      "body": ["GET_RENDERED_CHARACTER_HEIGHT(${1:float size}, ${2:int font})"],
      "description": "GET_RENDERED_CHARACTER_HEIGHT()"
    },
    "SET_TEXT_SCALE": {
      "prefix": "SET_TEXT_SCALE()",
      "body": ["SET_TEXT_SCALE(${1:float scale}, ${2:float size})"],
      "description": "SET_TEXT_SCALE()"
    },
    "SET_TEXT_COLOUR": {
      "prefix": "SET_TEXT_COLOUR()",
      "body": [
        "SET_TEXT_COLOUR(${1:int red}, ${2:int green}, ${3:int blue}, ${4:int alpha})"
      ],
      "description": "SET_TEXT_COLOUR()"
    },
    "SET_TEXT_CENTRE": {
      "prefix": "SET_TEXT_CENTRE()",
      "body": ["SET_TEXT_CENTRE(${1:BOOL align})"],
      "description": "SET_TEXT_CENTRE()"
    },
    "SET_TEXT_RIGHT_JUSTIFY": {
      "prefix": "SET_TEXT_RIGHT_JUSTIFY()",
      "body": ["SET_TEXT_RIGHT_JUSTIFY(${1:BOOL toggle})"],
      "description": "SET_TEXT_RIGHT_JUSTIFY()"
    },
    "SET_TEXT_JUSTIFICATION": {
      "prefix": "SET_TEXT_JUSTIFICATION()",
      "body": ["SET_TEXT_JUSTIFICATION(${1:int justifyType})"],
      "description": "SET_TEXT_JUSTIFICATION()"
    },
    "SET_TEXT_LINE_HEIGHT_MULT": {
      "prefix": "SET_TEXT_LINE_HEIGHT_MULT()",
      "body": ["SET_TEXT_LINE_HEIGHT_MULT(${1:float lineHeightMult})"],
      "description": "SET_TEXT_LINE_HEIGHT_MULT()"
    },
    "SET_TEXT_WRAP": {
      "prefix": "SET_TEXT_WRAP()",
      "body": ["SET_TEXT_WRAP(${1:float start}, ${2:float end})"],
      "description": "SET_TEXT_WRAP()"
    },
    "SET_TEXT_LEADING": {
      "prefix": "SET_TEXT_LEADING()",
      "body": ["SET_TEXT_LEADING(${1:int p0})"],
      "description": "SET_TEXT_LEADING()"
    },
    "SET_TEXT_PROPORTIONAL": {
      "prefix": "SET_TEXT_PROPORTIONAL()",
      "body": ["SET_TEXT_PROPORTIONAL(${1:BOOL p0})"],
      "description": "SET_TEXT_PROPORTIONAL()"
    },
    "SET_TEXT_FONT": {
      "prefix": "SET_TEXT_FONT()",
      "body": ["SET_TEXT_FONT(${1:int fontType})"],
      "description": "SET_TEXT_FONT()"
    },
    "SET_TEXT_DROP_SHADOW": {
      "prefix": "SET_TEXT_DROP_SHADOW()",
      "body": ["SET_TEXT_DROP_SHADOW()"],
      "description": "SET_TEXT_DROP_SHADOW()"
    },
    "SET_TEXT_DROPSHADOW": {
      "prefix": "SET_TEXT_DROPSHADOW()",
      "body": [
        "SET_TEXT_DROPSHADOW(${1:int distance}, ${2:int r}, ${3:int g}, ${4:int b}, ${5:int a})"
      ],
      "description": "SET_TEXT_DROPSHADOW()"
    },
    "SET_TEXT_OUTLINE": {
      "prefix": "SET_TEXT_OUTLINE()",
      "body": ["SET_TEXT_OUTLINE()"],
      "description": "SET_TEXT_OUTLINE()"
    },
    "SET_TEXT_EDGE": {
      "prefix": "SET_TEXT_EDGE()",
      "body": [
        "SET_TEXT_EDGE(${1:int p0}, ${2:int r}, ${3:int g}, ${4:int b}, ${5:int a})"
      ],
      "description": "SET_TEXT_EDGE()"
    },
    "SET_TEXT_RENDER_ID": {
      "prefix": "SET_TEXT_RENDER_ID()",
      "body": ["SET_TEXT_RENDER_ID(${1:int renderId})"],
      "description": "SET_TEXT_RENDER_ID()"
    },
    "GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID": {
      "prefix": "GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID()",
      "body": ["GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID()"],
      "description": "GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID()"
    },
    "REGISTER_NAMED_RENDERTARGET": {
      "prefix": "REGISTER_NAMED_RENDERTARGET()",
      "body": [
        "REGISTER_NAMED_RENDERTARGET(${1:const char* name}, ${2:BOOL p1})"
      ],
      "description": "REGISTER_NAMED_RENDERTARGET()"
    },
    "IS_NAMED_RENDERTARGET_REGISTERED": {
      "prefix": "IS_NAMED_RENDERTARGET_REGISTERED()",
      "body": ["IS_NAMED_RENDERTARGET_REGISTERED(${1:const char* name})"],
      "description": "IS_NAMED_RENDERTARGET_REGISTERED()"
    },
    "RELEASE_NAMED_RENDERTARGET": {
      "prefix": "RELEASE_NAMED_RENDERTARGET()",
      "body": ["RELEASE_NAMED_RENDERTARGET(${1:const char* name})"],
      "description": "RELEASE_NAMED_RENDERTARGET()"
    },
    "LINK_NAMED_RENDERTARGET": {
      "prefix": "LINK_NAMED_RENDERTARGET()",
      "body": ["LINK_NAMED_RENDERTARGET(${1:Hash modelHash})"],
      "description": "LINK_NAMED_RENDERTARGET()"
    },
    "GET_NAMED_RENDERTARGET_RENDER_ID": {
      "prefix": "GET_NAMED_RENDERTARGET_RENDER_ID()",
      "body": ["GET_NAMED_RENDERTARGET_RENDER_ID(${1:const char* name})"],
      "description": "GET_NAMED_RENDERTARGET_RENDER_ID()"
    },
    "IS_NAMED_RENDERTARGET_LINKED": {
      "prefix": "IS_NAMED_RENDERTARGET_LINKED()",
      "body": ["IS_NAMED_RENDERTARGET_LINKED(${1:Hash modelHash})"],
      "description": "IS_NAMED_RENDERTARGET_LINKED()"
    },
    "CLEAR_HELP": {
      "prefix": "CLEAR_HELP()",
      "body": ["CLEAR_HELP(${1:BOOL toggle})"],
      "description": "CLEAR_HELP()"
    },
    "IS_HELP_MESSAGE_ON_SCREEN": {
      "prefix": "IS_HELP_MESSAGE_ON_SCREEN()",
      "body": ["IS_HELP_MESSAGE_ON_SCREEN()"],
      "description": "IS_HELP_MESSAGE_ON_SCREEN()"
    },
    "HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME": {
      "prefix": "HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME()",
      "body": ["HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME()"],
      "description": "HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME()"
    },
    "IS_HELP_MESSAGE_BEING_DISPLAYED": {
      "prefix": "IS_HELP_MESSAGE_BEING_DISPLAYED()",
      "body": ["IS_HELP_MESSAGE_BEING_DISPLAYED()"],
      "description": "IS_HELP_MESSAGE_BEING_DISPLAYED()"
    },
    "IS_HELP_MESSAGE_FADING_OUT": {
      "prefix": "IS_HELP_MESSAGE_FADING_OUT()",
      "body": ["IS_HELP_MESSAGE_FADING_OUT()"],
      "description": "IS_HELP_MESSAGE_FADING_OUT()"
    },
    "SET_HELP_MESSAGE_STYLE": {
      "prefix": "SET_HELP_MESSAGE_STYLE()",
      "body": [
        "SET_HELP_MESSAGE_STYLE(${1:int style}, ${2:int hudColor}, ${3:int alpha}, ${4:int p3}, ${5:int p4})"
      ],
      "description": "SET_HELP_MESSAGE_STYLE()"
    },
    "GET_STANDARD_BLIP_ENUM_ID": {
      "prefix": "GET_STANDARD_BLIP_ENUM_ID()",
      "body": ["GET_STANDARD_BLIP_ENUM_ID()"],
      "description": "GET_STANDARD_BLIP_ENUM_ID()"
    },
    "GET_WAYPOINT_BLIP_ENUM_ID": {
      "prefix": "GET_WAYPOINT_BLIP_ENUM_ID()",
      "body": ["GET_WAYPOINT_BLIP_ENUM_ID()"],
      "description": "GET_WAYPOINT_BLIP_ENUM_ID()"
    },
    "GET_NUMBER_OF_ACTIVE_BLIPS": {
      "prefix": "GET_NUMBER_OF_ACTIVE_BLIPS()",
      "body": ["GET_NUMBER_OF_ACTIVE_BLIPS()"],
      "description": "GET_NUMBER_OF_ACTIVE_BLIPS()"
    },
    "GET_NEXT_BLIP_INFO_ID": {
      "prefix": "GET_NEXT_BLIP_INFO_ID()",
      "body": ["GET_NEXT_BLIP_INFO_ID(${1:int blipSprite})"],
      "description": "GET_NEXT_BLIP_INFO_ID()"
    },
    "GET_FIRST_BLIP_INFO_ID": {
      "prefix": "GET_FIRST_BLIP_INFO_ID()",
      "body": ["GET_FIRST_BLIP_INFO_ID(${1:int blipSprite})"],
      "description": "GET_FIRST_BLIP_INFO_ID()"
    },
    "GET_CLOSEST_BLIP_INFO_ID": {
      "prefix": "GET_CLOSEST_BLIP_INFO_ID()",
      "body": ["GET_CLOSEST_BLIP_INFO_ID(${1:int blipSprite})"],
      "description": "GET_CLOSEST_BLIP_INFO_ID()"
    },
    "GET_BLIP_INFO_ID_COORD": {
      "prefix": "GET_BLIP_INFO_ID_COORD()",
      "body": ["GET_BLIP_INFO_ID_COORD(${1:Blip blip})"],
      "description": "GET_BLIP_INFO_ID_COORD()"
    },
    "GET_BLIP_INFO_ID_DISPLAY": {
      "prefix": "GET_BLIP_INFO_ID_DISPLAY()",
      "body": ["GET_BLIP_INFO_ID_DISPLAY(${1:Blip blip})"],
      "description": "GET_BLIP_INFO_ID_DISPLAY()"
    },
    "GET_BLIP_INFO_ID_TYPE": {
      "prefix": "GET_BLIP_INFO_ID_TYPE()",
      "body": ["GET_BLIP_INFO_ID_TYPE(${1:Blip blip})"],
      "description": "GET_BLIP_INFO_ID_TYPE()"
    },
    "GET_BLIP_INFO_ID_ENTITY_INDEX": {
      "prefix": "GET_BLIP_INFO_ID_ENTITY_INDEX()",
      "body": ["GET_BLIP_INFO_ID_ENTITY_INDEX(${1:Blip blip})"],
      "description": "GET_BLIP_INFO_ID_ENTITY_INDEX()"
    },
    "GET_BLIP_INFO_ID_PICKUP_INDEX": {
      "prefix": "GET_BLIP_INFO_ID_PICKUP_INDEX()",
      "body": ["GET_BLIP_INFO_ID_PICKUP_INDEX(${1:Blip blip})"],
      "description": "GET_BLIP_INFO_ID_PICKUP_INDEX()"
    },
    "GET_BLIP_FROM_ENTITY": {
      "prefix": "GET_BLIP_FROM_ENTITY()",
      "body": ["GET_BLIP_FROM_ENTITY(${1:Entity entity})"],
      "description": "GET_BLIP_FROM_ENTITY()"
    },
    "ADD_BLIP_FOR_RADIUS": {
      "prefix": "ADD_BLIP_FOR_RADIUS()",
      "body": [
        "ADD_BLIP_FOR_RADIUS(${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float radius})"
      ],
      "description": "ADD_BLIP_FOR_RADIUS()"
    },
    "ADD_BLIP_FOR_AREA": {
      "prefix": "ADD_BLIP_FOR_AREA()",
      "body": [
        "ADD_BLIP_FOR_AREA(${1:float x}, ${2:float y}, ${3:float z}, ${4:float width}, ${5:float height})"
      ],
      "description": "ADD_BLIP_FOR_AREA()"
    },
    "ADD_BLIP_FOR_ENTITY": {
      "prefix": "ADD_BLIP_FOR_ENTITY()",
      "body": ["ADD_BLIP_FOR_ENTITY(${1:Entity entity})"],
      "description": "ADD_BLIP_FOR_ENTITY()"
    },
    "ADD_BLIP_FOR_PICKUP": {
      "prefix": "ADD_BLIP_FOR_PICKUP()",
      "body": ["ADD_BLIP_FOR_PICKUP(${1:Pickup pickup})"],
      "description": "ADD_BLIP_FOR_PICKUP()"
    },
    "ADD_BLIP_FOR_COORD": {
      "prefix": "ADD_BLIP_FOR_COORD()",
      "body": ["ADD_BLIP_FOR_COORD(${1:float x}, ${2:float y}, ${3:float z})"],
      "description": "ADD_BLIP_FOR_COORD()"
    },
    "TRIGGER_SONAR_BLIP": {
      "prefix": "TRIGGER_SONAR_BLIP()",
      "body": [
        "TRIGGER_SONAR_BLIP(${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float radius}, ${5:int p4})"
      ],
      "description": "TRIGGER_SONAR_BLIP()"
    },
    "ALLOW_SONAR_BLIPS": {
      "prefix": "ALLOW_SONAR_BLIPS()",
      "body": ["ALLOW_SONAR_BLIPS(${1:BOOL toggle})"],
      "description": "ALLOW_SONAR_BLIPS()"
    },
    "SET_BLIP_COORDS": {
      "prefix": "SET_BLIP_COORDS()",
      "body": [
        "SET_BLIP_COORDS(${1:Blip blip}, ${2:float posX}, ${3:float posY}, ${4:float posZ})"
      ],
      "description": "SET_BLIP_COORDS()"
    },
    "GET_BLIP_COORDS": {
      "prefix": "GET_BLIP_COORDS()",
      "body": ["GET_BLIP_COORDS(${1:Blip blip})"],
      "description": "GET_BLIP_COORDS()"
    },
    "SET_BLIP_SPRITE": {
      "prefix": "SET_BLIP_SPRITE()",
      "body": ["SET_BLIP_SPRITE(${1:Blip blip}, ${2:int spriteId})"],
      "description": "SET_BLIP_SPRITE()"
    },
    "GET_BLIP_SPRITE": {
      "prefix": "GET_BLIP_SPRITE()",
      "body": ["GET_BLIP_SPRITE(${1:Blip blip})"],
      "description": "GET_BLIP_SPRITE()"
    },
    "SET_COP_BLIP_SPRITE": {
      "prefix": "SET_COP_BLIP_SPRITE()",
      "body": ["SET_COP_BLIP_SPRITE(${1:int p0}, ${2:float p1})"],
      "description": "SET_COP_BLIP_SPRITE()"
    },
    "SET_COP_BLIP_SPRITE_AS_STANDARD": {
      "prefix": "SET_COP_BLIP_SPRITE_AS_STANDARD()",
      "body": ["SET_COP_BLIP_SPRITE_AS_STANDARD()"],
      "description": "SET_COP_BLIP_SPRITE_AS_STANDARD()"
    },
    "SET_BLIP_NAME_FROM_TEXT_FILE": {
      "prefix": "SET_BLIP_NAME_FROM_TEXT_FILE()",
      "body": [
        "SET_BLIP_NAME_FROM_TEXT_FILE(${1:Blip blip}, ${2:const char* gxtEntry})"
      ],
      "description": "SET_BLIP_NAME_FROM_TEXT_FILE()"
    },
    "SET_BLIP_NAME_TO_PLAYER_NAME": {
      "prefix": "SET_BLIP_NAME_TO_PLAYER_NAME()",
      "body": [
        "SET_BLIP_NAME_TO_PLAYER_NAME(${1:Blip blip}, ${2:Player player})"
      ],
      "description": "SET_BLIP_NAME_TO_PLAYER_NAME()"
    },
    "SET_BLIP_ALPHA": {
      "prefix": "SET_BLIP_ALPHA()",
      "body": ["SET_BLIP_ALPHA(${1:Blip blip}, ${2:int alpha})"],
      "description": "SET_BLIP_ALPHA()"
    },
    "GET_BLIP_ALPHA": {
      "prefix": "GET_BLIP_ALPHA()",
      "body": ["GET_BLIP_ALPHA(${1:Blip blip})"],
      "description": "GET_BLIP_ALPHA()"
    },
    "SET_BLIP_FADE": {
      "prefix": "SET_BLIP_FADE()",
      "body": [
        "SET_BLIP_FADE(${1:Blip blip}, ${2:int opacity}, ${3:int duration})"
      ],
      "description": "SET_BLIP_FADE()"
    },
    "GET_BLIP_FADE_DIRECTION": {
      "prefix": "GET_BLIP_FADE_DIRECTION()",
      "body": ["GET_BLIP_FADE_DIRECTION(${1:Blip blip})"],
      "description": "GET_BLIP_FADE_DIRECTION()"
    },
    "SET_BLIP_ROTATION": {
      "prefix": "SET_BLIP_ROTATION()",
      "body": ["SET_BLIP_ROTATION(${1:Blip blip}, ${2:int rotation})"],
      "description": "SET_BLIP_ROTATION()"
    },
    "SET_BLIP_ROTATION_WITH_FLOAT": {
      "prefix": "SET_BLIP_ROTATION_WITH_FLOAT()",
      "body": [
        "SET_BLIP_ROTATION_WITH_FLOAT(${1:Blip blip}, ${2:float heading})"
      ],
      "description": "SET_BLIP_ROTATION_WITH_FLOAT()"
    },
    "GET_BLIP_ROTATION": {
      "prefix": "GET_BLIP_ROTATION()",
      "body": ["GET_BLIP_ROTATION(${1:Blip blip})"],
      "description": "GET_BLIP_ROTATION()"
    },
    "SET_BLIP_FLASH_TIMER": {
      "prefix": "SET_BLIP_FLASH_TIMER()",
      "body": ["SET_BLIP_FLASH_TIMER(${1:Blip blip}, ${2:int duration})"],
      "description": "SET_BLIP_FLASH_TIMER()"
    },
    "SET_BLIP_FLASH_INTERVAL": {
      "prefix": "SET_BLIP_FLASH_INTERVAL()",
      "body": ["SET_BLIP_FLASH_INTERVAL(${1:Blip blip}, ${2:Any p1})"],
      "description": "SET_BLIP_FLASH_INTERVAL()"
    },
    "SET_BLIP_COLOUR": {
      "prefix": "SET_BLIP_COLOUR()",
      "body": ["SET_BLIP_COLOUR(${1:Blip blip}, ${2:int color})"],
      "description": "SET_BLIP_COLOUR()"
    },
    "SET_BLIP_SECONDARY_COLOUR": {
      "prefix": "SET_BLIP_SECONDARY_COLOUR()",
      "body": [
        "SET_BLIP_SECONDARY_COLOUR(${1:Blip blip}, ${2:int r}, ${3:int g}, ${4:int b})"
      ],
      "description": "SET_BLIP_SECONDARY_COLOUR()"
    },
    "GET_BLIP_COLOUR": {
      "prefix": "GET_BLIP_COLOUR()",
      "body": ["GET_BLIP_COLOUR(${1:Blip blip})"],
      "description": "GET_BLIP_COLOUR()"
    },
    "GET_BLIP_HUD_COLOUR": {
      "prefix": "GET_BLIP_HUD_COLOUR()",
      "body": ["GET_BLIP_HUD_COLOUR(${1:Blip blip})"],
      "description": "GET_BLIP_HUD_COLOUR()"
    },
    "IS_BLIP_SHORT_RANGE": {
      "prefix": "IS_BLIP_SHORT_RANGE()",
      "body": ["IS_BLIP_SHORT_RANGE(${1:Blip blip})"],
      "description": "IS_BLIP_SHORT_RANGE()"
    },
    "IS_BLIP_ON_MINIMAP": {
      "prefix": "IS_BLIP_ON_MINIMAP()",
      "body": ["IS_BLIP_ON_MINIMAP(${1:Blip blip})"],
      "description": "IS_BLIP_ON_MINIMAP()"
    },
    "DOES_BLIP_HAVE_GPS_ROUTE": {
      "prefix": "DOES_BLIP_HAVE_GPS_ROUTE()",
      "body": ["DOES_BLIP_HAVE_GPS_ROUTE(${1:Blip blip})"],
      "description": "DOES_BLIP_HAVE_GPS_ROUTE()"
    },
    "SET_BLIP_HIDDEN_ON_LEGEND": {
      "prefix": "SET_BLIP_HIDDEN_ON_LEGEND()",
      "body": ["SET_BLIP_HIDDEN_ON_LEGEND(${1:Blip blip}, ${2:BOOL toggle})"],
      "description": "SET_BLIP_HIDDEN_ON_LEGEND()"
    },
    "SET_BLIP_HIGH_DETAIL": {
      "prefix": "SET_BLIP_HIGH_DETAIL()",
      "body": ["SET_BLIP_HIGH_DETAIL(${1:Blip blip}, ${2:BOOL toggle})"],
      "description": "SET_BLIP_HIGH_DETAIL()"
    },
    "SET_BLIP_AS_MISSION_CREATOR_BLIP": {
      "prefix": "SET_BLIP_AS_MISSION_CREATOR_BLIP()",
      "body": [
        "SET_BLIP_AS_MISSION_CREATOR_BLIP(${1:Blip blip}, ${2:BOOL toggle})"
      ],
      "description": "SET_BLIP_AS_MISSION_CREATOR_BLIP()"
    },
    "IS_MISSION_CREATOR_BLIP": {
      "prefix": "IS_MISSION_CREATOR_BLIP()",
      "body": ["IS_MISSION_CREATOR_BLIP(${1:Blip blip})"],
      "description": "IS_MISSION_CREATOR_BLIP()"
    },
    "GET_NEW_SELECTED_MISSION_CREATOR_BLIP": {
      "prefix": "GET_NEW_SELECTED_MISSION_CREATOR_BLIP()",
      "body": ["GET_NEW_SELECTED_MISSION_CREATOR_BLIP()"],
      "description": "GET_NEW_SELECTED_MISSION_CREATOR_BLIP()"
    },
    "IS_HOVERING_OVER_MISSION_CREATOR_BLIP": {
      "prefix": "IS_HOVERING_OVER_MISSION_CREATOR_BLIP()",
      "body": ["IS_HOVERING_OVER_MISSION_CREATOR_BLIP()"],
      "description": "IS_HOVERING_OVER_MISSION_CREATOR_BLIP()"
    },
    "SHOW_START_MISSION_INSTRUCTIONAL_BUTTON": {
      "prefix": "SHOW_START_MISSION_INSTRUCTIONAL_BUTTON()",
      "body": ["SHOW_START_MISSION_INSTRUCTIONAL_BUTTON(${1:BOOL toggle})"],
      "description": "SHOW_START_MISSION_INSTRUCTIONAL_BUTTON()"
    },
    "SHOW_CONTACT_INSTRUCTIONAL_BUTTON": {
      "prefix": "SHOW_CONTACT_INSTRUCTIONAL_BUTTON()",
      "body": ["SHOW_CONTACT_INSTRUCTIONAL_BUTTON(${1:BOOL toggle})"],
      "description": "SHOW_CONTACT_INSTRUCTIONAL_BUTTON()"
    },
    "RELOAD_MAP_MENU": {
      "prefix": "RELOAD_MAP_MENU()",
      "body": ["RELOAD_MAP_MENU()"],
      "description": "RELOAD_MAP_MENU()"
    },
    "SET_BLIP_MARKER_LONG_DISTANCE": {
      "prefix": "SET_BLIP_MARKER_LONG_DISTANCE()",
      "body": ["SET_BLIP_MARKER_LONG_DISTANCE(${1:Any p0}, ${2:Any p1})"],
      "description": "SET_BLIP_MARKER_LONG_DISTANCE()"
    },
    "SET_BLIP_FLASHES": {
      "prefix": "SET_BLIP_FLASHES()",
      "body": ["SET_BLIP_FLASHES(${1:Blip blip}, ${2:BOOL toggle})"],
      "description": "SET_BLIP_FLASHES()"
    },
    "SET_BLIP_FLASHES_ALTERNATE": {
      "prefix": "SET_BLIP_FLASHES_ALTERNATE()",
      "body": ["SET_BLIP_FLASHES_ALTERNATE(${1:Blip blip}, ${2:BOOL toggle})"],
      "description": "SET_BLIP_FLASHES_ALTERNATE()"
    },
    "IS_BLIP_FLASHING": {
      "prefix": "IS_BLIP_FLASHING()",
      "body": ["IS_BLIP_FLASHING(${1:Blip blip})"],
      "description": "IS_BLIP_FLASHING()"
    },
    "SET_BLIP_AS_SHORT_RANGE": {
      "prefix": "SET_BLIP_AS_SHORT_RANGE()",
      "body": ["SET_BLIP_AS_SHORT_RANGE(${1:Blip blip}, ${2:BOOL toggle})"],
      "description": "SET_BLIP_AS_SHORT_RANGE()"
    },
    "SET_BLIP_SCALE": {
      "prefix": "SET_BLIP_SCALE()",
      "body": ["SET_BLIP_SCALE(${1:Blip blip}, ${2:float scale})"],
      "description": "SET_BLIP_SCALE()"
    },
    "SET_BLIP_SCALE_2D": {
      "prefix": "SET_BLIP_SCALE_2D()",
      "body": [
        "SET_BLIP_SCALE_2D(${1:Blip blip}, ${2:float xScale}, ${3:float yScale})"
      ],
      "description": "SET_BLIP_SCALE_2D()"
    },
    "SET_BLIP_PRIORITY": {
      "prefix": "SET_BLIP_PRIORITY()",
      "body": ["SET_BLIP_PRIORITY(${1:Blip blip}, ${2:int priority})"],
      "description": "SET_BLIP_PRIORITY()"
    },
    "SET_BLIP_DISPLAY": {
      "prefix": "SET_BLIP_DISPLAY()",
      "body": ["SET_BLIP_DISPLAY(${1:Blip blip}, ${2:int displayId})"],
      "description": "SET_BLIP_DISPLAY()"
    },
    "SET_BLIP_CATEGORY": {
      "prefix": "SET_BLIP_CATEGORY()",
      "body": ["SET_BLIP_CATEGORY(${1:Blip blip}, ${2:int index})"],
      "description": "SET_BLIP_CATEGORY()"
    },
    "REMOVE_BLIP": {
      "prefix": "REMOVE_BLIP()",
      "body": ["REMOVE_BLIP(${1:Blip* blip})"],
      "description": "REMOVE_BLIP()"
    },
    "SET_BLIP_AS_FRIENDLY": {
      "prefix": "SET_BLIP_AS_FRIENDLY()",
      "body": ["SET_BLIP_AS_FRIENDLY(${1:Blip blip}, ${2:BOOL toggle})"],
      "description": "SET_BLIP_AS_FRIENDLY()"
    },
    "PULSE_BLIP": {
      "prefix": "PULSE_BLIP()",
      "body": ["PULSE_BLIP(${1:Blip blip})"],
      "description": "PULSE_BLIP()"
    },
    "SHOW_NUMBER_ON_BLIP": {
      "prefix": "SHOW_NUMBER_ON_BLIP()",
      "body": ["SHOW_NUMBER_ON_BLIP(${1:Blip blip}, ${2:int number})"],
      "description": "SHOW_NUMBER_ON_BLIP()"
    },
    "HIDE_NUMBER_ON_BLIP": {
      "prefix": "HIDE_NUMBER_ON_BLIP()",
      "body": ["HIDE_NUMBER_ON_BLIP(${1:Blip blip})"],
      "description": "HIDE_NUMBER_ON_BLIP()"
    },
    "SHOW_HEIGHT_ON_BLIP": {
      "prefix": "SHOW_HEIGHT_ON_BLIP()",
      "body": ["SHOW_HEIGHT_ON_BLIP(${1:Blip blip}, ${2:BOOL toggle})"],
      "description": "SHOW_HEIGHT_ON_BLIP()"
    },
    "SHOW_TICK_ON_BLIP": {
      "prefix": "SHOW_TICK_ON_BLIP()",
      "body": ["SHOW_TICK_ON_BLIP(${1:Blip blip}, ${2:BOOL toggle})"],
      "description": "SHOW_TICK_ON_BLIP()"
    },
    "SHOW_GOLD_TICK_ON_BLIP": {
      "prefix": "SHOW_GOLD_TICK_ON_BLIP()",
      "body": ["SHOW_GOLD_TICK_ON_BLIP(${1:Blip blip}, ${2:BOOL toggle})"],
      "description": "SHOW_GOLD_TICK_ON_BLIP()"
    },
    "SHOW_FOR_SALE_ICON_ON_BLIP": {
      "prefix": "SHOW_FOR_SALE_ICON_ON_BLIP()",
      "body": ["SHOW_FOR_SALE_ICON_ON_BLIP(${1:Blip blip}, ${2:BOOL toggle})"],
      "description": "SHOW_FOR_SALE_ICON_ON_BLIP()"
    },
    "SHOW_HEADING_INDICATOR_ON_BLIP": {
      "prefix": "SHOW_HEADING_INDICATOR_ON_BLIP()",
      "body": [
        "SHOW_HEADING_INDICATOR_ON_BLIP(${1:Blip blip}, ${2:BOOL toggle})"
      ],
      "description": "SHOW_HEADING_INDICATOR_ON_BLIP()"
    },
    "SHOW_OUTLINE_INDICATOR_ON_BLIP": {
      "prefix": "SHOW_OUTLINE_INDICATOR_ON_BLIP()",
      "body": [
        "SHOW_OUTLINE_INDICATOR_ON_BLIP(${1:Blip blip}, ${2:BOOL toggle})"
      ],
      "description": "SHOW_OUTLINE_INDICATOR_ON_BLIP()"
    },
    "SHOW_FRIEND_INDICATOR_ON_BLIP": {
      "prefix": "SHOW_FRIEND_INDICATOR_ON_BLIP()",
      "body": ["SHOW_FRIEND_INDICATOR_ON_BLIP(${1:Blip blip}, ${2:BOOL toggle})"],
      "description": "SHOW_FRIEND_INDICATOR_ON_BLIP()"
    },
    "SHOW_CREW_INDICATOR_ON_BLIP": {
      "prefix": "SHOW_CREW_INDICATOR_ON_BLIP()",
      "body": ["SHOW_CREW_INDICATOR_ON_BLIP(${1:Blip blip}, ${2:BOOL toggle})"],
      "description": "SHOW_CREW_INDICATOR_ON_BLIP()"
    },
    "SET_BLIP_EXTENDED_HEIGHT_THRESHOLD": {
      "prefix": "SET_BLIP_EXTENDED_HEIGHT_THRESHOLD()",
      "body": [
        "SET_BLIP_EXTENDED_HEIGHT_THRESHOLD(${1:Blip blip}, ${2:BOOL toggle})"
      ],
      "description": "SET_BLIP_EXTENDED_HEIGHT_THRESHOLD()"
    },
    "SET_BLIP_SHORT_HEIGHT_THRESHOLD": {
      "prefix": "SET_BLIP_SHORT_HEIGHT_THRESHOLD()",
      "body": ["SET_BLIP_SHORT_HEIGHT_THRESHOLD(${1:Any p0}, ${2:Any p1})"],
      "description": "SET_BLIP_SHORT_HEIGHT_THRESHOLD()"
    },
    "SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE": {
      "prefix": "SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE()",
      "body": [
        "SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE(${1:Blip blip}, ${2:Any p1})"
      ],
      "description": "SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE()"
    },
    "SET_BLIP_AS_MINIMAL_ON_EDGE": {
      "prefix": "SET_BLIP_AS_MINIMAL_ON_EDGE()",
      "body": ["SET_BLIP_AS_MINIMAL_ON_EDGE(${1:Blip blip}, ${2:BOOL toggle})"],
      "description": "SET_BLIP_AS_MINIMAL_ON_EDGE()"
    },
    "SET_RADIUS_BLIP_EDGE": {
      "prefix": "SET_RADIUS_BLIP_EDGE()",
      "body": ["SET_RADIUS_BLIP_EDGE(${1:Blip blip}, ${2:BOOL toggle})"],
      "description": "SET_RADIUS_BLIP_EDGE()"
    },
    "DOES_BLIP_EXIST": {
      "prefix": "DOES_BLIP_EXIST()",
      "body": ["DOES_BLIP_EXIST(${1:Blip blip})"],
      "description": "DOES_BLIP_EXIST()"
    },
    "SET_WAYPOINT_OFF": {
      "prefix": "SET_WAYPOINT_OFF()",
      "body": ["SET_WAYPOINT_OFF()"],
      "description": "SET_WAYPOINT_OFF()"
    },
    "DELETE_WAYPOINTS_FROM_THIS_PLAYER": {
      "prefix": "DELETE_WAYPOINTS_FROM_THIS_PLAYER()",
      "body": ["DELETE_WAYPOINTS_FROM_THIS_PLAYER()"],
      "description": "DELETE_WAYPOINTS_FROM_THIS_PLAYER()"
    },
    "REFRESH_WAYPOINT": {
      "prefix": "REFRESH_WAYPOINT()",
      "body": ["REFRESH_WAYPOINT()"],
      "description": "REFRESH_WAYPOINT()"
    },
    "IS_WAYPOINT_ACTIVE": {
      "prefix": "IS_WAYPOINT_ACTIVE()",
      "body": ["IS_WAYPOINT_ACTIVE()"],
      "description": "IS_WAYPOINT_ACTIVE()"
    },
    "SET_NEW_WAYPOINT": {
      "prefix": "SET_NEW_WAYPOINT()",
      "body": ["SET_NEW_WAYPOINT(${1:float x}, ${2:float y})"],
      "description": "SET_NEW_WAYPOINT()"
    },
    "SET_BLIP_BRIGHT": {
      "prefix": "SET_BLIP_BRIGHT()",
      "body": ["SET_BLIP_BRIGHT(${1:Blip blip}, ${2:BOOL toggle})"],
      "description": "SET_BLIP_BRIGHT()"
    },
    "SET_BLIP_SHOW_CONE": {
      "prefix": "SET_BLIP_SHOW_CONE()",
      "body": [
        "SET_BLIP_SHOW_CONE(${1:Blip blip}, ${2:BOOL toggle}, ${3:int hudColorIndex})"
      ],
      "description": "SET_BLIP_SHOW_CONE()"
    },
    "REMOVE_COP_BLIP_FROM_PED": {
      "prefix": "REMOVE_COP_BLIP_FROM_PED()",
      "body": ["REMOVE_COP_BLIP_FROM_PED(${1:Ped ped})"],
      "description": "REMOVE_COP_BLIP_FROM_PED()"
    },
    "SETUP_FAKE_CONE_DATA": {
      "prefix": "SETUP_FAKE_CONE_DATA()",
      "body": [
        "SETUP_FAKE_CONE_DATA(${1:Blip blip}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:Any p7}, ${9:int p8})"
      ],
      "description": "SETUP_FAKE_CONE_DATA()"
    },
    "REMOVE_FAKE_CONE_DATA": {
      "prefix": "REMOVE_FAKE_CONE_DATA()",
      "body": ["REMOVE_FAKE_CONE_DATA(${1:Blip blip})"],
      "description": "REMOVE_FAKE_CONE_DATA()"
    },
    "CLEAR_FAKE_CONE_ARRAY": {
      "prefix": "CLEAR_FAKE_CONE_ARRAY()",
      "body": ["CLEAR_FAKE_CONE_ARRAY()"],
      "description": "CLEAR_FAKE_CONE_ARRAY()"
    },
    "_SET_BLIP_GPS_ROUTE_DISPLAY_DISTANCE": {
      "prefix": "_SET_BLIP_GPS_ROUTE_DISPLAY_DISTANCE()",
      "body": [
        "_SET_BLIP_GPS_ROUTE_DISPLAY_DISTANCE(${1:Blip blip}, ${2:int blipChangeParam46}, ${3:BOOL blipChangeParam47})"
      ],
      "description": "_SET_BLIP_GPS_ROUTE_DISPLAY_DISTANCE()"
    },
    "SET_MINIMAP_COMPONENT": {
      "prefix": "SET_MINIMAP_COMPONENT()",
      "body": [
        "SET_MINIMAP_COMPONENT(${1:int componentId}, ${2:BOOL toggle}, ${3:int overrideColor})"
      ],
      "description": "SET_MINIMAP_COMPONENT()"
    },
    "SET_MINIMAP_SONAR_SWEEP": {
      "prefix": "SET_MINIMAP_SONAR_SWEEP()",
      "body": ["SET_MINIMAP_SONAR_SWEEP(${1:BOOL toggle})"],
      "description": "SET_MINIMAP_SONAR_SWEEP()"
    },
    "SHOW_ACCOUNT_PICKER": {
      "prefix": "SHOW_ACCOUNT_PICKER()",
      "body": ["SHOW_ACCOUNT_PICKER()"],
      "description": "SHOW_ACCOUNT_PICKER()"
    },
    "GET_MAIN_PLAYER_BLIP_ID": {
      "prefix": "GET_MAIN_PLAYER_BLIP_ID()",
      "body": ["GET_MAIN_PLAYER_BLIP_ID()"],
      "description": "GET_MAIN_PLAYER_BLIP_ID()"
    },
    "SET_PM_WARNINGSCREEN_ACTIVE": {
      "prefix": "SET_PM_WARNINGSCREEN_ACTIVE()",
      "body": ["SET_PM_WARNINGSCREEN_ACTIVE(${1:BOOL p0})"],
      "description": "SET_PM_WARNINGSCREEN_ACTIVE()"
    },
    "HIDE_LOADING_ON_FADE_THIS_FRAME": {
      "prefix": "HIDE_LOADING_ON_FADE_THIS_FRAME()",
      "body": ["HIDE_LOADING_ON_FADE_THIS_FRAME()"],
      "description": "HIDE_LOADING_ON_FADE_THIS_FRAME()"
    },
    "SET_RADAR_AS_INTERIOR_THIS_FRAME": {
      "prefix": "SET_RADAR_AS_INTERIOR_THIS_FRAME()",
      "body": [
        "SET_RADAR_AS_INTERIOR_THIS_FRAME(${1:Hash interior}, ${2:float x}, ${3:float y}, ${4:int z}, ${5:int zoom})"
      ],
      "description": "SET_RADAR_AS_INTERIOR_THIS_FRAME()"
    },
    "SET_INSIDE_VERY_SMALL_INTERIOR": {
      "prefix": "SET_INSIDE_VERY_SMALL_INTERIOR()",
      "body": ["SET_INSIDE_VERY_SMALL_INTERIOR(${1:BOOL toggle})"],
      "description": "SET_INSIDE_VERY_SMALL_INTERIOR()"
    },
    "SET_INSIDE_VERY_LARGE_INTERIOR": {
      "prefix": "SET_INSIDE_VERY_LARGE_INTERIOR()",
      "body": ["SET_INSIDE_VERY_LARGE_INTERIOR(${1:BOOL toggle})"],
      "description": "SET_INSIDE_VERY_LARGE_INTERIOR()"
    },
    "SET_RADAR_AS_EXTERIOR_THIS_FRAME": {
      "prefix": "SET_RADAR_AS_EXTERIOR_THIS_FRAME()",
      "body": ["SET_RADAR_AS_EXTERIOR_THIS_FRAME()"],
      "description": "SET_RADAR_AS_EXTERIOR_THIS_FRAME()"
    },
    "SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME": {
      "prefix": "SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME()",
      "body": [
        "SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME(${1:float x}, ${2:float y})"
      ],
      "description": "SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME()"
    },
    "SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME": {
      "prefix": "SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME()",
      "body": [
        "SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME(${1:float x}, ${2:float y}, ${3:Any p2})"
      ],
      "description": "SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME()"
    },
    "IS_PAUSEMAP_IN_INTERIOR_MODE": {
      "prefix": "IS_PAUSEMAP_IN_INTERIOR_MODE()",
      "body": ["IS_PAUSEMAP_IN_INTERIOR_MODE()"],
      "description": "IS_PAUSEMAP_IN_INTERIOR_MODE()"
    },
    "HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME": {
      "prefix": "HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME()",
      "body": ["HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME()"],
      "description": "HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME()"
    },
    "HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME": {
      "prefix": "HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME()",
      "body": ["HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME()"],
      "description": "HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME()"
    },
    "SET_USE_ISLAND_MAP": {
      "prefix": "SET_USE_ISLAND_MAP()",
      "body": ["SET_USE_ISLAND_MAP(${1:BOOL toggle})"],
      "description": "SET_USE_ISLAND_MAP()"
    },
    "_SET_PAUSE_EXTERIOR_RENDERING_WHILE_IN_INTERIOR": {
      "prefix": "_SET_PAUSE_EXTERIOR_RENDERING_WHILE_IN_INTERIOR()",
      "body": ["_SET_PAUSE_EXTERIOR_RENDERING_WHILE_IN_INTERIOR()"],
      "description": "_SET_PAUSE_EXTERIOR_RENDERING_WHILE_IN_INTERIOR()"
    },
    "DONT_TILT_MINIMAP_THIS_FRAME": {
      "prefix": "DONT_TILT_MINIMAP_THIS_FRAME()",
      "body": ["DONT_TILT_MINIMAP_THIS_FRAME()"],
      "description": "DONT_TILT_MINIMAP_THIS_FRAME()"
    },
    "DONT_ZOOM_MINIMAP_WHEN_RUNNING_THIS_FRAME": {
      "prefix": "DONT_ZOOM_MINIMAP_WHEN_RUNNING_THIS_FRAME()",
      "body": ["DONT_ZOOM_MINIMAP_WHEN_RUNNING_THIS_FRAME()"],
      "description": "DONT_ZOOM_MINIMAP_WHEN_RUNNING_THIS_FRAME()"
    },
    "DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME": {
      "prefix": "DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME()",
      "body": ["DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME()"],
      "description": "DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME()"
    },
    "SET_WIDESCREEN_FORMAT": {
      "prefix": "SET_WIDESCREEN_FORMAT()",
      "body": ["SET_WIDESCREEN_FORMAT(${1:Any p0})"],
      "description": "SET_WIDESCREEN_FORMAT()"
    },
    "DISPLAY_AREA_NAME": {
      "prefix": "DISPLAY_AREA_NAME()",
      "body": ["DISPLAY_AREA_NAME(${1:BOOL toggle})"],
      "description": "DISPLAY_AREA_NAME()"
    },
    "DISPLAY_CASH": {
      "prefix": "DISPLAY_CASH()",
      "body": ["DISPLAY_CASH(${1:BOOL toggle})"],
      "description": "DISPLAY_CASH()"
    },
    "USE_FAKE_MP_CASH": {
      "prefix": "USE_FAKE_MP_CASH()",
      "body": ["USE_FAKE_MP_CASH(${1:BOOL toggle})"],
      "description": "USE_FAKE_MP_CASH()"
    },
    "CHANGE_FAKE_MP_CASH": {
      "prefix": "CHANGE_FAKE_MP_CASH()",
      "body": ["CHANGE_FAKE_MP_CASH(${1:int cash}, ${2:int bank})"],
      "description": "CHANGE_FAKE_MP_CASH()"
    },
    "DISPLAY_AMMO_THIS_FRAME": {
      "prefix": "DISPLAY_AMMO_THIS_FRAME()",
      "body": ["DISPLAY_AMMO_THIS_FRAME(${1:BOOL display})"],
      "description": "DISPLAY_AMMO_THIS_FRAME()"
    },
    "DISPLAY_SNIPER_SCOPE_THIS_FRAME": {
      "prefix": "DISPLAY_SNIPER_SCOPE_THIS_FRAME()",
      "body": ["DISPLAY_SNIPER_SCOPE_THIS_FRAME()"],
      "description": "DISPLAY_SNIPER_SCOPE_THIS_FRAME()"
    },
    "HIDE_HUD_AND_RADAR_THIS_FRAME": {
      "prefix": "HIDE_HUD_AND_RADAR_THIS_FRAME()",
      "body": ["HIDE_HUD_AND_RADAR_THIS_FRAME()"],
      "description": "HIDE_HUD_AND_RADAR_THIS_FRAME()"
    },
    "ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT": {
      "prefix": "ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT()",
      "body": ["ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT(${1:BOOL allow})"],
      "description": "ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT()"
    },
    "SET_MULTIPLAYER_WALLET_CASH": {
      "prefix": "SET_MULTIPLAYER_WALLET_CASH()",
      "body": ["SET_MULTIPLAYER_WALLET_CASH()"],
      "description": "SET_MULTIPLAYER_WALLET_CASH()"
    },
    "REMOVE_MULTIPLAYER_WALLET_CASH": {
      "prefix": "REMOVE_MULTIPLAYER_WALLET_CASH()",
      "body": ["REMOVE_MULTIPLAYER_WALLET_CASH()"],
      "description": "REMOVE_MULTIPLAYER_WALLET_CASH()"
    },
    "SET_MULTIPLAYER_BANK_CASH": {
      "prefix": "SET_MULTIPLAYER_BANK_CASH()",
      "body": ["SET_MULTIPLAYER_BANK_CASH()"],
      "description": "SET_MULTIPLAYER_BANK_CASH()"
    },
    "REMOVE_MULTIPLAYER_BANK_CASH": {
      "prefix": "REMOVE_MULTIPLAYER_BANK_CASH()",
      "body": ["REMOVE_MULTIPLAYER_BANK_CASH()"],
      "description": "REMOVE_MULTIPLAYER_BANK_CASH()"
    },
    "SET_MULTIPLAYER_HUD_CASH": {
      "prefix": "SET_MULTIPLAYER_HUD_CASH()",
      "body": ["SET_MULTIPLAYER_HUD_CASH(${1:int p0}, ${2:BOOL p1})"],
      "description": "SET_MULTIPLAYER_HUD_CASH()"
    },
    "REMOVE_MULTIPLAYER_HUD_CASH": {
      "prefix": "REMOVE_MULTIPLAYER_HUD_CASH()",
      "body": ["REMOVE_MULTIPLAYER_HUD_CASH()"],
      "description": "REMOVE_MULTIPLAYER_HUD_CASH()"
    },
    "HIDE_HELP_TEXT_THIS_FRAME": {
      "prefix": "HIDE_HELP_TEXT_THIS_FRAME()",
      "body": ["HIDE_HELP_TEXT_THIS_FRAME()"],
      "description": "HIDE_HELP_TEXT_THIS_FRAME()"
    },
    "IS_IME_IN_PROGRESS": {
      "prefix": "IS_IME_IN_PROGRESS()",
      "body": ["IS_IME_IN_PROGRESS()"],
      "description": "IS_IME_IN_PROGRESS()"
    },
    "DISPLAY_HELP_TEXT_THIS_FRAME": {
      "prefix": "DISPLAY_HELP_TEXT_THIS_FRAME()",
      "body": [
        "DISPLAY_HELP_TEXT_THIS_FRAME(${1:const char* message}, ${2:BOOL p1})"
      ],
      "description": "DISPLAY_HELP_TEXT_THIS_FRAME()"
    },
    "HUD_FORCE_WEAPON_WHEEL": {
      "prefix": "HUD_FORCE_WEAPON_WHEEL()",
      "body": ["HUD_FORCE_WEAPON_WHEEL(${1:BOOL show})"],
      "description": "HUD_FORCE_WEAPON_WHEEL()"
    },
    "HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL": {
      "prefix": "HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL()",
      "body": ["HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL()"],
      "description": "HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL()"
    },
    "HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME": {
      "prefix": "HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME()",
      "body": ["HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME()"],
      "description": "HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME()"
    },
    "HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED": {
      "prefix": "HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED()",
      "body": ["HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED()"],
      "description": "HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED()"
    },
    "HUD_SET_WEAPON_WHEEL_TOP_SLOT": {
      "prefix": "HUD_SET_WEAPON_WHEEL_TOP_SLOT()",
      "body": ["HUD_SET_WEAPON_WHEEL_TOP_SLOT(${1:Hash weaponHash})"],
      "description": "HUD_SET_WEAPON_WHEEL_TOP_SLOT()"
    },
    "HUD_GET_WEAPON_WHEEL_TOP_SLOT": {
      "prefix": "HUD_GET_WEAPON_WHEEL_TOP_SLOT()",
      "body": ["HUD_GET_WEAPON_WHEEL_TOP_SLOT(${1:int weaponTypeIndex})"],
      "description": "HUD_GET_WEAPON_WHEEL_TOP_SLOT()"
    },
    "HUD_SHOWING_CHARACTER_SWITCH_SELECTION": {
      "prefix": "HUD_SHOWING_CHARACTER_SWITCH_SELECTION()",
      "body": ["HUD_SHOWING_CHARACTER_SWITCH_SELECTION(${1:BOOL toggle})"],
      "description": "HUD_SHOWING_CHARACTER_SWITCH_SELECTION()"
    },
    "SET_GPS_FLAGS": {
      "prefix": "SET_GPS_FLAGS()",
      "body": ["SET_GPS_FLAGS(${1:int p0}, ${2:float p1})"],
      "description": "SET_GPS_FLAGS()"
    },
    "CLEAR_GPS_FLAGS": {
      "prefix": "CLEAR_GPS_FLAGS()",
      "body": ["CLEAR_GPS_FLAGS()"],
      "description": "CLEAR_GPS_FLAGS()"
    },
    "SET_RACE_TRACK_RENDER": {
      "prefix": "SET_RACE_TRACK_RENDER()",
      "body": ["SET_RACE_TRACK_RENDER(${1:BOOL toggle})"],
      "description": "SET_RACE_TRACK_RENDER()"
    },
    "CLEAR_GPS_RACE_TRACK": {
      "prefix": "CLEAR_GPS_RACE_TRACK()",
      "body": ["CLEAR_GPS_RACE_TRACK()"],
      "description": "CLEAR_GPS_RACE_TRACK()"
    },
    "START_GPS_CUSTOM_ROUTE": {
      "prefix": "START_GPS_CUSTOM_ROUTE()",
      "body": [
        "START_GPS_CUSTOM_ROUTE(${1:int hudColor}, ${2:BOOL displayOnFoot}, ${3:BOOL followPlayer})"
      ],
      "description": "START_GPS_CUSTOM_ROUTE()"
    },
    "ADD_POINT_TO_GPS_CUSTOM_ROUTE": {
      "prefix": "ADD_POINT_TO_GPS_CUSTOM_ROUTE()",
      "body": [
        "ADD_POINT_TO_GPS_CUSTOM_ROUTE(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "ADD_POINT_TO_GPS_CUSTOM_ROUTE()"
    },
    "SET_GPS_CUSTOM_ROUTE_RENDER": {
      "prefix": "SET_GPS_CUSTOM_ROUTE_RENDER()",
      "body": [
        "SET_GPS_CUSTOM_ROUTE_RENDER(${1:BOOL toggle}, ${2:int radarThickness}, ${3:int mapThickness})"
      ],
      "description": "SET_GPS_CUSTOM_ROUTE_RENDER()"
    },
    "CLEAR_GPS_CUSTOM_ROUTE": {
      "prefix": "CLEAR_GPS_CUSTOM_ROUTE()",
      "body": ["CLEAR_GPS_CUSTOM_ROUTE()"],
      "description": "CLEAR_GPS_CUSTOM_ROUTE()"
    },
    "START_GPS_MULTI_ROUTE": {
      "prefix": "START_GPS_MULTI_ROUTE()",
      "body": [
        "START_GPS_MULTI_ROUTE(${1:int hudColor}, ${2:BOOL routeFromPlayer}, ${3:BOOL displayOnFoot})"
      ],
      "description": "START_GPS_MULTI_ROUTE()"
    },
    "ADD_POINT_TO_GPS_MULTI_ROUTE": {
      "prefix": "ADD_POINT_TO_GPS_MULTI_ROUTE()",
      "body": [
        "ADD_POINT_TO_GPS_MULTI_ROUTE(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "ADD_POINT_TO_GPS_MULTI_ROUTE()"
    },
    "SET_GPS_MULTI_ROUTE_RENDER": {
      "prefix": "SET_GPS_MULTI_ROUTE_RENDER()",
      "body": ["SET_GPS_MULTI_ROUTE_RENDER(${1:BOOL toggle})"],
      "description": "SET_GPS_MULTI_ROUTE_RENDER()"
    },
    "CLEAR_GPS_MULTI_ROUTE": {
      "prefix": "CLEAR_GPS_MULTI_ROUTE()",
      "body": ["CLEAR_GPS_MULTI_ROUTE()"],
      "description": "CLEAR_GPS_MULTI_ROUTE()"
    },
    "CLEAR_GPS_PLAYER_WAYPOINT": {
      "prefix": "CLEAR_GPS_PLAYER_WAYPOINT()",
      "body": ["CLEAR_GPS_PLAYER_WAYPOINT()"],
      "description": "CLEAR_GPS_PLAYER_WAYPOINT()"
    },
    "SET_GPS_FLASHES": {
      "prefix": "SET_GPS_FLASHES()",
      "body": ["SET_GPS_FLASHES(${1:BOOL toggle})"],
      "description": "SET_GPS_FLASHES()"
    },
    "SET_PLAYER_ICON_COLOUR": {
      "prefix": "SET_PLAYER_ICON_COLOUR()",
      "body": ["SET_PLAYER_ICON_COLOUR(${1:int color})"],
      "description": "SET_PLAYER_ICON_COLOUR()"
    },
    "FLASH_MINIMAP_DISPLAY": {
      "prefix": "FLASH_MINIMAP_DISPLAY()",
      "body": ["FLASH_MINIMAP_DISPLAY()"],
      "description": "FLASH_MINIMAP_DISPLAY()"
    },
    "FLASH_MINIMAP_DISPLAY_WITH_COLOR": {
      "prefix": "FLASH_MINIMAP_DISPLAY_WITH_COLOR()",
      "body": ["FLASH_MINIMAP_DISPLAY_WITH_COLOR(${1:int hudColorIndex})"],
      "description": "FLASH_MINIMAP_DISPLAY_WITH_COLOR()"
    },
    "TOGGLE_STEALTH_RADAR": {
      "prefix": "TOGGLE_STEALTH_RADAR()",
      "body": ["TOGGLE_STEALTH_RADAR(${1:BOOL toggle})"],
      "description": "TOGGLE_STEALTH_RADAR()"
    },
    "SET_MINIMAP_IN_SPECTATOR_MODE": {
      "prefix": "SET_MINIMAP_IN_SPECTATOR_MODE()",
      "body": ["SET_MINIMAP_IN_SPECTATOR_MODE(${1:BOOL toggle}, ${2:Ped ped})"],
      "description": "SET_MINIMAP_IN_SPECTATOR_MODE()"
    },
    "SET_MISSION_NAME": {
      "prefix": "SET_MISSION_NAME()",
      "body": ["SET_MISSION_NAME(${1:BOOL p0}, ${2:const char* name})"],
      "description": "SET_MISSION_NAME()"
    },
    "SET_MISSION_NAME_FOR_UGC_MISSION": {
      "prefix": "SET_MISSION_NAME_FOR_UGC_MISSION()",
      "body": [
        "SET_MISSION_NAME_FOR_UGC_MISSION(${1:BOOL p0}, ${2:const char* name})"
      ],
      "description": "SET_MISSION_NAME_FOR_UGC_MISSION()"
    },
    "SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS": {
      "prefix": "SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS()",
      "body": [
        "SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS(${1:BOOL p0}, ${2:const char* p1}, ${3:const char* p2}, ${4:const char* p3}, ${5:const char* p4}, ${6:const char* p5}, ${7:const char* p6}, ${8:const char* p7}, ${9:const char* p8})"
      ],
      "description": "SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS()"
    },
    "SET_MINIMAP_BLOCK_WAYPOINT": {
      "prefix": "SET_MINIMAP_BLOCK_WAYPOINT()",
      "body": ["SET_MINIMAP_BLOCK_WAYPOINT(${1:BOOL toggle})"],
      "description": "SET_MINIMAP_BLOCK_WAYPOINT()"
    },
    "SET_MINIMAP_IN_PROLOGUE": {
      "prefix": "SET_MINIMAP_IN_PROLOGUE()",
      "body": ["SET_MINIMAP_IN_PROLOGUE(${1:BOOL toggle})"],
      "description": "SET_MINIMAP_IN_PROLOGUE()"
    },
    "SET_MINIMAP_HIDE_FOW": {
      "prefix": "SET_MINIMAP_HIDE_FOW()",
      "body": ["SET_MINIMAP_HIDE_FOW(${1:BOOL toggle})"],
      "description": "SET_MINIMAP_HIDE_FOW()"
    },
    "GET_MINIMAP_FOW_DISCOVERY_RATIO": {
      "prefix": "GET_MINIMAP_FOW_DISCOVERY_RATIO()",
      "body": ["GET_MINIMAP_FOW_DISCOVERY_RATIO()"],
      "description": "GET_MINIMAP_FOW_DISCOVERY_RATIO()"
    },
    "GET_MINIMAP_FOW_COORDINATE_IS_REVEALED": {
      "prefix": "GET_MINIMAP_FOW_COORDINATE_IS_REVEALED()",
      "body": [
        "GET_MINIMAP_FOW_COORDINATE_IS_REVEALED(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "GET_MINIMAP_FOW_COORDINATE_IS_REVEALED()"
    },
    "SET_MINIMAP_FOW_DO_NOT_UPDATE": {
      "prefix": "SET_MINIMAP_FOW_DO_NOT_UPDATE()",
      "body": ["SET_MINIMAP_FOW_DO_NOT_UPDATE(${1:BOOL p0})"],
      "description": "SET_MINIMAP_FOW_DO_NOT_UPDATE()"
    },
    "SET_MINIMAP_FOW_REVEAL_COORDINATE": {
      "prefix": "SET_MINIMAP_FOW_REVEAL_COORDINATE()",
      "body": [
        "SET_MINIMAP_FOW_REVEAL_COORDINATE(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "SET_MINIMAP_FOW_REVEAL_COORDINATE()"
    },
    "SET_MINIMAP_GOLF_COURSE": {
      "prefix": "SET_MINIMAP_GOLF_COURSE()",
      "body": ["SET_MINIMAP_GOLF_COURSE(${1:int hole})"],
      "description": "SET_MINIMAP_GOLF_COURSE()"
    },
    "SET_MINIMAP_GOLF_COURSE_OFF": {
      "prefix": "SET_MINIMAP_GOLF_COURSE_OFF()",
      "body": ["SET_MINIMAP_GOLF_COURSE_OFF()"],
      "description": "SET_MINIMAP_GOLF_COURSE_OFF()"
    },
    "LOCK_MINIMAP_ANGLE": {
      "prefix": "LOCK_MINIMAP_ANGLE()",
      "body": ["LOCK_MINIMAP_ANGLE(${1:int angle})"],
      "description": "LOCK_MINIMAP_ANGLE()"
    },
    "UNLOCK_MINIMAP_ANGLE": {
      "prefix": "UNLOCK_MINIMAP_ANGLE()",
      "body": ["UNLOCK_MINIMAP_ANGLE()"],
      "description": "UNLOCK_MINIMAP_ANGLE()"
    },
    "LOCK_MINIMAP_POSITION": {
      "prefix": "LOCK_MINIMAP_POSITION()",
      "body": ["LOCK_MINIMAP_POSITION(${1:float x}, ${2:float y})"],
      "description": "LOCK_MINIMAP_POSITION()"
    },
    "UNLOCK_MINIMAP_POSITION": {
      "prefix": "UNLOCK_MINIMAP_POSITION()",
      "body": ["UNLOCK_MINIMAP_POSITION()"],
      "description": "UNLOCK_MINIMAP_POSITION()"
    },
    "SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT": {
      "prefix": "SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT()",
      "body": [
        "SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT(${1:float altitude}, ${2:BOOL p1}, ${3:Any p2})"
      ],
      "description": "SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT()"
    },
    "SET_HEALTH_HUD_DISPLAY_VALUES": {
      "prefix": "SET_HEALTH_HUD_DISPLAY_VALUES()",
      "body": [
        "SET_HEALTH_HUD_DISPLAY_VALUES(${1:int health}, ${2:int capacity}, ${3:BOOL wasAdded})"
      ],
      "description": "SET_HEALTH_HUD_DISPLAY_VALUES()"
    },
    "SET_MAX_HEALTH_HUD_DISPLAY": {
      "prefix": "SET_MAX_HEALTH_HUD_DISPLAY()",
      "body": ["SET_MAX_HEALTH_HUD_DISPLAY(${1:int maximumValue})"],
      "description": "SET_MAX_HEALTH_HUD_DISPLAY()"
    },
    "SET_MAX_ARMOUR_HUD_DISPLAY": {
      "prefix": "SET_MAX_ARMOUR_HUD_DISPLAY()",
      "body": ["SET_MAX_ARMOUR_HUD_DISPLAY(${1:int maximumValue})"],
      "description": "SET_MAX_ARMOUR_HUD_DISPLAY()"
    },
    "SET_BIGMAP_ACTIVE": {
      "prefix": "SET_BIGMAP_ACTIVE()",
      "body": [
        "SET_BIGMAP_ACTIVE(${1:BOOL toggleBigMap}, ${2:BOOL showFullMap})"
      ],
      "description": "SET_BIGMAP_ACTIVE()"
    },
    "IS_HUD_COMPONENT_ACTIVE": {
      "prefix": "IS_HUD_COMPONENT_ACTIVE()",
      "body": ["IS_HUD_COMPONENT_ACTIVE(${1:int id})"],
      "description": "IS_HUD_COMPONENT_ACTIVE()"
    },
    "IS_SCRIPTED_HUD_COMPONENT_ACTIVE": {
      "prefix": "IS_SCRIPTED_HUD_COMPONENT_ACTIVE()",
      "body": ["IS_SCRIPTED_HUD_COMPONENT_ACTIVE(${1:int id})"],
      "description": "IS_SCRIPTED_HUD_COMPONENT_ACTIVE()"
    },
    "HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME": {
      "prefix": "HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME()",
      "body": ["HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME(${1:int id})"],
      "description": "HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME()"
    },
    "SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME": {
      "prefix": "SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME()",
      "body": ["SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME(${1:int id})"],
      "description": "SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME()"
    },
    "IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME": {
      "prefix": "IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME()",
      "body": ["IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME(${1:int id})"],
      "description": "IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME()"
    },
    "HIDE_HUD_COMPONENT_THIS_FRAME": {
      "prefix": "HIDE_HUD_COMPONENT_THIS_FRAME()",
      "body": ["HIDE_HUD_COMPONENT_THIS_FRAME(${1:int id})"],
      "description": "HIDE_HUD_COMPONENT_THIS_FRAME()"
    },
    "SHOW_HUD_COMPONENT_THIS_FRAME": {
      "prefix": "SHOW_HUD_COMPONENT_THIS_FRAME()",
      "body": ["SHOW_HUD_COMPONENT_THIS_FRAME(${1:int id})"],
      "description": "SHOW_HUD_COMPONENT_THIS_FRAME()"
    },
    "HIDE_STREET_AND_CAR_NAMES_THIS_FRAME": {
      "prefix": "HIDE_STREET_AND_CAR_NAMES_THIS_FRAME()",
      "body": ["HIDE_STREET_AND_CAR_NAMES_THIS_FRAME()"],
      "description": "HIDE_STREET_AND_CAR_NAMES_THIS_FRAME()"
    },
    "RESET_RETICULE_VALUES": {
      "prefix": "RESET_RETICULE_VALUES()",
      "body": ["RESET_RETICULE_VALUES()"],
      "description": "RESET_RETICULE_VALUES()"
    },
    "RESET_HUD_COMPONENT_VALUES": {
      "prefix": "RESET_HUD_COMPONENT_VALUES()",
      "body": ["RESET_HUD_COMPONENT_VALUES(${1:int id})"],
      "description": "RESET_HUD_COMPONENT_VALUES()"
    },
    "SET_HUD_COMPONENT_POSITION": {
      "prefix": "SET_HUD_COMPONENT_POSITION()",
      "body": [
        "SET_HUD_COMPONENT_POSITION(${1:int id}, ${2:float x}, ${3:float y})"
      ],
      "description": "SET_HUD_COMPONENT_POSITION()"
    },
    "GET_HUD_COMPONENT_POSITION": {
      "prefix": "GET_HUD_COMPONENT_POSITION()",
      "body": ["GET_HUD_COMPONENT_POSITION(${1:int id})"],
      "description": "GET_HUD_COMPONENT_POSITION()"
    },
    "CLEAR_REMINDER_MESSAGE": {
      "prefix": "CLEAR_REMINDER_MESSAGE()",
      "body": ["CLEAR_REMINDER_MESSAGE()"],
      "description": "CLEAR_REMINDER_MESSAGE()"
    },
    "GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION": {
      "prefix": "GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION()",
      "body": [
        "GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION(${1:float worldX}, ${2:float worldY}, ${3:float worldZ}, ${4:float* screenX}, ${5:float* screenY})"
      ],
      "description": "GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION()"
    },
    "OPEN_REPORTUGC_MENU": {
      "prefix": "OPEN_REPORTUGC_MENU()",
      "body": ["OPEN_REPORTUGC_MENU()"],
      "description": "OPEN_REPORTUGC_MENU()"
    },
    "FORCE_CLOSE_REPORTUGC_MENU": {
      "prefix": "FORCE_CLOSE_REPORTUGC_MENU()",
      "body": ["FORCE_CLOSE_REPORTUGC_MENU()"],
      "description": "FORCE_CLOSE_REPORTUGC_MENU()"
    },
    "IS_REPORTUGC_MENU_OPEN": {
      "prefix": "IS_REPORTUGC_MENU_OPEN()",
      "body": ["IS_REPORTUGC_MENU_OPEN()"],
      "description": "IS_REPORTUGC_MENU_OPEN()"
    },
    "IS_FLOATING_HELP_TEXT_ON_SCREEN": {
      "prefix": "IS_FLOATING_HELP_TEXT_ON_SCREEN()",
      "body": ["IS_FLOATING_HELP_TEXT_ON_SCREEN(${1:int hudIndex})"],
      "description": "IS_FLOATING_HELP_TEXT_ON_SCREEN()"
    },
    "SET_FLOATING_HELP_TEXT_SCREEN_POSITION": {
      "prefix": "SET_FLOATING_HELP_TEXT_SCREEN_POSITION()",
      "body": [
        "SET_FLOATING_HELP_TEXT_SCREEN_POSITION(${1:int hudIndex}, ${2:float x}, ${3:float y})"
      ],
      "description": "SET_FLOATING_HELP_TEXT_SCREEN_POSITION()"
    },
    "SET_FLOATING_HELP_TEXT_WORLD_POSITION": {
      "prefix": "SET_FLOATING_HELP_TEXT_WORLD_POSITION()",
      "body": [
        "SET_FLOATING_HELP_TEXT_WORLD_POSITION(${1:int hudIndex}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "SET_FLOATING_HELP_TEXT_WORLD_POSITION()"
    },
    "SET_FLOATING_HELP_TEXT_TO_ENTITY": {
      "prefix": "SET_FLOATING_HELP_TEXT_TO_ENTITY()",
      "body": [
        "SET_FLOATING_HELP_TEXT_TO_ENTITY(${1:int hudIndex}, ${2:Entity entity}, ${3:float offsetX}, ${4:float offsetY})"
      ],
      "description": "SET_FLOATING_HELP_TEXT_TO_ENTITY()"
    },
    "SET_FLOATING_HELP_TEXT_STYLE": {
      "prefix": "SET_FLOATING_HELP_TEXT_STYLE()",
      "body": [
        "SET_FLOATING_HELP_TEXT_STYLE(${1:int hudIndex}, ${2:int p1}, ${3:int p2}, ${4:int p3}, ${5:int p4}, ${6:int p5})"
      ],
      "description": "SET_FLOATING_HELP_TEXT_STYLE()"
    },
    "CLEAR_FLOATING_HELP": {
      "prefix": "CLEAR_FLOATING_HELP()",
      "body": ["CLEAR_FLOATING_HELP(${1:int hudIndex}, ${2:BOOL p1})"],
      "description": "CLEAR_FLOATING_HELP()"
    },
    "CREATE_MP_GAMER_TAG_WITH_CREW_COLOR": {
      "prefix": "CREATE_MP_GAMER_TAG_WITH_CREW_COLOR()",
      "body": [
        "CREATE_MP_GAMER_TAG_WITH_CREW_COLOR(${1:Player player}, ${2:const char* username}, ${3:BOOL pointedClanTag}, ${4:BOOL isRockstarClan}, ${5:const char* clanTag}, ${6:int clanFlag}, ${7:int r}, ${8:int g}, ${9:int b})"
      ],
      "description": "CREATE_MP_GAMER_TAG_WITH_CREW_COLOR()"
    },
    "IS_MP_GAMER_TAG_MOVIE_ACTIVE": {
      "prefix": "IS_MP_GAMER_TAG_MOVIE_ACTIVE()",
      "body": ["IS_MP_GAMER_TAG_MOVIE_ACTIVE()"],
      "description": "IS_MP_GAMER_TAG_MOVIE_ACTIVE()"
    },
    "CREATE_FAKE_MP_GAMER_TAG": {
      "prefix": "CREATE_FAKE_MP_GAMER_TAG()",
      "body": [
        "CREATE_FAKE_MP_GAMER_TAG(${1:Ped ped}, ${2:const char* username}, ${3:BOOL pointedClanTag}, ${4:BOOL isRockstarClan}, ${5:const char* clanTag}, ${6:int clanFlag})"
      ],
      "description": "CREATE_FAKE_MP_GAMER_TAG()"
    },
    "REMOVE_MP_GAMER_TAG": {
      "prefix": "REMOVE_MP_GAMER_TAG()",
      "body": ["REMOVE_MP_GAMER_TAG(${1:int gamerTagId})"],
      "description": "REMOVE_MP_GAMER_TAG()"
    },
    "IS_MP_GAMER_TAG_ACTIVE": {
      "prefix": "IS_MP_GAMER_TAG_ACTIVE()",
      "body": ["IS_MP_GAMER_TAG_ACTIVE(${1:int gamerTagId})"],
      "description": "IS_MP_GAMER_TAG_ACTIVE()"
    },
    "IS_MP_GAMER_TAG_FREE": {
      "prefix": "IS_MP_GAMER_TAG_FREE()",
      "body": ["IS_MP_GAMER_TAG_FREE(${1:int gamerTagId})"],
      "description": "IS_MP_GAMER_TAG_FREE()"
    },
    "SET_MP_GAMER_TAG_VISIBILITY": {
      "prefix": "SET_MP_GAMER_TAG_VISIBILITY()",
      "body": [
        "SET_MP_GAMER_TAG_VISIBILITY(${1:int gamerTagId}, ${2:int component}, ${3:BOOL toggle}, ${4:Any p3})"
      ],
      "description": "SET_MP_GAMER_TAG_VISIBILITY()"
    },
    "SET_ALL_MP_GAMER_TAGS_VISIBILITY": {
      "prefix": "SET_ALL_MP_GAMER_TAGS_VISIBILITY()",
      "body": [
        "SET_ALL_MP_GAMER_TAGS_VISIBILITY(${1:int gamerTagId}, ${2:BOOL toggle})"
      ],
      "description": "SET_ALL_MP_GAMER_TAGS_VISIBILITY()"
    },
    "SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH": {
      "prefix": "SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH()",
      "body": [
        "SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH(${1:int gamerTagId}, ${2:BOOL toggle})"
      ],
      "description": "SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH()"
    },
    "SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH": {
      "prefix": "SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH()",
      "body": [
        "SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH(${1:int gamerTagId}, ${2:BOOL toggle})"
      ],
      "description": "SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH()"
    },
    "SET_MP_GAMER_TAGS_POINT_HEALTH": {
      "prefix": "SET_MP_GAMER_TAGS_POINT_HEALTH()",
      "body": [
        "SET_MP_GAMER_TAGS_POINT_HEALTH(${1:int gamerTagId}, ${2:int value}, ${3:int maximumValue})"
      ],
      "description": "SET_MP_GAMER_TAGS_POINT_HEALTH()"
    },
    "SET_MP_GAMER_TAG_COLOUR": {
      "prefix": "SET_MP_GAMER_TAG_COLOUR()",
      "body": [
        "SET_MP_GAMER_TAG_COLOUR(${1:int gamerTagId}, ${2:int component}, ${3:int hudColorIndex})"
      ],
      "description": "SET_MP_GAMER_TAG_COLOUR()"
    },
    "SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR": {
      "prefix": "SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR()",
      "body": [
        "SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR(${1:int gamerTagId}, ${2:int hudColorIndex})"
      ],
      "description": "SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR()"
    },
    "SET_MP_GAMER_TAG_ALPHA": {
      "prefix": "SET_MP_GAMER_TAG_ALPHA()",
      "body": [
        "SET_MP_GAMER_TAG_ALPHA(${1:int gamerTagId}, ${2:int component}, ${3:int alpha})"
      ],
      "description": "SET_MP_GAMER_TAG_ALPHA()"
    },
    "SET_MP_GAMER_TAG_WANTED_LEVEL": {
      "prefix": "SET_MP_GAMER_TAG_WANTED_LEVEL()",
      "body": [
        "SET_MP_GAMER_TAG_WANTED_LEVEL(${1:int gamerTagId}, ${2:int wantedlvl})"
      ],
      "description": "SET_MP_GAMER_TAG_WANTED_LEVEL()"
    },
    "SET_MP_GAMER_TAG_NUM_PACKAGES": {
      "prefix": "SET_MP_GAMER_TAG_NUM_PACKAGES()",
      "body": ["SET_MP_GAMER_TAG_NUM_PACKAGES(${1:int gamerTagId}, ${2:int p1})"],
      "description": "SET_MP_GAMER_TAG_NUM_PACKAGES()"
    },
    "SET_MP_GAMER_TAG_NAME": {
      "prefix": "SET_MP_GAMER_TAG_NAME()",
      "body": [
        "SET_MP_GAMER_TAG_NAME(${1:int gamerTagId}, ${2:const char* string})"
      ],
      "description": "SET_MP_GAMER_TAG_NAME()"
    },
    "IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS": {
      "prefix": "IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS()",
      "body": [
        "IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS(${1:int gamerTagId})"
      ],
      "description": "IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS()"
    },
    "SET_MP_GAMER_TAG_BIG_TEXT": {
      "prefix": "SET_MP_GAMER_TAG_BIG_TEXT()",
      "body": [
        "SET_MP_GAMER_TAG_BIG_TEXT(${1:int gamerTagId}, ${2:const char* string})"
      ],
      "description": "SET_MP_GAMER_TAG_BIG_TEXT()"
    },
    "GET_CURRENT_WEBPAGE_ID": {
      "prefix": "GET_CURRENT_WEBPAGE_ID()",
      "body": ["GET_CURRENT_WEBPAGE_ID()"],
      "description": "GET_CURRENT_WEBPAGE_ID()"
    },
    "GET_CURRENT_WEBSITE_ID": {
      "prefix": "GET_CURRENT_WEBSITE_ID()",
      "body": ["GET_CURRENT_WEBSITE_ID()"],
      "description": "GET_CURRENT_WEBSITE_ID()"
    },
    "GET_GLOBAL_ACTIONSCRIPT_FLAG": {
      "prefix": "GET_GLOBAL_ACTIONSCRIPT_FLAG()",
      "body": ["GET_GLOBAL_ACTIONSCRIPT_FLAG(${1:int flagIndex})"],
      "description": "GET_GLOBAL_ACTIONSCRIPT_FLAG()"
    },
    "RESET_GLOBAL_ACTIONSCRIPT_FLAG": {
      "prefix": "RESET_GLOBAL_ACTIONSCRIPT_FLAG()",
      "body": ["RESET_GLOBAL_ACTIONSCRIPT_FLAG(${1:int flagIndex})"],
      "description": "RESET_GLOBAL_ACTIONSCRIPT_FLAG()"
    },
    "IS_WARNING_MESSAGE_READY_FOR_CONTROL": {
      "prefix": "IS_WARNING_MESSAGE_READY_FOR_CONTROL()",
      "body": ["IS_WARNING_MESSAGE_READY_FOR_CONTROL()"],
      "description": "IS_WARNING_MESSAGE_READY_FOR_CONTROL()"
    },
    "SET_WARNING_MESSAGE": {
      "prefix": "SET_WARNING_MESSAGE()",
      "body": [
        "SET_WARNING_MESSAGE(${1:const char* titleMsg}, ${2:int flags}, ${3:const char* promptMsg}, ${4:BOOL p3}, ${5:int p4}, ${6:const char* p5}, ${7:const char* p6}, ${8:BOOL showBackground}, ${9:int errorCode})"
      ],
      "description": "SET_WARNING_MESSAGE()"
    },
    "SET_WARNING_MESSAGE_WITH_HEADER": {
      "prefix": "SET_WARNING_MESSAGE_WITH_HEADER()",
      "body": [
        "SET_WARNING_MESSAGE_WITH_HEADER(${1:const char* entryHeader}, ${2:const char* entryLine1}, ${3:int instructionalKey}, ${4:const char* entryLine2}, ${5:BOOL p4}, ${6:Any p5}, ${7:Any* showBackground}, ${8:Any* p7}, ${9:BOOL p8}, ${10:Any p9})"
      ],
      "description": "SET_WARNING_MESSAGE_WITH_HEADER()"
    },
    "SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS": {
      "prefix": "SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS()",
      "body": [
        "SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS(${1:const char* entryHeader}, ${2:const char* entryLine1}, ${3:int instructionalKey}, ${4:const char* entryLine2}, ${5:BOOL p4}, ${6:Any p5}, ${7:Any additionalIntInfo}, ${8:const char* additionalTextInfoLine1}, ${9:const char* additionalTextInfoLine2}, ${10:BOOL showBackground}, ${11:int errorCode})"
      ],
      "description": "SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS()"
    },
    "SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED": {
      "prefix": "SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED()",
      "body": [
        "SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED(${1:const char* entryHeader}, ${2:const char* entryLine1}, ${3:int flags}, ${4:const char* entryLine2}, ${5:BOOL p4}, ${6:Any p5}, ${7:Any* p6}, ${8:Any* p7}, ${9:BOOL showBg}, ${10:Any p9}, ${11:Any p10})"
      ],
      "description": "SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED()"
    },
    "SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED": {
      "prefix": "SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED()",
      "body": [
        "SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED(${1:const char* labelTitle}, ${2:const char* labelMessage}, ${3:int p2}, ${4:int p3}, ${5:const char* labelMessage2}, ${6:BOOL p5}, ${7:int p6}, ${8:int p7}, ${9:const char* p8}, ${10:const char* p9}, ${11:BOOL background}, ${12:int errorCode})"
      ],
      "description": "SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED()"
    },
    "GET_WARNING_SCREEN_MESSAGE_HASH": {
      "prefix": "GET_WARNING_SCREEN_MESSAGE_HASH()",
      "body": ["GET_WARNING_SCREEN_MESSAGE_HASH()"],
      "description": "GET_WARNING_SCREEN_MESSAGE_HASH()"
    },
    "SET_WARNING_MESSAGE_OPTION_ITEMS": {
      "prefix": "SET_WARNING_MESSAGE_OPTION_ITEMS()",
      "body": [
        "SET_WARNING_MESSAGE_OPTION_ITEMS(${1:int index}, ${2:const char* name}, ${3:int cash}, ${4:int rp}, ${5:int lvl}, ${6:int colour})"
      ],
      "description": "SET_WARNING_MESSAGE_OPTION_ITEMS()"
    },
    "SET_WARNING_MESSAGE_OPTION_HIGHLIGHT": {
      "prefix": "SET_WARNING_MESSAGE_OPTION_HIGHLIGHT()",
      "body": ["SET_WARNING_MESSAGE_OPTION_HIGHLIGHT(${1:Any p0})"],
      "description": "SET_WARNING_MESSAGE_OPTION_HIGHLIGHT()"
    },
    "REMOVE_WARNING_MESSAGE_OPTION_ITEMS": {
      "prefix": "REMOVE_WARNING_MESSAGE_OPTION_ITEMS()",
      "body": ["REMOVE_WARNING_MESSAGE_OPTION_ITEMS()"],
      "description": "REMOVE_WARNING_MESSAGE_OPTION_ITEMS()"
    },
    "IS_WARNING_MESSAGE_ACTIVE": {
      "prefix": "IS_WARNING_MESSAGE_ACTIVE()",
      "body": ["IS_WARNING_MESSAGE_ACTIVE()"],
      "description": "IS_WARNING_MESSAGE_ACTIVE()"
    },
    "CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE": {
      "prefix": "CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE()",
      "body": ["CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE()"],
      "description": "CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE()"
    },
    "CUSTOM_MINIMAP_SET_ACTIVE": {
      "prefix": "CUSTOM_MINIMAP_SET_ACTIVE()",
      "body": ["CUSTOM_MINIMAP_SET_ACTIVE(${1:BOOL toggle})"],
      "description": "CUSTOM_MINIMAP_SET_ACTIVE()"
    },
    "CUSTOM_MINIMAP_SET_BLIP_OBJECT": {
      "prefix": "CUSTOM_MINIMAP_SET_BLIP_OBJECT()",
      "body": ["CUSTOM_MINIMAP_SET_BLIP_OBJECT(${1:int spriteId})"],
      "description": "CUSTOM_MINIMAP_SET_BLIP_OBJECT()"
    },
    "CUSTOM_MINIMAP_CREATE_BLIP": {
      "prefix": "CUSTOM_MINIMAP_CREATE_BLIP()",
      "body": [
        "CUSTOM_MINIMAP_CREATE_BLIP(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "CUSTOM_MINIMAP_CREATE_BLIP()"
    },
    "CUSTOM_MINIMAP_CLEAR_BLIPS": {
      "prefix": "CUSTOM_MINIMAP_CLEAR_BLIPS()",
      "body": ["CUSTOM_MINIMAP_CLEAR_BLIPS()"],
      "description": "CUSTOM_MINIMAP_CLEAR_BLIPS()"
    },
    "FORCE_SONAR_BLIPS_THIS_FRAME": {
      "prefix": "FORCE_SONAR_BLIPS_THIS_FRAME()",
      "body": ["FORCE_SONAR_BLIPS_THIS_FRAME()"],
      "description": "FORCE_SONAR_BLIPS_THIS_FRAME()"
    },
    "GET_NORTH_BLID_INDEX": {
      "prefix": "GET_NORTH_BLID_INDEX()",
      "body": ["GET_NORTH_BLID_INDEX()"],
      "description": "GET_NORTH_BLID_INDEX()"
    },
    "DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS": {
      "prefix": "DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS()",
      "body": ["DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS(${1:BOOL toggle})"],
      "description": "DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS()"
    },
    "DRAW_FRONTEND_BACKGROUND_THIS_FRAME": {
      "prefix": "DRAW_FRONTEND_BACKGROUND_THIS_FRAME()",
      "body": ["DRAW_FRONTEND_BACKGROUND_THIS_FRAME()"],
      "description": "DRAW_FRONTEND_BACKGROUND_THIS_FRAME()"
    },
    "DRAW_HUD_OVER_FADE_THIS_FRAME": {
      "prefix": "DRAW_HUD_OVER_FADE_THIS_FRAME()",
      "body": ["DRAW_HUD_OVER_FADE_THIS_FRAME()"],
      "description": "DRAW_HUD_OVER_FADE_THIS_FRAME()"
    },
    "ACTIVATE_FRONTEND_MENU": {
      "prefix": "ACTIVATE_FRONTEND_MENU()",
      "body": [
        "ACTIVATE_FRONTEND_MENU(${1:Hash menuhash}, ${2:BOOL togglePause}, ${3:int component})"
      ],
      "description": "ACTIVATE_FRONTEND_MENU()"
    },
    "RESTART_FRONTEND_MENU": {
      "prefix": "RESTART_FRONTEND_MENU()",
      "body": ["RESTART_FRONTEND_MENU(${1:Hash menuHash}, ${2:int p1})"],
      "description": "RESTART_FRONTEND_MENU()"
    },
    "GET_CURRENT_FRONTEND_MENU_VERSION": {
      "prefix": "GET_CURRENT_FRONTEND_MENU_VERSION()",
      "body": ["GET_CURRENT_FRONTEND_MENU_VERSION()"],
      "description": "GET_CURRENT_FRONTEND_MENU_VERSION()"
    },
    "SET_PAUSE_MENU_ACTIVE": {
      "prefix": "SET_PAUSE_MENU_ACTIVE()",
      "body": ["SET_PAUSE_MENU_ACTIVE(${1:BOOL toggle})"],
      "description": "SET_PAUSE_MENU_ACTIVE()"
    },
    "DISABLE_FRONTEND_THIS_FRAME": {
      "prefix": "DISABLE_FRONTEND_THIS_FRAME()",
      "body": ["DISABLE_FRONTEND_THIS_FRAME()"],
      "description": "DISABLE_FRONTEND_THIS_FRAME()"
    },
    "SUPPRESS_FRONTEND_RENDERING_THIS_FRAME": {
      "prefix": "SUPPRESS_FRONTEND_RENDERING_THIS_FRAME()",
      "body": ["SUPPRESS_FRONTEND_RENDERING_THIS_FRAME()"],
      "description": "SUPPRESS_FRONTEND_RENDERING_THIS_FRAME()"
    },
    "ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME": {
      "prefix": "ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME()",
      "body": ["ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME()"],
      "description": "ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME()"
    },
    "SET_FRONTEND_ACTIVE": {
      "prefix": "SET_FRONTEND_ACTIVE()",
      "body": ["SET_FRONTEND_ACTIVE(${1:BOOL active})"],
      "description": "SET_FRONTEND_ACTIVE()"
    },
    "IS_PAUSE_MENU_ACTIVE": {
      "prefix": "IS_PAUSE_MENU_ACTIVE()",
      "body": ["IS_PAUSE_MENU_ACTIVE()"],
      "description": "IS_PAUSE_MENU_ACTIVE()"
    },
    "IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN": {
      "prefix": "IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN()",
      "body": ["IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN()"],
      "description": "IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN()"
    },
    "GET_PAUSE_MENU_STATE": {
      "prefix": "GET_PAUSE_MENU_STATE()",
      "body": ["GET_PAUSE_MENU_STATE()"],
      "description": "GET_PAUSE_MENU_STATE()"
    },
    "GET_PAUSE_MENU_POSITION": {
      "prefix": "GET_PAUSE_MENU_POSITION()",
      "body": ["GET_PAUSE_MENU_POSITION()"],
      "description": "GET_PAUSE_MENU_POSITION()"
    },
    "IS_PAUSE_MENU_RESTARTING": {
      "prefix": "IS_PAUSE_MENU_RESTARTING()",
      "body": ["IS_PAUSE_MENU_RESTARTING()"],
      "description": "IS_PAUSE_MENU_RESTARTING()"
    },
    "FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE": {
      "prefix": "FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE()",
      "body": ["FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE(${1:const char* p0})"],
      "description": "FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE()"
    },
    "PAUSE_MENUCEPTION_GO_DEEPER": {
      "prefix": "PAUSE_MENUCEPTION_GO_DEEPER()",
      "body": ["PAUSE_MENUCEPTION_GO_DEEPER(${1:int page})"],
      "description": "PAUSE_MENUCEPTION_GO_DEEPER()"
    },
    "PAUSE_MENUCEPTION_THE_KICK": {
      "prefix": "PAUSE_MENUCEPTION_THE_KICK()",
      "body": ["PAUSE_MENUCEPTION_THE_KICK()"],
      "description": "PAUSE_MENUCEPTION_THE_KICK()"
    },
    "PAUSE_TOGGLE_FULLSCREEN_MAP": {
      "prefix": "PAUSE_TOGGLE_FULLSCREEN_MAP()",
      "body": ["PAUSE_TOGGLE_FULLSCREEN_MAP(${1:Any p0})"],
      "description": "PAUSE_TOGGLE_FULLSCREEN_MAP()"
    },
    "PAUSE_MENU_ACTIVATE_CONTEXT": {
      "prefix": "PAUSE_MENU_ACTIVATE_CONTEXT()",
      "body": ["PAUSE_MENU_ACTIVATE_CONTEXT(${1:Hash contextHash})"],
      "description": "PAUSE_MENU_ACTIVATE_CONTEXT()"
    },
    "PAUSE_MENU_DEACTIVATE_CONTEXT": {
      "prefix": "PAUSE_MENU_DEACTIVATE_CONTEXT()",
      "body": ["PAUSE_MENU_DEACTIVATE_CONTEXT(${1:Hash contextHash})"],
      "description": "PAUSE_MENU_DEACTIVATE_CONTEXT()"
    },
    "PAUSE_MENU_IS_CONTEXT_ACTIVE": {
      "prefix": "PAUSE_MENU_IS_CONTEXT_ACTIVE()",
      "body": ["PAUSE_MENU_IS_CONTEXT_ACTIVE(${1:Hash contextHash})"],
      "description": "PAUSE_MENU_IS_CONTEXT_ACTIVE()"
    },
    "PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE": {
      "prefix": "PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE()",
      "body": ["PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE()"],
      "description": "PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE()"
    },
    "PAUSE_MENU_GET_HAIR_COLOUR_INDEX": {
      "prefix": "PAUSE_MENU_GET_HAIR_COLOUR_INDEX()",
      "body": ["PAUSE_MENU_GET_HAIR_COLOUR_INDEX()"],
      "description": "PAUSE_MENU_GET_HAIR_COLOUR_INDEX()"
    },
    "PAUSE_MENU_GET_MOUSE_HOVER_INDEX": {
      "prefix": "PAUSE_MENU_GET_MOUSE_HOVER_INDEX()",
      "body": ["PAUSE_MENU_GET_MOUSE_HOVER_INDEX()"],
      "description": "PAUSE_MENU_GET_MOUSE_HOVER_INDEX()"
    },
    "PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID": {
      "prefix": "PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID()",
      "body": ["PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID()"],
      "description": "PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID()"
    },
    "PAUSE_MENU_GET_MOUSE_CLICK_EVENT": {
      "prefix": "PAUSE_MENU_GET_MOUSE_CLICK_EVENT()",
      "body": [
        "PAUSE_MENU_GET_MOUSE_CLICK_EVENT(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})"
      ],
      "description": "PAUSE_MENU_GET_MOUSE_CLICK_EVENT()"
    },
    "PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS": {
      "prefix": "PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS()",
      "body": ["PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS(${1:int p0})"],
      "description": "PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS()"
    },
    "PAUSE_MENU_SET_BUSY_SPINNER": {
      "prefix": "PAUSE_MENU_SET_BUSY_SPINNER()",
      "body": [
        "PAUSE_MENU_SET_BUSY_SPINNER(${1:BOOL p0}, ${2:int position}, ${3:int spinnerIndex})"
      ],
      "description": "PAUSE_MENU_SET_BUSY_SPINNER()"
    },
    "PAUSE_MENU_SET_WARN_ON_TAB_CHANGE": {
      "prefix": "PAUSE_MENU_SET_WARN_ON_TAB_CHANGE()",
      "body": ["PAUSE_MENU_SET_WARN_ON_TAB_CHANGE(${1:BOOL p0})"],
      "description": "PAUSE_MENU_SET_WARN_ON_TAB_CHANGE()"
    },
    "IS_FRONTEND_READY_FOR_CONTROL": {
      "prefix": "IS_FRONTEND_READY_FOR_CONTROL()",
      "body": ["IS_FRONTEND_READY_FOR_CONTROL()"],
      "description": "IS_FRONTEND_READY_FOR_CONTROL()"
    },
    "TAKE_CONTROL_OF_FRONTEND": {
      "prefix": "TAKE_CONTROL_OF_FRONTEND()",
      "body": ["TAKE_CONTROL_OF_FRONTEND()"],
      "description": "TAKE_CONTROL_OF_FRONTEND()"
    },
    "RELEASE_CONTROL_OF_FRONTEND": {
      "prefix": "RELEASE_CONTROL_OF_FRONTEND()",
      "body": ["RELEASE_CONTROL_OF_FRONTEND()"],
      "description": "RELEASE_CONTROL_OF_FRONTEND()"
    },
    "CODE_WANTS_SCRIPT_TO_TAKE_CONTROL": {
      "prefix": "CODE_WANTS_SCRIPT_TO_TAKE_CONTROL()",
      "body": ["CODE_WANTS_SCRIPT_TO_TAKE_CONTROL()"],
      "description": "CODE_WANTS_SCRIPT_TO_TAKE_CONTROL()"
    },
    "GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL": {
      "prefix": "GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL()",
      "body": ["GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL()"],
      "description": "GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL()"
    },
    "IS_NAVIGATING_MENU_CONTENT": {
      "prefix": "IS_NAVIGATING_MENU_CONTENT()",
      "body": ["IS_NAVIGATING_MENU_CONTENT()"],
      "description": "IS_NAVIGATING_MENU_CONTENT()"
    },
    "HAS_MENU_TRIGGER_EVENT_OCCURRED": {
      "prefix": "HAS_MENU_TRIGGER_EVENT_OCCURRED()",
      "body": ["HAS_MENU_TRIGGER_EVENT_OCCURRED()"],
      "description": "HAS_MENU_TRIGGER_EVENT_OCCURRED()"
    },
    "HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED": {
      "prefix": "HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED()",
      "body": ["HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED()"],
      "description": "HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED()"
    },
    "SET_SAVEGAME_LIST_UNIQUE_ID": {
      "prefix": "SET_SAVEGAME_LIST_UNIQUE_ID()",
      "body": ["SET_SAVEGAME_LIST_UNIQUE_ID(${1:Any p0})"],
      "description": "SET_SAVEGAME_LIST_UNIQUE_ID()"
    },
    "GET_MENU_TRIGGER_EVENT_DETAILS": {
      "prefix": "GET_MENU_TRIGGER_EVENT_DETAILS()",
      "body": [
        "GET_MENU_TRIGGER_EVENT_DETAILS(${1:int* lastItemMenuId}, ${2:int* selectedItemUniqueId})"
      ],
      "description": "GET_MENU_TRIGGER_EVENT_DETAILS()"
    },
    "GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS": {
      "prefix": "GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS()",
      "body": [
        "GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS(${1:int* lastItemMenuId}, ${2:int* selectedItemMenuId}, ${3:int* selectedItemUniqueId})"
      ],
      "description": "GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS()"
    },
    "GET_PM_PLAYER_CREW_COLOR": {
      "prefix": "GET_PM_PLAYER_CREW_COLOR()",
      "body": ["GET_PM_PLAYER_CREW_COLOR(${1:int* r}, ${2:int* g}, ${3:int* b})"],
      "description": "GET_PM_PLAYER_CREW_COLOR()"
    },
    "GET_MENU_PED_INT_STAT": {
      "prefix": "GET_MENU_PED_INT_STAT()",
      "body": ["GET_MENU_PED_INT_STAT(${1:Any p0}, ${2:Any* p1})"],
      "description": "GET_MENU_PED_INT_STAT()"
    },
    "GET_CHARACTER_MENU_PED_INT_STAT": {
      "prefix": "GET_CHARACTER_MENU_PED_INT_STAT()",
      "body": [
        "GET_CHARACTER_MENU_PED_INT_STAT(${1:Any p0}, ${2:Any* p1}, ${3:Any p2})"
      ],
      "description": "GET_CHARACTER_MENU_PED_INT_STAT()"
    },
    "GET_MENU_PED_MASKED_INT_STAT": {
      "prefix": "GET_MENU_PED_MASKED_INT_STAT()",
      "body": [
        "GET_MENU_PED_MASKED_INT_STAT(${1:Hash statHash}, ${2:int* outValue}, ${3:int mask}, ${4:BOOL p3})"
      ],
      "description": "GET_MENU_PED_MASKED_INT_STAT()"
    },
    "GET_CHARACTER_MENU_PED_MASKED_INT_STAT": {
      "prefix": "GET_CHARACTER_MENU_PED_MASKED_INT_STAT()",
      "body": [
        "GET_CHARACTER_MENU_PED_MASKED_INT_STAT(${1:Hash statHash}, ${2:Any* outValue}, ${3:int p2}, ${4:int mask}, ${5:BOOL p4})"
      ],
      "description": "GET_CHARACTER_MENU_PED_MASKED_INT_STAT()"
    },
    "GET_MENU_PED_FLOAT_STAT": {
      "prefix": "GET_MENU_PED_FLOAT_STAT()",
      "body": [
        "GET_MENU_PED_FLOAT_STAT(${1:Hash statHash}, ${2:float* outValue})"
      ],
      "description": "GET_MENU_PED_FLOAT_STAT()"
    },
    "GET_CHARACTER_MENU_PED_FLOAT_STAT": {
      "prefix": "GET_CHARACTER_MENU_PED_FLOAT_STAT()",
      "body": [
        "GET_CHARACTER_MENU_PED_FLOAT_STAT(${1:float statHash}, ${2:float* outValue}, ${3:BOOL p2})"
      ],
      "description": "GET_CHARACTER_MENU_PED_FLOAT_STAT()"
    },
    "GET_MENU_PED_BOOL_STAT": {
      "prefix": "GET_MENU_PED_BOOL_STAT()",
      "body": ["GET_MENU_PED_BOOL_STAT(${1:Hash statHash}, ${2:BOOL* outValue})"],
      "description": "GET_MENU_PED_BOOL_STAT()"
    },
    "CLEAR_PED_IN_PAUSE_MENU": {
      "prefix": "CLEAR_PED_IN_PAUSE_MENU()",
      "body": ["CLEAR_PED_IN_PAUSE_MENU()"],
      "description": "CLEAR_PED_IN_PAUSE_MENU()"
    },
    "GIVE_PED_TO_PAUSE_MENU": {
      "prefix": "GIVE_PED_TO_PAUSE_MENU()",
      "body": ["GIVE_PED_TO_PAUSE_MENU(${1:Ped ped}, ${2:int p1})"],
      "description": "GIVE_PED_TO_PAUSE_MENU()"
    },
    "SET_PAUSE_MENU_PED_LIGHTING": {
      "prefix": "SET_PAUSE_MENU_PED_LIGHTING()",
      "body": ["SET_PAUSE_MENU_PED_LIGHTING(${1:BOOL state})"],
      "description": "SET_PAUSE_MENU_PED_LIGHTING()"
    },
    "SET_PAUSE_MENU_PED_SLEEP_STATE": {
      "prefix": "SET_PAUSE_MENU_PED_SLEEP_STATE()",
      "body": ["SET_PAUSE_MENU_PED_SLEEP_STATE(${1:BOOL state})"],
      "description": "SET_PAUSE_MENU_PED_SLEEP_STATE()"
    },
    "OPEN_ONLINE_POLICIES_MENU": {
      "prefix": "OPEN_ONLINE_POLICIES_MENU()",
      "body": ["OPEN_ONLINE_POLICIES_MENU()"],
      "description": "OPEN_ONLINE_POLICIES_MENU()"
    },
    "ARE_ONLINE_POLICIES_UP_TO_DATE": {
      "prefix": "ARE_ONLINE_POLICIES_UP_TO_DATE()",
      "body": ["ARE_ONLINE_POLICIES_UP_TO_DATE()"],
      "description": "ARE_ONLINE_POLICIES_UP_TO_DATE()"
    },
    "IS_ONLINE_POLICIES_MENU_ACTIVE": {
      "prefix": "IS_ONLINE_POLICIES_MENU_ACTIVE()",
      "body": ["IS_ONLINE_POLICIES_MENU_ACTIVE()"],
      "description": "IS_ONLINE_POLICIES_MENU_ACTIVE()"
    },
    "OPEN_SOCIAL_CLUB_MENU": {
      "prefix": "OPEN_SOCIAL_CLUB_MENU()",
      "body": ["OPEN_SOCIAL_CLUB_MENU(${1:Hash menu})"],
      "description": "OPEN_SOCIAL_CLUB_MENU()"
    },
    "CLOSE_SOCIAL_CLUB_MENU": {
      "prefix": "CLOSE_SOCIAL_CLUB_MENU()",
      "body": ["CLOSE_SOCIAL_CLUB_MENU()"],
      "description": "CLOSE_SOCIAL_CLUB_MENU()"
    },
    "SET_SOCIAL_CLUB_TOUR": {
      "prefix": "SET_SOCIAL_CLUB_TOUR()",
      "body": ["SET_SOCIAL_CLUB_TOUR(${1:const char* name})"],
      "description": "SET_SOCIAL_CLUB_TOUR()"
    },
    "IS_SOCIAL_CLUB_ACTIVE": {
      "prefix": "IS_SOCIAL_CLUB_ACTIVE()",
      "body": ["IS_SOCIAL_CLUB_ACTIVE()"],
      "description": "IS_SOCIAL_CLUB_ACTIVE()"
    },
    "SET_TEXT_INPUT_BOX_ENABLED": {
      "prefix": "SET_TEXT_INPUT_BOX_ENABLED()",
      "body": ["SET_TEXT_INPUT_BOX_ENABLED(${1:BOOL p0})"],
      "description": "SET_TEXT_INPUT_BOX_ENABLED()"
    },
    "FORCE_CLOSE_TEXT_INPUT_BOX": {
      "prefix": "FORCE_CLOSE_TEXT_INPUT_BOX()",
      "body": ["FORCE_CLOSE_TEXT_INPUT_BOX()"],
      "description": "FORCE_CLOSE_TEXT_INPUT_BOX()"
    },
    "SET_ALLOW_COMMA_ON_TEXT_INPUT": {
      "prefix": "SET_ALLOW_COMMA_ON_TEXT_INPUT()",
      "body": ["SET_ALLOW_COMMA_ON_TEXT_INPUT(${1:Any p0})"],
      "description": "SET_ALLOW_COMMA_ON_TEXT_INPUT()"
    },
    "OVERRIDE_MP_TEXT_CHAT_TEAM_STRING": {
      "prefix": "OVERRIDE_MP_TEXT_CHAT_TEAM_STRING()",
      "body": ["OVERRIDE_MP_TEXT_CHAT_TEAM_STRING(${1:Hash gxtEntryHash})"],
      "description": "OVERRIDE_MP_TEXT_CHAT_TEAM_STRING()"
    },
    "IS_MP_TEXT_CHAT_TYPING": {
      "prefix": "IS_MP_TEXT_CHAT_TYPING()",
      "body": ["IS_MP_TEXT_CHAT_TYPING()"],
      "description": "IS_MP_TEXT_CHAT_TYPING()"
    },
    "CLOSE_MP_TEXT_CHAT": {
      "prefix": "CLOSE_MP_TEXT_CHAT()",
      "body": ["CLOSE_MP_TEXT_CHAT()"],
      "description": "CLOSE_MP_TEXT_CHAT()"
    },
    "MP_TEXT_CHAT_IS_TEAM_JOB": {
      "prefix": "MP_TEXT_CHAT_IS_TEAM_JOB()",
      "body": ["MP_TEXT_CHAT_IS_TEAM_JOB(${1:Any p0})"],
      "description": "MP_TEXT_CHAT_IS_TEAM_JOB()"
    },
    "OVERRIDE_MP_TEXT_CHAT_COLOR": {
      "prefix": "OVERRIDE_MP_TEXT_CHAT_COLOR()",
      "body": ["OVERRIDE_MP_TEXT_CHAT_COLOR(${1:int p0}, ${2:int hudColor})"],
      "description": "OVERRIDE_MP_TEXT_CHAT_COLOR()"
    },
    "MP_TEXT_CHAT_DISABLE": {
      "prefix": "MP_TEXT_CHAT_DISABLE()",
      "body": ["MP_TEXT_CHAT_DISABLE(${1:BOOL toggle})"],
      "description": "MP_TEXT_CHAT_DISABLE()"
    },
    "FLAG_PLAYER_CONTEXT_IN_TOURNAMENT": {
      "prefix": "FLAG_PLAYER_CONTEXT_IN_TOURNAMENT()",
      "body": ["FLAG_PLAYER_CONTEXT_IN_TOURNAMENT(${1:BOOL toggle})"],
      "description": "FLAG_PLAYER_CONTEXT_IN_TOURNAMENT()"
    },
    "SET_PED_HAS_AI_BLIP": {
      "prefix": "SET_PED_HAS_AI_BLIP()",
      "body": ["SET_PED_HAS_AI_BLIP(${1:Ped ped}, ${2:BOOL hasCone})"],
      "description": "SET_PED_HAS_AI_BLIP()"
    },
    "SET_PED_HAS_AI_BLIP_WITH_COLOUR": {
      "prefix": "SET_PED_HAS_AI_BLIP_WITH_COLOUR()",
      "body": [
        "SET_PED_HAS_AI_BLIP_WITH_COLOUR(${1:Ped ped}, ${2:BOOL hasCone}, ${3:int color})"
      ],
      "description": "SET_PED_HAS_AI_BLIP_WITH_COLOUR()"
    },
    "DOES_PED_HAVE_AI_BLIP": {
      "prefix": "DOES_PED_HAVE_AI_BLIP()",
      "body": ["DOES_PED_HAVE_AI_BLIP(${1:Ped ped})"],
      "description": "DOES_PED_HAVE_AI_BLIP()"
    },
    "SET_PED_AI_BLIP_GANG_ID": {
      "prefix": "SET_PED_AI_BLIP_GANG_ID()",
      "body": ["SET_PED_AI_BLIP_GANG_ID(${1:Ped ped}, ${2:int gangId})"],
      "description": "SET_PED_AI_BLIP_GANG_ID()"
    },
    "SET_PED_AI_BLIP_HAS_CONE": {
      "prefix": "SET_PED_AI_BLIP_HAS_CONE()",
      "body": ["SET_PED_AI_BLIP_HAS_CONE(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_AI_BLIP_HAS_CONE()"
    },
    "SET_PED_AI_BLIP_FORCED_ON": {
      "prefix": "SET_PED_AI_BLIP_FORCED_ON()",
      "body": ["SET_PED_AI_BLIP_FORCED_ON(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_AI_BLIP_FORCED_ON()"
    },
    "SET_PED_AI_BLIP_NOTICE_RANGE": {
      "prefix": "SET_PED_AI_BLIP_NOTICE_RANGE()",
      "body": ["SET_PED_AI_BLIP_NOTICE_RANGE(${1:Ped ped}, ${2:float range})"],
      "description": "SET_PED_AI_BLIP_NOTICE_RANGE()"
    },
    "SET_PED_AI_BLIP_SPRITE": {
      "prefix": "SET_PED_AI_BLIP_SPRITE()",
      "body": ["SET_PED_AI_BLIP_SPRITE(${1:Ped ped}, ${2:int spriteId})"],
      "description": "SET_PED_AI_BLIP_SPRITE()"
    },
    "GET_AI_PED_PED_BLIP_INDEX": {
      "prefix": "GET_AI_PED_PED_BLIP_INDEX()",
      "body": ["GET_AI_PED_PED_BLIP_INDEX(${1:Ped ped})"],
      "description": "GET_AI_PED_PED_BLIP_INDEX()"
    },
    "GET_AI_PED_VEHICLE_BLIP_INDEX": {
      "prefix": "GET_AI_PED_VEHICLE_BLIP_INDEX()",
      "body": ["GET_AI_PED_VEHICLE_BLIP_INDEX(${1:Ped ped})"],
      "description": "GET_AI_PED_VEHICLE_BLIP_INDEX()"
    },
    "HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE": {
      "prefix": "HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE()",
      "body": ["HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE()"],
      "description": "HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE()"
    },
    "SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT": {
      "prefix": "SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT()",
      "body": ["SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT()"],
      "description": "SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT()"
    },
    "SET_PLAYER_IS_IN_DIRECTOR_MODE": {
      "prefix": "SET_PLAYER_IS_IN_DIRECTOR_MODE()",
      "body": ["SET_PLAYER_IS_IN_DIRECTOR_MODE(${1:BOOL toggle})"],
      "description": "SET_PLAYER_IS_IN_DIRECTOR_MODE()"
    },
    "SET_DIRECTOR_MODE_AVAILABLE": {
      "prefix": "SET_DIRECTOR_MODE_AVAILABLE()",
      "body": ["SET_DIRECTOR_MODE_AVAILABLE(${1:BOOL toggle})"],
      "description": "SET_DIRECTOR_MODE_AVAILABLE()"
    },
    "HIDE_HUDMARKERS_THIS_FRAME": {
      "prefix": "HIDE_HUDMARKERS_THIS_FRAME()",
      "body": ["HIDE_HUDMARKERS_THIS_FRAME()"],
      "description": "HIDE_HUDMARKERS_THIS_FRAME()"
    },
    "GET_INTERIOR_HEADING": {
      "prefix": "GET_INTERIOR_HEADING()",
      "body": ["GET_INTERIOR_HEADING(${1:Interior interior})"],
      "description": "GET_INTERIOR_HEADING()"
    },
    "GET_INTERIOR_LOCATION_AND_NAMEHASH": {
      "prefix": "GET_INTERIOR_LOCATION_AND_NAMEHASH()",
      "body": [
        "GET_INTERIOR_LOCATION_AND_NAMEHASH(${1:Interior interior}, ${2:Vector3* position}, ${3:Hash* nameHash})"
      ],
      "description": "GET_INTERIOR_LOCATION_AND_NAMEHASH()"
    },
    "GET_INTERIOR_GROUP_ID": {
      "prefix": "GET_INTERIOR_GROUP_ID()",
      "body": ["GET_INTERIOR_GROUP_ID(${1:Interior interior})"],
      "description": "GET_INTERIOR_GROUP_ID()"
    },
    "GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS": {
      "prefix": "GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS()",
      "body": [
        "GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS(${1:Interior interior}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS()"
    },
    "IS_INTERIOR_SCENE": {
      "prefix": "IS_INTERIOR_SCENE()",
      "body": ["IS_INTERIOR_SCENE()"],
      "description": "IS_INTERIOR_SCENE()"
    },
    "IS_VALID_INTERIOR": {
      "prefix": "IS_VALID_INTERIOR()",
      "body": ["IS_VALID_INTERIOR(${1:Interior interior})"],
      "description": "IS_VALID_INTERIOR()"
    },
    "CLEAR_ROOM_FOR_ENTITY": {
      "prefix": "CLEAR_ROOM_FOR_ENTITY()",
      "body": ["CLEAR_ROOM_FOR_ENTITY(${1:Entity entity})"],
      "description": "CLEAR_ROOM_FOR_ENTITY()"
    },
    "FORCE_ROOM_FOR_ENTITY": {
      "prefix": "FORCE_ROOM_FOR_ENTITY()",
      "body": [
        "FORCE_ROOM_FOR_ENTITY(${1:Entity entity}, ${2:Interior interior}, ${3:Hash roomHashKey})"
      ],
      "description": "FORCE_ROOM_FOR_ENTITY()"
    },
    "GET_ROOM_KEY_FROM_ENTITY": {
      "prefix": "GET_ROOM_KEY_FROM_ENTITY()",
      "body": ["GET_ROOM_KEY_FROM_ENTITY(${1:Entity entity})"],
      "description": "GET_ROOM_KEY_FROM_ENTITY()"
    },
    "GET_KEY_FOR_ENTITY_IN_ROOM": {
      "prefix": "GET_KEY_FOR_ENTITY_IN_ROOM()",
      "body": ["GET_KEY_FOR_ENTITY_IN_ROOM(${1:Entity entity})"],
      "description": "GET_KEY_FOR_ENTITY_IN_ROOM()"
    },
    "GET_INTERIOR_FROM_ENTITY": {
      "prefix": "GET_INTERIOR_FROM_ENTITY()",
      "body": ["GET_INTERIOR_FROM_ENTITY(${1:Entity entity})"],
      "description": "GET_INTERIOR_FROM_ENTITY()"
    },
    "RETAIN_ENTITY_IN_INTERIOR": {
      "prefix": "RETAIN_ENTITY_IN_INTERIOR()",
      "body": [
        "RETAIN_ENTITY_IN_INTERIOR(${1:Entity entity}, ${2:Interior interior})"
      ],
      "description": "RETAIN_ENTITY_IN_INTERIOR()"
    },
    "CLEAR_INTERIOR_STATE_OF_ENTITY": {
      "prefix": "CLEAR_INTERIOR_STATE_OF_ENTITY()",
      "body": ["CLEAR_INTERIOR_STATE_OF_ENTITY(${1:Entity entity})"],
      "description": "CLEAR_INTERIOR_STATE_OF_ENTITY()"
    },
    "FORCE_ACTIVATING_TRACKING_ON_ENTITY": {
      "prefix": "FORCE_ACTIVATING_TRACKING_ON_ENTITY()",
      "body": ["FORCE_ACTIVATING_TRACKING_ON_ENTITY(${1:Any p0}, ${2:Any p1})"],
      "description": "FORCE_ACTIVATING_TRACKING_ON_ENTITY()"
    },
    "FORCE_ROOM_FOR_GAME_VIEWPORT": {
      "prefix": "FORCE_ROOM_FOR_GAME_VIEWPORT()",
      "body": [
        "FORCE_ROOM_FOR_GAME_VIEWPORT(${1:int interiorID}, ${2:Hash roomHashKey})"
      ],
      "description": "FORCE_ROOM_FOR_GAME_VIEWPORT()"
    },
    "SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME": {
      "prefix": "SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME()",
      "body": ["SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME(${1:const char* roomName})"],
      "description": "SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME()"
    },
    "SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY": {
      "prefix": "SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY()",
      "body": ["SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(${1:Hash roomHashKey})"],
      "description": "SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY()"
    },
    "GET_ROOM_KEY_FOR_GAME_VIEWPORT": {
      "prefix": "GET_ROOM_KEY_FOR_GAME_VIEWPORT()",
      "body": ["GET_ROOM_KEY_FOR_GAME_VIEWPORT()"],
      "description": "GET_ROOM_KEY_FOR_GAME_VIEWPORT()"
    },
    "CLEAR_ROOM_FOR_GAME_VIEWPORT": {
      "prefix": "CLEAR_ROOM_FOR_GAME_VIEWPORT()",
      "body": ["CLEAR_ROOM_FOR_GAME_VIEWPORT()"],
      "description": "CLEAR_ROOM_FOR_GAME_VIEWPORT()"
    },
    "GET_INTERIOR_FROM_PRIMARY_VIEW": {
      "prefix": "GET_INTERIOR_FROM_PRIMARY_VIEW()",
      "body": ["GET_INTERIOR_FROM_PRIMARY_VIEW()"],
      "description": "GET_INTERIOR_FROM_PRIMARY_VIEW()"
    },
    "GET_INTERIOR_AT_COORDS": {
      "prefix": "GET_INTERIOR_AT_COORDS()",
      "body": [
        "GET_INTERIOR_AT_COORDS(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "GET_INTERIOR_AT_COORDS()"
    },
    "ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME": {
      "prefix": "ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME()",
      "body": [
        "ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME(${1:Pickup pickup}, ${2:const char* roomName})"
      ],
      "description": "ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME()"
    },
    "PIN_INTERIOR_IN_MEMORY": {
      "prefix": "PIN_INTERIOR_IN_MEMORY()",
      "body": ["PIN_INTERIOR_IN_MEMORY(${1:Interior interior})"],
      "description": "PIN_INTERIOR_IN_MEMORY()"
    },
    "UNPIN_INTERIOR": {
      "prefix": "UNPIN_INTERIOR()",
      "body": ["UNPIN_INTERIOR(${1:Interior interior})"],
      "description": "UNPIN_INTERIOR()"
    },
    "IS_INTERIOR_READY": {
      "prefix": "IS_INTERIOR_READY()",
      "body": ["IS_INTERIOR_READY(${1:Interior interior})"],
      "description": "IS_INTERIOR_READY()"
    },
    "SET_INTERIOR_IN_USE": {
      "prefix": "SET_INTERIOR_IN_USE()",
      "body": ["SET_INTERIOR_IN_USE(${1:Interior interior})"],
      "description": "SET_INTERIOR_IN_USE()"
    },
    "GET_INTERIOR_AT_COORDS_WITH_TYPE": {
      "prefix": "GET_INTERIOR_AT_COORDS_WITH_TYPE()",
      "body": [
        "GET_INTERIOR_AT_COORDS_WITH_TYPE(${1:float x}, ${2:float y}, ${3:float z}, ${4:const char* interiorType})"
      ],
      "description": "GET_INTERIOR_AT_COORDS_WITH_TYPE()"
    },
    "GET_INTERIOR_AT_COORDS_WITH_TYPEHASH": {
      "prefix": "GET_INTERIOR_AT_COORDS_WITH_TYPEHASH()",
      "body": [
        "GET_INTERIOR_AT_COORDS_WITH_TYPEHASH(${1:float x}, ${2:float y}, ${3:float z}, ${4:Hash typeHash})"
      ],
      "description": "GET_INTERIOR_AT_COORDS_WITH_TYPEHASH()"
    },
    "ACTIVATE_INTERIOR_GROUPS_USING_CAMERA": {
      "prefix": "ACTIVATE_INTERIOR_GROUPS_USING_CAMERA()",
      "body": ["ACTIVATE_INTERIOR_GROUPS_USING_CAMERA()"],
      "description": "ACTIVATE_INTERIOR_GROUPS_USING_CAMERA()"
    },
    "IS_COLLISION_MARKED_OUTSIDE": {
      "prefix": "IS_COLLISION_MARKED_OUTSIDE()",
      "body": [
        "IS_COLLISION_MARKED_OUTSIDE(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "IS_COLLISION_MARKED_OUTSIDE()"
    },
    "GET_INTERIOR_FROM_COLLISION": {
      "prefix": "GET_INTERIOR_FROM_COLLISION()",
      "body": [
        "GET_INTERIOR_FROM_COLLISION(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "GET_INTERIOR_FROM_COLLISION()"
    },
    "ENABLE_STADIUM_PROBES_THIS_FRAME": {
      "prefix": "ENABLE_STADIUM_PROBES_THIS_FRAME()",
      "body": ["ENABLE_STADIUM_PROBES_THIS_FRAME(${1:BOOL toggle})"],
      "description": "ENABLE_STADIUM_PROBES_THIS_FRAME()"
    },
    "ACTIVATE_INTERIOR_ENTITY_SET": {
      "prefix": "ACTIVATE_INTERIOR_ENTITY_SET()",
      "body": [
        "ACTIVATE_INTERIOR_ENTITY_SET(${1:Interior interior}, ${2:const char* entitySetName})"
      ],
      "description": "ACTIVATE_INTERIOR_ENTITY_SET()"
    },
    "DEACTIVATE_INTERIOR_ENTITY_SET": {
      "prefix": "DEACTIVATE_INTERIOR_ENTITY_SET()",
      "body": [
        "DEACTIVATE_INTERIOR_ENTITY_SET(${1:Interior interior}, ${2:const char* entitySetName})"
      ],
      "description": "DEACTIVATE_INTERIOR_ENTITY_SET()"
    },
    "IS_INTERIOR_ENTITY_SET_ACTIVE": {
      "prefix": "IS_INTERIOR_ENTITY_SET_ACTIVE()",
      "body": [
        "IS_INTERIOR_ENTITY_SET_ACTIVE(${1:Interior interior}, ${2:const char* entitySetName})"
      ],
      "description": "IS_INTERIOR_ENTITY_SET_ACTIVE()"
    },
    "SET_INTERIOR_ENTITY_SET_TINT_INDEX": {
      "prefix": "SET_INTERIOR_ENTITY_SET_TINT_INDEX()",
      "body": [
        "SET_INTERIOR_ENTITY_SET_TINT_INDEX(${1:Interior interior}, ${2:const char* entitySetName}, ${3:int color})"
      ],
      "description": "SET_INTERIOR_ENTITY_SET_TINT_INDEX()"
    },
    "REFRESH_INTERIOR": {
      "prefix": "REFRESH_INTERIOR()",
      "body": ["REFRESH_INTERIOR(${1:Interior interior})"],
      "description": "REFRESH_INTERIOR()"
    },
    "ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME": {
      "prefix": "ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME()",
      "body": ["ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME(${1:Hash mapObjectHash})"],
      "description": "ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME()"
    },
    "ENABLE_SHADOW_CULL_MODEL_THIS_FRAME": {
      "prefix": "ENABLE_SHADOW_CULL_MODEL_THIS_FRAME()",
      "body": ["ENABLE_SHADOW_CULL_MODEL_THIS_FRAME(${1:Hash mapObjectHash})"],
      "description": "ENABLE_SHADOW_CULL_MODEL_THIS_FRAME()"
    },
    "DISABLE_INTERIOR": {
      "prefix": "DISABLE_INTERIOR()",
      "body": ["DISABLE_INTERIOR(${1:Interior interior}, ${2:BOOL toggle})"],
      "description": "DISABLE_INTERIOR()"
    },
    "IS_INTERIOR_DISABLED": {
      "prefix": "IS_INTERIOR_DISABLED()",
      "body": ["IS_INTERIOR_DISABLED(${1:Interior interior})"],
      "description": "IS_INTERIOR_DISABLED()"
    },
    "CAP_INTERIOR": {
      "prefix": "CAP_INTERIOR()",
      "body": ["CAP_INTERIOR(${1:Interior interior}, ${2:BOOL toggle})"],
      "description": "CAP_INTERIOR()"
    },
    "IS_INTERIOR_CAPPED": {
      "prefix": "IS_INTERIOR_CAPPED()",
      "body": ["IS_INTERIOR_CAPPED(${1:Interior interior})"],
      "description": "IS_INTERIOR_CAPPED()"
    },
    "DISABLE_METRO_SYSTEM": {
      "prefix": "DISABLE_METRO_SYSTEM()",
      "body": ["DISABLE_METRO_SYSTEM(${1:BOOL toggle})"],
      "description": "DISABLE_METRO_SYSTEM()"
    },
    "SET_IS_EXTERIOR_ONLY": {
      "prefix": "SET_IS_EXTERIOR_ONLY()",
      "body": ["SET_IS_EXTERIOR_ONLY(${1:Entity entity}, ${2:BOOL toggle})"],
      "description": "SET_IS_EXTERIOR_ONLY()"
    },
    "CREATE_ITEMSET": {
      "prefix": "CREATE_ITEMSET()",
      "body": ["CREATE_ITEMSET(${1:BOOL p0})"],
      "description": "CREATE_ITEMSET()"
    },
    "DESTROY_ITEMSET": {
      "prefix": "DESTROY_ITEMSET()",
      "body": ["DESTROY_ITEMSET(${1:ScrHandle itemset})"],
      "description": "DESTROY_ITEMSET()"
    },
    "IS_ITEMSET_VALID": {
      "prefix": "IS_ITEMSET_VALID()",
      "body": ["IS_ITEMSET_VALID(${1:ScrHandle itemset})"],
      "description": "IS_ITEMSET_VALID()"
    },
    "ADD_TO_ITEMSET": {
      "prefix": "ADD_TO_ITEMSET()",
      "body": ["ADD_TO_ITEMSET(${1:ScrHandle item}, ${2:ScrHandle itemset})"],
      "description": "ADD_TO_ITEMSET()"
    },
    "REMOVE_FROM_ITEMSET": {
      "prefix": "REMOVE_FROM_ITEMSET()",
      "body": [
        "REMOVE_FROM_ITEMSET(${1:ScrHandle item}, ${2:ScrHandle itemset})"
      ],
      "description": "REMOVE_FROM_ITEMSET()"
    },
    "GET_ITEMSET_SIZE": {
      "prefix": "GET_ITEMSET_SIZE()",
      "body": ["GET_ITEMSET_SIZE(${1:ScrHandle itemset})"],
      "description": "GET_ITEMSET_SIZE()"
    },
    "GET_INDEXED_ITEM_IN_ITEMSET": {
      "prefix": "GET_INDEXED_ITEM_IN_ITEMSET()",
      "body": [
        "GET_INDEXED_ITEM_IN_ITEMSET(${1:int index}, ${2:ScrHandle itemset})"
      ],
      "description": "GET_INDEXED_ITEM_IN_ITEMSET()"
    },
    "IS_IN_ITEMSET": {
      "prefix": "IS_IN_ITEMSET()",
      "body": ["IS_IN_ITEMSET(${1:ScrHandle item}, ${2:ScrHandle itemset})"],
      "description": "IS_IN_ITEMSET()"
    },
    "CLEAN_ITEMSET": {
      "prefix": "CLEAN_ITEMSET()",
      "body": ["CLEAN_ITEMSET(${1:ScrHandle itemset})"],
      "description": "CLEAN_ITEMSET()"
    },
    "LOBBY_AUTO_MULTIPLAYER_MENU": {
      "prefix": "LOBBY_AUTO_MULTIPLAYER_MENU()",
      "body": ["LOBBY_AUTO_MULTIPLAYER_MENU()"],
      "description": "LOBBY_AUTO_MULTIPLAYER_MENU()"
    },
    "LOBBY_AUTO_MULTIPLAYER_FREEMODE": {
      "prefix": "LOBBY_AUTO_MULTIPLAYER_FREEMODE()",
      "body": ["LOBBY_AUTO_MULTIPLAYER_FREEMODE()"],
      "description": "LOBBY_AUTO_MULTIPLAYER_FREEMODE()"
    },
    "LOBBY_SET_AUTO_MULTIPLAYER": {
      "prefix": "LOBBY_SET_AUTO_MULTIPLAYER()",
      "body": ["LOBBY_SET_AUTO_MULTIPLAYER(${1:BOOL toggle})"],
      "description": "LOBBY_SET_AUTO_MULTIPLAYER()"
    },
    "LOBBY_AUTO_MULTIPLAYER_EVENT": {
      "prefix": "LOBBY_AUTO_MULTIPLAYER_EVENT()",
      "body": ["LOBBY_AUTO_MULTIPLAYER_EVENT()"],
      "description": "LOBBY_AUTO_MULTIPLAYER_EVENT()"
    },
    "LOBBY_SET_AUTO_MULTIPLAYER_EVENT": {
      "prefix": "LOBBY_SET_AUTO_MULTIPLAYER_EVENT()",
      "body": ["LOBBY_SET_AUTO_MULTIPLAYER_EVENT(${1:BOOL toggle})"],
      "description": "LOBBY_SET_AUTO_MULTIPLAYER_EVENT()"
    },
    "LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB": {
      "prefix": "LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB()",
      "body": ["LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB()"],
      "description": "LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB()"
    },
    "LOBBY_SET_AUTO_MP_RANDOM_JOB": {
      "prefix": "LOBBY_SET_AUTO_MP_RANDOM_JOB()",
      "body": ["LOBBY_SET_AUTO_MP_RANDOM_JOB(${1:BOOL toggle})"],
      "description": "LOBBY_SET_AUTO_MP_RANDOM_JOB()"
    },
    "SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER": {
      "prefix": "SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER()",
      "body": ["SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER(${1:BOOL toggle})"],
      "description": "SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER()"
    },
    "LOCALIZATION_GET_SYSTEM_LANGUAGE": {
      "prefix": "LOCALIZATION_GET_SYSTEM_LANGUAGE()",
      "body": ["LOCALIZATION_GET_SYSTEM_LANGUAGE()"],
      "description": "LOCALIZATION_GET_SYSTEM_LANGUAGE()"
    },
    "GET_CURRENT_LANGUAGE": {
      "prefix": "GET_CURRENT_LANGUAGE()",
      "body": ["GET_CURRENT_LANGUAGE()"],
      "description": "GET_CURRENT_LANGUAGE()"
    },
    "LOCALIZATION_GET_SYSTEM_DATE_TYPE": {
      "prefix": "LOCALIZATION_GET_SYSTEM_DATE_TYPE()",
      "body": ["LOCALIZATION_GET_SYSTEM_DATE_TYPE()"],
      "description": "LOCALIZATION_GET_SYSTEM_DATE_TYPE()"
    },
    "GET_ALLOCATED_STACK_SIZE": {
      "prefix": "GET_ALLOCATED_STACK_SIZE()",
      "body": ["GET_ALLOCATED_STACK_SIZE()"],
      "description": "GET_ALLOCATED_STACK_SIZE()"
    },
    "GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE": {
      "prefix": "GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE()",
      "body": ["GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE(${1:int stackSize})"],
      "description": "GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE()"
    },
    "SET_RANDOM_SEED": {
      "prefix": "SET_RANDOM_SEED()",
      "body": ["SET_RANDOM_SEED(${1:int seed})"],
      "description": "SET_RANDOM_SEED()"
    },
    "SET_TIME_SCALE": {
      "prefix": "SET_TIME_SCALE()",
      "body": ["SET_TIME_SCALE(${1:float timeScale})"],
      "description": "SET_TIME_SCALE()"
    },
    "SET_MISSION_FLAG": {
      "prefix": "SET_MISSION_FLAG()",
      "body": ["SET_MISSION_FLAG(${1:BOOL toggle})"],
      "description": "SET_MISSION_FLAG()"
    },
    "GET_MISSION_FLAG": {
      "prefix": "GET_MISSION_FLAG()",
      "body": ["GET_MISSION_FLAG()"],
      "description": "GET_MISSION_FLAG()"
    },
    "SET_RANDOM_EVENT_FLAG": {
      "prefix": "SET_RANDOM_EVENT_FLAG()",
      "body": ["SET_RANDOM_EVENT_FLAG(${1:BOOL toggle})"],
      "description": "SET_RANDOM_EVENT_FLAG()"
    },
    "GET_RANDOM_EVENT_FLAG": {
      "prefix": "GET_RANDOM_EVENT_FLAG()",
      "body": ["GET_RANDOM_EVENT_FLAG()"],
      "description": "GET_RANDOM_EVENT_FLAG()"
    },
    "ACTIVITY_FEED_CREATE": {
      "prefix": "ACTIVITY_FEED_CREATE()",
      "body": ["ACTIVITY_FEED_CREATE(${1:const char* p0}, ${2:const char* p1})"],
      "description": "ACTIVITY_FEED_CREATE()"
    },
    "ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION": {
      "prefix": "ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION()",
      "body": ["ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION(${1:const char* p0})"],
      "description": "ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION()"
    },
    "ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION": {
      "prefix": "ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION()",
      "body": [
        "ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION(${1:const char* p0})"
      ],
      "description": "ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION()"
    },
    "ACTIVITY_FEED_ADD_INT_TO_CAPTION": {
      "prefix": "ACTIVITY_FEED_ADD_INT_TO_CAPTION()",
      "body": ["ACTIVITY_FEED_ADD_INT_TO_CAPTION(${1:Any p0})"],
      "description": "ACTIVITY_FEED_ADD_INT_TO_CAPTION()"
    },
    "ACTIVITY_FEED_LARGE_IMAGE_URL": {
      "prefix": "ACTIVITY_FEED_LARGE_IMAGE_URL()",
      "body": ["ACTIVITY_FEED_LARGE_IMAGE_URL(${1:const char* p0})"],
      "description": "ACTIVITY_FEED_LARGE_IMAGE_URL()"
    },
    "ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE": {
      "prefix": "ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE()",
      "body": [
        "ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE(${1:const char* p0}, ${2:const char* p1})"
      ],
      "description": "ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE()"
    },
    "ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD": {
      "prefix": "ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD()",
      "body": [
        "ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD(${1:const char* p0})"
      ],
      "description": "ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD()"
    },
    "ACTIVITY_FEED_POST": {
      "prefix": "ACTIVITY_FEED_POST()",
      "body": ["ACTIVITY_FEED_POST()"],
      "description": "ACTIVITY_FEED_POST()"
    },
    "ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST": {
      "prefix": "ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST()",
      "body": ["ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST(${1:const char* p0})"],
      "description": "ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST()"
    },
    "HAS_RESUMED_FROM_SUSPEND": {
      "prefix": "HAS_RESUMED_FROM_SUSPEND()",
      "body": ["HAS_RESUMED_FROM_SUSPEND()"],
      "description": "HAS_RESUMED_FROM_SUSPEND()"
    },
    "SET_SCRIPT_HIGH_PRIO": {
      "prefix": "SET_SCRIPT_HIGH_PRIO()",
      "body": ["SET_SCRIPT_HIGH_PRIO(${1:BOOL toggle})"],
      "description": "SET_SCRIPT_HIGH_PRIO()"
    },
    "SET_THIS_IS_A_TRIGGER_SCRIPT": {
      "prefix": "SET_THIS_IS_A_TRIGGER_SCRIPT()",
      "body": ["SET_THIS_IS_A_TRIGGER_SCRIPT(${1:BOOL toggle})"],
      "description": "SET_THIS_IS_A_TRIGGER_SCRIPT()"
    },
    "INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION": {
      "prefix": "INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION()",
      "body": [
        "INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION(${1:const char* p0})"
      ],
      "description": "INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION()"
    },
    "GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK": {
      "prefix": "GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK()",
      "body": [
        "GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK(${1:Any* p0}, ${2:Any* p1}, ${3:Any p2}, ${4:BOOL p3})"
      ],
      "description": "GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK()"
    },
    "GET_PREV_WEATHER_TYPE_HASH_NAME": {
      "prefix": "GET_PREV_WEATHER_TYPE_HASH_NAME()",
      "body": ["GET_PREV_WEATHER_TYPE_HASH_NAME()"],
      "description": "GET_PREV_WEATHER_TYPE_HASH_NAME()"
    },
    "GET_NEXT_WEATHER_TYPE_HASH_NAME": {
      "prefix": "GET_NEXT_WEATHER_TYPE_HASH_NAME()",
      "body": ["GET_NEXT_WEATHER_TYPE_HASH_NAME()"],
      "description": "GET_NEXT_WEATHER_TYPE_HASH_NAME()"
    },
    "IS_PREV_WEATHER_TYPE": {
      "prefix": "IS_PREV_WEATHER_TYPE()",
      "body": ["IS_PREV_WEATHER_TYPE(${1:const char* weatherType})"],
      "description": "IS_PREV_WEATHER_TYPE()"
    },
    "IS_NEXT_WEATHER_TYPE": {
      "prefix": "IS_NEXT_WEATHER_TYPE()",
      "body": ["IS_NEXT_WEATHER_TYPE(${1:const char* weatherType})"],
      "description": "IS_NEXT_WEATHER_TYPE()"
    },
    "SET_WEATHER_TYPE_PERSIST": {
      "prefix": "SET_WEATHER_TYPE_PERSIST()",
      "body": ["SET_WEATHER_TYPE_PERSIST(${1:const char* weatherType})"],
      "description": "SET_WEATHER_TYPE_PERSIST()"
    },
    "SET_WEATHER_TYPE_NOW_PERSIST": {
      "prefix": "SET_WEATHER_TYPE_NOW_PERSIST()",
      "body": ["SET_WEATHER_TYPE_NOW_PERSIST(${1:const char* weatherType})"],
      "description": "SET_WEATHER_TYPE_NOW_PERSIST()"
    },
    "SET_WEATHER_TYPE_NOW": {
      "prefix": "SET_WEATHER_TYPE_NOW()",
      "body": ["SET_WEATHER_TYPE_NOW(${1:const char* weatherType})"],
      "description": "SET_WEATHER_TYPE_NOW()"
    },
    "SET_WEATHER_TYPE_OVERTIME_PERSIST": {
      "prefix": "SET_WEATHER_TYPE_OVERTIME_PERSIST()",
      "body": [
        "SET_WEATHER_TYPE_OVERTIME_PERSIST(${1:const char* weatherType}, ${2:float time})"
      ],
      "description": "SET_WEATHER_TYPE_OVERTIME_PERSIST()"
    },
    "SET_RANDOM_WEATHER_TYPE": {
      "prefix": "SET_RANDOM_WEATHER_TYPE()",
      "body": ["SET_RANDOM_WEATHER_TYPE()"],
      "description": "SET_RANDOM_WEATHER_TYPE()"
    },
    "CLEAR_WEATHER_TYPE_PERSIST": {
      "prefix": "CLEAR_WEATHER_TYPE_PERSIST()",
      "body": ["CLEAR_WEATHER_TYPE_PERSIST()"],
      "description": "CLEAR_WEATHER_TYPE_PERSIST()"
    },
    "CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK": {
      "prefix": "CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK()",
      "body": ["CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK(${1:int milliseconds})"],
      "description": "CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK()"
    },
    "GET_CURR_WEATHER_STATE": {
      "prefix": "GET_CURR_WEATHER_STATE()",
      "body": [
        "GET_CURR_WEATHER_STATE(${1:Hash* weatherType1}, ${2:Hash* weatherType2}, ${3:float* percentWeather2})"
      ],
      "description": "GET_CURR_WEATHER_STATE()"
    },
    "SET_CURR_WEATHER_STATE": {
      "prefix": "SET_CURR_WEATHER_STATE()",
      "body": [
        "SET_CURR_WEATHER_STATE(${1:Hash weatherType1}, ${2:Hash weatherType2}, ${3:float percentWeather2})"
      ],
      "description": "SET_CURR_WEATHER_STATE()"
    },
    "SET_OVERRIDE_WEATHER": {
      "prefix": "SET_OVERRIDE_WEATHER()",
      "body": ["SET_OVERRIDE_WEATHER(${1:const char* weatherType})"],
      "description": "SET_OVERRIDE_WEATHER()"
    },
    "SET_OVERRIDE_WEATHEREX": {
      "prefix": "SET_OVERRIDE_WEATHEREX()",
      "body": [
        "SET_OVERRIDE_WEATHEREX(${1:const char* weatherType}, ${2:BOOL p1})"
      ],
      "description": "SET_OVERRIDE_WEATHEREX()"
    },
    "CLEAR_OVERRIDE_WEATHER": {
      "prefix": "CLEAR_OVERRIDE_WEATHER()",
      "body": ["CLEAR_OVERRIDE_WEATHER()"],
      "description": "CLEAR_OVERRIDE_WEATHER()"
    },
    "WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE": {
      "prefix": "WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE()",
      "body": ["WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE(${1:float amplitude})"],
      "description": "WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE()"
    },
    "WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE": {
      "prefix": "WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE()",
      "body": [
        "WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE(${1:float minAmplitude})"
      ],
      "description": "WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE()"
    },
    "WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE": {
      "prefix": "WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE()",
      "body": [
        "WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE(${1:float maxAmplitude})"
      ],
      "description": "WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE()"
    },
    "WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE": {
      "prefix": "WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE()",
      "body": [
        "WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE(${1:float minAmplitude})"
      ],
      "description": "WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE()"
    },
    "WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE": {
      "prefix": "WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE()",
      "body": ["WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE(${1:float amplitude})"],
      "description": "WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE()"
    },
    "WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE": {
      "prefix": "WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE()",
      "body": [
        "WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE(${1:float minAmplitude})"
      ],
      "description": "WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE()"
    },
    "WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE": {
      "prefix": "WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE()",
      "body": [
        "WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE(${1:float maxAmplitude})"
      ],
      "description": "WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE()"
    },
    "WATER_OVERRIDE_SET_RIPPLEBUMPINESS": {
      "prefix": "WATER_OVERRIDE_SET_RIPPLEBUMPINESS()",
      "body": ["WATER_OVERRIDE_SET_RIPPLEBUMPINESS(${1:float bumpiness})"],
      "description": "WATER_OVERRIDE_SET_RIPPLEBUMPINESS()"
    },
    "WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS": {
      "prefix": "WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS()",
      "body": ["WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS(${1:float minBumpiness})"],
      "description": "WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS()"
    },
    "WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS": {
      "prefix": "WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS()",
      "body": ["WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS(${1:float maxBumpiness})"],
      "description": "WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS()"
    },
    "WATER_OVERRIDE_SET_RIPPLEDISTURB": {
      "prefix": "WATER_OVERRIDE_SET_RIPPLEDISTURB()",
      "body": ["WATER_OVERRIDE_SET_RIPPLEDISTURB(${1:float disturb})"],
      "description": "WATER_OVERRIDE_SET_RIPPLEDISTURB()"
    },
    "WATER_OVERRIDE_SET_STRENGTH": {
      "prefix": "WATER_OVERRIDE_SET_STRENGTH()",
      "body": ["WATER_OVERRIDE_SET_STRENGTH(${1:float strength})"],
      "description": "WATER_OVERRIDE_SET_STRENGTH()"
    },
    "WATER_OVERRIDE_FADE_IN": {
      "prefix": "WATER_OVERRIDE_FADE_IN()",
      "body": ["WATER_OVERRIDE_FADE_IN(${1:float p0})"],
      "description": "WATER_OVERRIDE_FADE_IN()"
    },
    "WATER_OVERRIDE_FADE_OUT": {
      "prefix": "WATER_OVERRIDE_FADE_OUT()",
      "body": ["WATER_OVERRIDE_FADE_OUT(${1:float p0})"],
      "description": "WATER_OVERRIDE_FADE_OUT()"
    },
    "SET_WIND": {
      "prefix": "SET_WIND()",
      "body": ["SET_WIND(${1:float speed})"],
      "description": "SET_WIND()"
    },
    "SET_WIND_SPEED": {
      "prefix": "SET_WIND_SPEED()",
      "body": ["SET_WIND_SPEED(${1:float speed})"],
      "description": "SET_WIND_SPEED()"
    },
    "GET_WIND_SPEED": {
      "prefix": "GET_WIND_SPEED()",
      "body": ["GET_WIND_SPEED()"],
      "description": "GET_WIND_SPEED()"
    },
    "SET_WIND_DIRECTION": {
      "prefix": "SET_WIND_DIRECTION()",
      "body": ["SET_WIND_DIRECTION(${1:float direction})"],
      "description": "SET_WIND_DIRECTION()"
    },
    "GET_WIND_DIRECTION": {
      "prefix": "GET_WIND_DIRECTION()",
      "body": ["GET_WIND_DIRECTION()"],
      "description": "GET_WIND_DIRECTION()"
    },
    "SET_RAIN": {
      "prefix": "SET_RAIN()",
      "body": ["SET_RAIN(${1:float intensity})"],
      "description": "SET_RAIN()"
    },
    "GET_RAIN_LEVEL": {
      "prefix": "GET_RAIN_LEVEL()",
      "body": ["GET_RAIN_LEVEL()"],
      "description": "GET_RAIN_LEVEL()"
    },
    "SET_SNOW": {
      "prefix": "SET_SNOW()",
      "body": ["SET_SNOW(${1:float level})"],
      "description": "SET_SNOW()"
    },
    "GET_SNOW_LEVEL": {
      "prefix": "GET_SNOW_LEVEL()",
      "body": ["GET_SNOW_LEVEL()"],
      "description": "GET_SNOW_LEVEL()"
    },
    "FORCE_LIGHTNING_FLASH": {
      "prefix": "FORCE_LIGHTNING_FLASH()",
      "body": ["FORCE_LIGHTNING_FLASH()"],
      "description": "FORCE_LIGHTNING_FLASH()"
    },
    "SET_CLOUD_SETTINGS_OVERRIDE": {
      "prefix": "SET_CLOUD_SETTINGS_OVERRIDE()",
      "body": ["SET_CLOUD_SETTINGS_OVERRIDE(${1:const char* p0})"],
      "description": "SET_CLOUD_SETTINGS_OVERRIDE()"
    },
    "PRELOAD_CLOUD_HAT": {
      "prefix": "PRELOAD_CLOUD_HAT()",
      "body": ["PRELOAD_CLOUD_HAT(${1:const char* name})"],
      "description": "PRELOAD_CLOUD_HAT()"
    },
    "LOAD_CLOUD_HAT": {
      "prefix": "LOAD_CLOUD_HAT()",
      "body": [
        "LOAD_CLOUD_HAT(${1:const char* name}, ${2:float transitionTime})"
      ],
      "description": "LOAD_CLOUD_HAT()"
    },
    "UNLOAD_CLOUD_HAT": {
      "prefix": "UNLOAD_CLOUD_HAT()",
      "body": ["UNLOAD_CLOUD_HAT(${1:const char* name}, ${2:float p1})"],
      "description": "UNLOAD_CLOUD_HAT()"
    },
    "UNLOAD_ALL_CLOUD_HATS": {
      "prefix": "UNLOAD_ALL_CLOUD_HATS()",
      "body": ["UNLOAD_ALL_CLOUD_HATS()"],
      "description": "UNLOAD_ALL_CLOUD_HATS()"
    },
    "SET_CLOUDS_ALPHA": {
      "prefix": "SET_CLOUDS_ALPHA()",
      "body": ["SET_CLOUDS_ALPHA(${1:float opacity})"],
      "description": "SET_CLOUDS_ALPHA()"
    },
    "GET_CLOUDS_ALPHA": {
      "prefix": "GET_CLOUDS_ALPHA()",
      "body": ["GET_CLOUDS_ALPHA()"],
      "description": "GET_CLOUDS_ALPHA()"
    },
    "GET_GAME_TIMER": {
      "prefix": "GET_GAME_TIMER()",
      "body": ["GET_GAME_TIMER()"],
      "description": "GET_GAME_TIMER()"
    },
    "GET_FRAME_TIME": {
      "prefix": "GET_FRAME_TIME()",
      "body": ["GET_FRAME_TIME()"],
      "description": "GET_FRAME_TIME()"
    },
    "GET_SYSTEM_TIME_STEP": {
      "prefix": "GET_SYSTEM_TIME_STEP()",
      "body": ["GET_SYSTEM_TIME_STEP()"],
      "description": "GET_SYSTEM_TIME_STEP()"
    },
    "GET_FRAME_COUNT": {
      "prefix": "GET_FRAME_COUNT()",
      "body": ["GET_FRAME_COUNT()"],
      "description": "GET_FRAME_COUNT()"
    },
    "GET_RANDOM_FLOAT_IN_RANGE": {
      "prefix": "GET_RANDOM_FLOAT_IN_RANGE()",
      "body": [
        "GET_RANDOM_FLOAT_IN_RANGE(${1:float startRange}, ${2:float endRange})"
      ],
      "description": "GET_RANDOM_FLOAT_IN_RANGE()"
    },
    "GET_RANDOM_INT_IN_RANGE": {
      "prefix": "GET_RANDOM_INT_IN_RANGE()",
      "body": ["GET_RANDOM_INT_IN_RANGE(${1:int startRange}, ${2:int endRange})"],
      "description": "GET_RANDOM_INT_IN_RANGE()"
    },
    "GET_RANDOM_MWC_INT_IN_RANGE": {
      "prefix": "GET_RANDOM_MWC_INT_IN_RANGE()",
      "body": [
        "GET_RANDOM_MWC_INT_IN_RANGE(${1:int startRange}, ${2:int endRange})"
      ],
      "description": "GET_RANDOM_MWC_INT_IN_RANGE()"
    },
    "GET_GROUND_Z_FOR_3D_COORD": {
      "prefix": "GET_GROUND_Z_FOR_3D_COORD()",
      "body": [
        "GET_GROUND_Z_FOR_3D_COORD(${1:float x}, ${2:float y}, ${3:float z}, ${4:float* groundZ}, ${5:BOOL ignoreWater}, ${6:BOOL p5})"
      ],
      "description": "GET_GROUND_Z_FOR_3D_COORD()"
    },
    "GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD": {
      "prefix": "GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD()",
      "body": [
        "GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD(${1:float x}, ${2:float y}, ${3:float z}, ${4:float* groundZ}, ${5:Vector3* normal})"
      ],
      "description": "GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD()"
    },
    "GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD": {
      "prefix": "GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD()",
      "body": [
        "GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD(${1:float x}, ${2:float y}, ${3:float z}, ${4:float* groundZ}, ${5:BOOL p4}, ${6:BOOL p5})"
      ],
      "description": "GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD()"
    },
    "ASIN": {
      "prefix": "ASIN()",
      "body": ["ASIN(${1:float p0})"],
      "description": "ASIN()"
    },
    "ACOS": {
      "prefix": "ACOS()",
      "body": ["ACOS(${1:float p0})"],
      "description": "ACOS()"
    },
    "TAN": {
      "prefix": "TAN()",
      "body": ["TAN(${1:float p0})"],
      "description": "TAN()"
    },
    "ATAN": {
      "prefix": "ATAN()",
      "body": ["ATAN(${1:float p0})"],
      "description": "ATAN()"
    },
    "ATAN2": {
      "prefix": "ATAN2()",
      "body": ["ATAN2(${1:float p0}, ${2:float p1})"],
      "description": "ATAN2()"
    },
    "GET_DISTANCE_BETWEEN_COORDS": {
      "prefix": "GET_DISTANCE_BETWEEN_COORDS()",
      "body": [
        "GET_DISTANCE_BETWEEN_COORDS(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:BOOL useZ})"
      ],
      "description": "GET_DISTANCE_BETWEEN_COORDS()"
    },
    "GET_ANGLE_BETWEEN_2D_VECTORS": {
      "prefix": "GET_ANGLE_BETWEEN_2D_VECTORS()",
      "body": [
        "GET_ANGLE_BETWEEN_2D_VECTORS(${1:float x1}, ${2:float y1}, ${3:float x2}, ${4:float y2})"
      ],
      "description": "GET_ANGLE_BETWEEN_2D_VECTORS()"
    },
    "GET_HEADING_FROM_VECTOR_2D": {
      "prefix": "GET_HEADING_FROM_VECTOR_2D()",
      "body": ["GET_HEADING_FROM_VECTOR_2D(${1:float dx}, ${2:float dy})"],
      "description": "GET_HEADING_FROM_VECTOR_2D()"
    },
    "GET_RATIO_OF_CLOSEST_POINT_ON_LINE": {
      "prefix": "GET_RATIO_OF_CLOSEST_POINT_ON_LINE()",
      "body": [
        "GET_RATIO_OF_CLOSEST_POINT_ON_LINE(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float x3}, ${8:float y3}, ${9:float z3}, ${10:BOOL clamp})"
      ],
      "description": "GET_RATIO_OF_CLOSEST_POINT_ON_LINE()"
    },
    "GET_CLOSEST_POINT_ON_LINE": {
      "prefix": "GET_CLOSEST_POINT_ON_LINE()",
      "body": [
        "GET_CLOSEST_POINT_ON_LINE(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float x3}, ${8:float y3}, ${9:float z3}, ${10:BOOL clamp})"
      ],
      "description": "GET_CLOSEST_POINT_ON_LINE()"
    },
    "GET_LINE_PLANE_INTERSECTION": {
      "prefix": "GET_LINE_PLANE_INTERSECTION()",
      "body": [
        "GET_LINE_PLANE_INTERSECTION(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:float p9}, ${11:float p10}, ${12:float p11}, ${13:float* p12})"
      ],
      "description": "GET_LINE_PLANE_INTERSECTION()"
    },
    "GET_POINT_AREA_OVERLAP": {
      "prefix": "GET_POINT_AREA_OVERLAP()",
      "body": [
        "GET_POINT_AREA_OVERLAP(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:Any p9}, ${11:Any p10}, ${12:Any p11}, ${13:Any p12}, ${14:Any p13})"
      ],
      "description": "GET_POINT_AREA_OVERLAP()"
    },
    "SET_BIT": {
      "prefix": "SET_BIT()",
      "body": ["SET_BIT(${1:int* address}, ${2:int offset})"],
      "description": "SET_BIT()"
    },
    "CLEAR_BIT": {
      "prefix": "CLEAR_BIT()",
      "body": ["CLEAR_BIT(${1:int* address}, ${2:int offset})"],
      "description": "CLEAR_BIT()"
    },
    "GET_HASH_KEY": {
      "prefix": "GET_HASH_KEY()",
      "body": ["GET_HASH_KEY(${1:const char* string})"],
      "description": "GET_HASH_KEY()"
    },
    "SLERP_NEAR_QUATERNION": {
      "prefix": "SLERP_NEAR_QUATERNION()",
      "body": [
        "SLERP_NEAR_QUATERNION(${1:float t}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float w}, ${6:float x1}, ${7:float y1}, ${8:float z1}, ${9:float w1}, ${10:float* outX}, ${11:float* outY}, ${12:float* outZ}, ${13:float* outW})"
      ],
      "description": "SLERP_NEAR_QUATERNION()"
    },
    "IS_AREA_OCCUPIED": {
      "prefix": "IS_AREA_OCCUPIED()",
      "body": [
        "IS_AREA_OCCUPIED(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:BOOL p6}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:BOOL p9}, ${11:BOOL p10}, ${12:Any p11}, ${13:BOOL p12})"
      ],
      "description": "IS_AREA_OCCUPIED()"
    },
    "IS_AREA_OCCUPIED_SLOW": {
      "prefix": "IS_AREA_OCCUPIED_SLOW()",
      "body": [
        "IS_AREA_OCCUPIED_SLOW(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:Any p9}, ${11:Any p10}, ${12:Any p11}, ${13:Any p12})"
      ],
      "description": "IS_AREA_OCCUPIED_SLOW()"
    },
    "IS_POSITION_OCCUPIED": {
      "prefix": "IS_POSITION_OCCUPIED()",
      "body": [
        "IS_POSITION_OCCUPIED(${1:float x}, ${2:float y}, ${3:float z}, ${4:float range}, ${5:BOOL p4}, ${6:BOOL checkVehicles}, ${7:BOOL checkPeds}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:Entity ignoreEntity}, ${11:BOOL p10})"
      ],
      "description": "IS_POSITION_OCCUPIED()"
    },
    "IS_POINT_OBSCURED_BY_A_MISSION_ENTITY": {
      "prefix": "IS_POINT_OBSCURED_BY_A_MISSION_ENTITY()",
      "body": [
        "IS_POINT_OBSCURED_BY_A_MISSION_ENTITY(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:Any p6})"
      ],
      "description": "IS_POINT_OBSCURED_BY_A_MISSION_ENTITY()"
    },
    "CLEAR_AREA": {
      "prefix": "CLEAR_AREA()",
      "body": [
        "CLEAR_AREA(${1:float X}, ${2:float Y}, ${3:float Z}, ${4:float radius}, ${5:BOOL p4}, ${6:BOOL ignoreCopCars}, ${7:BOOL ignoreObjects}, ${8:BOOL p7})"
      ],
      "description": "CLEAR_AREA()"
    },
    "CLEAR_AREA_LEAVE_VEHICLE_HEALTH": {
      "prefix": "CLEAR_AREA_LEAVE_VEHICLE_HEALTH()",
      "body": [
        "CLEAR_AREA_LEAVE_VEHICLE_HEALTH(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:BOOL p4}, ${6:BOOL p5}, ${7:BOOL p6}, ${8:BOOL p7})"
      ],
      "description": "CLEAR_AREA_LEAVE_VEHICLE_HEALTH()"
    },
    "CLEAR_AREA_OF_VEHICLES": {
      "prefix": "CLEAR_AREA_OF_VEHICLES()",
      "body": [
        "CLEAR_AREA_OF_VEHICLES(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:BOOL p4}, ${6:BOOL p5}, ${7:BOOL p6}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:BOOL p9}, ${11:Any p10})"
      ],
      "description": "CLEAR_AREA_OF_VEHICLES()"
    },
    "CLEAR_ANGLED_AREA_OF_VEHICLES": {
      "prefix": "CLEAR_ANGLED_AREA_OF_VEHICLES()",
      "body": [
        "CLEAR_ANGLED_AREA_OF_VEHICLES(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float width}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:BOOL p9}, ${11:BOOL p10}, ${12:BOOL p11}, ${13:Any p12}, ${14:Any p13})"
      ],
      "description": "CLEAR_ANGLED_AREA_OF_VEHICLES()"
    },
    "CLEAR_AREA_OF_OBJECTS": {
      "prefix": "CLEAR_AREA_OF_OBJECTS()",
      "body": [
        "CLEAR_AREA_OF_OBJECTS(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:int flags})"
      ],
      "description": "CLEAR_AREA_OF_OBJECTS()"
    },
    "CLEAR_AREA_OF_PEDS": {
      "prefix": "CLEAR_AREA_OF_PEDS()",
      "body": [
        "CLEAR_AREA_OF_PEDS(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:int flags})"
      ],
      "description": "CLEAR_AREA_OF_PEDS()"
    },
    "CLEAR_AREA_OF_COPS": {
      "prefix": "CLEAR_AREA_OF_COPS()",
      "body": [
        "CLEAR_AREA_OF_COPS(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:int flags})"
      ],
      "description": "CLEAR_AREA_OF_COPS()"
    },
    "CLEAR_AREA_OF_PROJECTILES": {
      "prefix": "CLEAR_AREA_OF_PROJECTILES()",
      "body": [
        "CLEAR_AREA_OF_PROJECTILES(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:int flags})"
      ],
      "description": "CLEAR_AREA_OF_PROJECTILES()"
    },
    "CLEAR_SCENARIO_SPAWN_HISTORY": {
      "prefix": "CLEAR_SCENARIO_SPAWN_HISTORY()",
      "body": ["CLEAR_SCENARIO_SPAWN_HISTORY()"],
      "description": "CLEAR_SCENARIO_SPAWN_HISTORY()"
    },
    "SET_SAVE_MENU_ACTIVE": {
      "prefix": "SET_SAVE_MENU_ACTIVE()",
      "body": ["SET_SAVE_MENU_ACTIVE(${1:BOOL ignoreVehicle})"],
      "description": "SET_SAVE_MENU_ACTIVE()"
    },
    "GET_STATUS_OF_MANUAL_SAVE": {
      "prefix": "GET_STATUS_OF_MANUAL_SAVE()",
      "body": ["GET_STATUS_OF_MANUAL_SAVE()"],
      "description": "GET_STATUS_OF_MANUAL_SAVE()"
    },
    "SET_CREDITS_ACTIVE": {
      "prefix": "SET_CREDITS_ACTIVE()",
      "body": ["SET_CREDITS_ACTIVE(${1:BOOL toggle})"],
      "description": "SET_CREDITS_ACTIVE()"
    },
    "SET_CREDITS_FADE_OUT_WITH_SCREEN": {
      "prefix": "SET_CREDITS_FADE_OUT_WITH_SCREEN()",
      "body": ["SET_CREDITS_FADE_OUT_WITH_SCREEN(${1:BOOL toggle})"],
      "description": "SET_CREDITS_FADE_OUT_WITH_SCREEN()"
    },
    "HAVE_CREDITS_REACHED_END": {
      "prefix": "HAVE_CREDITS_REACHED_END()",
      "body": ["HAVE_CREDITS_REACHED_END()"],
      "description": "HAVE_CREDITS_REACHED_END()"
    },
    "ARE_CREDITS_RUNNING": {
      "prefix": "ARE_CREDITS_RUNNING()",
      "body": ["ARE_CREDITS_RUNNING()"],
      "description": "ARE_CREDITS_RUNNING()"
    },
    "TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME": {
      "prefix": "TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME()",
      "body": [
        "TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME(${1:const char* scriptName})"
      ],
      "description": "TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME()"
    },
    "NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME": {
      "prefix": "NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME()",
      "body": ["NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME()"],
      "description": "NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME()"
    },
    "ADD_HOSPITAL_RESTART": {
      "prefix": "ADD_HOSPITAL_RESTART()",
      "body": [
        "ADD_HOSPITAL_RESTART(${1:float x}, ${2:float y}, ${3:float z}, ${4:float p3}, ${5:Any p4})"
      ],
      "description": "ADD_HOSPITAL_RESTART()"
    },
    "DISABLE_HOSPITAL_RESTART": {
      "prefix": "DISABLE_HOSPITAL_RESTART()",
      "body": [
        "DISABLE_HOSPITAL_RESTART(${1:int hospitalIndex}, ${2:BOOL toggle})"
      ],
      "description": "DISABLE_HOSPITAL_RESTART()"
    },
    "ADD_POLICE_RESTART": {
      "prefix": "ADD_POLICE_RESTART()",
      "body": [
        "ADD_POLICE_RESTART(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:Any p4})"
      ],
      "description": "ADD_POLICE_RESTART()"
    },
    "DISABLE_POLICE_RESTART": {
      "prefix": "DISABLE_POLICE_RESTART()",
      "body": ["DISABLE_POLICE_RESTART(${1:int policeIndex}, ${2:BOOL toggle})"],
      "description": "DISABLE_POLICE_RESTART()"
    },
    "SET_RESTART_COORD_OVERRIDE": {
      "prefix": "SET_RESTART_COORD_OVERRIDE()",
      "body": [
        "SET_RESTART_COORD_OVERRIDE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float heading})"
      ],
      "description": "SET_RESTART_COORD_OVERRIDE()"
    },
    "CLEAR_RESTART_COORD_OVERRIDE": {
      "prefix": "CLEAR_RESTART_COORD_OVERRIDE()",
      "body": ["CLEAR_RESTART_COORD_OVERRIDE()"],
      "description": "CLEAR_RESTART_COORD_OVERRIDE()"
    },
    "PAUSE_DEATH_ARREST_RESTART": {
      "prefix": "PAUSE_DEATH_ARREST_RESTART()",
      "body": ["PAUSE_DEATH_ARREST_RESTART(${1:BOOL toggle})"],
      "description": "PAUSE_DEATH_ARREST_RESTART()"
    },
    "IGNORE_NEXT_RESTART": {
      "prefix": "IGNORE_NEXT_RESTART()",
      "body": ["IGNORE_NEXT_RESTART(${1:BOOL toggle})"],
      "description": "IGNORE_NEXT_RESTART()"
    },
    "SET_FADE_OUT_AFTER_DEATH": {
      "prefix": "SET_FADE_OUT_AFTER_DEATH()",
      "body": ["SET_FADE_OUT_AFTER_DEATH(${1:BOOL toggle})"],
      "description": "SET_FADE_OUT_AFTER_DEATH()"
    },
    "SET_FADE_OUT_AFTER_ARREST": {
      "prefix": "SET_FADE_OUT_AFTER_ARREST()",
      "body": ["SET_FADE_OUT_AFTER_ARREST(${1:BOOL toggle})"],
      "description": "SET_FADE_OUT_AFTER_ARREST()"
    },
    "SET_FADE_IN_AFTER_DEATH_ARREST": {
      "prefix": "SET_FADE_IN_AFTER_DEATH_ARREST()",
      "body": ["SET_FADE_IN_AFTER_DEATH_ARREST(${1:BOOL toggle})"],
      "description": "SET_FADE_IN_AFTER_DEATH_ARREST()"
    },
    "SET_FADE_IN_AFTER_LOAD": {
      "prefix": "SET_FADE_IN_AFTER_LOAD()",
      "body": ["SET_FADE_IN_AFTER_LOAD(${1:BOOL toggle})"],
      "description": "SET_FADE_IN_AFTER_LOAD()"
    },
    "REGISTER_SAVE_HOUSE": {
      "prefix": "REGISTER_SAVE_HOUSE()",
      "body": [
        "REGISTER_SAVE_HOUSE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float p3}, ${5:const char* p4}, ${6:Any p5}, ${7:Any p6})"
      ],
      "description": "REGISTER_SAVE_HOUSE()"
    },
    "SET_SAVE_HOUSE": {
      "prefix": "SET_SAVE_HOUSE()",
      "body": [
        "SET_SAVE_HOUSE(${1:int savehouseHandle}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "SET_SAVE_HOUSE()"
    },
    "OVERRIDE_SAVE_HOUSE": {
      "prefix": "OVERRIDE_SAVE_HOUSE()",
      "body": [
        "OVERRIDE_SAVE_HOUSE(${1:BOOL p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:BOOL p5}, ${7:float p6}, ${8:float p7})"
      ],
      "description": "OVERRIDE_SAVE_HOUSE()"
    },
    "GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD": {
      "prefix": "GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD()",
      "body": [
        "GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD(${1:Vector3* p0}, ${2:float* p1}, ${3:BOOL* fadeInAfterLoad}, ${4:BOOL* p3})"
      ],
      "description": "GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD()"
    },
    "DO_AUTO_SAVE": {
      "prefix": "DO_AUTO_SAVE()",
      "body": ["DO_AUTO_SAVE()"],
      "description": "DO_AUTO_SAVE()"
    },
    "GET_IS_AUTO_SAVE_OFF": {
      "prefix": "GET_IS_AUTO_SAVE_OFF()",
      "body": ["GET_IS_AUTO_SAVE_OFF()"],
      "description": "GET_IS_AUTO_SAVE_OFF()"
    },
    "IS_AUTO_SAVE_IN_PROGRESS": {
      "prefix": "IS_AUTO_SAVE_IN_PROGRESS()",
      "body": ["IS_AUTO_SAVE_IN_PROGRESS()"],
      "description": "IS_AUTO_SAVE_IN_PROGRESS()"
    },
    "HAS_CODE_REQUESTED_AUTOSAVE": {
      "prefix": "HAS_CODE_REQUESTED_AUTOSAVE()",
      "body": ["HAS_CODE_REQUESTED_AUTOSAVE()"],
      "description": "HAS_CODE_REQUESTED_AUTOSAVE()"
    },
    "CLEAR_CODE_REQUESTED_AUTOSAVE": {
      "prefix": "CLEAR_CODE_REQUESTED_AUTOSAVE()",
      "body": ["CLEAR_CODE_REQUESTED_AUTOSAVE()"],
      "description": "CLEAR_CODE_REQUESTED_AUTOSAVE()"
    },
    "BEGIN_REPLAY_STATS": {
      "prefix": "BEGIN_REPLAY_STATS()",
      "body": ["BEGIN_REPLAY_STATS(${1:Any p0}, ${2:Any p1})"],
      "description": "BEGIN_REPLAY_STATS()"
    },
    "ADD_REPLAY_STAT_VALUE": {
      "prefix": "ADD_REPLAY_STAT_VALUE()",
      "body": ["ADD_REPLAY_STAT_VALUE(${1:Any value})"],
      "description": "ADD_REPLAY_STAT_VALUE()"
    },
    "END_REPLAY_STATS": {
      "prefix": "END_REPLAY_STATS()",
      "body": ["END_REPLAY_STATS()"],
      "description": "END_REPLAY_STATS()"
    },
    "HAVE_REPLAY_STATS_BEEN_STORED": {
      "prefix": "HAVE_REPLAY_STATS_BEEN_STORED()",
      "body": ["HAVE_REPLAY_STATS_BEEN_STORED()"],
      "description": "HAVE_REPLAY_STATS_BEEN_STORED()"
    },
    "GET_REPLAY_STAT_MISSION_ID": {
      "prefix": "GET_REPLAY_STAT_MISSION_ID()",
      "body": ["GET_REPLAY_STAT_MISSION_ID()"],
      "description": "GET_REPLAY_STAT_MISSION_ID()"
    },
    "GET_REPLAY_STAT_MISSION_TYPE": {
      "prefix": "GET_REPLAY_STAT_MISSION_TYPE()",
      "body": ["GET_REPLAY_STAT_MISSION_TYPE()"],
      "description": "GET_REPLAY_STAT_MISSION_TYPE()"
    },
    "GET_REPLAY_STAT_COUNT": {
      "prefix": "GET_REPLAY_STAT_COUNT()",
      "body": ["GET_REPLAY_STAT_COUNT()"],
      "description": "GET_REPLAY_STAT_COUNT()"
    },
    "GET_REPLAY_STAT_AT_INDEX": {
      "prefix": "GET_REPLAY_STAT_AT_INDEX()",
      "body": ["GET_REPLAY_STAT_AT_INDEX(${1:int index})"],
      "description": "GET_REPLAY_STAT_AT_INDEX()"
    },
    "CLEAR_REPLAY_STATS": {
      "prefix": "CLEAR_REPLAY_STATS()",
      "body": ["CLEAR_REPLAY_STATS()"],
      "description": "CLEAR_REPLAY_STATS()"
    },
    "QUEUE_MISSION_REPEAT_LOAD": {
      "prefix": "QUEUE_MISSION_REPEAT_LOAD()",
      "body": ["QUEUE_MISSION_REPEAT_LOAD()"],
      "description": "QUEUE_MISSION_REPEAT_LOAD()"
    },
    "QUEUE_MISSION_REPEAT_SAVE": {
      "prefix": "QUEUE_MISSION_REPEAT_SAVE()",
      "body": ["QUEUE_MISSION_REPEAT_SAVE()"],
      "description": "QUEUE_MISSION_REPEAT_SAVE()"
    },
    "QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST": {
      "prefix": "QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST()",
      "body": ["QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST()"],
      "description": "QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST()"
    },
    "GET_STATUS_OF_MISSION_REPEAT_SAVE": {
      "prefix": "GET_STATUS_OF_MISSION_REPEAT_SAVE()",
      "body": ["GET_STATUS_OF_MISSION_REPEAT_SAVE()"],
      "description": "GET_STATUS_OF_MISSION_REPEAT_SAVE()"
    },
    "IS_MEMORY_CARD_IN_USE": {
      "prefix": "IS_MEMORY_CARD_IN_USE()",
      "body": ["IS_MEMORY_CARD_IN_USE()"],
      "description": "IS_MEMORY_CARD_IN_USE()"
    },
    "SHOOT_SINGLE_BULLET_BETWEEN_COORDS": {
      "prefix": "SHOOT_SINGLE_BULLET_BETWEEN_COORDS()",
      "body": [
        "SHOOT_SINGLE_BULLET_BETWEEN_COORDS(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int damage}, ${8:BOOL p7}, ${9:Hash weaponHash}, ${10:Ped ownerPed}, ${11:BOOL isAudible}, ${12:BOOL isInvisible}, ${13:float speed})"
      ],
      "description": "SHOOT_SINGLE_BULLET_BETWEEN_COORDS()"
    },
    "SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY": {
      "prefix": "SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY()",
      "body": [
        "SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int damage}, ${8:BOOL p7}, ${9:Hash weaponHash}, ${10:Ped ownerPed}, ${11:BOOL isAudible}, ${12:BOOL isInvisible}, ${13:float speed}, ${14:Entity entity}, ${15:Any p14})"
      ],
      "description": "SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY()"
    },
    "SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW": {
      "prefix": "SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW()",
      "body": [
        "SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int damage}, ${8:BOOL p7}, ${9:Hash weaponHash}, ${10:Ped ownerPed}, ${11:BOOL isAudible}, ${12:BOOL isInvisible}, ${13:float speed}, ${14:Entity entity}, ${15:BOOL p14}, ${16:BOOL p15}, ${17:Entity targetEntity}, ${18:BOOL p17}, ${19:Any p18}, ${20:Any p19}, ${21:Any p20})"
      ],
      "description": "SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW()"
    },
    "GET_MODEL_DIMENSIONS": {
      "prefix": "GET_MODEL_DIMENSIONS()",
      "body": [
        "GET_MODEL_DIMENSIONS(${1:Hash modelHash}, ${2:Vector3* minimum}, ${3:Vector3* maximum})"
      ],
      "description": "GET_MODEL_DIMENSIONS()"
    },
    "SET_FAKE_WANTED_LEVEL": {
      "prefix": "SET_FAKE_WANTED_LEVEL()",
      "body": ["SET_FAKE_WANTED_LEVEL(${1:int fakeWantedLevel})"],
      "description": "SET_FAKE_WANTED_LEVEL()"
    },
    "GET_FAKE_WANTED_LEVEL": {
      "prefix": "GET_FAKE_WANTED_LEVEL()",
      "body": ["GET_FAKE_WANTED_LEVEL()"],
      "description": "GET_FAKE_WANTED_LEVEL()"
    },
    "USING_MISSION_CREATOR": {
      "prefix": "USING_MISSION_CREATOR()",
      "body": ["USING_MISSION_CREATOR(${1:BOOL toggle})"],
      "description": "USING_MISSION_CREATOR()"
    },
    "ALLOW_MISSION_CREATOR_WARP": {
      "prefix": "ALLOW_MISSION_CREATOR_WARP()",
      "body": ["ALLOW_MISSION_CREATOR_WARP(${1:BOOL toggle})"],
      "description": "ALLOW_MISSION_CREATOR_WARP()"
    },
    "SET_MINIGAME_IN_PROGRESS": {
      "prefix": "SET_MINIGAME_IN_PROGRESS()",
      "body": ["SET_MINIGAME_IN_PROGRESS(${1:BOOL toggle})"],
      "description": "SET_MINIGAME_IN_PROGRESS()"
    },
    "IS_MINIGAME_IN_PROGRESS": {
      "prefix": "IS_MINIGAME_IN_PROGRESS()",
      "body": ["IS_MINIGAME_IN_PROGRESS()"],
      "description": "IS_MINIGAME_IN_PROGRESS()"
    },
    "IS_THIS_A_MINIGAME_SCRIPT": {
      "prefix": "IS_THIS_A_MINIGAME_SCRIPT()",
      "body": ["IS_THIS_A_MINIGAME_SCRIPT()"],
      "description": "IS_THIS_A_MINIGAME_SCRIPT()"
    },
    "IS_SNIPER_INVERTED": {
      "prefix": "IS_SNIPER_INVERTED()",
      "body": ["IS_SNIPER_INVERTED()"],
      "description": "IS_SNIPER_INVERTED()"
    },
    "SHOULD_USE_METRIC_MEASUREMENTS": {
      "prefix": "SHOULD_USE_METRIC_MEASUREMENTS()",
      "body": ["SHOULD_USE_METRIC_MEASUREMENTS()"],
      "description": "SHOULD_USE_METRIC_MEASUREMENTS()"
    },
    "GET_PROFILE_SETTING": {
      "prefix": "GET_PROFILE_SETTING()",
      "body": ["GET_PROFILE_SETTING(${1:int profileSetting})"],
      "description": "GET_PROFILE_SETTING()"
    },
    "ARE_STRINGS_EQUAL": {
      "prefix": "ARE_STRINGS_EQUAL()",
      "body": [
        "ARE_STRINGS_EQUAL(${1:const char* string1}, ${2:const char* string2})"
      ],
      "description": "ARE_STRINGS_EQUAL()"
    },
    "COMPARE_STRINGS": {
      "prefix": "COMPARE_STRINGS()",
      "body": [
        "COMPARE_STRINGS(${1:const char* str1}, ${2:const char* str2}, ${3:BOOL matchCase}, ${4:int maxLength})"
      ],
      "description": "COMPARE_STRINGS()"
    },
    "ABSI": {
      "prefix": "ABSI()",
      "body": ["ABSI(${1:int value})"],
      "description": "ABSI()"
    },
    "ABSF": {
      "prefix": "ABSF()",
      "body": ["ABSF(${1:float value})"],
      "description": "ABSF()"
    },
    "IS_SNIPER_BULLET_IN_AREA": {
      "prefix": "IS_SNIPER_BULLET_IN_AREA()",
      "body": [
        "IS_SNIPER_BULLET_IN_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
      ],
      "description": "IS_SNIPER_BULLET_IN_AREA()"
    },
    "IS_PROJECTILE_IN_AREA": {
      "prefix": "IS_PROJECTILE_IN_AREA()",
      "body": [
        "IS_PROJECTILE_IN_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:BOOL ownedByPlayer})"
      ],
      "description": "IS_PROJECTILE_IN_AREA()"
    },
    "IS_PROJECTILE_TYPE_IN_AREA": {
      "prefix": "IS_PROJECTILE_TYPE_IN_AREA()",
      "body": [
        "IS_PROJECTILE_TYPE_IN_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int type}, ${8:BOOL ownedByPlayer})"
      ],
      "description": "IS_PROJECTILE_TYPE_IN_AREA()"
    },
    "IS_PROJECTILE_TYPE_IN_ANGLED_AREA": {
      "prefix": "IS_PROJECTILE_TYPE_IN_ANGLED_AREA()",
      "body": [
        "IS_PROJECTILE_TYPE_IN_ANGLED_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float width}, ${8:Any p7}, ${9:BOOL ownedByPlayer})"
      ],
      "description": "IS_PROJECTILE_TYPE_IN_ANGLED_AREA()"
    },
    "IS_PROJECTILE_TYPE_WITHIN_DISTANCE": {
      "prefix": "IS_PROJECTILE_TYPE_WITHIN_DISTANCE()",
      "body": [
        "IS_PROJECTILE_TYPE_WITHIN_DISTANCE(${1:float x}, ${2:float y}, ${3:float z}, ${4:Hash projectileHash}, ${5:float radius}, ${6:BOOL ownedByPlayer})"
      ],
      "description": "IS_PROJECTILE_TYPE_WITHIN_DISTANCE()"
    },
    "GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA": {
      "prefix": "GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA()",
      "body": [
        "GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:Hash projectileHash}, ${8:Vector3* projectilePos}, ${9:BOOL ownedByPlayer})"
      ],
      "description": "GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA()"
    },
    "GET_COORDS_OF_PROJECTILE_TYPE_IN_ANGLED_AREA": {
      "prefix": "GET_COORDS_OF_PROJECTILE_TYPE_IN_ANGLED_AREA()",
      "body": [
        "GET_COORDS_OF_PROJECTILE_TYPE_IN_ANGLED_AREA(${1:float vecAngledAreaPoint1X}, ${2:float vecAngledAreaPoint1Y}, ${3:float vecAngledAreaPoint1Z}, ${4:float vecAngledAreaPoint2X}, ${5:float vecAngledAreaPoint2Y}, ${6:float vecAngledAreaPoint2Z}, ${7:float distanceOfOppositeFace}, ${8:Hash weaponType}, ${9:Vector3* positionOut}, ${10:BOOL bIsPlayer})"
      ],
      "description": "GET_COORDS_OF_PROJECTILE_TYPE_IN_ANGLED_AREA()"
    },
    "GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE": {
      "prefix": "GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE()",
      "body": [
        "GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(${1:Ped ped}, ${2:Hash weaponHash}, ${3:float distance}, ${4:Vector3* outCoords}, ${5:BOOL p4})"
      ],
      "description": "GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE()"
    },
    "GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE": {
      "prefix": "GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE()",
      "body": [
        "GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(${1:Ped ped}, ${2:Hash weaponHash}, ${3:float distance}, ${4:Vector3* outCoords}, ${5:Object* outProjectile}, ${6:BOOL p5})"
      ],
      "description": "GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE()"
    },
    "IS_BULLET_IN_ANGLED_AREA": {
      "prefix": "IS_BULLET_IN_ANGLED_AREA()",
      "body": [
        "IS_BULLET_IN_ANGLED_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float width}, ${8:BOOL ownedByPlayer})"
      ],
      "description": "IS_BULLET_IN_ANGLED_AREA()"
    },
    "IS_BULLET_IN_AREA": {
      "prefix": "IS_BULLET_IN_AREA()",
      "body": [
        "IS_BULLET_IN_AREA(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:BOOL ownedByPlayer})"
      ],
      "description": "IS_BULLET_IN_AREA()"
    },
    "IS_BULLET_IN_BOX": {
      "prefix": "IS_BULLET_IN_BOX()",
      "body": [
        "IS_BULLET_IN_BOX(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:BOOL ownedByPlayer})"
      ],
      "description": "IS_BULLET_IN_BOX()"
    },
    "HAS_BULLET_IMPACTED_IN_AREA": {
      "prefix": "HAS_BULLET_IMPACTED_IN_AREA()",
      "body": [
        "HAS_BULLET_IMPACTED_IN_AREA(${1:float x}, ${2:float y}, ${3:float z}, ${4:float p3}, ${5:BOOL p4}, ${6:BOOL p5})"
      ],
      "description": "HAS_BULLET_IMPACTED_IN_AREA()"
    },
    "HAS_BULLET_IMPACTED_IN_BOX": {
      "prefix": "HAS_BULLET_IMPACTED_IN_BOX()",
      "body": [
        "HAS_BULLET_IMPACTED_IN_BOX(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:BOOL p6}, ${8:BOOL p7})"
      ],
      "description": "HAS_BULLET_IMPACTED_IN_BOX()"
    },
    "IS_ORBIS_VERSION": {
      "prefix": "IS_ORBIS_VERSION()",
      "body": ["IS_ORBIS_VERSION()"],
      "description": "IS_ORBIS_VERSION()"
    },
    "IS_DURANGO_VERSION": {
      "prefix": "IS_DURANGO_VERSION()",
      "body": ["IS_DURANGO_VERSION()"],
      "description": "IS_DURANGO_VERSION()"
    },
    "IS_XBOX360_VERSION": {
      "prefix": "IS_XBOX360_VERSION()",
      "body": ["IS_XBOX360_VERSION()"],
      "description": "IS_XBOX360_VERSION()"
    },
    "IS_PS3_VERSION": {
      "prefix": "IS_PS3_VERSION()",
      "body": ["IS_PS3_VERSION()"],
      "description": "IS_PS3_VERSION()"
    },
    "IS_PC_VERSION": {
      "prefix": "IS_PC_VERSION()",
      "body": ["IS_PC_VERSION()"],
      "description": "IS_PC_VERSION()"
    },
    "IS_STEAM_VERSION": {
      "prefix": "IS_STEAM_VERSION()",
      "body": ["IS_STEAM_VERSION()"],
      "description": "IS_STEAM_VERSION()"
    },
    "IS_AUSSIE_VERSION": {
      "prefix": "IS_AUSSIE_VERSION()",
      "body": ["IS_AUSSIE_VERSION()"],
      "description": "IS_AUSSIE_VERSION()"
    },
    "IS_JAPANESE_VERSION": {
      "prefix": "IS_JAPANESE_VERSION()",
      "body": ["IS_JAPANESE_VERSION()"],
      "description": "IS_JAPANESE_VERSION()"
    },
    "IS_XBOX_PLATFORM": {
      "prefix": "IS_XBOX_PLATFORM()",
      "body": ["IS_XBOX_PLATFORM()"],
      "description": "IS_XBOX_PLATFORM()"
    },
    "IS_SCARLETT_VERSION": {
      "prefix": "IS_SCARLETT_VERSION()",
      "body": ["IS_SCARLETT_VERSION()"],
      "description": "IS_SCARLETT_VERSION()"
    },
    "IS_SCE_PLATFORM": {
      "prefix": "IS_SCE_PLATFORM()",
      "body": ["IS_SCE_PLATFORM()"],
      "description": "IS_SCE_PLATFORM()"
    },
    "IS_PROSPERO_VERSION": {
      "prefix": "IS_PROSPERO_VERSION()",
      "body": ["IS_PROSPERO_VERSION()"],
      "description": "IS_PROSPERO_VERSION()"
    },
    "IS_STRING_NULL": {
      "prefix": "IS_STRING_NULL()",
      "body": ["IS_STRING_NULL(${1:const char* string})"],
      "description": "IS_STRING_NULL()"
    },
    "IS_STRING_NULL_OR_EMPTY": {
      "prefix": "IS_STRING_NULL_OR_EMPTY()",
      "body": ["IS_STRING_NULL_OR_EMPTY(${1:const char* string})"],
      "description": "IS_STRING_NULL_OR_EMPTY()"
    },
    "STRING_TO_INT": {
      "prefix": "STRING_TO_INT()",
      "body": ["STRING_TO_INT(${1:const char* string}, ${2:int* outInteger})"],
      "description": "STRING_TO_INT()"
    },
    "SET_BITS_IN_RANGE": {
      "prefix": "SET_BITS_IN_RANGE()",
      "body": [
        "SET_BITS_IN_RANGE(${1:int* var}, ${2:int rangeStart}, ${3:int rangeEnd}, ${4:int p3})"
      ],
      "description": "SET_BITS_IN_RANGE()"
    },
    "GET_BITS_IN_RANGE": {
      "prefix": "GET_BITS_IN_RANGE()",
      "body": [
        "GET_BITS_IN_RANGE(${1:int var}, ${2:int rangeStart}, ${3:int rangeEnd})"
      ],
      "description": "GET_BITS_IN_RANGE()"
    },
    "ADD_STUNT_JUMP": {
      "prefix": "ADD_STUNT_JUMP()",
      "body": [
        "ADD_STUNT_JUMP(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float x3}, ${8:float y3}, ${9:float z3}, ${10:float x4}, ${11:float y4}, ${12:float z4}, ${13:float camX}, ${14:float camY}, ${15:float camZ}, ${16:int p15}, ${17:int p16}, ${18:int p17})"
      ],
      "description": "ADD_STUNT_JUMP()"
    },
    "ADD_STUNT_JUMP_ANGLED": {
      "prefix": "ADD_STUNT_JUMP_ANGLED()",
      "body": [
        "ADD_STUNT_JUMP_ANGLED(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float radius1}, ${8:float x3}, ${9:float y3}, ${10:float z3}, ${11:float x4}, ${12:float y4}, ${13:float z4}, ${14:float radius2}, ${15:float camX}, ${16:float camY}, ${17:float camZ}, ${18:int p17}, ${19:int p18}, ${20:int p19})"
      ],
      "description": "ADD_STUNT_JUMP_ANGLED()"
    },
    "TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA": {
      "prefix": "TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA()",
      "body": ["TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA(${1:BOOL toggle})"],
      "description": "TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA()"
    },
    "DELETE_STUNT_JUMP": {
      "prefix": "DELETE_STUNT_JUMP()",
      "body": ["DELETE_STUNT_JUMP(${1:int p0})"],
      "description": "DELETE_STUNT_JUMP()"
    },
    "ENABLE_STUNT_JUMP_SET": {
      "prefix": "ENABLE_STUNT_JUMP_SET()",
      "body": ["ENABLE_STUNT_JUMP_SET(${1:int p0})"],
      "description": "ENABLE_STUNT_JUMP_SET()"
    },
    "DISABLE_STUNT_JUMP_SET": {
      "prefix": "DISABLE_STUNT_JUMP_SET()",
      "body": ["DISABLE_STUNT_JUMP_SET(${1:int p0})"],
      "description": "DISABLE_STUNT_JUMP_SET()"
    },
    "SET_STUNT_JUMPS_CAN_TRIGGER": {
      "prefix": "SET_STUNT_JUMPS_CAN_TRIGGER()",
      "body": ["SET_STUNT_JUMPS_CAN_TRIGGER(${1:BOOL toggle})"],
      "description": "SET_STUNT_JUMPS_CAN_TRIGGER()"
    },
    "IS_STUNT_JUMP_IN_PROGRESS": {
      "prefix": "IS_STUNT_JUMP_IN_PROGRESS()",
      "body": ["IS_STUNT_JUMP_IN_PROGRESS()"],
      "description": "IS_STUNT_JUMP_IN_PROGRESS()"
    },
    "IS_STUNT_JUMP_MESSAGE_SHOWING": {
      "prefix": "IS_STUNT_JUMP_MESSAGE_SHOWING()",
      "body": ["IS_STUNT_JUMP_MESSAGE_SHOWING()"],
      "description": "IS_STUNT_JUMP_MESSAGE_SHOWING()"
    },
    "GET_NUM_SUCCESSFUL_STUNT_JUMPS": {
      "prefix": "GET_NUM_SUCCESSFUL_STUNT_JUMPS()",
      "body": ["GET_NUM_SUCCESSFUL_STUNT_JUMPS()"],
      "description": "GET_NUM_SUCCESSFUL_STUNT_JUMPS()"
    },
    "GET_TOTAL_SUCCESSFUL_STUNT_JUMPS": {
      "prefix": "GET_TOTAL_SUCCESSFUL_STUNT_JUMPS()",
      "body": ["GET_TOTAL_SUCCESSFUL_STUNT_JUMPS()"],
      "description": "GET_TOTAL_SUCCESSFUL_STUNT_JUMPS()"
    },
    "CANCEL_STUNT_JUMP": {
      "prefix": "CANCEL_STUNT_JUMP()",
      "body": ["CANCEL_STUNT_JUMP()"],
      "description": "CANCEL_STUNT_JUMP()"
    },
    "SET_GAME_PAUSED": {
      "prefix": "SET_GAME_PAUSED()",
      "body": ["SET_GAME_PAUSED(${1:BOOL toggle})"],
      "description": "SET_GAME_PAUSED()"
    },
    "SET_THIS_SCRIPT_CAN_BE_PAUSED": {
      "prefix": "SET_THIS_SCRIPT_CAN_BE_PAUSED()",
      "body": ["SET_THIS_SCRIPT_CAN_BE_PAUSED(${1:BOOL toggle})"],
      "description": "SET_THIS_SCRIPT_CAN_BE_PAUSED()"
    },
    "SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT": {
      "prefix": "SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT()",
      "body": [
        "SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(${1:BOOL toggle})"
      ],
      "description": "SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT()"
    },
    "HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED": {
      "prefix": "HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED()",
      "body": [
        "HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED(${1:Hash hash}, ${2:int amount})"
      ],
      "description": "HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED()"
    },
    "HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED": {
      "prefix": "HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED()",
      "body": ["HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(${1:Hash hash})"],
      "description": "HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED()"
    },
    "OVERRIDE_FREEZE_FLAGS": {
      "prefix": "OVERRIDE_FREEZE_FLAGS()",
      "body": ["OVERRIDE_FREEZE_FLAGS(${1:BOOL p0})"],
      "description": "OVERRIDE_FREEZE_FLAGS()"
    },
    "SET_INSTANCE_PRIORITY_MODE": {
      "prefix": "SET_INSTANCE_PRIORITY_MODE()",
      "body": ["SET_INSTANCE_PRIORITY_MODE(${1:int p0})"],
      "description": "SET_INSTANCE_PRIORITY_MODE()"
    },
    "SET_INSTANCE_PRIORITY_HINT": {
      "prefix": "SET_INSTANCE_PRIORITY_HINT()",
      "body": ["SET_INSTANCE_PRIORITY_HINT(${1:int flag})"],
      "description": "SET_INSTANCE_PRIORITY_HINT()"
    },
    "IS_FRONTEND_FADING": {
      "prefix": "IS_FRONTEND_FADING()",
      "body": ["IS_FRONTEND_FADING()"],
      "description": "IS_FRONTEND_FADING()"
    },
    "POPULATE_NOW": {
      "prefix": "POPULATE_NOW()",
      "body": ["POPULATE_NOW()"],
      "description": "POPULATE_NOW()"
    },
    "GET_INDEX_OF_CURRENT_LEVEL": {
      "prefix": "GET_INDEX_OF_CURRENT_LEVEL()",
      "body": ["GET_INDEX_OF_CURRENT_LEVEL()"],
      "description": "GET_INDEX_OF_CURRENT_LEVEL()"
    },
    "SET_GRAVITY_LEVEL": {
      "prefix": "SET_GRAVITY_LEVEL()",
      "body": ["SET_GRAVITY_LEVEL(${1:int level})"],
      "description": "SET_GRAVITY_LEVEL()"
    },
    "START_SAVE_DATA": {
      "prefix": "START_SAVE_DATA()",
      "body": ["START_SAVE_DATA(${1:Any* p0}, ${2:Any p1}, ${3:BOOL p2})"],
      "description": "START_SAVE_DATA()"
    },
    "STOP_SAVE_DATA": {
      "prefix": "STOP_SAVE_DATA()",
      "body": ["STOP_SAVE_DATA()"],
      "description": "STOP_SAVE_DATA()"
    },
    "GET_SIZE_OF_SAVE_DATA": {
      "prefix": "GET_SIZE_OF_SAVE_DATA()",
      "body": ["GET_SIZE_OF_SAVE_DATA(${1:BOOL p0})"],
      "description": "GET_SIZE_OF_SAVE_DATA()"
    },
    "REGISTER_INT_TO_SAVE": {
      "prefix": "REGISTER_INT_TO_SAVE()",
      "body": ["REGISTER_INT_TO_SAVE(${1:Any* p0}, ${2:const char* name})"],
      "description": "REGISTER_INT_TO_SAVE()"
    },
    "REGISTER_INT64_TO_SAVE": {
      "prefix": "REGISTER_INT64_TO_SAVE()",
      "body": ["REGISTER_INT64_TO_SAVE(${1:Any* p0}, ${2:const char* name})"],
      "description": "REGISTER_INT64_TO_SAVE()"
    },
    "REGISTER_ENUM_TO_SAVE": {
      "prefix": "REGISTER_ENUM_TO_SAVE()",
      "body": ["REGISTER_ENUM_TO_SAVE(${1:Any* p0}, ${2:const char* name})"],
      "description": "REGISTER_ENUM_TO_SAVE()"
    },
    "REGISTER_FLOAT_TO_SAVE": {
      "prefix": "REGISTER_FLOAT_TO_SAVE()",
      "body": ["REGISTER_FLOAT_TO_SAVE(${1:Any* p0}, ${2:const char* name})"],
      "description": "REGISTER_FLOAT_TO_SAVE()"
    },
    "REGISTER_BOOL_TO_SAVE": {
      "prefix": "REGISTER_BOOL_TO_SAVE()",
      "body": ["REGISTER_BOOL_TO_SAVE(${1:Any* p0}, ${2:const char* name})"],
      "description": "REGISTER_BOOL_TO_SAVE()"
    },
    "REGISTER_TEXT_LABEL_TO_SAVE": {
      "prefix": "REGISTER_TEXT_LABEL_TO_SAVE()",
      "body": [
        "REGISTER_TEXT_LABEL_TO_SAVE(${1:Any* p0}, ${2:const char* name})"
      ],
      "description": "REGISTER_TEXT_LABEL_TO_SAVE()"
    },
    "REGISTER_TEXT_LABEL_15_TO_SAVE": {
      "prefix": "REGISTER_TEXT_LABEL_15_TO_SAVE()",
      "body": [
        "REGISTER_TEXT_LABEL_15_TO_SAVE(${1:Any* p0}, ${2:const char* name})"
      ],
      "description": "REGISTER_TEXT_LABEL_15_TO_SAVE()"
    },
    "REGISTER_TEXT_LABEL_23_TO_SAVE": {
      "prefix": "REGISTER_TEXT_LABEL_23_TO_SAVE()",
      "body": [
        "REGISTER_TEXT_LABEL_23_TO_SAVE(${1:Any* p0}, ${2:const char* name})"
      ],
      "description": "REGISTER_TEXT_LABEL_23_TO_SAVE()"
    },
    "REGISTER_TEXT_LABEL_31_TO_SAVE": {
      "prefix": "REGISTER_TEXT_LABEL_31_TO_SAVE()",
      "body": [
        "REGISTER_TEXT_LABEL_31_TO_SAVE(${1:Any* p0}, ${2:const char* name})"
      ],
      "description": "REGISTER_TEXT_LABEL_31_TO_SAVE()"
    },
    "REGISTER_TEXT_LABEL_63_TO_SAVE": {
      "prefix": "REGISTER_TEXT_LABEL_63_TO_SAVE()",
      "body": [
        "REGISTER_TEXT_LABEL_63_TO_SAVE(${1:Any* p0}, ${2:const char* name})"
      ],
      "description": "REGISTER_TEXT_LABEL_63_TO_SAVE()"
    },
    "START_SAVE_STRUCT_WITH_SIZE": {
      "prefix": "START_SAVE_STRUCT_WITH_SIZE()",
      "body": [
        "START_SAVE_STRUCT_WITH_SIZE(${1:Any* p0}, ${2:int size}, ${3:const char* structName})"
      ],
      "description": "START_SAVE_STRUCT_WITH_SIZE()"
    },
    "STOP_SAVE_STRUCT": {
      "prefix": "STOP_SAVE_STRUCT()",
      "body": ["STOP_SAVE_STRUCT()"],
      "description": "STOP_SAVE_STRUCT()"
    },
    "START_SAVE_ARRAY_WITH_SIZE": {
      "prefix": "START_SAVE_ARRAY_WITH_SIZE()",
      "body": [
        "START_SAVE_ARRAY_WITH_SIZE(${1:Any* p0}, ${2:int size}, ${3:const char* arrayName})"
      ],
      "description": "START_SAVE_ARRAY_WITH_SIZE()"
    },
    "STOP_SAVE_ARRAY": {
      "prefix": "STOP_SAVE_ARRAY()",
      "body": ["STOP_SAVE_ARRAY()"],
      "description": "STOP_SAVE_ARRAY()"
    },
    "COPY_SCRIPT_STRUCT": {
      "prefix": "COPY_SCRIPT_STRUCT()",
      "body": ["COPY_SCRIPT_STRUCT(${1:Any* dst}, ${2:Any* src}, ${3:int size})"],
      "description": "COPY_SCRIPT_STRUCT()"
    },
    "ENABLE_DISPATCH_SERVICE": {
      "prefix": "ENABLE_DISPATCH_SERVICE()",
      "body": [
        "ENABLE_DISPATCH_SERVICE(${1:int dispatchService}, ${2:BOOL toggle})"
      ],
      "description": "ENABLE_DISPATCH_SERVICE()"
    },
    "BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION": {
      "prefix": "BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION()",
      "body": [
        "BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION(${1:int dispatchService}, ${2:BOOL toggle})"
      ],
      "description": "BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION()"
    },
    "GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL": {
      "prefix": "GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL()",
      "body": [
        "GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL(${1:int dispatchService})"
      ],
      "description": "GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL()"
    },
    "CREATE_INCIDENT": {
      "prefix": "CREATE_INCIDENT()",
      "body": [
        "CREATE_INCIDENT(${1:int dispatchService}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int numUnits}, ${6:float radius}, ${7:int* outIncidentID}, ${8:Any p7}, ${9:Any p8})"
      ],
      "description": "CREATE_INCIDENT()"
    },
    "CREATE_INCIDENT_WITH_ENTITY": {
      "prefix": "CREATE_INCIDENT_WITH_ENTITY()",
      "body": [
        "CREATE_INCIDENT_WITH_ENTITY(${1:int dispatchService}, ${2:Ped ped}, ${3:int numUnits}, ${4:float radius}, ${5:int* outIncidentID}, ${6:Any p5}, ${7:Any p6})"
      ],
      "description": "CREATE_INCIDENT_WITH_ENTITY()"
    },
    "DELETE_INCIDENT": {
      "prefix": "DELETE_INCIDENT()",
      "body": ["DELETE_INCIDENT(${1:int incidentId})"],
      "description": "DELETE_INCIDENT()"
    },
    "IS_INCIDENT_VALID": {
      "prefix": "IS_INCIDENT_VALID()",
      "body": ["IS_INCIDENT_VALID(${1:int incidentId})"],
      "description": "IS_INCIDENT_VALID()"
    },
    "SET_INCIDENT_REQUESTED_UNITS": {
      "prefix": "SET_INCIDENT_REQUESTED_UNITS()",
      "body": [
        "SET_INCIDENT_REQUESTED_UNITS(${1:int incidentId}, ${2:int dispatchService}, ${3:int numUnits})"
      ],
      "description": "SET_INCIDENT_REQUESTED_UNITS()"
    },
    "SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT": {
      "prefix": "SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT()",
      "body": [
        "SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT(${1:int incidentId}, ${2:float p1})"
      ],
      "description": "SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT()"
    },
    "FIND_SPAWN_POINT_IN_DIRECTION": {
      "prefix": "FIND_SPAWN_POINT_IN_DIRECTION()",
      "body": [
        "FIND_SPAWN_POINT_IN_DIRECTION(${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float fwdVecX}, ${5:float fwdVecY}, ${6:float fwdVecZ}, ${7:float distance}, ${8:Vector3* spawnPoint})"
      ],
      "description": "FIND_SPAWN_POINT_IN_DIRECTION()"
    },
    "ADD_POP_MULTIPLIER_AREA": {
      "prefix": "ADD_POP_MULTIPLIER_AREA()",
      "body": [
        "ADD_POP_MULTIPLIER_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float p6}, ${8:float p7}, ${9:BOOL p8}, ${10:BOOL p9})"
      ],
      "description": "ADD_POP_MULTIPLIER_AREA()"
    },
    "DOES_POP_MULTIPLIER_AREA_EXIST": {
      "prefix": "DOES_POP_MULTIPLIER_AREA_EXIST()",
      "body": ["DOES_POP_MULTIPLIER_AREA_EXIST(${1:int id})"],
      "description": "DOES_POP_MULTIPLIER_AREA_EXIST()"
    },
    "REMOVE_POP_MULTIPLIER_AREA": {
      "prefix": "REMOVE_POP_MULTIPLIER_AREA()",
      "body": ["REMOVE_POP_MULTIPLIER_AREA(${1:int id}, ${2:BOOL p1})"],
      "description": "REMOVE_POP_MULTIPLIER_AREA()"
    },
    "IS_POP_MULTIPLIER_AREA_NETWORKED": {
      "prefix": "IS_POP_MULTIPLIER_AREA_NETWORKED()",
      "body": ["IS_POP_MULTIPLIER_AREA_NETWORKED(${1:int id})"],
      "description": "IS_POP_MULTIPLIER_AREA_NETWORKED()"
    },
    "ADD_POP_MULTIPLIER_SPHERE": {
      "prefix": "ADD_POP_MULTIPLIER_SPHERE()",
      "body": [
        "ADD_POP_MULTIPLIER_SPHERE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:float pedMultiplier}, ${6:float vehicleMultiplier}, ${7:BOOL p6}, ${8:BOOL p7})"
      ],
      "description": "ADD_POP_MULTIPLIER_SPHERE()"
    },
    "DOES_POP_MULTIPLIER_SPHERE_EXIST": {
      "prefix": "DOES_POP_MULTIPLIER_SPHERE_EXIST()",
      "body": ["DOES_POP_MULTIPLIER_SPHERE_EXIST(${1:int id})"],
      "description": "DOES_POP_MULTIPLIER_SPHERE_EXIST()"
    },
    "REMOVE_POP_MULTIPLIER_SPHERE": {
      "prefix": "REMOVE_POP_MULTIPLIER_SPHERE()",
      "body": ["REMOVE_POP_MULTIPLIER_SPHERE(${1:int id}, ${2:BOOL p1})"],
      "description": "REMOVE_POP_MULTIPLIER_SPHERE()"
    },
    "ENABLE_TENNIS_MODE": {
      "prefix": "ENABLE_TENNIS_MODE()",
      "body": [
        "ENABLE_TENNIS_MODE(${1:Ped ped}, ${2:BOOL toggle}, ${3:BOOL p2})"
      ],
      "description": "ENABLE_TENNIS_MODE()"
    },
    "IS_TENNIS_MODE": {
      "prefix": "IS_TENNIS_MODE()",
      "body": ["IS_TENNIS_MODE(${1:Ped ped})"],
      "description": "IS_TENNIS_MODE()"
    },
    "PLAY_TENNIS_SWING_ANIM": {
      "prefix": "PLAY_TENNIS_SWING_ANIM()",
      "body": [
        "PLAY_TENNIS_SWING_ANIM(${1:Ped ped}, ${2:const char* animDict}, ${3:const char* animName}, ${4:float p3}, ${5:float p4}, ${6:BOOL p5})"
      ],
      "description": "PLAY_TENNIS_SWING_ANIM()"
    },
    "GET_TENNIS_SWING_ANIM_COMPLETE": {
      "prefix": "GET_TENNIS_SWING_ANIM_COMPLETE()",
      "body": ["GET_TENNIS_SWING_ANIM_COMPLETE(${1:Ped ped})"],
      "description": "GET_TENNIS_SWING_ANIM_COMPLETE()"
    },
    "GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED": {
      "prefix": "GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED()",
      "body": ["GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED(${1:Ped ped})"],
      "description": "GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED()"
    },
    "GET_TENNIS_SWING_ANIM_SWUNG": {
      "prefix": "GET_TENNIS_SWING_ANIM_SWUNG()",
      "body": ["GET_TENNIS_SWING_ANIM_SWUNG(${1:Ped ped})"],
      "description": "GET_TENNIS_SWING_ANIM_SWUNG()"
    },
    "PLAY_TENNIS_DIVE_ANIM": {
      "prefix": "PLAY_TENNIS_DIVE_ANIM()",
      "body": [
        "PLAY_TENNIS_DIVE_ANIM(${1:Ped ped}, ${2:int p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:BOOL p5})"
      ],
      "description": "PLAY_TENNIS_DIVE_ANIM()"
    },
    "SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT": {
      "prefix": "SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT()",
      "body": [
        "SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(${1:Ped ped}, ${2:const char* p1}, ${3:float p2})"
      ],
      "description": "SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT()"
    },
    "RESET_DISPATCH_SPAWN_LOCATION": {
      "prefix": "RESET_DISPATCH_SPAWN_LOCATION()",
      "body": ["RESET_DISPATCH_SPAWN_LOCATION()"],
      "description": "RESET_DISPATCH_SPAWN_LOCATION()"
    },
    "SET_DISPATCH_SPAWN_LOCATION": {
      "prefix": "SET_DISPATCH_SPAWN_LOCATION()",
      "body": [
        "SET_DISPATCH_SPAWN_LOCATION(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "SET_DISPATCH_SPAWN_LOCATION()"
    },
    "RESET_DISPATCH_IDEAL_SPAWN_DISTANCE": {
      "prefix": "RESET_DISPATCH_IDEAL_SPAWN_DISTANCE()",
      "body": ["RESET_DISPATCH_IDEAL_SPAWN_DISTANCE()"],
      "description": "RESET_DISPATCH_IDEAL_SPAWN_DISTANCE()"
    },
    "SET_DISPATCH_IDEAL_SPAWN_DISTANCE": {
      "prefix": "SET_DISPATCH_IDEAL_SPAWN_DISTANCE()",
      "body": ["SET_DISPATCH_IDEAL_SPAWN_DISTANCE(${1:float distance})"],
      "description": "SET_DISPATCH_IDEAL_SPAWN_DISTANCE()"
    },
    "RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS": {
      "prefix": "RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS()",
      "body": ["RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(${1:Any p0})"],
      "description": "RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS()"
    },
    "SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS": {
      "prefix": "SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS()",
      "body": [
        "SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(${1:Any p0}, ${2:float p1})"
      ],
      "description": "SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS()"
    },
    "SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER": {
      "prefix": "SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER()",
      "body": [
        "SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER(${1:Any p0}, ${2:float p1})"
      ],
      "description": "SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER()"
    },
    "ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA": {
      "prefix": "ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA()",
      "body": [
        "ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float width})"
      ],
      "description": "ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA()"
    },
    "ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA": {
      "prefix": "ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA()",
      "body": [
        "ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA(${1:float x1}, ${2:float y1}, ${3:float x2}, ${4:float y2})"
      ],
      "description": "ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA()"
    },
    "REMOVE_DISPATCH_SPAWN_BLOCKING_AREA": {
      "prefix": "REMOVE_DISPATCH_SPAWN_BLOCKING_AREA()",
      "body": ["REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(${1:int p0})"],
      "description": "REMOVE_DISPATCH_SPAWN_BLOCKING_AREA()"
    },
    "RESET_DISPATCH_SPAWN_BLOCKING_AREAS": {
      "prefix": "RESET_DISPATCH_SPAWN_BLOCKING_AREAS()",
      "body": ["RESET_DISPATCH_SPAWN_BLOCKING_AREAS()"],
      "description": "RESET_DISPATCH_SPAWN_BLOCKING_AREAS()"
    },
    "RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN": {
      "prefix": "RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN()",
      "body": ["RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN()"],
      "description": "RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN()"
    },
    "SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN": {
      "prefix": "SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN()",
      "body": ["SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN(${1:int p0}, ${2:int p1})"],
      "description": "SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN()"
    },
    "ADD_TACTICAL_NAV_MESH_POINT": {
      "prefix": "ADD_TACTICAL_NAV_MESH_POINT()",
      "body": [
        "ADD_TACTICAL_NAV_MESH_POINT(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "ADD_TACTICAL_NAV_MESH_POINT()"
    },
    "CLEAR_TACTICAL_NAV_MESH_POINTS": {
      "prefix": "CLEAR_TACTICAL_NAV_MESH_POINTS()",
      "body": ["CLEAR_TACTICAL_NAV_MESH_POINTS()"],
      "description": "CLEAR_TACTICAL_NAV_MESH_POINTS()"
    },
    "SET_RIOT_MODE_ENABLED": {
      "prefix": "SET_RIOT_MODE_ENABLED()",
      "body": ["SET_RIOT_MODE_ENABLED(${1:BOOL toggle})"],
      "description": "SET_RIOT_MODE_ENABLED()"
    },
    "DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING": {
      "prefix": "DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING()",
      "body": [
        "DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING(${1:int p0}, ${2:const char* windowTitle}, ${3:Any* p2}, ${4:const char* defaultText}, ${5:const char* defaultConcat1}, ${6:const char* defaultConcat2}, ${7:const char* defaultConcat3}, ${8:const char* defaultConcat4}, ${9:const char* defaultConcat5}, ${10:const char* defaultConcat6}, ${11:const char* defaultConcat7}, ${12:int maxInputLength})"
      ],
      "description": "DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING()"
    },
    "DISPLAY_ONSCREEN_KEYBOARD": {
      "prefix": "DISPLAY_ONSCREEN_KEYBOARD()",
      "body": [
        "DISPLAY_ONSCREEN_KEYBOARD(${1:int p0}, ${2:const char* windowTitle}, ${3:const char* p2}, ${4:const char* defaultText}, ${5:const char* defaultConcat1}, ${6:const char* defaultConcat2}, ${7:const char* defaultConcat3}, ${8:int maxInputLength})"
      ],
      "description": "DISPLAY_ONSCREEN_KEYBOARD()"
    },
    "UPDATE_ONSCREEN_KEYBOARD": {
      "prefix": "UPDATE_ONSCREEN_KEYBOARD()",
      "body": ["UPDATE_ONSCREEN_KEYBOARD()"],
      "description": "UPDATE_ONSCREEN_KEYBOARD()"
    },
    "CANCEL_ONSCREEN_KEYBOARD": {
      "prefix": "CANCEL_ONSCREEN_KEYBOARD()",
      "body": ["CANCEL_ONSCREEN_KEYBOARD()"],
      "description": "CANCEL_ONSCREEN_KEYBOARD()"
    },
    "NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS": {
      "prefix": "NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS()",
      "body": [
        "NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS(${1:int p0})"
      ],
      "description": "NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS()"
    },
    "ACTION_MANAGER_ENABLE_ACTION": {
      "prefix": "ACTION_MANAGER_ENABLE_ACTION()",
      "body": ["ACTION_MANAGER_ENABLE_ACTION(${1:Hash hash}, ${2:BOOL enable})"],
      "description": "ACTION_MANAGER_ENABLE_ACTION()"
    },
    "GET_REAL_WORLD_TIME": {
      "prefix": "GET_REAL_WORLD_TIME()",
      "body": ["GET_REAL_WORLD_TIME()"],
      "description": "GET_REAL_WORLD_TIME()"
    },
    "SUPRESS_RANDOM_EVENT_THIS_FRAME": {
      "prefix": "SUPRESS_RANDOM_EVENT_THIS_FRAME()",
      "body": [
        "SUPRESS_RANDOM_EVENT_THIS_FRAME(${1:int eventType}, ${2:BOOL suppress})"
      ],
      "description": "SUPRESS_RANDOM_EVENT_THIS_FRAME()"
    },
    "SET_EXPLOSIVE_AMMO_THIS_FRAME": {
      "prefix": "SET_EXPLOSIVE_AMMO_THIS_FRAME()",
      "body": ["SET_EXPLOSIVE_AMMO_THIS_FRAME(${1:Player player})"],
      "description": "SET_EXPLOSIVE_AMMO_THIS_FRAME()"
    },
    "SET_FIRE_AMMO_THIS_FRAME": {
      "prefix": "SET_FIRE_AMMO_THIS_FRAME()",
      "body": ["SET_FIRE_AMMO_THIS_FRAME(${1:Player player})"],
      "description": "SET_FIRE_AMMO_THIS_FRAME()"
    },
    "SET_EXPLOSIVE_MELEE_THIS_FRAME": {
      "prefix": "SET_EXPLOSIVE_MELEE_THIS_FRAME()",
      "body": ["SET_EXPLOSIVE_MELEE_THIS_FRAME(${1:Player player})"],
      "description": "SET_EXPLOSIVE_MELEE_THIS_FRAME()"
    },
    "SET_SUPER_JUMP_THIS_FRAME": {
      "prefix": "SET_SUPER_JUMP_THIS_FRAME()",
      "body": ["SET_SUPER_JUMP_THIS_FRAME(${1:Player player})"],
      "description": "SET_SUPER_JUMP_THIS_FRAME()"
    },
    "SET_BEAST_JUMP_THIS_FRAME": {
      "prefix": "SET_BEAST_JUMP_THIS_FRAME()",
      "body": ["SET_BEAST_JUMP_THIS_FRAME(${1:Player player})"],
      "description": "SET_BEAST_JUMP_THIS_FRAME()"
    },
    "SET_FORCED_JUMP_THIS_FRAME": {
      "prefix": "SET_FORCED_JUMP_THIS_FRAME()",
      "body": ["SET_FORCED_JUMP_THIS_FRAME(${1:Player player})"],
      "description": "SET_FORCED_JUMP_THIS_FRAME()"
    },
    "HAS_GAME_INSTALLED_THIS_SESSION": {
      "prefix": "HAS_GAME_INSTALLED_THIS_SESSION()",
      "body": ["HAS_GAME_INSTALLED_THIS_SESSION()"],
      "description": "HAS_GAME_INSTALLED_THIS_SESSION()"
    },
    "SET_TICKER_JOHNMARSTON_IS_DONE": {
      "prefix": "SET_TICKER_JOHNMARSTON_IS_DONE()",
      "body": ["SET_TICKER_JOHNMARSTON_IS_DONE()"],
      "description": "SET_TICKER_JOHNMARSTON_IS_DONE()"
    },
    "ARE_PROFILE_SETTINGS_VALID": {
      "prefix": "ARE_PROFILE_SETTINGS_VALID()",
      "body": ["ARE_PROFILE_SETTINGS_VALID()"],
      "description": "ARE_PROFILE_SETTINGS_VALID()"
    },
    "PREVENT_ARREST_STATE_THIS_FRAME": {
      "prefix": "PREVENT_ARREST_STATE_THIS_FRAME()",
      "body": ["PREVENT_ARREST_STATE_THIS_FRAME()"],
      "description": "PREVENT_ARREST_STATE_THIS_FRAME()"
    },
    "FORCE_GAME_STATE_PLAYING": {
      "prefix": "FORCE_GAME_STATE_PLAYING()",
      "body": ["FORCE_GAME_STATE_PLAYING()"],
      "description": "FORCE_GAME_STATE_PLAYING()"
    },
    "SCRIPT_RACE_INIT": {
      "prefix": "SCRIPT_RACE_INIT()",
      "body": [
        "SCRIPT_RACE_INIT(${1:int p0}, ${2:int p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "SCRIPT_RACE_INIT()"
    },
    "SCRIPT_RACE_SHUTDOWN": {
      "prefix": "SCRIPT_RACE_SHUTDOWN()",
      "body": ["SCRIPT_RACE_SHUTDOWN()"],
      "description": "SCRIPT_RACE_SHUTDOWN()"
    },
    "SCRIPT_RACE_PLAYER_HIT_CHECKPOINT": {
      "prefix": "SCRIPT_RACE_PLAYER_HIT_CHECKPOINT()",
      "body": [
        "SCRIPT_RACE_PLAYER_HIT_CHECKPOINT(${1:Player player}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "SCRIPT_RACE_PLAYER_HIT_CHECKPOINT()"
    },
    "SCRIPT_RACE_GET_PLAYER_SPLIT_TIME": {
      "prefix": "SCRIPT_RACE_GET_PLAYER_SPLIT_TIME()",
      "body": [
        "SCRIPT_RACE_GET_PLAYER_SPLIT_TIME(${1:Player player}, ${2:int* p1}, ${3:int* p2})"
      ],
      "description": "SCRIPT_RACE_GET_PLAYER_SPLIT_TIME()"
    },
    "START_END_USER_BENCHMARK": {
      "prefix": "START_END_USER_BENCHMARK()",
      "body": ["START_END_USER_BENCHMARK()"],
      "description": "START_END_USER_BENCHMARK()"
    },
    "STOP_END_USER_BENCHMARK": {
      "prefix": "STOP_END_USER_BENCHMARK()",
      "body": ["STOP_END_USER_BENCHMARK()"],
      "description": "STOP_END_USER_BENCHMARK()"
    },
    "RESET_END_USER_BENCHMARK": {
      "prefix": "RESET_END_USER_BENCHMARK()",
      "body": ["RESET_END_USER_BENCHMARK()"],
      "description": "RESET_END_USER_BENCHMARK()"
    },
    "SAVE_END_USER_BENCHMARK": {
      "prefix": "SAVE_END_USER_BENCHMARK()",
      "body": ["SAVE_END_USER_BENCHMARK()"],
      "description": "SAVE_END_USER_BENCHMARK()"
    },
    "UI_STARTED_END_USER_BENCHMARK": {
      "prefix": "UI_STARTED_END_USER_BENCHMARK()",
      "body": ["UI_STARTED_END_USER_BENCHMARK()"],
      "description": "UI_STARTED_END_USER_BENCHMARK()"
    },
    "LANDING_SCREEN_STARTED_END_USER_BENCHMARK": {
      "prefix": "LANDING_SCREEN_STARTED_END_USER_BENCHMARK()",
      "body": ["LANDING_SCREEN_STARTED_END_USER_BENCHMARK()"],
      "description": "LANDING_SCREEN_STARTED_END_USER_BENCHMARK()"
    },
    "IS_COMMANDLINE_END_USER_BENCHMARK": {
      "prefix": "IS_COMMANDLINE_END_USER_BENCHMARK()",
      "body": ["IS_COMMANDLINE_END_USER_BENCHMARK()"],
      "description": "IS_COMMANDLINE_END_USER_BENCHMARK()"
    },
    "GET_BENCHMARK_ITERATIONS": {
      "prefix": "GET_BENCHMARK_ITERATIONS()",
      "body": ["GET_BENCHMARK_ITERATIONS()"],
      "description": "GET_BENCHMARK_ITERATIONS()"
    },
    "GET_BENCHMARK_PASS": {
      "prefix": "GET_BENCHMARK_PASS()",
      "body": ["GET_BENCHMARK_PASS()"],
      "description": "GET_BENCHMARK_PASS()"
    },
    "RESTART_GAME": {
      "prefix": "RESTART_GAME()",
      "body": ["RESTART_GAME()"],
      "description": "RESTART_GAME()"
    },
    "QUIT_GAME": {
      "prefix": "QUIT_GAME()",
      "body": ["QUIT_GAME()"],
      "description": "QUIT_GAME()"
    },
    "HAS_ASYNC_INSTALL_FINISHED": {
      "prefix": "HAS_ASYNC_INSTALL_FINISHED()",
      "body": ["HAS_ASYNC_INSTALL_FINISHED()"],
      "description": "HAS_ASYNC_INSTALL_FINISHED()"
    },
    "CLEANUP_ASYNC_INSTALL": {
      "prefix": "CLEANUP_ASYNC_INSTALL()",
      "body": ["CLEANUP_ASYNC_INSTALL()"],
      "description": "CLEANUP_ASYNC_INSTALL()"
    },
    "PLM_IS_IN_CONSTRAINED_MODE": {
      "prefix": "PLM_IS_IN_CONSTRAINED_MODE()",
      "body": ["PLM_IS_IN_CONSTRAINED_MODE()"],
      "description": "PLM_IS_IN_CONSTRAINED_MODE()"
    },
    "PLM_GET_CONSTRAINED_DURATION_MS": {
      "prefix": "PLM_GET_CONSTRAINED_DURATION_MS()",
      "body": ["PLM_GET_CONSTRAINED_DURATION_MS()"],
      "description": "PLM_GET_CONSTRAINED_DURATION_MS()"
    },
    "SET_PLAYER_IS_IN_ANIMAL_FORM": {
      "prefix": "SET_PLAYER_IS_IN_ANIMAL_FORM()",
      "body": ["SET_PLAYER_IS_IN_ANIMAL_FORM(${1:BOOL toggle})"],
      "description": "SET_PLAYER_IS_IN_ANIMAL_FORM()"
    },
    "GET_IS_PLAYER_IN_ANIMAL_FORM": {
      "prefix": "GET_IS_PLAYER_IN_ANIMAL_FORM()",
      "body": ["GET_IS_PLAYER_IN_ANIMAL_FORM()"],
      "description": "GET_IS_PLAYER_IN_ANIMAL_FORM()"
    },
    "SET_PLAYER_IS_REPEATING_A_MISSION": {
      "prefix": "SET_PLAYER_IS_REPEATING_A_MISSION()",
      "body": ["SET_PLAYER_IS_REPEATING_A_MISSION(${1:BOOL toggle})"],
      "description": "SET_PLAYER_IS_REPEATING_A_MISSION()"
    },
    "DISABLE_SCREEN_DIMMING_THIS_FRAME": {
      "prefix": "DISABLE_SCREEN_DIMMING_THIS_FRAME()",
      "body": ["DISABLE_SCREEN_DIMMING_THIS_FRAME()"],
      "description": "DISABLE_SCREEN_DIMMING_THIS_FRAME()"
    },
    "GET_CITY_DENSITY": {
      "prefix": "GET_CITY_DENSITY()",
      "body": ["GET_CITY_DENSITY()"],
      "description": "GET_CITY_DENSITY()"
    },
    "USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE": {
      "prefix": "USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE()",
      "body": ["USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE()"],
      "description": "USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE()"
    },
    "SET_CONTENT_ID_INDEX": {
      "prefix": "SET_CONTENT_ID_INDEX()",
      "body": ["SET_CONTENT_ID_INDEX(${1:Hash contentId}, ${2:int index})"],
      "description": "SET_CONTENT_ID_INDEX()"
    },
    "GET_CONTENT_ID_INDEX": {
      "prefix": "GET_CONTENT_ID_INDEX()",
      "body": ["GET_CONTENT_ID_INDEX(${1:Hash contentId})"],
      "description": "GET_CONTENT_ID_INDEX()"
    },
    "_SET_CONTENT_PROP_TYPE": {
      "prefix": "_SET_CONTENT_PROP_TYPE()",
      "body": ["_SET_CONTENT_PROP_TYPE(${1:Hash model}, ${2:int type})"],
      "description": "_SET_CONTENT_PROP_TYPE()"
    },
    "_GET_CONTENT_PROP_TYPE": {
      "prefix": "_GET_CONTENT_PROP_TYPE()",
      "body": ["_GET_CONTENT_PROP_TYPE(${1:Hash model})"],
      "description": "_GET_CONTENT_PROP_TYPE()"
    },
    "CREATE_MOBILE_PHONE": {
      "prefix": "CREATE_MOBILE_PHONE()",
      "body": ["CREATE_MOBILE_PHONE(${1:int phoneType})"],
      "description": "CREATE_MOBILE_PHONE()"
    },
    "DESTROY_MOBILE_PHONE": {
      "prefix": "DESTROY_MOBILE_PHONE()",
      "body": ["DESTROY_MOBILE_PHONE()"],
      "description": "DESTROY_MOBILE_PHONE()"
    },
    "SET_MOBILE_PHONE_SCALE": {
      "prefix": "SET_MOBILE_PHONE_SCALE()",
      "body": ["SET_MOBILE_PHONE_SCALE(${1:float scale})"],
      "description": "SET_MOBILE_PHONE_SCALE()"
    },
    "SET_MOBILE_PHONE_ROTATION": {
      "prefix": "SET_MOBILE_PHONE_ROTATION()",
      "body": [
        "SET_MOBILE_PHONE_ROTATION(${1:float rotX}, ${2:float rotY}, ${3:float rotZ}, ${4:Any p3})"
      ],
      "description": "SET_MOBILE_PHONE_ROTATION()"
    },
    "GET_MOBILE_PHONE_ROTATION": {
      "prefix": "GET_MOBILE_PHONE_ROTATION()",
      "body": [
        "GET_MOBILE_PHONE_ROTATION(${1:Vector3* rotation}, ${2:Vehicle p1})"
      ],
      "description": "GET_MOBILE_PHONE_ROTATION()"
    },
    "SET_MOBILE_PHONE_POSITION": {
      "prefix": "SET_MOBILE_PHONE_POSITION()",
      "body": [
        "SET_MOBILE_PHONE_POSITION(${1:float posX}, ${2:float posY}, ${3:float posZ})"
      ],
      "description": "SET_MOBILE_PHONE_POSITION()"
    },
    "GET_MOBILE_PHONE_POSITION": {
      "prefix": "GET_MOBILE_PHONE_POSITION()",
      "body": ["GET_MOBILE_PHONE_POSITION(${1:Vector3* position})"],
      "description": "GET_MOBILE_PHONE_POSITION()"
    },
    "SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN": {
      "prefix": "SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN()",
      "body": ["SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN(${1:BOOL toggle})"],
      "description": "SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN()"
    },
    "CAN_PHONE_BE_SEEN_ON_SCREEN": {
      "prefix": "CAN_PHONE_BE_SEEN_ON_SCREEN()",
      "body": ["CAN_PHONE_BE_SEEN_ON_SCREEN()"],
      "description": "CAN_PHONE_BE_SEEN_ON_SCREEN()"
    },
    "SET_MOBILE_PHONE_DOF_STATE": {
      "prefix": "SET_MOBILE_PHONE_DOF_STATE()",
      "body": ["SET_MOBILE_PHONE_DOF_STATE(${1:BOOL toggle})"],
      "description": "SET_MOBILE_PHONE_DOF_STATE()"
    },
    "CELL_SET_INPUT": {
      "prefix": "CELL_SET_INPUT()",
      "body": ["CELL_SET_INPUT(${1:int direction})"],
      "description": "CELL_SET_INPUT()"
    },
    "CELL_HORIZONTAL_MODE_TOGGLE": {
      "prefix": "CELL_HORIZONTAL_MODE_TOGGLE()",
      "body": ["CELL_HORIZONTAL_MODE_TOGGLE(${1:BOOL toggle})"],
      "description": "CELL_HORIZONTAL_MODE_TOGGLE()"
    },
    "CELL_CAM_ACTIVATE": {
      "prefix": "CELL_CAM_ACTIVATE()",
      "body": ["CELL_CAM_ACTIVATE(${1:BOOL p0}, ${2:BOOL p1})"],
      "description": "CELL_CAM_ACTIVATE()"
    },
    "CELL_CAM_ACTIVATE_SELFIE_MODE": {
      "prefix": "CELL_CAM_ACTIVATE_SELFIE_MODE()",
      "body": ["CELL_CAM_ACTIVATE_SELFIE_MODE(${1:BOOL toggle})"],
      "description": "CELL_CAM_ACTIVATE_SELFIE_MODE()"
    },
    "CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE": {
      "prefix": "CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE()",
      "body": ["CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE(${1:BOOL toggle})"],
      "description": "CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE()"
    },
    "CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING": {
      "prefix": "CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING()",
      "body": ["CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING(${1:float p0})"],
      "description": "CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING()"
    },
    "CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET": {
      "prefix": "CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET()",
      "body": [
        "CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET(${1:float horizontalPan})"
      ],
      "description": "CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET()"
    },
    "CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET": {
      "prefix": "CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET()",
      "body": ["CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET(${1:float vertPan})"],
      "description": "CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET()"
    },
    "CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET": {
      "prefix": "CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET()",
      "body": ["CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET(${1:float roll})"],
      "description": "CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET()"
    },
    "CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING": {
      "prefix": "CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING()",
      "body": [
        "CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING(${1:float distanceScaling})"
      ],
      "description": "CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING()"
    },
    "CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET": {
      "prefix": "CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET()",
      "body": ["CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET(${1:float yaw})"],
      "description": "CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET()"
    },
    "CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET": {
      "prefix": "CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET()",
      "body": ["CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET(${1:float roll})"],
      "description": "CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET()"
    },
    "CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET": {
      "prefix": "CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET()",
      "body": ["CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET(${1:float pitch})"],
      "description": "CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET()"
    },
    "CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK": {
      "prefix": "CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK()",
      "body": ["CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK(${1:Entity entity})"],
      "description": "CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK()"
    },
    "GET_MOBILE_PHONE_RENDER_ID": {
      "prefix": "GET_MOBILE_PHONE_RENDER_ID()",
      "body": ["GET_MOBILE_PHONE_RENDER_ID(${1:int* renderId})"],
      "description": "GET_MOBILE_PHONE_RENDER_ID()"
    },
    "NETWORK_INITIALIZE_CASH": {
      "prefix": "NETWORK_INITIALIZE_CASH()",
      "body": ["NETWORK_INITIALIZE_CASH(${1:int wallet}, ${2:int bank})"],
      "description": "NETWORK_INITIALIZE_CASH()"
    },
    "NETWORK_DELETE_CHARACTER": {
      "prefix": "NETWORK_DELETE_CHARACTER()",
      "body": [
        "NETWORK_DELETE_CHARACTER(${1:int characterSlot}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_DELETE_CHARACTER()"
    },
    "NETWORK_MANUAL_DELETE_CHARACTER": {
      "prefix": "NETWORK_MANUAL_DELETE_CHARACTER()",
      "body": ["NETWORK_MANUAL_DELETE_CHARACTER(${1:int characterSlot})"],
      "description": "NETWORK_MANUAL_DELETE_CHARACTER()"
    },
    "NETWORK_GET_PLAYER_IS_HIGH_EARNER": {
      "prefix": "NETWORK_GET_PLAYER_IS_HIGH_EARNER()",
      "body": ["NETWORK_GET_PLAYER_IS_HIGH_EARNER()"],
      "description": "NETWORK_GET_PLAYER_IS_HIGH_EARNER()"
    },
    "NETWORK_CLEAR_CHARACTER_WALLET": {
      "prefix": "NETWORK_CLEAR_CHARACTER_WALLET()",
      "body": ["NETWORK_CLEAR_CHARACTER_WALLET(${1:int characterSlot})"],
      "description": "NETWORK_CLEAR_CHARACTER_WALLET()"
    },
    "NETWORK_GIVE_PLAYER_JOBSHARE_CASH": {
      "prefix": "NETWORK_GIVE_PLAYER_JOBSHARE_CASH()",
      "body": [
        "NETWORK_GIVE_PLAYER_JOBSHARE_CASH(${1:int amount}, ${2:Any* gamerHandle})"
      ],
      "description": "NETWORK_GIVE_PLAYER_JOBSHARE_CASH()"
    },
    "NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH": {
      "prefix": "NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH()",
      "body": [
        "NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH(${1:int value}, ${2:Any* gamerHandle})"
      ],
      "description": "NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH()"
    },
    "NETWORK_CAN_SHARE_JOB_CASH": {
      "prefix": "NETWORK_CAN_SHARE_JOB_CASH()",
      "body": ["NETWORK_CAN_SHARE_JOB_CASH()"],
      "description": "NETWORK_CAN_SHARE_JOB_CASH()"
    },
    "NETWORK_REFUND_CASH": {
      "prefix": "NETWORK_REFUND_CASH()",
      "body": [
        "NETWORK_REFUND_CASH(${1:int index}, ${2:const char* context}, ${3:const char* reason}, ${4:BOOL p3})"
      ],
      "description": "NETWORK_REFUND_CASH()"
    },
    "NETWORK_DEDUCT_CASH": {
      "prefix": "NETWORK_DEDUCT_CASH()",
      "body": [
        "NETWORK_DEDUCT_CASH(${1:int amount}, ${2:const char* p1}, ${3:const char* p2}, ${4:BOOL p3}, ${5:BOOL p4}, ${6:BOOL p5})"
      ],
      "description": "NETWORK_DEDUCT_CASH()"
    },
    "NETWORK_MONEY_CAN_BET": {
      "prefix": "NETWORK_MONEY_CAN_BET()",
      "body": [
        "NETWORK_MONEY_CAN_BET(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_MONEY_CAN_BET()"
    },
    "NETWORK_CAN_BET": {
      "prefix": "NETWORK_CAN_BET()",
      "body": ["NETWORK_CAN_BET(${1:int amount})"],
      "description": "NETWORK_CAN_BET()"
    },
    "NETWORK_CASINO_CAN_BET": {
      "prefix": "NETWORK_CASINO_CAN_BET()",
      "body": ["NETWORK_CASINO_CAN_BET(${1:Hash hash})"],
      "description": "NETWORK_CASINO_CAN_BET()"
    },
    "NETWORK_CASINO_CAN_BET_PVC": {
      "prefix": "NETWORK_CASINO_CAN_BET_PVC()",
      "body": ["NETWORK_CASINO_CAN_BET_PVC()"],
      "description": "NETWORK_CASINO_CAN_BET_PVC()"
    },
    "NETWORK_CASINO_CAN_BET_AMOUNT": {
      "prefix": "NETWORK_CASINO_CAN_BET_AMOUNT()",
      "body": ["NETWORK_CASINO_CAN_BET_AMOUNT(${1:Any p0})"],
      "description": "NETWORK_CASINO_CAN_BET_AMOUNT()"
    },
    "NETWORK_CASINO_CAN_BUY_CHIPS_PVC": {
      "prefix": "NETWORK_CASINO_CAN_BUY_CHIPS_PVC()",
      "body": ["NETWORK_CASINO_CAN_BUY_CHIPS_PVC()"],
      "description": "NETWORK_CASINO_CAN_BUY_CHIPS_PVC()"
    },
    "NETWORK_CASINO_BUY_CHIPS": {
      "prefix": "NETWORK_CASINO_BUY_CHIPS()",
      "body": ["NETWORK_CASINO_BUY_CHIPS(${1:int p0}, ${2:int p1})"],
      "description": "NETWORK_CASINO_BUY_CHIPS()"
    },
    "NETWORK_CASINO_SELL_CHIPS": {
      "prefix": "NETWORK_CASINO_SELL_CHIPS()",
      "body": ["NETWORK_CASINO_SELL_CHIPS(${1:int p0}, ${2:int p1})"],
      "description": "NETWORK_CASINO_SELL_CHIPS()"
    },
    "NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE": {
      "prefix": "NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE()",
      "body": ["NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE()"],
      "description": "NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE()"
    },
    "CAN_PAY_AMOUNT_TO_BOSS": {
      "prefix": "CAN_PAY_AMOUNT_TO_BOSS()",
      "body": [
        "CAN_PAY_AMOUNT_TO_BOSS(${1:int p0}, ${2:int p1}, ${3:int amount}, ${4:int* p3})"
      ],
      "description": "CAN_PAY_AMOUNT_TO_BOSS()"
    },
    "NETWORK_EARN_FROM_PICKUP": {
      "prefix": "NETWORK_EARN_FROM_PICKUP()",
      "body": ["NETWORK_EARN_FROM_PICKUP(${1:int amount})"],
      "description": "NETWORK_EARN_FROM_PICKUP()"
    },
    "NETWORK_EARN_FROM_CASHING_OUT": {
      "prefix": "NETWORK_EARN_FROM_CASHING_OUT()",
      "body": ["NETWORK_EARN_FROM_CASHING_OUT(${1:int amount})"],
      "description": "NETWORK_EARN_FROM_CASHING_OUT()"
    },
    "NETWORK_EARN_FROM_GANGATTACK_PICKUP": {
      "prefix": "NETWORK_EARN_FROM_GANGATTACK_PICKUP()",
      "body": ["NETWORK_EARN_FROM_GANGATTACK_PICKUP(${1:int amount})"],
      "description": "NETWORK_EARN_FROM_GANGATTACK_PICKUP()"
    },
    "NETWORK_EARN_ASSASSINATE_TARGET_KILLED": {
      "prefix": "NETWORK_EARN_ASSASSINATE_TARGET_KILLED()",
      "body": ["NETWORK_EARN_ASSASSINATE_TARGET_KILLED(${1:int amount})"],
      "description": "NETWORK_EARN_ASSASSINATE_TARGET_KILLED()"
    },
    "NETWORK_EARN_FROM_ROB_ARMORED_CARS": {
      "prefix": "NETWORK_EARN_FROM_ROB_ARMORED_CARS()",
      "body": ["NETWORK_EARN_FROM_ROB_ARMORED_CARS(${1:int amount})"],
      "description": "NETWORK_EARN_FROM_ROB_ARMORED_CARS()"
    },
    "NETWORK_EARN_FROM_CRATE_DROP": {
      "prefix": "NETWORK_EARN_FROM_CRATE_DROP()",
      "body": ["NETWORK_EARN_FROM_CRATE_DROP(${1:int amount})"],
      "description": "NETWORK_EARN_FROM_CRATE_DROP()"
    },
    "NETWORK_EARN_FROM_BETTING": {
      "prefix": "NETWORK_EARN_FROM_BETTING()",
      "body": ["NETWORK_EARN_FROM_BETTING(${1:int amount}, ${2:const char* p1})"],
      "description": "NETWORK_EARN_FROM_BETTING()"
    },
    "NETWORK_EARN_FROM_JOB": {
      "prefix": "NETWORK_EARN_FROM_JOB()",
      "body": ["NETWORK_EARN_FROM_JOB(${1:int amount}, ${2:const char* p1})"],
      "description": "NETWORK_EARN_FROM_JOB()"
    },
    "NETWORK_EARN_FROM_JOBX2": {
      "prefix": "NETWORK_EARN_FROM_JOBX2()",
      "body": ["NETWORK_EARN_FROM_JOBX2(${1:int amount}, ${2:const char* p1})"],
      "description": "NETWORK_EARN_FROM_JOBX2()"
    },
    "NETWORK_EARN_FROM_PREMIUM_JOB": {
      "prefix": "NETWORK_EARN_FROM_PREMIUM_JOB()",
      "body": [
        "NETWORK_EARN_FROM_PREMIUM_JOB(${1:int amount}, ${2:const char* p1})"
      ],
      "description": "NETWORK_EARN_FROM_PREMIUM_JOB()"
    },
    "NETWORK_EARN_FROM_BEND_JOB": {
      "prefix": "NETWORK_EARN_FROM_BEND_JOB()",
      "body": [
        "NETWORK_EARN_FROM_BEND_JOB(${1:int amount}, ${2:const char* heistHash})"
      ],
      "description": "NETWORK_EARN_FROM_BEND_JOB()"
    },
    "NETWORK_EARN_FROM_CHALLENGE_WIN": {
      "prefix": "NETWORK_EARN_FROM_CHALLENGE_WIN()",
      "body": [
        "NETWORK_EARN_FROM_CHALLENGE_WIN(${1:Any p0}, ${2:Any* p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_EARN_FROM_CHALLENGE_WIN()"
    },
    "NETWORK_EARN_FROM_BOUNTY": {
      "prefix": "NETWORK_EARN_FROM_BOUNTY()",
      "body": [
        "NETWORK_EARN_FROM_BOUNTY(${1:int amount}, ${2:Any* gamerHandle}, ${3:Any* p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_EARN_FROM_BOUNTY()"
    },
    "NETWORK_EARN_FROM_IMPORT_EXPORT": {
      "prefix": "NETWORK_EARN_FROM_IMPORT_EXPORT()",
      "body": [
        "NETWORK_EARN_FROM_IMPORT_EXPORT(${1:int amount}, ${2:Hash modelHash})"
      ],
      "description": "NETWORK_EARN_FROM_IMPORT_EXPORT()"
    },
    "NETWORK_EARN_FROM_HOLDUPS": {
      "prefix": "NETWORK_EARN_FROM_HOLDUPS()",
      "body": ["NETWORK_EARN_FROM_HOLDUPS(${1:int amount})"],
      "description": "NETWORK_EARN_FROM_HOLDUPS()"
    },
    "NETWORK_EARN_FROM_PROPERTY": {
      "prefix": "NETWORK_EARN_FROM_PROPERTY()",
      "body": [
        "NETWORK_EARN_FROM_PROPERTY(${1:int amount}, ${2:Hash propertyName})"
      ],
      "description": "NETWORK_EARN_FROM_PROPERTY()"
    },
    "NETWORK_EARN_FROM_AI_TARGET_KILL": {
      "prefix": "NETWORK_EARN_FROM_AI_TARGET_KILL()",
      "body": ["NETWORK_EARN_FROM_AI_TARGET_KILL(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_EARN_FROM_AI_TARGET_KILL()"
    },
    "NETWORK_EARN_FROM_NOT_BADSPORT": {
      "prefix": "NETWORK_EARN_FROM_NOT_BADSPORT()",
      "body": ["NETWORK_EARN_FROM_NOT_BADSPORT(${1:int amount})"],
      "description": "NETWORK_EARN_FROM_NOT_BADSPORT()"
    },
    "NETWORK_EARN_FROM_VEHICLE": {
      "prefix": "NETWORK_EARN_FROM_VEHICLE()",
      "body": [
        "NETWORK_EARN_FROM_VEHICLE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7})"
      ],
      "description": "NETWORK_EARN_FROM_VEHICLE()"
    },
    "NETWORK_EARN_FROM_PERSONAL_VEHICLE": {
      "prefix": "NETWORK_EARN_FROM_PERSONAL_VEHICLE()",
      "body": [
        "NETWORK_EARN_FROM_PERSONAL_VEHICLE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8})"
      ],
      "description": "NETWORK_EARN_FROM_PERSONAL_VEHICLE()"
    },
    "NETWORK_EARN_FROM_DAILY_OBJECTIVES": {
      "prefix": "NETWORK_EARN_FROM_DAILY_OBJECTIVES()",
      "body": [
        "NETWORK_EARN_FROM_DAILY_OBJECTIVES(${1:int amount}, ${2:const char* type}, ${3:int characterSlot})"
      ],
      "description": "NETWORK_EARN_FROM_DAILY_OBJECTIVES()"
    },
    "NETWORK_EARN_FROM_AMBIENT_JOB": {
      "prefix": "NETWORK_EARN_FROM_AMBIENT_JOB()",
      "body": [
        "NETWORK_EARN_FROM_AMBIENT_JOB(${1:int p0}, ${2:const char* p1}, ${3:Any* p2})"
      ],
      "description": "NETWORK_EARN_FROM_AMBIENT_JOB()"
    },
    "NETWORK_EARN_FROM_JOB_BONUS": {
      "prefix": "NETWORK_EARN_FROM_JOB_BONUS()",
      "body": [
        "NETWORK_EARN_FROM_JOB_BONUS(${1:Any p0}, ${2:Any* p1}, ${3:Any* p2})"
      ],
      "description": "NETWORK_EARN_FROM_JOB_BONUS()"
    },
    "NETWORK_EARN_FROM_CRIMINAL_MASTERMIND": {
      "prefix": "NETWORK_EARN_FROM_CRIMINAL_MASTERMIND()",
      "body": [
        "NETWORK_EARN_FROM_CRIMINAL_MASTERMIND(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_EARN_FROM_CRIMINAL_MASTERMIND()"
    },
    "NETWORK_EARN_HEIST_AWARD": {
      "prefix": "NETWORK_EARN_HEIST_AWARD()",
      "body": ["NETWORK_EARN_HEIST_AWARD(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"],
      "description": "NETWORK_EARN_HEIST_AWARD()"
    },
    "NETWORK_EARN_FIRST_TIME_BONUS": {
      "prefix": "NETWORK_EARN_FIRST_TIME_BONUS()",
      "body": [
        "NETWORK_EARN_FIRST_TIME_BONUS(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_EARN_FIRST_TIME_BONUS()"
    },
    "NETWORK_EARN_GOON": {
      "prefix": "NETWORK_EARN_GOON()",
      "body": ["NETWORK_EARN_GOON(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"],
      "description": "NETWORK_EARN_GOON()"
    },
    "NETWORK_EARN_BOSS": {
      "prefix": "NETWORK_EARN_BOSS()",
      "body": ["NETWORK_EARN_BOSS(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"],
      "description": "NETWORK_EARN_BOSS()"
    },
    "NETWORK_EARN_AGENCY": {
      "prefix": "NETWORK_EARN_AGENCY()",
      "body": [
        "NETWORK_EARN_AGENCY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_EARN_AGENCY()"
    },
    "NETWORK_EARN_FROM_WAREHOUSE": {
      "prefix": "NETWORK_EARN_FROM_WAREHOUSE()",
      "body": ["NETWORK_EARN_FROM_WAREHOUSE(${1:int amount}, ${2:int id})"],
      "description": "NETWORK_EARN_FROM_WAREHOUSE()"
    },
    "NETWORK_EARN_FROM_CONTRABAND": {
      "prefix": "NETWORK_EARN_FROM_CONTRABAND()",
      "body": ["NETWORK_EARN_FROM_CONTRABAND(${1:int amount}, ${2:Any p1})"],
      "description": "NETWORK_EARN_FROM_CONTRABAND()"
    },
    "NETWORK_EARN_FROM_DESTROYING_CONTRABAND": {
      "prefix": "NETWORK_EARN_FROM_DESTROYING_CONTRABAND()",
      "body": [
        "NETWORK_EARN_FROM_DESTROYING_CONTRABAND(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_EARN_FROM_DESTROYING_CONTRABAND()"
    },
    "NETWORK_EARN_FROM_SMUGGLER_WORK": {
      "prefix": "NETWORK_EARN_FROM_SMUGGLER_WORK()",
      "body": [
        "NETWORK_EARN_FROM_SMUGGLER_WORK(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
      ],
      "description": "NETWORK_EARN_FROM_SMUGGLER_WORK()"
    },
    "NETWORK_EARN_FROM_HANGAR_TRADE": {
      "prefix": "NETWORK_EARN_FROM_HANGAR_TRADE()",
      "body": ["NETWORK_EARN_FROM_HANGAR_TRADE(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_EARN_FROM_HANGAR_TRADE()"
    },
    "NETWORK_EARN_PURCHASE_CLUB_HOUSE": {
      "prefix": "NETWORK_EARN_PURCHASE_CLUB_HOUSE()",
      "body": ["NETWORK_EARN_PURCHASE_CLUB_HOUSE(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_EARN_PURCHASE_CLUB_HOUSE()"
    },
    "NETWORK_EARN_FROM_BUSINESS_PRODUCT": {
      "prefix": "NETWORK_EARN_FROM_BUSINESS_PRODUCT()",
      "body": [
        "NETWORK_EARN_FROM_BUSINESS_PRODUCT(${1:int amount}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_EARN_FROM_BUSINESS_PRODUCT()"
    },
    "NETWORK_EARN_FROM_VEHICLE_EXPORT": {
      "prefix": "NETWORK_EARN_FROM_VEHICLE_EXPORT()",
      "body": [
        "NETWORK_EARN_FROM_VEHICLE_EXPORT(${1:int amount}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_EARN_FROM_VEHICLE_EXPORT()"
    },
    "NETWORK_EARN_SMUGGLER_AGENCY": {
      "prefix": "NETWORK_EARN_SMUGGLER_AGENCY()",
      "body": [
        "NETWORK_EARN_SMUGGLER_AGENCY(${1:int amount}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_EARN_SMUGGLER_AGENCY()"
    },
    "NETWORK_EARN_BOUNTY_HUNTER_REWARD": {
      "prefix": "NETWORK_EARN_BOUNTY_HUNTER_REWARD()",
      "body": ["NETWORK_EARN_BOUNTY_HUNTER_REWARD(${1:Any p0})"],
      "description": "NETWORK_EARN_BOUNTY_HUNTER_REWARD()"
    },
    "NETWORK_EARN_FROM_BUSINESS_BATTLE": {
      "prefix": "NETWORK_EARN_FROM_BUSINESS_BATTLE()",
      "body": ["NETWORK_EARN_FROM_BUSINESS_BATTLE(${1:Any p0})"],
      "description": "NETWORK_EARN_FROM_BUSINESS_BATTLE()"
    },
    "NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION": {
      "prefix": "NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION()",
      "body": [
        "NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION(${1:Any p0}, ${2:int p1})"
      ],
      "description": "NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION()"
    },
    "NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION": {
      "prefix": "NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION()",
      "body": ["NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION(${1:Any p0})"],
      "description": "NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION()"
    },
    "NETWORK_EARN_FROM_BUSINESS_HUB_SELL": {
      "prefix": "NETWORK_EARN_FROM_BUSINESS_HUB_SELL()",
      "body": [
        "NETWORK_EARN_FROM_BUSINESS_HUB_SELL(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_EARN_FROM_BUSINESS_HUB_SELL()"
    },
    "NETWORK_EARN_FROM_FMBB_BOSS_WORK": {
      "prefix": "NETWORK_EARN_FROM_FMBB_BOSS_WORK()",
      "body": ["NETWORK_EARN_FROM_FMBB_BOSS_WORK(${1:Any p0})"],
      "description": "NETWORK_EARN_FROM_FMBB_BOSS_WORK()"
    },
    "NETWORK_EARN_FMBB_WAGE_BONUS": {
      "prefix": "NETWORK_EARN_FMBB_WAGE_BONUS()",
      "body": ["NETWORK_EARN_FMBB_WAGE_BONUS(${1:Any p0})"],
      "description": "NETWORK_EARN_FMBB_WAGE_BONUS()"
    },
    "NETWORK_CAN_SPEND_MONEY": {
      "prefix": "NETWORK_CAN_SPEND_MONEY()",
      "body": [
        "NETWORK_CAN_SPEND_MONEY(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:Any p4}, ${6:Any p5})"
      ],
      "description": "NETWORK_CAN_SPEND_MONEY()"
    },
    "NETWORK_CAN_SPEND_MONEY2": {
      "prefix": "NETWORK_CAN_SPEND_MONEY2()",
      "body": [
        "NETWORK_CAN_SPEND_MONEY2(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:Any* p4}, ${6:Any p5}, ${7:Any p6})"
      ],
      "description": "NETWORK_CAN_SPEND_MONEY2()"
    },
    "NETWORK_BUY_ITEM": {
      "prefix": "NETWORK_BUY_ITEM()",
      "body": [
        "NETWORK_BUY_ITEM(${1:int amount}, ${2:Hash item}, ${3:Any p2}, ${4:Any p3}, ${5:BOOL p4}, ${6:const char* item_name}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:BOOL p9})"
      ],
      "description": "NETWORK_BUY_ITEM()"
    },
    "NETWORK_SPENT_TAXI": {
      "prefix": "NETWORK_SPENT_TAXI()",
      "body": [
        "NETWORK_SPENT_TAXI(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_SPENT_TAXI()"
    },
    "NETWORK_PAY_EMPLOYEE_WAGE": {
      "prefix": "NETWORK_PAY_EMPLOYEE_WAGE()",
      "body": [
        "NETWORK_PAY_EMPLOYEE_WAGE(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_PAY_EMPLOYEE_WAGE()"
    },
    "NETWORK_PAY_MATCH_ENTRY_FEE": {
      "prefix": "NETWORK_PAY_MATCH_ENTRY_FEE()",
      "body": [
        "NETWORK_PAY_MATCH_ENTRY_FEE(${1:int amount}, ${2:const char* matchId}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "NETWORK_PAY_MATCH_ENTRY_FEE()"
    },
    "NETWORK_SPENT_BETTING": {
      "prefix": "NETWORK_SPENT_BETTING()",
      "body": [
        "NETWORK_SPENT_BETTING(${1:int amount}, ${2:int p1}, ${3:const char* matchId}, ${4:BOOL p3}, ${5:BOOL p4})"
      ],
      "description": "NETWORK_SPENT_BETTING()"
    },
    "NETWORK_SPENT_WAGER": {
      "prefix": "NETWORK_SPENT_WAGER()",
      "body": ["NETWORK_SPENT_WAGER(${1:Any p0}, ${2:Any p1}, ${3:int amount})"],
      "description": "NETWORK_SPENT_WAGER()"
    },
    "NETWORK_SPENT_IN_STRIPCLUB": {
      "prefix": "NETWORK_SPENT_IN_STRIPCLUB()",
      "body": [
        "NETWORK_SPENT_IN_STRIPCLUB(${1:Any p0}, ${2:BOOL p1}, ${3:Any p2}, ${4:BOOL p3})"
      ],
      "description": "NETWORK_SPENT_IN_STRIPCLUB()"
    },
    "NETWORK_BUY_HEALTHCARE": {
      "prefix": "NETWORK_BUY_HEALTHCARE()",
      "body": [
        "NETWORK_BUY_HEALTHCARE(${1:int cost}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_BUY_HEALTHCARE()"
    },
    "NETWORK_BUY_AIRSTRIKE": {
      "prefix": "NETWORK_BUY_AIRSTRIKE()",
      "body": [
        "NETWORK_BUY_AIRSTRIKE(${1:int cost}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_BUY_AIRSTRIKE()"
    },
    "NETWORK_BUY_BACKUP_GANG": {
      "prefix": "NETWORK_BUY_BACKUP_GANG()",
      "body": [
        "NETWORK_BUY_BACKUP_GANG(${1:int p0}, ${2:int p1}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:int npcProvider})"
      ],
      "description": "NETWORK_BUY_BACKUP_GANG()"
    },
    "NETWORK_BUY_HELI_STRIKE": {
      "prefix": "NETWORK_BUY_HELI_STRIKE()",
      "body": [
        "NETWORK_BUY_HELI_STRIKE(${1:int cost}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_BUY_HELI_STRIKE()"
    },
    "NETWORK_SPENT_AMMO_DROP": {
      "prefix": "NETWORK_SPENT_AMMO_DROP()",
      "body": [
        "NETWORK_SPENT_AMMO_DROP(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_AMMO_DROP()"
    },
    "NETWORK_BUY_BOUNTY": {
      "prefix": "NETWORK_BUY_BOUNTY()",
      "body": [
        "NETWORK_BUY_BOUNTY(${1:int amount}, ${2:Player victim}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_BUY_BOUNTY()"
    },
    "NETWORK_BUY_PROPERTY": {
      "prefix": "NETWORK_BUY_PROPERTY()",
      "body": [
        "NETWORK_BUY_PROPERTY(${1:int cost}, ${2:Hash propertyName}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "NETWORK_BUY_PROPERTY()"
    },
    "NETWORK_BUY_SMOKES": {
      "prefix": "NETWORK_BUY_SMOKES()",
      "body": ["NETWORK_BUY_SMOKES(${1:int p0}, ${2:BOOL p1}, ${3:BOOL p2})"],
      "description": "NETWORK_BUY_SMOKES()"
    },
    "NETWORK_SPENT_HELI_PICKUP": {
      "prefix": "NETWORK_SPENT_HELI_PICKUP()",
      "body": [
        "NETWORK_SPENT_HELI_PICKUP(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_HELI_PICKUP()"
    },
    "NETWORK_SPENT_BOAT_PICKUP": {
      "prefix": "NETWORK_SPENT_BOAT_PICKUP()",
      "body": [
        "NETWORK_SPENT_BOAT_PICKUP(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_BOAT_PICKUP()"
    },
    "NETWORK_SPENT_BULL_SHARK": {
      "prefix": "NETWORK_SPENT_BULL_SHARK()",
      "body": [
        "NETWORK_SPENT_BULL_SHARK(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_BULL_SHARK()"
    },
    "NETWORK_SPENT_CASH_DROP": {
      "prefix": "NETWORK_SPENT_CASH_DROP()",
      "body": [
        "NETWORK_SPENT_CASH_DROP(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SPENT_CASH_DROP()"
    },
    "NETWORK_SPENT_HIRE_MUGGER": {
      "prefix": "NETWORK_SPENT_HIRE_MUGGER()",
      "body": [
        "NETWORK_SPENT_HIRE_MUGGER(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_HIRE_MUGGER()"
    },
    "NETWORK_SPENT_ROBBED_BY_MUGGER": {
      "prefix": "NETWORK_SPENT_ROBBED_BY_MUGGER()",
      "body": [
        "NETWORK_SPENT_ROBBED_BY_MUGGER(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_ROBBED_BY_MUGGER()"
    },
    "NETWORK_SPENT_HIRE_MERCENARY": {
      "prefix": "NETWORK_SPENT_HIRE_MERCENARY()",
      "body": [
        "NETWORK_SPENT_HIRE_MERCENARY(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_HIRE_MERCENARY()"
    },
    "NETWORK_SPENT_BUY_WANTEDLEVEL": {
      "prefix": "NETWORK_SPENT_BUY_WANTEDLEVEL()",
      "body": [
        "NETWORK_SPENT_BUY_WANTEDLEVEL(${1:Any p0}, ${2:Any* p1}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_SPENT_BUY_WANTEDLEVEL()"
    },
    "NETWORK_SPENT_BUY_OFFTHERADAR": {
      "prefix": "NETWORK_SPENT_BUY_OFFTHERADAR()",
      "body": [
        "NETWORK_SPENT_BUY_OFFTHERADAR(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_BUY_OFFTHERADAR()"
    },
    "NETWORK_SPENT_BUY_REVEAL_PLAYERS": {
      "prefix": "NETWORK_SPENT_BUY_REVEAL_PLAYERS()",
      "body": [
        "NETWORK_SPENT_BUY_REVEAL_PLAYERS(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_BUY_REVEAL_PLAYERS()"
    },
    "NETWORK_SPENT_CARWASH": {
      "prefix": "NETWORK_SPENT_CARWASH()",
      "body": [
        "NETWORK_SPENT_CARWASH(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:BOOL p3}, ${5:BOOL p4})"
      ],
      "description": "NETWORK_SPENT_CARWASH()"
    },
    "NETWORK_SPENT_CINEMA": {
      "prefix": "NETWORK_SPENT_CINEMA()",
      "body": [
        "NETWORK_SPENT_CINEMA(${1:Any p0}, ${2:Any p1}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "NETWORK_SPENT_CINEMA()"
    },
    "NETWORK_SPENT_TELESCOPE": {
      "prefix": "NETWORK_SPENT_TELESCOPE()",
      "body": [
        "NETWORK_SPENT_TELESCOPE(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SPENT_TELESCOPE()"
    },
    "NETWORK_SPENT_HOLDUPS": {
      "prefix": "NETWORK_SPENT_HOLDUPS()",
      "body": ["NETWORK_SPENT_HOLDUPS(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"],
      "description": "NETWORK_SPENT_HOLDUPS()"
    },
    "NETWORK_SPENT_BUY_PASSIVE_MODE": {
      "prefix": "NETWORK_SPENT_BUY_PASSIVE_MODE()",
      "body": [
        "NETWORK_SPENT_BUY_PASSIVE_MODE(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_BUY_PASSIVE_MODE()"
    },
    "NETWORK_SPENT_BANK_INTEREST": {
      "prefix": "NETWORK_SPENT_BANK_INTEREST()",
      "body": [
        "NETWORK_SPENT_BANK_INTEREST(${1:int p0}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SPENT_BANK_INTEREST()"
    },
    "NETWORK_SPENT_PROSTITUTES": {
      "prefix": "NETWORK_SPENT_PROSTITUTES()",
      "body": [
        "NETWORK_SPENT_PROSTITUTES(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SPENT_PROSTITUTES()"
    },
    "NETWORK_SPENT_ARREST_BAIL": {
      "prefix": "NETWORK_SPENT_ARREST_BAIL()",
      "body": [
        "NETWORK_SPENT_ARREST_BAIL(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SPENT_ARREST_BAIL()"
    },
    "NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM": {
      "prefix": "NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM()",
      "body": [
        "NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM(${1:int amount}, ${2:Hash vehicleModel}, ${3:Any* gamerHandle}, ${4:BOOL notBankrupt}, ${5:BOOL hasTheMoney})"
      ],
      "description": "NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM()"
    },
    "NETWORK_SPENT_CALL_PLAYER": {
      "prefix": "NETWORK_SPENT_CALL_PLAYER()",
      "body": [
        "NETWORK_SPENT_CALL_PLAYER(${1:Any p0}, ${2:Any* p1}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "NETWORK_SPENT_CALL_PLAYER()"
    },
    "NETWORK_SPENT_BOUNTY": {
      "prefix": "NETWORK_SPENT_BOUNTY()",
      "body": ["NETWORK_SPENT_BOUNTY(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"],
      "description": "NETWORK_SPENT_BOUNTY()"
    },
    "NETWORK_SPENT_FROM_ROCKSTAR": {
      "prefix": "NETWORK_SPENT_FROM_ROCKSTAR()",
      "body": [
        "NETWORK_SPENT_FROM_ROCKSTAR(${1:int p0}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SPENT_FROM_ROCKSTAR()"
    },
    "NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS": {
      "prefix": "NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS()",
      "body": ["NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS(${1:int amount})"],
      "description": "NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS()"
    },
    "NETWORK_SPENT_MOVE_SUBMARINE": {
      "prefix": "NETWORK_SPENT_MOVE_SUBMARINE()",
      "body": [
        "NETWORK_SPENT_MOVE_SUBMARINE(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_SPENT_MOVE_SUBMARINE()"
    },
    "NETWORK_SPENT_PLAYER_HEALTHCARE": {
      "prefix": "NETWORK_SPENT_PLAYER_HEALTHCARE()",
      "body": [
        "NETWORK_SPENT_PLAYER_HEALTHCARE(${1:int p0}, ${2:int p1}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "NETWORK_SPENT_PLAYER_HEALTHCARE()"
    },
    "NETWORK_SPENT_NO_COPS": {
      "prefix": "NETWORK_SPENT_NO_COPS()",
      "body": [
        "NETWORK_SPENT_NO_COPS(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_NO_COPS()"
    },
    "NETWORK_SPENT_CARGO_SOURCING": {
      "prefix": "NETWORK_SPENT_CARGO_SOURCING()",
      "body": [
        "NETWORK_SPENT_CARGO_SOURCING(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
      ],
      "description": "NETWORK_SPENT_CARGO_SOURCING()"
    },
    "NETWORK_SPENT_REQUEST_JOB": {
      "prefix": "NETWORK_SPENT_REQUEST_JOB()",
      "body": [
        "NETWORK_SPENT_REQUEST_JOB(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_REQUEST_JOB()"
    },
    "NETWORK_SPENT_REQUEST_HEIST": {
      "prefix": "NETWORK_SPENT_REQUEST_HEIST()",
      "body": [
        "NETWORK_SPENT_REQUEST_HEIST(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_REQUEST_HEIST()"
    },
    "NETWORK_BUY_FAIRGROUND_RIDE": {
      "prefix": "NETWORK_BUY_FAIRGROUND_RIDE()",
      "body": [
        "NETWORK_BUY_FAIRGROUND_RIDE(${1:int amount}, ${2:Any p1}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_BUY_FAIRGROUND_RIDE()"
    },
    "NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS": {
      "prefix": "NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS()",
      "body": ["NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS()"],
      "description": "NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS()"
    },
    "NETWORK_SPENT_JOB_SKIP": {
      "prefix": "NETWORK_SPENT_JOB_SKIP()",
      "body": [
        "NETWORK_SPENT_JOB_SKIP(${1:int amount}, ${2:const char* matchId}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "NETWORK_SPENT_JOB_SKIP()"
    },
    "NETWORK_SPENT_BOSS_GOON": {
      "prefix": "NETWORK_SPENT_BOSS_GOON()",
      "body": [
        "NETWORK_SPENT_BOSS_GOON(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SPENT_BOSS_GOON()"
    },
    "NETWORK_SPEND_GOON": {
      "prefix": "NETWORK_SPEND_GOON()",
      "body": ["NETWORK_SPEND_GOON(${1:int p0}, ${2:int p1}, ${3:int amount})"],
      "description": "NETWORK_SPEND_GOON()"
    },
    "NETWORK_SPEND_BOSS": {
      "prefix": "NETWORK_SPEND_BOSS()",
      "body": ["NETWORK_SPEND_BOSS(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"],
      "description": "NETWORK_SPEND_BOSS()"
    },
    "NETWORK_SPENT_MOVE_YACHT": {
      "prefix": "NETWORK_SPENT_MOVE_YACHT()",
      "body": [
        "NETWORK_SPENT_MOVE_YACHT(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SPENT_MOVE_YACHT()"
    },
    "NETWORK_SPENT_RENAME_ORGANIZATION": {
      "prefix": "NETWORK_SPENT_RENAME_ORGANIZATION()",
      "body": [
        "NETWORK_SPENT_RENAME_ORGANIZATION(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_RENAME_ORGANIZATION()"
    },
    "NETWORK_BUY_CONTRABAND_MISSION": {
      "prefix": "NETWORK_BUY_CONTRABAND_MISSION()",
      "body": [
        "NETWORK_BUY_CONTRABAND_MISSION(${1:int p0}, ${2:int p1}, ${3:Hash p2}, ${4:BOOL p3}, ${5:BOOL p4})"
      ],
      "description": "NETWORK_BUY_CONTRABAND_MISSION()"
    },
    "NETWORK_SPENT_PA_SERVICE_HELI": {
      "prefix": "NETWORK_SPENT_PA_SERVICE_HELI()",
      "body": [
        "NETWORK_SPENT_PA_SERVICE_HELI(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_PA_SERVICE_HELI()"
    },
    "NETWORK_SPENT_PA_SERVICE_VEHICLE": {
      "prefix": "NETWORK_SPENT_PA_SERVICE_VEHICLE()",
      "body": [
        "NETWORK_SPENT_PA_SERVICE_VEHICLE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_PA_SERVICE_VEHICLE()"
    },
    "NETWORK_SPENT_PA_SERVICE_SNACK": {
      "prefix": "NETWORK_SPENT_PA_SERVICE_SNACK()",
      "body": [
        "NETWORK_SPENT_PA_SERVICE_SNACK(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_PA_SERVICE_SNACK()"
    },
    "NETWORK_SPENT_PA_SERVICE_DANCER": {
      "prefix": "NETWORK_SPENT_PA_SERVICE_DANCER()",
      "body": [
        "NETWORK_SPENT_PA_SERVICE_DANCER(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_PA_SERVICE_DANCER()"
    },
    "NETWORK_SPENT_PA_SERVICE_IMPOUND": {
      "prefix": "NETWORK_SPENT_PA_SERVICE_IMPOUND()",
      "body": [
        "NETWORK_SPENT_PA_SERVICE_IMPOUND(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_SPENT_PA_SERVICE_IMPOUND()"
    },
    "NETWORK_SPENT_PA_HELI_PICKUP": {
      "prefix": "NETWORK_SPENT_PA_HELI_PICKUP()",
      "body": [
        "NETWORK_SPENT_PA_HELI_PICKUP(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_PA_HELI_PICKUP()"
    },
    "NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY": {
      "prefix": "NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY()",
      "body": [
        "NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY()"
    },
    "NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY": {
      "prefix": "NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY()",
      "body": [
        "NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY()"
    },
    "NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY": {
      "prefix": "NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY()",
      "body": [
        "NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY()"
    },
    "NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY": {
      "prefix": "NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY()",
      "body": [
        "NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY()"
    },
    "NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY": {
      "prefix": "NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY()",
      "body": [
        "NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY(${1:int amount}, ${2:Any* data}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY()"
    },
    "NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY": {
      "prefix": "NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY()",
      "body": [
        "NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY()"
    },
    "NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY": {
      "prefix": "NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY()",
      "body": [
        "NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY()"
    },
    "NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE": {
      "prefix": "NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE()",
      "body": [
        "NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE()"
    },
    "NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE": {
      "prefix": "NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE()",
      "body": [
        "NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE()"
    },
    "NETWORK_SPENT_JUKEBOX": {
      "prefix": "NETWORK_SPENT_JUKEBOX()",
      "body": [
        "NETWORK_SPENT_JUKEBOX(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_JUKEBOX()"
    },
    "NETWORK_SPENT_PURCHASE_CLUB_HOUSE": {
      "prefix": "NETWORK_SPENT_PURCHASE_CLUB_HOUSE()",
      "body": [
        "NETWORK_SPENT_PURCHASE_CLUB_HOUSE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_PURCHASE_CLUB_HOUSE()"
    },
    "NETWORK_SPENT_UPGRADE_CLUB_HOUSE": {
      "prefix": "NETWORK_SPENT_UPGRADE_CLUB_HOUSE()",
      "body": [
        "NETWORK_SPENT_UPGRADE_CLUB_HOUSE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_UPGRADE_CLUB_HOUSE()"
    },
    "NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY": {
      "prefix": "NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY()",
      "body": [
        "NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY()"
    },
    "NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY": {
      "prefix": "NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY()",
      "body": [
        "NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY()"
    },
    "NETWORK_SPENT_TRADE_BUSINESS_PROPERTY": {
      "prefix": "NETWORK_SPENT_TRADE_BUSINESS_PROPERTY()",
      "body": [
        "NETWORK_SPENT_TRADE_BUSINESS_PROPERTY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_TRADE_BUSINESS_PROPERTY()"
    },
    "NETWORK_SPENT_MC_ABILITY": {
      "prefix": "NETWORK_SPENT_MC_ABILITY()",
      "body": [
        "NETWORK_SPENT_MC_ABILITY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_SPENT_MC_ABILITY()"
    },
    "NETWORK_SPENT_PAY_BUSINESS_SUPPLIES": {
      "prefix": "NETWORK_SPENT_PAY_BUSINESS_SUPPLIES()",
      "body": [
        "NETWORK_SPENT_PAY_BUSINESS_SUPPLIES(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_PAY_BUSINESS_SUPPLIES()"
    },
    "NETWORK_SPENT_CHANGE_APPEARANCE": {
      "prefix": "NETWORK_SPENT_CHANGE_APPEARANCE()",
      "body": [
        "NETWORK_SPENT_CHANGE_APPEARANCE(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_SPENT_CHANGE_APPEARANCE()"
    },
    "NETWORK_SPENT_VEHICLE_EXPORT_MODS": {
      "prefix": "NETWORK_SPENT_VEHICLE_EXPORT_MODS()",
      "body": [
        "NETWORK_SPENT_VEHICLE_EXPORT_MODS(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:Any p9})"
      ],
      "description": "NETWORK_SPENT_VEHICLE_EXPORT_MODS()"
    },
    "NETWORK_SPENT_PURCHASE_OFFICE_GARAGE": {
      "prefix": "NETWORK_SPENT_PURCHASE_OFFICE_GARAGE()",
      "body": [
        "NETWORK_SPENT_PURCHASE_OFFICE_GARAGE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_PURCHASE_OFFICE_GARAGE()"
    },
    "NETWORK_SPENT_UPGRADE_OFFICE_GARAGE": {
      "prefix": "NETWORK_SPENT_UPGRADE_OFFICE_GARAGE()",
      "body": [
        "NETWORK_SPENT_UPGRADE_OFFICE_GARAGE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_UPGRADE_OFFICE_GARAGE()"
    },
    "NETWORK_SPENT_IMPORT_EXPORT_REPAIR": {
      "prefix": "NETWORK_SPENT_IMPORT_EXPORT_REPAIR()",
      "body": [
        "NETWORK_SPENT_IMPORT_EXPORT_REPAIR(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_SPENT_IMPORT_EXPORT_REPAIR()"
    },
    "NETWORK_SPENT_PURCHASE_HANGAR": {
      "prefix": "NETWORK_SPENT_PURCHASE_HANGAR()",
      "body": [
        "NETWORK_SPENT_PURCHASE_HANGAR(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_PURCHASE_HANGAR()"
    },
    "NETWORK_SPENT_UPGRADE_HANGAR": {
      "prefix": "NETWORK_SPENT_UPGRADE_HANGAR()",
      "body": [
        "NETWORK_SPENT_UPGRADE_HANGAR(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_UPGRADE_HANGAR()"
    },
    "NETWORK_SPENT_HANGAR_UTILITY_CHARGES": {
      "prefix": "NETWORK_SPENT_HANGAR_UTILITY_CHARGES()",
      "body": [
        "NETWORK_SPENT_HANGAR_UTILITY_CHARGES(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SPENT_HANGAR_UTILITY_CHARGES()"
    },
    "NETWORK_SPENT_HANGAR_STAFF_CHARGES": {
      "prefix": "NETWORK_SPENT_HANGAR_STAFF_CHARGES()",
      "body": [
        "NETWORK_SPENT_HANGAR_STAFF_CHARGES(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SPENT_HANGAR_STAFF_CHARGES()"
    },
    "NETWORK_SPENT_BUY_TRUCK": {
      "prefix": "NETWORK_SPENT_BUY_TRUCK()",
      "body": [
        "NETWORK_SPENT_BUY_TRUCK(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_BUY_TRUCK()"
    },
    "NETWORK_SPENT_UPGRADE_TRUCK": {
      "prefix": "NETWORK_SPENT_UPGRADE_TRUCK()",
      "body": [
        "NETWORK_SPENT_UPGRADE_TRUCK(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_UPGRADE_TRUCK()"
    },
    "NETWORK_SPENT_BUY_BUNKER": {
      "prefix": "NETWORK_SPENT_BUY_BUNKER()",
      "body": [
        "NETWORK_SPENT_BUY_BUNKER(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_BUY_BUNKER()"
    },
    "NETWORK_SPENT_UPRADE_BUNKER": {
      "prefix": "NETWORK_SPENT_UPRADE_BUNKER()",
      "body": [
        "NETWORK_SPENT_UPRADE_BUNKER(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_UPRADE_BUNKER()"
    },
    "NETWORK_EARN_FROM_SELL_BUNKER": {
      "prefix": "NETWORK_EARN_FROM_SELL_BUNKER()",
      "body": [
        "NETWORK_EARN_FROM_SELL_BUNKER(${1:int amount}, ${2:Hash bunkerHash})"
      ],
      "description": "NETWORK_EARN_FROM_SELL_BUNKER()"
    },
    "NETWORK_SPENT_BALLISTIC_EQUIPMENT": {
      "prefix": "NETWORK_SPENT_BALLISTIC_EQUIPMENT()",
      "body": [
        "NETWORK_SPENT_BALLISTIC_EQUIPMENT(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SPENT_BALLISTIC_EQUIPMENT()"
    },
    "NETWORK_EARN_RDR_BONUS": {
      "prefix": "NETWORK_EARN_RDR_BONUS()",
      "body": ["NETWORK_EARN_RDR_BONUS(${1:int amount}, ${2:Any p1})"],
      "description": "NETWORK_EARN_RDR_BONUS()"
    },
    "NETWORK_EARN_WAGE_PAYMENT": {
      "prefix": "NETWORK_EARN_WAGE_PAYMENT()",
      "body": ["NETWORK_EARN_WAGE_PAYMENT(${1:int amount}, ${2:Any p1})"],
      "description": "NETWORK_EARN_WAGE_PAYMENT()"
    },
    "NETWORK_EARN_WAGE_PAYMENT_BONUS": {
      "prefix": "NETWORK_EARN_WAGE_PAYMENT_BONUS()",
      "body": ["NETWORK_EARN_WAGE_PAYMENT_BONUS(${1:int amount})"],
      "description": "NETWORK_EARN_WAGE_PAYMENT_BONUS()"
    },
    "NETWORK_SPENT_BUY_BASE": {
      "prefix": "NETWORK_SPENT_BUY_BASE()",
      "body": [
        "NETWORK_SPENT_BUY_BASE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_BUY_BASE()"
    },
    "NETWORK_SPENT_UPGRADE_BASE": {
      "prefix": "NETWORK_SPENT_UPGRADE_BASE()",
      "body": [
        "NETWORK_SPENT_UPGRADE_BASE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_UPGRADE_BASE()"
    },
    "NETWORK_SPENT_BUY_TILTROTOR": {
      "prefix": "NETWORK_SPENT_BUY_TILTROTOR()",
      "body": [
        "NETWORK_SPENT_BUY_TILTROTOR(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_BUY_TILTROTOR()"
    },
    "NETWORK_SPENT_UPGRADE_TILTROTOR": {
      "prefix": "NETWORK_SPENT_UPGRADE_TILTROTOR()",
      "body": [
        "NETWORK_SPENT_UPGRADE_TILTROTOR(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_UPGRADE_TILTROTOR()"
    },
    "NETWORK_SPENT_EMPLOY_ASSASSINS": {
      "prefix": "NETWORK_SPENT_EMPLOY_ASSASSINS()",
      "body": [
        "NETWORK_SPENT_EMPLOY_ASSASSINS(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_EMPLOY_ASSASSINS()"
    },
    "NETWORK_SPEND_GANGOPS_CANNON": {
      "prefix": "NETWORK_SPEND_GANGOPS_CANNON()",
      "body": [
        "NETWORK_SPEND_GANGOPS_CANNON(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_GANGOPS_CANNON()"
    },
    "NETWORK_SPEND_GANGOPS_SKIP_MISSION": {
      "prefix": "NETWORK_SPEND_GANGOPS_SKIP_MISSION()",
      "body": [
        "NETWORK_SPEND_GANGOPS_SKIP_MISSION(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_GANGOPS_SKIP_MISSION()"
    },
    "NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION": {
      "prefix": "NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION()",
      "body": [
        "NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION()"
    },
    "NETWORK_EARN_SELL_BASE": {
      "prefix": "NETWORK_EARN_SELL_BASE()",
      "body": ["NETWORK_EARN_SELL_BASE(${1:int amount}, ${2:Hash baseNameHash})"],
      "description": "NETWORK_EARN_SELL_BASE()"
    },
    "NETWORK_EARN_TARGET_REFUND": {
      "prefix": "NETWORK_EARN_TARGET_REFUND()",
      "body": ["NETWORK_EARN_TARGET_REFUND(${1:int amount}, ${2:int p1})"],
      "description": "NETWORK_EARN_TARGET_REFUND()"
    },
    "NETWORK_EARN_GANGOPS_WAGES": {
      "prefix": "NETWORK_EARN_GANGOPS_WAGES()",
      "body": ["NETWORK_EARN_GANGOPS_WAGES(${1:int amount}, ${2:int p1})"],
      "description": "NETWORK_EARN_GANGOPS_WAGES()"
    },
    "NETWORK_EARN_GANGOPS_WAGES_BONUS": {
      "prefix": "NETWORK_EARN_GANGOPS_WAGES_BONUS()",
      "body": ["NETWORK_EARN_GANGOPS_WAGES_BONUS(${1:int amount}, ${2:int p1})"],
      "description": "NETWORK_EARN_GANGOPS_WAGES_BONUS()"
    },
    "NETWORK_EARN_DAR_CHALLENGE": {
      "prefix": "NETWORK_EARN_DAR_CHALLENGE()",
      "body": ["NETWORK_EARN_DAR_CHALLENGE(${1:int amount}, ${2:Any p1})"],
      "description": "NETWORK_EARN_DAR_CHALLENGE()"
    },
    "NETWORK_EARN_DOOMSDAY_FINALE_BONUS": {
      "prefix": "NETWORK_EARN_DOOMSDAY_FINALE_BONUS()",
      "body": [
        "NETWORK_EARN_DOOMSDAY_FINALE_BONUS(${1:int amount}, ${2:Hash vehicleHash})"
      ],
      "description": "NETWORK_EARN_DOOMSDAY_FINALE_BONUS()"
    },
    "NETWORK_EARN_GANGOPS_AWARD": {
      "prefix": "NETWORK_EARN_GANGOPS_AWARD()",
      "body": [
        "NETWORK_EARN_GANGOPS_AWARD(${1:int amount}, ${2:const char* p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_EARN_GANGOPS_AWARD()"
    },
    "NETWORK_EARN_GANGOPS_ELITE": {
      "prefix": "NETWORK_EARN_GANGOPS_ELITE()",
      "body": [
        "NETWORK_EARN_GANGOPS_ELITE(${1:int amount}, ${2:const char* p1}, ${3:int actIndex})"
      ],
      "description": "NETWORK_EARN_GANGOPS_ELITE()"
    },
    "NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY": {
      "prefix": "NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY()",
      "body": [
        "NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY(${1:int earnedMoney})"
      ],
      "description": "NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY()"
    },
    "NETWORK_SPEND_GANGOPS_START_STRAND": {
      "prefix": "NETWORK_SPEND_GANGOPS_START_STRAND()",
      "body": [
        "NETWORK_SPEND_GANGOPS_START_STRAND(${1:int type}, ${2:int amount}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "NETWORK_SPEND_GANGOPS_START_STRAND()"
    },
    "NETWORK_SPEND_GANGOPS_TRIP_SKIP": {
      "prefix": "NETWORK_SPEND_GANGOPS_TRIP_SKIP()",
      "body": [
        "NETWORK_SPEND_GANGOPS_TRIP_SKIP(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SPEND_GANGOPS_TRIP_SKIP()"
    },
    "NETWORK_EARN_GANGOPS_PREP_PARTICIPATION": {
      "prefix": "NETWORK_EARN_GANGOPS_PREP_PARTICIPATION()",
      "body": ["NETWORK_EARN_GANGOPS_PREP_PARTICIPATION(${1:int amount})"],
      "description": "NETWORK_EARN_GANGOPS_PREP_PARTICIPATION()"
    },
    "NETWORK_EARN_GANGOPS_SETUP": {
      "prefix": "NETWORK_EARN_GANGOPS_SETUP()",
      "body": [
        "NETWORK_EARN_GANGOPS_SETUP(${1:int amount}, ${2:const char* p1})"
      ],
      "description": "NETWORK_EARN_GANGOPS_SETUP()"
    },
    "NETWORK_EARN_GANGOPS_FINALE": {
      "prefix": "NETWORK_EARN_GANGOPS_FINALE()",
      "body": [
        "NETWORK_EARN_GANGOPS_FINALE(${1:int amount}, ${2:const char* p1})"
      ],
      "description": "NETWORK_EARN_GANGOPS_FINALE()"
    },
    "NETWORK_SPEND_GANGOPS_REPAIR_COST": {
      "prefix": "NETWORK_SPEND_GANGOPS_REPAIR_COST()",
      "body": [
        "NETWORK_SPEND_GANGOPS_REPAIR_COST(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_SPEND_GANGOPS_REPAIR_COST()"
    },
    "NETWORK_EARN_NIGHTCLUB": {
      "prefix": "NETWORK_EARN_NIGHTCLUB()",
      "body": ["NETWORK_EARN_NIGHTCLUB(${1:Any p0})"],
      "description": "NETWORK_EARN_NIGHTCLUB()"
    },
    "NETWORK_EARN_NIGHTCLUB_DANCING": {
      "prefix": "NETWORK_EARN_NIGHTCLUB_DANCING()",
      "body": ["NETWORK_EARN_NIGHTCLUB_DANCING(${1:Any p0})"],
      "description": "NETWORK_EARN_NIGHTCLUB_DANCING()"
    },
    "NETWORK_EARN_BB_EVENT_BONUS": {
      "prefix": "NETWORK_EARN_BB_EVENT_BONUS()",
      "body": ["NETWORK_EARN_BB_EVENT_BONUS(${1:int amount})"],
      "description": "NETWORK_EARN_BB_EVENT_BONUS()"
    },
    "NETWORK_SPENT_PURCHASE_HACKER_TRUCK": {
      "prefix": "NETWORK_SPENT_PURCHASE_HACKER_TRUCK()",
      "body": [
        "NETWORK_SPENT_PURCHASE_HACKER_TRUCK(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_PURCHASE_HACKER_TRUCK()"
    },
    "NETWORK_SPENT_UPGRADE_HACKER_TRUCK": {
      "prefix": "NETWORK_SPENT_UPGRADE_HACKER_TRUCK()",
      "body": [
        "NETWORK_SPENT_UPGRADE_HACKER_TRUCK(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_UPGRADE_HACKER_TRUCK()"
    },
    "NETWORK_EARN_HACKER_TRUCK": {
      "prefix": "NETWORK_EARN_HACKER_TRUCK()",
      "body": [
        "NETWORK_EARN_HACKER_TRUCK(${1:Any p0}, ${2:int amount}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_EARN_HACKER_TRUCK()"
    },
    "NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE": {
      "prefix": "NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE()",
      "body": [
        "NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE()"
    },
    "NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE": {
      "prefix": "NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE()",
      "body": [
        "NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE()"
    },
    "NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE": {
      "prefix": "NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE()",
      "body": [
        "NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
      ],
      "description": "NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE()"
    },
    "NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE": {
      "prefix": "NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE()",
      "body": [
        "NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE()"
    },
    "NETWORK_SPENT_RDR_HATCHET_BONUS": {
      "prefix": "NETWORK_SPENT_RDR_HATCHET_BONUS()",
      "body": [
        "NETWORK_SPENT_RDR_HATCHET_BONUS(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SPENT_RDR_HATCHET_BONUS()"
    },
    "NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE": {
      "prefix": "NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE()",
      "body": [
        "NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE(${1:Player player}, ${2:int amount}, ${3:Any p1}, ${4:BOOL p2}, ${5:BOOL p3})"
      ],
      "description": "NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE()"
    },
    "NETWORK_SPEND_NIGHTCLUB_BAR_DRINK": {
      "prefix": "NETWORK_SPEND_NIGHTCLUB_BAR_DRINK()",
      "body": [
        "NETWORK_SPEND_NIGHTCLUB_BAR_DRINK(${1:int amount}, ${2:Any p1}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "NETWORK_SPEND_NIGHTCLUB_BAR_DRINK()"
    },
    "NETWORK_SPEND_BOUNTY_HUNTER_MISSION": {
      "prefix": "NETWORK_SPEND_BOUNTY_HUNTER_MISSION()",
      "body": [
        "NETWORK_SPEND_BOUNTY_HUNTER_MISSION(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SPEND_BOUNTY_HUNTER_MISSION()"
    },
    "NETWORK_SPENT_REHIRE_DJ": {
      "prefix": "NETWORK_SPENT_REHIRE_DJ()",
      "body": [
        "NETWORK_SPENT_REHIRE_DJ(${1:int amount}, ${2:Any p1}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "NETWORK_SPENT_REHIRE_DJ()"
    },
    "NETWORK_SPENT_ARENA_JOIN_SPECTATOR": {
      "prefix": "NETWORK_SPENT_ARENA_JOIN_SPECTATOR()",
      "body": [
        "NETWORK_SPENT_ARENA_JOIN_SPECTATOR(${1:int amount}, ${2:Any p1}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "NETWORK_SPENT_ARENA_JOIN_SPECTATOR()"
    },
    "NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION": {
      "prefix": "NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION()",
      "body": [
        "NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION(${1:int amount}, ${2:Any p1})"
      ],
      "description": "NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION()"
    },
    "NETWORK_EARN_ARENA_CAREER_PROGRESSION": {
      "prefix": "NETWORK_EARN_ARENA_CAREER_PROGRESSION()",
      "body": [
        "NETWORK_EARN_ARENA_CAREER_PROGRESSION(${1:int amount}, ${2:Any p1})"
      ],
      "description": "NETWORK_EARN_ARENA_CAREER_PROGRESSION()"
    },
    "NETWORK_SPEND_MAKE_IT_RAIN": {
      "prefix": "NETWORK_SPEND_MAKE_IT_RAIN()",
      "body": [
        "NETWORK_SPEND_MAKE_IT_RAIN(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SPEND_MAKE_IT_RAIN()"
    },
    "NETWORK_SPEND_BUY_ARENA": {
      "prefix": "NETWORK_SPEND_BUY_ARENA()",
      "body": [
        "NETWORK_SPEND_BUY_ARENA(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:const char* p3})"
      ],
      "description": "NETWORK_SPEND_BUY_ARENA()"
    },
    "NETWORK_SPEND_UPGRADE_ARENA": {
      "prefix": "NETWORK_SPEND_UPGRADE_ARENA()",
      "body": [
        "NETWORK_SPEND_UPGRADE_ARENA(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:const char* p3})"
      ],
      "description": "NETWORK_SPEND_UPGRADE_ARENA()"
    },
    "NETWORK_SPEND_ARENA_SPECTATOR_BOX": {
      "prefix": "NETWORK_SPEND_ARENA_SPECTATOR_BOX()",
      "body": [
        "NETWORK_SPEND_ARENA_SPECTATOR_BOX(${1:int amount}, ${2:int type}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "NETWORK_SPEND_ARENA_SPECTATOR_BOX()"
    },
    "NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT": {
      "prefix": "NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT()",
      "body": [
        "NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT(${1:int amount}, ${2:Any p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT()"
    },
    "NETWORK_EARN_SPIN_THE_WHEEL_CASH": {
      "prefix": "NETWORK_EARN_SPIN_THE_WHEEL_CASH()",
      "body": ["NETWORK_EARN_SPIN_THE_WHEEL_CASH(${1:int amount})"],
      "description": "NETWORK_EARN_SPIN_THE_WHEEL_CASH()"
    },
    "NETWORK_SPEND_ARENA_PREMIUM": {
      "prefix": "NETWORK_SPEND_ARENA_PREMIUM()",
      "body": [
        "NETWORK_SPEND_ARENA_PREMIUM(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SPEND_ARENA_PREMIUM()"
    },
    "NETWORK_EARN_ARENA_WAR": {
      "prefix": "NETWORK_EARN_ARENA_WAR()",
      "body": [
        "NETWORK_EARN_ARENA_WAR(${1:int amount}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_EARN_ARENA_WAR()"
    },
    "NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET": {
      "prefix": "NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET()",
      "body": ["NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET(${1:int amount})"],
      "description": "NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET()"
    },
    "NETWORK_EARN_ARENA_WAR_EVENT_CARGO": {
      "prefix": "NETWORK_EARN_ARENA_WAR_EVENT_CARGO()",
      "body": ["NETWORK_EARN_ARENA_WAR_EVENT_CARGO(${1:int amount})"],
      "description": "NETWORK_EARN_ARENA_WAR_EVENT_CARGO()"
    },
    "NETWORK_EARN_RC_TIME_TRIAL": {
      "prefix": "NETWORK_EARN_RC_TIME_TRIAL()",
      "body": ["NETWORK_EARN_RC_TIME_TRIAL(${1:int amount})"],
      "description": "NETWORK_EARN_RC_TIME_TRIAL()"
    },
    "NETWORK_EARN_DAILY_OBJECTIVE_EVENT": {
      "prefix": "NETWORK_EARN_DAILY_OBJECTIVE_EVENT()",
      "body": ["NETWORK_EARN_DAILY_OBJECTIVE_EVENT(${1:int amount})"],
      "description": "NETWORK_EARN_DAILY_OBJECTIVE_EVENT()"
    },
    "NETWORK_SPEND_CASINO_MEMBERSHIP": {
      "prefix": "NETWORK_SPEND_CASINO_MEMBERSHIP()",
      "body": [
        "NETWORK_SPEND_CASINO_MEMBERSHIP(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:int p3})"
      ],
      "description": "NETWORK_SPEND_CASINO_MEMBERSHIP()"
    },
    "NETWORK_SPEND_BUY_CASINO": {
      "prefix": "NETWORK_SPEND_BUY_CASINO()",
      "body": [
        "NETWORK_SPEND_BUY_CASINO(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any* data})"
      ],
      "description": "NETWORK_SPEND_BUY_CASINO()"
    },
    "NETWORK_SPEND_UPGRADE_CASINO": {
      "prefix": "NETWORK_SPEND_UPGRADE_CASINO()",
      "body": [
        "NETWORK_SPEND_UPGRADE_CASINO(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any* data})"
      ],
      "description": "NETWORK_SPEND_UPGRADE_CASINO()"
    },
    "NETWORK_SPEND_CASINO_GENERIC": {
      "prefix": "NETWORK_SPEND_CASINO_GENERIC()",
      "body": [
        "NETWORK_SPEND_CASINO_GENERIC(${1:int amount}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_SPEND_CASINO_GENERIC()"
    },
    "NETWORK_EARN_CASINO_TIME_TRIAL_WIN": {
      "prefix": "NETWORK_EARN_CASINO_TIME_TRIAL_WIN()",
      "body": ["NETWORK_EARN_CASINO_TIME_TRIAL_WIN(${1:int amount})"],
      "description": "NETWORK_EARN_CASINO_TIME_TRIAL_WIN()"
    },
    "NETWORK_EARN_COLLECTABLES_ACTION_FIGURES": {
      "prefix": "NETWORK_EARN_COLLECTABLES_ACTION_FIGURES()",
      "body": ["NETWORK_EARN_COLLECTABLES_ACTION_FIGURES(${1:int amount})"],
      "description": "NETWORK_EARN_COLLECTABLES_ACTION_FIGURES()"
    },
    "NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION": {
      "prefix": "NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION()",
      "body": [
        "NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION(${1:int amount})"
      ],
      "description": "NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION()"
    },
    "NETWORK_EARN_SELL_PRIZE_VEHICLE": {
      "prefix": "NETWORK_EARN_SELL_PRIZE_VEHICLE()",
      "body": [
        "NETWORK_EARN_SELL_PRIZE_VEHICLE(${1:int amount}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_EARN_SELL_PRIZE_VEHICLE()"
    },
    "NETWORK_EARN_CASINO_MISSION_REWARD": {
      "prefix": "NETWORK_EARN_CASINO_MISSION_REWARD()",
      "body": ["NETWORK_EARN_CASINO_MISSION_REWARD(${1:int amount})"],
      "description": "NETWORK_EARN_CASINO_MISSION_REWARD()"
    },
    "NETWORK_EARN_CASINO_STORY_MISSION_REWARD": {
      "prefix": "NETWORK_EARN_CASINO_STORY_MISSION_REWARD()",
      "body": ["NETWORK_EARN_CASINO_STORY_MISSION_REWARD(${1:int amount})"],
      "description": "NETWORK_EARN_CASINO_STORY_MISSION_REWARD()"
    },
    "NETWORK_EARN_CASINO_MISSION_PARTICIPATION": {
      "prefix": "NETWORK_EARN_CASINO_MISSION_PARTICIPATION()",
      "body": ["NETWORK_EARN_CASINO_MISSION_PARTICIPATION(${1:int amount})"],
      "description": "NETWORK_EARN_CASINO_MISSION_PARTICIPATION()"
    },
    "NETWORK_EARN_CASINO_AWARD": {
      "prefix": "NETWORK_EARN_CASINO_AWARD()",
      "body": ["NETWORK_EARN_CASINO_AWARD(${1:int amount}, ${2:Hash hash})"],
      "description": "NETWORK_EARN_CASINO_AWARD()"
    },
    "NETWORK_SPEND_BUY_ARCADE": {
      "prefix": "NETWORK_SPEND_BUY_ARCADE()",
      "body": [
        "NETWORK_SPEND_BUY_ARCADE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_BUY_ARCADE()"
    },
    "NETWORK_SPEND_UPGRADE_ARCADE": {
      "prefix": "NETWORK_SPEND_UPGRADE_ARCADE()",
      "body": [
        "NETWORK_SPEND_UPGRADE_ARCADE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_UPGRADE_ARCADE()"
    },
    "NETWORK_SPEND_CASINO_HEIST": {
      "prefix": "NETWORK_SPEND_CASINO_HEIST()",
      "body": [
        "NETWORK_SPEND_CASINO_HEIST(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:Any p9}, ${11:Any p10})"
      ],
      "description": "NETWORK_SPEND_CASINO_HEIST()"
    },
    "NETWORK_SPEND_ARCADE_MGMT": {
      "prefix": "NETWORK_SPEND_ARCADE_MGMT()",
      "body": [
        "NETWORK_SPEND_ARCADE_MGMT(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_SPEND_ARCADE_MGMT()"
    },
    "NETWORK_SPEND_PLAY_ARCADE": {
      "prefix": "NETWORK_SPEND_PLAY_ARCADE()",
      "body": [
        "NETWORK_SPEND_PLAY_ARCADE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_SPEND_PLAY_ARCADE()"
    },
    "NETWORK_SPEND_ARCADE": {
      "prefix": "NETWORK_SPEND_ARCADE()",
      "body": [
        "NETWORK_SPEND_ARCADE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_SPEND_ARCADE()"
    },
    "NETWORK_EARN_CASINO_HEIST": {
      "prefix": "NETWORK_EARN_CASINO_HEIST()",
      "body": [
        "NETWORK_EARN_CASINO_HEIST(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
      ],
      "description": "NETWORK_EARN_CASINO_HEIST()"
    },
    "NETWORK_EARN_UPGRADE_ARCADE": {
      "prefix": "NETWORK_EARN_UPGRADE_ARCADE()",
      "body": [
        "NETWORK_EARN_UPGRADE_ARCADE(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_EARN_UPGRADE_ARCADE()"
    },
    "NETWORK_EARN_ARCADE": {
      "prefix": "NETWORK_EARN_ARCADE()",
      "body": [
        "NETWORK_EARN_ARCADE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_EARN_ARCADE()"
    },
    "NETWORK_EARN_COLLECTABLES": {
      "prefix": "NETWORK_EARN_COLLECTABLES()",
      "body": [
        "NETWORK_EARN_COLLECTABLES(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_EARN_COLLECTABLES()"
    },
    "NETWORK_EARN_CHALLENGE": {
      "prefix": "NETWORK_EARN_CHALLENGE()",
      "body": [
        "NETWORK_EARN_CHALLENGE(${1:int amount}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_EARN_CHALLENGE()"
    },
    "NETWORK_EARN_CASINO_HEIST_AWARDS": {
      "prefix": "NETWORK_EARN_CASINO_HEIST_AWARDS()",
      "body": [
        "NETWORK_EARN_CASINO_HEIST_AWARDS(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_EARN_CASINO_HEIST_AWARDS()"
    },
    "NETWORK_EARN_COLLECTABLE_ITEM": {
      "prefix": "NETWORK_EARN_COLLECTABLE_ITEM()",
      "body": ["NETWORK_EARN_COLLECTABLE_ITEM(${1:int amount}, ${2:Any p1})"],
      "description": "NETWORK_EARN_COLLECTABLE_ITEM()"
    },
    "NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION": {
      "prefix": "NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION()",
      "body": [
        "NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION(${1:int amount}, ${2:Any p1})"
      ],
      "description": "NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION()"
    },
    "NETWORK_EARN_YATCH_MISSION": {
      "prefix": "NETWORK_EARN_YATCH_MISSION()",
      "body": ["NETWORK_EARN_YATCH_MISSION(${1:int amount}, ${2:Any p1})"],
      "description": "NETWORK_EARN_YATCH_MISSION()"
    },
    "NETWORK_EARN_DISPATCH_CALL": {
      "prefix": "NETWORK_EARN_DISPATCH_CALL()",
      "body": ["NETWORK_EARN_DISPATCH_CALL(${1:int amount}, ${2:Any p1})"],
      "description": "NETWORK_EARN_DISPATCH_CALL()"
    },
    "NETWORK_SPEND_BEACH_PARTY": {
      "prefix": "NETWORK_SPEND_BEACH_PARTY()",
      "body": ["NETWORK_SPEND_BEACH_PARTY(${1:Any p0})"],
      "description": "NETWORK_SPEND_BEACH_PARTY()"
    },
    "NETWORK_SPEND_SUBMARINE": {
      "prefix": "NETWORK_SPEND_SUBMARINE()",
      "body": [
        "NETWORK_SPEND_SUBMARINE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
      ],
      "description": "NETWORK_SPEND_SUBMARINE()"
    },
    "NETWORK_SPEND_CASINO_CLUB": {
      "prefix": "NETWORK_SPEND_CASINO_CLUB()",
      "body": [
        "NETWORK_SPEND_CASINO_CLUB(${1:int amount1}, ${2:Any p1}, ${3:BOOL p2}, ${4:Any p3}, ${5:int p4}, ${6:int p5}, ${7:int p6}, ${8:int amount2}, ${9:Any p8})"
      ],
      "description": "NETWORK_SPEND_CASINO_CLUB()"
    },
    "NETWORK_SPEND_BUY_SUB": {
      "prefix": "NETWORK_SPEND_BUY_SUB()",
      "body": [
        "NETWORK_SPEND_BUY_SUB(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_BUY_SUB()"
    },
    "NETWORK_SPEND_UPGRADE_SUB": {
      "prefix": "NETWORK_SPEND_UPGRADE_SUB()",
      "body": [
        "NETWORK_SPEND_UPGRADE_SUB(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_UPGRADE_SUB()"
    },
    "NETWORK_SPEND_ISLAND_HEIST": {
      "prefix": "NETWORK_SPEND_ISLAND_HEIST()",
      "body": [
        "NETWORK_SPEND_ISLAND_HEIST(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_ISLAND_HEIST()"
    },
    "NETWORK_EARN_ISLAND_HEIST": {
      "prefix": "NETWORK_EARN_ISLAND_HEIST()",
      "body": [
        "NETWORK_EARN_ISLAND_HEIST(${1:int amount1}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:int amount2}, ${6:int p5})"
      ],
      "description": "NETWORK_EARN_ISLAND_HEIST()"
    },
    "NETWORK_EARN_BEACH_PARTY_LOST_FOUND": {
      "prefix": "NETWORK_EARN_BEACH_PARTY_LOST_FOUND()",
      "body": [
        "NETWORK_EARN_BEACH_PARTY_LOST_FOUND(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_EARN_BEACH_PARTY_LOST_FOUND()"
    },
    "NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION": {
      "prefix": "NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION()",
      "body": [
        "NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION()"
    },
    "NETWORK_SPEND_CAR_CLUB_MEMBERSHIP": {
      "prefix": "NETWORK_SPEND_CAR_CLUB_MEMBERSHIP()",
      "body": [
        "NETWORK_SPEND_CAR_CLUB_MEMBERSHIP(${1:int amount1}, ${2:Any p1}, ${3:Any p2}, ${4:int amount2}, ${5:Any p4})"
      ],
      "description": "NETWORK_SPEND_CAR_CLUB_MEMBERSHIP()"
    },
    "NETWORK_SPEND_CAR_CLUB_BAR": {
      "prefix": "NETWORK_SPEND_CAR_CLUB_BAR()",
      "body": [
        "NETWORK_SPEND_CAR_CLUB_BAR(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_CAR_CLUB_BAR()"
    },
    "NETWORK_SPEND_AUTOSHOP_MODIFY": {
      "prefix": "NETWORK_SPEND_AUTOSHOP_MODIFY()",
      "body": [
        "NETWORK_SPEND_AUTOSHOP_MODIFY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_SPEND_AUTOSHOP_MODIFY()"
    },
    "NETWORK_SPEND_CAR_CLUB_TAKEOVER": {
      "prefix": "NETWORK_SPEND_CAR_CLUB_TAKEOVER()",
      "body": [
        "NETWORK_SPEND_CAR_CLUB_TAKEOVER(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_CAR_CLUB_TAKEOVER()"
    },
    "NETWORK_SPEND_BUY_AUTOSHOP": {
      "prefix": "NETWORK_SPEND_BUY_AUTOSHOP()",
      "body": [
        "NETWORK_SPEND_BUY_AUTOSHOP(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_BUY_AUTOSHOP()"
    },
    "NETWORK_SPEND_UPGRADE_AUTOSHOP": {
      "prefix": "NETWORK_SPEND_UPGRADE_AUTOSHOP()",
      "body": [
        "NETWORK_SPEND_UPGRADE_AUTOSHOP(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_UPGRADE_AUTOSHOP()"
    },
    "NETWORK_EARN_AUTOSHOP_BUSINESS": {
      "prefix": "NETWORK_EARN_AUTOSHOP_BUSINESS()",
      "body": [
        "NETWORK_EARN_AUTOSHOP_BUSINESS(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_EARN_AUTOSHOP_BUSINESS()"
    },
    "NETWORK_EARN_AUTOSHOP_INCOME": {
      "prefix": "NETWORK_EARN_AUTOSHOP_INCOME()",
      "body": ["NETWORK_EARN_AUTOSHOP_INCOME(${1:Any p0}, ${2:int p1})"],
      "description": "NETWORK_EARN_AUTOSHOP_INCOME()"
    },
    "NETWORK_EARN_CARCLUB_MEMBERSHIP": {
      "prefix": "NETWORK_EARN_CARCLUB_MEMBERSHIP()",
      "body": ["NETWORK_EARN_CARCLUB_MEMBERSHIP(${1:Any p0})"],
      "description": "NETWORK_EARN_CARCLUB_MEMBERSHIP()"
    },
    "NETWORK_EARN_DAILY_VEHICLE": {
      "prefix": "NETWORK_EARN_DAILY_VEHICLE()",
      "body": ["NETWORK_EARN_DAILY_VEHICLE(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_EARN_DAILY_VEHICLE()"
    },
    "NETWORK_EARN_DAILY_VEHICLE_BONUS": {
      "prefix": "NETWORK_EARN_DAILY_VEHICLE_BONUS()",
      "body": ["NETWORK_EARN_DAILY_VEHICLE_BONUS(${1:Any p0})"],
      "description": "NETWORK_EARN_DAILY_VEHICLE_BONUS()"
    },
    "NETWORK_EARN_TUNER_AWARD": {
      "prefix": "NETWORK_EARN_TUNER_AWARD()",
      "body": ["NETWORK_EARN_TUNER_AWARD(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"],
      "description": "NETWORK_EARN_TUNER_AWARD()"
    },
    "NETWORK_EARN_TUNER_ROBBERY": {
      "prefix": "NETWORK_EARN_TUNER_ROBBERY()",
      "body": [
        "NETWORK_EARN_TUNER_ROBBERY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_EARN_TUNER_ROBBERY()"
    },
    "NETWORK_EARN_UPGRADE_AUTOSHOP": {
      "prefix": "NETWORK_EARN_UPGRADE_AUTOSHOP()",
      "body": ["NETWORK_EARN_UPGRADE_AUTOSHOP(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_EARN_UPGRADE_AUTOSHOP()"
    },
    "NETWORK_SPEND_INTERACTION_MENU_ABILITY": {
      "prefix": "NETWORK_SPEND_INTERACTION_MENU_ABILITY()",
      "body": [
        "NETWORK_SPEND_INTERACTION_MENU_ABILITY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_INTERACTION_MENU_ABILITY()"
    },
    "NETWORK_SPEND_SET_COMMON_FIELDS": {
      "prefix": "NETWORK_SPEND_SET_COMMON_FIELDS()",
      "body": [
        "NETWORK_SPEND_SET_COMMON_FIELDS(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:BOOL p3})"
      ],
      "description": "NETWORK_SPEND_SET_COMMON_FIELDS()"
    },
    "NETWORK_SPEND_SET_DISCOUNT": {
      "prefix": "NETWORK_SPEND_SET_DISCOUNT()",
      "body": ["NETWORK_SPEND_SET_DISCOUNT(${1:BOOL p0})"],
      "description": "NETWORK_SPEND_SET_DISCOUNT()"
    },
    "NETWORK_SPEND_BUY_AGENCY": {
      "prefix": "NETWORK_SPEND_BUY_AGENCY()",
      "body": [
        "NETWORK_SPEND_BUY_AGENCY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_BUY_AGENCY()"
    },
    "NETWORK_SPEND_UPGRADE_AGENCY": {
      "prefix": "NETWORK_SPEND_UPGRADE_AGENCY()",
      "body": [
        "NETWORK_SPEND_UPGRADE_AGENCY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_UPGRADE_AGENCY()"
    },
    "NETWORK_SPEND_AGENCY": {
      "prefix": "NETWORK_SPEND_AGENCY()",
      "body": [
        "NETWORK_SPEND_AGENCY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_SPEND_AGENCY()"
    },
    "NETWORK_SPEND_HIDDEN": {
      "prefix": "NETWORK_SPEND_HIDDEN()",
      "body": [
        "NETWORK_SPEND_HIDDEN(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_HIDDEN()"
    },
    "NETWORK_SPEND_SOURCE_BIKE": {
      "prefix": "NETWORK_SPEND_SOURCE_BIKE()",
      "body": [
        "NETWORK_SPEND_SOURCE_BIKE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_SOURCE_BIKE()"
    },
    "NETWORK_SPEND_COMP_SUV": {
      "prefix": "NETWORK_SPEND_COMP_SUV()",
      "body": [
        "NETWORK_SPEND_COMP_SUV(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_COMP_SUV()"
    },
    "NETWORK_SPEND_SUV_FST_TRVL": {
      "prefix": "NETWORK_SPEND_SUV_FST_TRVL()",
      "body": [
        "NETWORK_SPEND_SUV_FST_TRVL(${1:int p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_SUV_FST_TRVL()"
    },
    "NETWORK_SPEND_SUPPLY": {
      "prefix": "NETWORK_SPEND_SUPPLY()",
      "body": [
        "NETWORK_SPEND_SUPPLY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_SUPPLY()"
    },
    "NETWORK_SPEND_BIKE_SHOP": {
      "prefix": "NETWORK_SPEND_BIKE_SHOP()",
      "body": [
        "NETWORK_SPEND_BIKE_SHOP(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_BIKE_SHOP()"
    },
    "NETWORK_SPEND_VEHICLE_REQUESTED": {
      "prefix": "NETWORK_SPEND_VEHICLE_REQUESTED()",
      "body": [
        "NETWORK_SPEND_VEHICLE_REQUESTED(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_SPEND_VEHICLE_REQUESTED()"
    },
    "NETWORK_SPEND_GUNRUNNING": {
      "prefix": "NETWORK_SPEND_GUNRUNNING()",
      "body": [
        "NETWORK_SPEND_GUNRUNNING(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_GUNRUNNING()"
    },
    "NETWORK_EARN_AGENCY_SAFE": {
      "prefix": "NETWORK_EARN_AGENCY_SAFE()",
      "body": ["NETWORK_EARN_AGENCY_SAFE(${1:Any p0})"],
      "description": "NETWORK_EARN_AGENCY_SAFE()"
    },
    "NETWORK_EARN_AWARD_CONTRACT": {
      "prefix": "NETWORK_EARN_AWARD_CONTRACT()",
      "body": ["NETWORK_EARN_AWARD_CONTRACT(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_EARN_AWARD_CONTRACT()"
    },
    "NETWORK_EARN_AGENCY_CONTRACT": {
      "prefix": "NETWORK_EARN_AGENCY_CONTRACT()",
      "body": ["NETWORK_EARN_AGENCY_CONTRACT(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_EARN_AGENCY_CONTRACT()"
    },
    "NETWORK_EARN_AWARD_PHONE": {
      "prefix": "NETWORK_EARN_AWARD_PHONE()",
      "body": ["NETWORK_EARN_AWARD_PHONE(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_EARN_AWARD_PHONE()"
    },
    "NETWORK_EARN_AGENCY_PHONE": {
      "prefix": "NETWORK_EARN_AGENCY_PHONE()",
      "body": [
        "NETWORK_EARN_AGENCY_PHONE(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_EARN_AGENCY_PHONE()"
    },
    "NETWORK_EARN_AWARD_FIXER_MISSION": {
      "prefix": "NETWORK_EARN_AWARD_FIXER_MISSION()",
      "body": ["NETWORK_EARN_AWARD_FIXER_MISSION(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_EARN_AWARD_FIXER_MISSION()"
    },
    "NETWORK_EARN_FIXER_PREP": {
      "prefix": "NETWORK_EARN_FIXER_PREP()",
      "body": ["NETWORK_EARN_FIXER_PREP(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_EARN_FIXER_PREP()"
    },
    "NETWORK_EARN_FIXER_FINALE": {
      "prefix": "NETWORK_EARN_FIXER_FINALE()",
      "body": ["NETWORK_EARN_FIXER_FINALE(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_EARN_FIXER_FINALE()"
    },
    "NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP": {
      "prefix": "NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP()",
      "body": ["NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP()"
    },
    "NETWORK_EARN_AWARD_SHORT_TRIP": {
      "prefix": "NETWORK_EARN_AWARD_SHORT_TRIP()",
      "body": ["NETWORK_EARN_AWARD_SHORT_TRIP(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_EARN_AWARD_SHORT_TRIP()"
    },
    "NETWORK_EARN_FIXER_RIVAL_DELIVERY": {
      "prefix": "NETWORK_EARN_FIXER_RIVAL_DELIVERY()",
      "body": ["NETWORK_EARN_FIXER_RIVAL_DELIVERY(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_EARN_FIXER_RIVAL_DELIVERY()"
    },
    "NETWORK_EARN_UPGRADE_AGENCY": {
      "prefix": "NETWORK_EARN_UPGRADE_AGENCY()",
      "body": ["NETWORK_EARN_UPGRADE_AGENCY(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_EARN_UPGRADE_AGENCY()"
    },
    "NETWORK_SPEND_APARTMENT_UTILITIES": {
      "prefix": "NETWORK_SPEND_APARTMENT_UTILITIES()",
      "body": [
        "NETWORK_SPEND_APARTMENT_UTILITIES(${1:int amount}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any* data})"
      ],
      "description": "NETWORK_SPEND_APARTMENT_UTILITIES()"
    },
    "NETWORK_SPEND_BUSINESS_PROPERTY_FEES": {
      "prefix": "NETWORK_SPEND_BUSINESS_PROPERTY_FEES()",
      "body": [
        "NETWORK_SPEND_BUSINESS_PROPERTY_FEES(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SPEND_BUSINESS_PROPERTY_FEES()"
    },
    "NETWORK_EARN_SIGHTSEEING_REWARD": {
      "prefix": "NETWORK_EARN_SIGHTSEEING_REWARD()",
      "body": [
        "NETWORK_EARN_SIGHTSEEING_REWARD(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_EARN_SIGHTSEEING_REWARD()"
    },
    "NETWORK_EARN_BIKER_SHOP": {
      "prefix": "NETWORK_EARN_BIKER_SHOP()",
      "body": ["NETWORK_EARN_BIKER_SHOP(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_EARN_BIKER_SHOP()"
    },
    "NETWORK_EARN_BIKER": {
      "prefix": "NETWORK_EARN_BIKER()",
      "body": ["NETWORK_EARN_BIKER(${1:Any p0})"],
      "description": "NETWORK_EARN_BIKER()"
    },
    "NETWORK_YOHAN_SOURCE_GOODS": {
      "prefix": "NETWORK_YOHAN_SOURCE_GOODS()",
      "body": [
        "NETWORK_YOHAN_SOURCE_GOODS(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_YOHAN_SOURCE_GOODS()"
    },
    "_NETWORK_SPEND_BUY_MFGARAGE": {
      "prefix": "_NETWORK_SPEND_BUY_MFGARAGE()",
      "body": [
        "_NETWORK_SPEND_BUY_MFGARAGE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "_NETWORK_SPEND_BUY_MFGARAGE()"
    },
    "_NETWORK_SPEND_UPGRADE_MFGARAGE": {
      "prefix": "_NETWORK_SPEND_UPGRADE_MFGARAGE()",
      "body": [
        "_NETWORK_SPEND_UPGRADE_MFGARAGE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "_NETWORK_SPEND_UPGRADE_MFGARAGE()"
    },
    "_NETWORK_SPEND_BUY_SUPPLIES": {
      "prefix": "_NETWORK_SPEND_BUY_SUPPLIES()",
      "body": [
        "_NETWORK_SPEND_BUY_SUPPLIES(${1:int p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:int p3})"
      ],
      "description": "_NETWORK_SPEND_BUY_SUPPLIES()"
    },
    "_NETWORK_SPEND_BUY_ACID_LAB": {
      "prefix": "_NETWORK_SPEND_BUY_ACID_LAB()",
      "body": [
        "_NETWORK_SPEND_BUY_ACID_LAB(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "_NETWORK_SPEND_BUY_ACID_LAB()"
    },
    "_NETWORK_SPEND_UPGRADE_ACID_LAB_EQUIPMENT": {
      "prefix": "_NETWORK_SPEND_UPGRADE_ACID_LAB_EQUIPMENT()",
      "body": [
        "_NETWORK_SPEND_UPGRADE_ACID_LAB_EQUIPMENT(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "_NETWORK_SPEND_UPGRADE_ACID_LAB_EQUIPMENT()"
    },
    "_NETWORK_SPEND_UPGRADE_ACID_LAB_ARMOR": {
      "prefix": "_NETWORK_SPEND_UPGRADE_ACID_LAB_ARMOR()",
      "body": [
        "_NETWORK_SPEND_UPGRADE_ACID_LAB_ARMOR(${1:int p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:int p3})"
      ],
      "description": "_NETWORK_SPEND_UPGRADE_ACID_LAB_ARMOR()"
    },
    "_NETWORK_SPEND_UPGRADE_ACID_LAB_SCOOP": {
      "prefix": "_NETWORK_SPEND_UPGRADE_ACID_LAB_SCOOP()",
      "body": [
        "_NETWORK_SPEND_UPGRADE_ACID_LAB_SCOOP(${1:int p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:int p3})"
      ],
      "description": "_NETWORK_SPEND_UPGRADE_ACID_LAB_SCOOP()"
    },
    "_NETWORK_SPEND_UPGRADE_ACID_LAB_MINES": {
      "prefix": "_NETWORK_SPEND_UPGRADE_ACID_LAB_MINES()",
      "body": [
        "_NETWORK_SPEND_UPGRADE_ACID_LAB_MINES(${1:int p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:int p3})"
      ],
      "description": "_NETWORK_SPEND_UPGRADE_ACID_LAB_MINES()"
    },
    "_NETWORK_SPEND_RENAME_ACID_LAB": {
      "prefix": "_NETWORK_SPEND_RENAME_ACID_LAB()",
      "body": [
        "_NETWORK_SPEND_RENAME_ACID_LAB(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "_NETWORK_SPEND_RENAME_ACID_LAB()"
    },
    "_NETWORK_SPEND_RENAME_ACID_PRODUCT": {
      "prefix": "_NETWORK_SPEND_RENAME_ACID_PRODUCT()",
      "body": [
        "_NETWORK_SPEND_RENAME_ACID_PRODUCT(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "_NETWORK_SPEND_RENAME_ACID_PRODUCT()"
    },
    "_NETWORK_EARN_AWARD_JUGGALO_MISSION": {
      "prefix": "_NETWORK_EARN_AWARD_JUGGALO_MISSION()",
      "body": ["_NETWORK_EARN_AWARD_JUGGALO_MISSION(${1:Any p0}, ${2:Any p1})"],
      "description": "_NETWORK_EARN_AWARD_JUGGALO_MISSION()"
    },
    "_NETWORK_EARN_AWARD_ACID_LAB": {
      "prefix": "_NETWORK_EARN_AWARD_ACID_LAB()",
      "body": ["_NETWORK_EARN_AWARD_ACID_LAB(${1:Any p0}, ${2:Any p1})"],
      "description": "_NETWORK_EARN_AWARD_ACID_LAB()"
    },
    "_NETWORK_EARN_AWARD_DAILY_STASH": {
      "prefix": "_NETWORK_EARN_AWARD_DAILY_STASH()",
      "body": ["_NETWORK_EARN_AWARD_DAILY_STASH(${1:Any p0}, ${2:Any p1})"],
      "description": "_NETWORK_EARN_AWARD_DAILY_STASH()"
    },
    "_NETWORK_EARN_AWARD_DEAD_DROP": {
      "prefix": "_NETWORK_EARN_AWARD_DEAD_DROP()",
      "body": ["_NETWORK_EARN_AWARD_DEAD_DROP(${1:Any p0}, ${2:Any p1})"],
      "description": "_NETWORK_EARN_AWARD_DEAD_DROP()"
    },
    "_NETWORK_EARN_AWARD_RANDOM_EVENT": {
      "prefix": "_NETWORK_EARN_AWARD_RANDOM_EVENT()",
      "body": ["_NETWORK_EARN_AWARD_RANDOM_EVENT(${1:Any p0}, ${2:Any p1})"],
      "description": "_NETWORK_EARN_AWARD_RANDOM_EVENT()"
    },
    "_NETWORK_EARN_AWARD_TAXI": {
      "prefix": "_NETWORK_EARN_AWARD_TAXI()",
      "body": ["_NETWORK_EARN_AWARD_TAXI(${1:Any p0}, ${2:Any p1})"],
      "description": "_NETWORK_EARN_AWARD_TAXI()"
    },
    "_NETWORK_EARN_STREET_DEALER": {
      "prefix": "_NETWORK_EARN_STREET_DEALER()",
      "body": ["_NETWORK_EARN_STREET_DEALER(${1:Any p0}, ${2:Any p1})"],
      "description": "_NETWORK_EARN_STREET_DEALER()"
    },
    "_NETWORK_EARN_SELL_ACID": {
      "prefix": "_NETWORK_EARN_SELL_ACID()",
      "body": ["_NETWORK_EARN_SELL_ACID(${1:Any p0}, ${2:Any p1})"],
      "description": "_NETWORK_EARN_SELL_ACID()"
    },
    "_NETWORK_EARN_SETUP_PARTICIPATION_ACID_LAB": {
      "prefix": "_NETWORK_EARN_SETUP_PARTICIPATION_ACID_LAB()",
      "body": [
        "_NETWORK_EARN_SETUP_PARTICIPATION_ACID_LAB(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "_NETWORK_EARN_SETUP_PARTICIPATION_ACID_LAB()"
    },
    "_NETWORK_EARN_SOURCE_PARTICIPATION_ACID_LAB": {
      "prefix": "_NETWORK_EARN_SOURCE_PARTICIPATION_ACID_LAB()",
      "body": [
        "_NETWORK_EARN_SOURCE_PARTICIPATION_ACID_LAB(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "_NETWORK_EARN_SOURCE_PARTICIPATION_ACID_LAB()"
    },
    "_NETWORK_EARN_SELL_PARTICIPATION_ACID_LAB": {
      "prefix": "_NETWORK_EARN_SELL_PARTICIPATION_ACID_LAB()",
      "body": [
        "_NETWORK_EARN_SELL_PARTICIPATION_ACID_LAB(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "_NETWORK_EARN_SELL_PARTICIPATION_ACID_LAB()"
    },
    "_NETWORK_EARN_JUGGALO_STORY_MISSION": {
      "prefix": "_NETWORK_EARN_JUGGALO_STORY_MISSION()",
      "body": ["_NETWORK_EARN_JUGGALO_STORY_MISSION(${1:Any p0}, ${2:Any p1})"],
      "description": "_NETWORK_EARN_JUGGALO_STORY_MISSION()"
    },
    "_NETWORK_EARN_JUGGALO_STORY_MISSION_PARTICIPATION": {
      "prefix": "_NETWORK_EARN_JUGGALO_STORY_MISSION_PARTICIPATION()",
      "body": [
        "_NETWORK_EARN_JUGGALO_STORY_MISSION_PARTICIPATION(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "_NETWORK_EARN_JUGGALO_STORY_MISSION_PARTICIPATION()"
    },
    "_NETWORK_EARN_FOOLIGAN_JOB": {
      "prefix": "_NETWORK_EARN_FOOLIGAN_JOB()",
      "body": ["_NETWORK_EARN_FOOLIGAN_JOB(${1:Any p0}, ${2:Any p1})"],
      "description": "_NETWORK_EARN_FOOLIGAN_JOB()"
    },
    "_NETWORK_EARN_FOOLIGAN_JOB_PARTICIPATION": {
      "prefix": "_NETWORK_EARN_FOOLIGAN_JOB_PARTICIPATION()",
      "body": [
        "_NETWORK_EARN_FOOLIGAN_JOB_PARTICIPATION(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "_NETWORK_EARN_FOOLIGAN_JOB_PARTICIPATION()"
    },
    "_NETWORK_EARN_TAXI_JOB": {
      "prefix": "_NETWORK_EARN_TAXI_JOB()",
      "body": ["_NETWORK_EARN_TAXI_JOB(${1:Any p0}, ${2:Any p1})"],
      "description": "_NETWORK_EARN_TAXI_JOB()"
    },
    "_NETWORK_EARN_DAILY_STASH_HOUSE_COMPLETED": {
      "prefix": "_NETWORK_EARN_DAILY_STASH_HOUSE_COMPLETED()",
      "body": [
        "_NETWORK_EARN_DAILY_STASH_HOUSE_COMPLETED(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "_NETWORK_EARN_DAILY_STASH_HOUSE_COMPLETED()"
    },
    "_NETWORK_EARN_DAILY_STASH_HOUSE_PARTICIPATION": {
      "prefix": "_NETWORK_EARN_DAILY_STASH_HOUSE_PARTICIPATION()",
      "body": [
        "_NETWORK_EARN_DAILY_STASH_HOUSE_PARTICIPATION(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "_NETWORK_EARN_DAILY_STASH_HOUSE_PARTICIPATION()"
    },
    "_NETWORK_EARN_AVENGER": {
      "prefix": "_NETWORK_EARN_AVENGER()",
      "body": ["_NETWORK_EARN_AVENGER(${1:int amount}, ${2:int p1})"],
      "description": "_NETWORK_EARN_AVENGER()"
    },
    "_NETWORK_EARN_SMUGGLER_OPS": {
      "prefix": "_NETWORK_EARN_SMUGGLER_OPS()",
      "body": [
        "_NETWORK_EARN_SMUGGLER_OPS(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "_NETWORK_EARN_SMUGGLER_OPS()"
    },
    "_NETWORK_EARN_BONUS_OBJECTIVE": {
      "prefix": "_NETWORK_EARN_BONUS_OBJECTIVE()",
      "body": [
        "_NETWORK_EARN_BONUS_OBJECTIVE(${1:int amount}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "_NETWORK_EARN_BONUS_OBJECTIVE()"
    },
    "_NETWORK_EARN_PROGRESS_HUB": {
      "prefix": "_NETWORK_EARN_PROGRESS_HUB()",
      "body": ["_NETWORK_EARN_PROGRESS_HUB(${1:Any p0}, ${2:Any p1})"],
      "description": "_NETWORK_EARN_PROGRESS_HUB()"
    },
    "_NETWORK_SPENT_AIR_FREIGHT": {
      "prefix": "_NETWORK_SPENT_AIR_FREIGHT()",
      "body": [
        "_NETWORK_SPENT_AIR_FREIGHT(${1:int hangarCargoSourcingPrice}, ${2:BOOL fromBank}, ${3:BOOL fromBankAndWallet}, ${4:int cost}, ${5:int warehouseId}, ${6:int warehouseSlot})"
      ],
      "description": "_NETWORK_SPENT_AIR_FREIGHT()"
    },
    "_NETWORK_SPENT_SKIP_CARGO_SOURCE_SETUP": {
      "prefix": "_NETWORK_SPENT_SKIP_CARGO_SOURCE_SETUP()",
      "body": [
        "_NETWORK_SPENT_SKIP_CARGO_SOURCE_SETUP(${1:int amount}, ${2:BOOL fromBank}, ${3:BOOL fromBankAndWallet}, ${4:int cost})"
      ],
      "description": "_NETWORK_SPENT_SKIP_CARGO_SOURCE_SETUP()"
    },
    "_NETWORK_SPENT_STEALTH_MODULE": {
      "prefix": "_NETWORK_SPENT_STEALTH_MODULE()",
      "body": [
        "_NETWORK_SPENT_STEALTH_MODULE(${1:int amount}, ${2:BOOL fromBank}, ${3:BOOL fromBankAndWallet}, ${4:Hash p3})"
      ],
      "description": "_NETWORK_SPENT_STEALTH_MODULE()"
    },
    "_NETWORK_SPENT_MISSILE_JAMMER": {
      "prefix": "_NETWORK_SPENT_MISSILE_JAMMER()",
      "body": [
        "_NETWORK_SPENT_MISSILE_JAMMER(${1:int amount}, ${2:BOOL fromBank}, ${3:BOOL fromBankAndWallet}, ${4:Hash p3})"
      ],
      "description": "_NETWORK_SPENT_MISSILE_JAMMER()"
    },
    "_NETWORK_SPENT_GENERIC": {
      "prefix": "_NETWORK_SPENT_GENERIC()",
      "body": [
        "_NETWORK_SPENT_GENERIC(${1:int price}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Hash stat}, ${5:Hash spent}, ${6:const char* p5}, ${7:const char* p6}, ${8:Any* data})"
      ],
      "description": "_NETWORK_SPENT_GENERIC()"
    },
    "_NETWORK_EARN_GENERIC": {
      "prefix": "_NETWORK_EARN_GENERIC()",
      "body": [
        "_NETWORK_EARN_GENERIC(${1:int amount}, ${2:Hash earn}, ${3:const char* p2}, ${4:const char* p3}, ${5:Any* data})"
      ],
      "description": "_NETWORK_EARN_GENERIC()"
    },
    "_NETWORK_CLEAR_TRANSACTION_TELEMETRY_NONCE": {
      "prefix": "_NETWORK_CLEAR_TRANSACTION_TELEMETRY_NONCE()",
      "body": ["_NETWORK_CLEAR_TRANSACTION_TELEMETRY_NONCE()"],
      "description": "_NETWORK_CLEAR_TRANSACTION_TELEMETRY_NONCE()"
    },
    "NETWORK_GET_VC_BANK_BALANCE": {
      "prefix": "NETWORK_GET_VC_BANK_BALANCE()",
      "body": ["NETWORK_GET_VC_BANK_BALANCE()"],
      "description": "NETWORK_GET_VC_BANK_BALANCE()"
    },
    "NETWORK_GET_VC_WALLET_BALANCE": {
      "prefix": "NETWORK_GET_VC_WALLET_BALANCE()",
      "body": ["NETWORK_GET_VC_WALLET_BALANCE(${1:int characterSlot})"],
      "description": "NETWORK_GET_VC_WALLET_BALANCE()"
    },
    "NETWORK_GET_VC_BALANCE": {
      "prefix": "NETWORK_GET_VC_BALANCE()",
      "body": ["NETWORK_GET_VC_BALANCE()"],
      "description": "NETWORK_GET_VC_BALANCE()"
    },
    "NETWORK_GET_EVC_BALANCE": {
      "prefix": "NETWORK_GET_EVC_BALANCE()",
      "body": ["NETWORK_GET_EVC_BALANCE()"],
      "description": "NETWORK_GET_EVC_BALANCE()"
    },
    "NETWORK_GET_PVC_BALANCE": {
      "prefix": "NETWORK_GET_PVC_BALANCE()",
      "body": ["NETWORK_GET_PVC_BALANCE()"],
      "description": "NETWORK_GET_PVC_BALANCE()"
    },
    "NETWORK_GET_CAN_SPEND_FROM_WALLET": {
      "prefix": "NETWORK_GET_CAN_SPEND_FROM_WALLET()",
      "body": [
        "NETWORK_GET_CAN_SPEND_FROM_WALLET(${1:int amount}, ${2:int characterSlot})"
      ],
      "description": "NETWORK_GET_CAN_SPEND_FROM_WALLET()"
    },
    "NETWORK_GET_CAN_SPEND_FROM_BANK": {
      "prefix": "NETWORK_GET_CAN_SPEND_FROM_BANK()",
      "body": ["NETWORK_GET_CAN_SPEND_FROM_BANK(${1:int amount})"],
      "description": "NETWORK_GET_CAN_SPEND_FROM_BANK()"
    },
    "NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET": {
      "prefix": "NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET()",
      "body": [
        "NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET(${1:int amount}, ${2:int characterSlot})"
      ],
      "description": "NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET()"
    },
    "NETWORK_GET_PVC_TRANSFER_BALANCE": {
      "prefix": "NETWORK_GET_PVC_TRANSFER_BALANCE()",
      "body": ["NETWORK_GET_PVC_TRANSFER_BALANCE()"],
      "description": "NETWORK_GET_PVC_TRANSFER_BALANCE()"
    },
    "NETWORK_GET_CAN_TRANSFER_CASH": {
      "prefix": "NETWORK_GET_CAN_TRANSFER_CASH()",
      "body": ["NETWORK_GET_CAN_TRANSFER_CASH(${1:int amount})"],
      "description": "NETWORK_GET_CAN_TRANSFER_CASH()"
    },
    "NETWORK_CAN_RECEIVE_PLAYER_CASH": {
      "prefix": "NETWORK_CAN_RECEIVE_PLAYER_CASH()",
      "body": [
        "NETWORK_CAN_RECEIVE_PLAYER_CASH(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_CAN_RECEIVE_PLAYER_CASH()"
    },
    "NETWORK_GET_REMAINING_TRANSFER_BALANCE": {
      "prefix": "NETWORK_GET_REMAINING_TRANSFER_BALANCE()",
      "body": ["NETWORK_GET_REMAINING_TRANSFER_BALANCE()"],
      "description": "NETWORK_GET_REMAINING_TRANSFER_BALANCE()"
    },
    "WITHDRAW_VC": {
      "prefix": "WITHDRAW_VC()",
      "body": ["WITHDRAW_VC(${1:int amount})"],
      "description": "WITHDRAW_VC()"
    },
    "DEPOSIT_VC": {
      "prefix": "DEPOSIT_VC()",
      "body": ["DEPOSIT_VC(${1:int amount})"],
      "description": "DEPOSIT_VC()"
    },
    "HAS_VC_WITHDRAWAL_COMPLETED": {
      "prefix": "HAS_VC_WITHDRAWAL_COMPLETED()",
      "body": ["HAS_VC_WITHDRAWAL_COMPLETED(${1:Any p0})"],
      "description": "HAS_VC_WITHDRAWAL_COMPLETED()"
    },
    "WAS_VC_WITHDRAWAL_SUCCESSFUL": {
      "prefix": "WAS_VC_WITHDRAWAL_SUCCESSFUL()",
      "body": ["WAS_VC_WITHDRAWAL_SUCCESSFUL(${1:Any p0})"],
      "description": "WAS_VC_WITHDRAWAL_SUCCESSFUL()"
    },
    "NET_GAMESERVER_USE_SERVER_TRANSACTIONS": {
      "prefix": "NET_GAMESERVER_USE_SERVER_TRANSACTIONS()",
      "body": ["NET_GAMESERVER_USE_SERVER_TRANSACTIONS()"],
      "description": "NET_GAMESERVER_USE_SERVER_TRANSACTIONS()"
    },
    "NET_GAMESERVER_CATALOG_ITEM_IS_VALID": {
      "prefix": "NET_GAMESERVER_CATALOG_ITEM_IS_VALID()",
      "body": ["NET_GAMESERVER_CATALOG_ITEM_IS_VALID(${1:const char* name})"],
      "description": "NET_GAMESERVER_CATALOG_ITEM_IS_VALID()"
    },
    "NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID": {
      "prefix": "NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID()",
      "body": ["NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID(${1:Hash hash})"],
      "description": "NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID()"
    },
    "NET_GAMESERVER_GET_PRICE": {
      "prefix": "NET_GAMESERVER_GET_PRICE()",
      "body": [
        "NET_GAMESERVER_GET_PRICE(${1:Hash itemHash}, ${2:Hash categoryHash}, ${3:BOOL p2})"
      ],
      "description": "NET_GAMESERVER_GET_PRICE()"
    },
    "NET_GAMESERVER_CATALOG_IS_VALID": {
      "prefix": "NET_GAMESERVER_CATALOG_IS_VALID()",
      "body": ["NET_GAMESERVER_CATALOG_IS_VALID()"],
      "description": "NET_GAMESERVER_CATALOG_IS_VALID()"
    },
    "NET_GAMESERVER_IS_CATALOG_CURRENT": {
      "prefix": "NET_GAMESERVER_IS_CATALOG_CURRENT()",
      "body": ["NET_GAMESERVER_IS_CATALOG_CURRENT()"],
      "description": "NET_GAMESERVER_IS_CATALOG_CURRENT()"
    },
    "NET_GAMESERVER_GET_CATALOG_CLOUD_CRC": {
      "prefix": "NET_GAMESERVER_GET_CATALOG_CLOUD_CRC()",
      "body": ["NET_GAMESERVER_GET_CATALOG_CLOUD_CRC()"],
      "description": "NET_GAMESERVER_GET_CATALOG_CLOUD_CRC()"
    },
    "NET_GAMESERVER_REFRESH_SERVER_CATALOG": {
      "prefix": "NET_GAMESERVER_REFRESH_SERVER_CATALOG()",
      "body": ["NET_GAMESERVER_REFRESH_SERVER_CATALOG()"],
      "description": "NET_GAMESERVER_REFRESH_SERVER_CATALOG()"
    },
    "NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS": {
      "prefix": "NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS()",
      "body": ["NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS(${1:int* state})"],
      "description": "NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS()"
    },
    "NET_GAMESERVER_INIT_SESSION": {
      "prefix": "NET_GAMESERVER_INIT_SESSION()",
      "body": ["NET_GAMESERVER_INIT_SESSION()"],
      "description": "NET_GAMESERVER_INIT_SESSION()"
    },
    "NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS": {
      "prefix": "NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS()",
      "body": ["NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS(${1:int* p0})"],
      "description": "NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS()"
    },
    "NET_GAMESERVER_START_SESSION": {
      "prefix": "NET_GAMESERVER_START_SESSION()",
      "body": ["NET_GAMESERVER_START_SESSION(${1:int charSlot})"],
      "description": "NET_GAMESERVER_START_SESSION()"
    },
    "NET_GAMESERVER_START_SESSION_PENDING": {
      "prefix": "NET_GAMESERVER_START_SESSION_PENDING()",
      "body": ["NET_GAMESERVER_START_SESSION_PENDING()"],
      "description": "NET_GAMESERVER_START_SESSION_PENDING()"
    },
    "NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS": {
      "prefix": "NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS()",
      "body": ["NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS(${1:int* p0})"],
      "description": "NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS()"
    },
    "NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE": {
      "prefix": "NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE()",
      "body": ["NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE(${1:int* p0})"],
      "description": "NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE()"
    },
    "NET_GAMESERVER_IS_SESSION_VALID": {
      "prefix": "NET_GAMESERVER_IS_SESSION_VALID()",
      "body": ["NET_GAMESERVER_IS_SESSION_VALID(${1:int charSlot})"],
      "description": "NET_GAMESERVER_IS_SESSION_VALID()"
    },
    "NET_GAMESERVER_CLEAR_SESSION": {
      "prefix": "NET_GAMESERVER_CLEAR_SESSION()",
      "body": ["NET_GAMESERVER_CLEAR_SESSION(${1:int p0})"],
      "description": "NET_GAMESERVER_CLEAR_SESSION()"
    },
    "NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA": {
      "prefix": "NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA()",
      "body": ["NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA(${1:int charSlot})"],
      "description": "NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA()"
    },
    "NET_GAMESERVER_IS_SESSION_REFRESH_PENDING": {
      "prefix": "NET_GAMESERVER_IS_SESSION_REFRESH_PENDING()",
      "body": ["NET_GAMESERVER_IS_SESSION_REFRESH_PENDING()"],
      "description": "NET_GAMESERVER_IS_SESSION_REFRESH_PENDING()"
    },
    "NET_GAMESERVER_START_SESSION_RESTART": {
      "prefix": "NET_GAMESERVER_START_SESSION_RESTART()",
      "body": [
        "NET_GAMESERVER_START_SESSION_RESTART(${1:BOOL inventory}, ${2:BOOL playerbalance})"
      ],
      "description": "NET_GAMESERVER_START_SESSION_RESTART()"
    },
    "NET_GAMESERVER_TRANSACTION_IN_PROGRESS": {
      "prefix": "NET_GAMESERVER_TRANSACTION_IN_PROGRESS()",
      "body": ["NET_GAMESERVER_TRANSACTION_IN_PROGRESS()"],
      "description": "NET_GAMESERVER_TRANSACTION_IN_PROGRESS()"
    },
    "NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS": {
      "prefix": "NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS()",
      "body": [
        "NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS(${1:int* p0}, ${2:BOOL* p1})"
      ],
      "description": "NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS()"
    },
    "NET_GAMESERVER_BASKET_START": {
      "prefix": "NET_GAMESERVER_BASKET_START()",
      "body": [
        "NET_GAMESERVER_BASKET_START(${1:int* transactionId}, ${2:Hash categoryHash}, ${3:Hash actionHash}, ${4:int flags})"
      ],
      "description": "NET_GAMESERVER_BASKET_START()"
    },
    "NET_GAMESERVER_BASKET_END": {
      "prefix": "NET_GAMESERVER_BASKET_END()",
      "body": ["NET_GAMESERVER_BASKET_END()"],
      "description": "NET_GAMESERVER_BASKET_END()"
    },
    "NET_GAMESERVER_BASKET_IS_ACTIVE": {
      "prefix": "NET_GAMESERVER_BASKET_IS_ACTIVE()",
      "body": ["NET_GAMESERVER_BASKET_IS_ACTIVE()"],
      "description": "NET_GAMESERVER_BASKET_IS_ACTIVE()"
    },
    "NET_GAMESERVER_BASKET_ADD_ITEM": {
      "prefix": "NET_GAMESERVER_BASKET_ADD_ITEM()",
      "body": [
        "NET_GAMESERVER_BASKET_ADD_ITEM(${1:Any* itemData}, ${2:int quantity})"
      ],
      "description": "NET_GAMESERVER_BASKET_ADD_ITEM()"
    },
    "NET_GAMESERVER_BASKET_IS_FULL": {
      "prefix": "NET_GAMESERVER_BASKET_IS_FULL()",
      "body": ["NET_GAMESERVER_BASKET_IS_FULL()"],
      "description": "NET_GAMESERVER_BASKET_IS_FULL()"
    },
    "NET_GAMESERVER_BASKET_APPLY_SERVER_DATA": {
      "prefix": "NET_GAMESERVER_BASKET_APPLY_SERVER_DATA()",
      "body": [
        "NET_GAMESERVER_BASKET_APPLY_SERVER_DATA(${1:Any p0}, ${2:Any* p1})"
      ],
      "description": "NET_GAMESERVER_BASKET_APPLY_SERVER_DATA()"
    },
    "NET_GAMESERVER_CHECKOUT_START": {
      "prefix": "NET_GAMESERVER_CHECKOUT_START()",
      "body": ["NET_GAMESERVER_CHECKOUT_START(${1:int transactionId})"],
      "description": "NET_GAMESERVER_CHECKOUT_START()"
    },
    "NET_GAMESERVER_BEGIN_SERVICE": {
      "prefix": "NET_GAMESERVER_BEGIN_SERVICE()",
      "body": [
        "NET_GAMESERVER_BEGIN_SERVICE(${1:int* transactionId}, ${2:Hash categoryHash}, ${3:Hash itemHash}, ${4:Hash actionTypeHash}, ${5:int value}, ${6:int flags})"
      ],
      "description": "NET_GAMESERVER_BEGIN_SERVICE()"
    },
    "NET_GAMESERVER_END_SERVICE": {
      "prefix": "NET_GAMESERVER_END_SERVICE()",
      "body": ["NET_GAMESERVER_END_SERVICE(${1:int transactionId})"],
      "description": "NET_GAMESERVER_END_SERVICE()"
    },
    "NET_GAMESERVER_DELETE_CHARACTER": {
      "prefix": "NET_GAMESERVER_DELETE_CHARACTER()",
      "body": [
        "NET_GAMESERVER_DELETE_CHARACTER(${1:int slot}, ${2:BOOL transfer}, ${3:Hash reason})"
      ],
      "description": "NET_GAMESERVER_DELETE_CHARACTER()"
    },
    "NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS": {
      "prefix": "NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS()",
      "body": ["NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS()"],
      "description": "NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS()"
    },
    "NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED": {
      "prefix": "NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED()",
      "body": ["NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED()"],
      "description": "NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED()"
    },
    "NET_GAMESERVER_TRANSFER_BANK_TO_WALLET": {
      "prefix": "NET_GAMESERVER_TRANSFER_BANK_TO_WALLET()",
      "body": [
        "NET_GAMESERVER_TRANSFER_BANK_TO_WALLET(${1:int charSlot}, ${2:int amount})"
      ],
      "description": "NET_GAMESERVER_TRANSFER_BANK_TO_WALLET()"
    },
    "NET_GAMESERVER_TRANSFER_WALLET_TO_BANK": {
      "prefix": "NET_GAMESERVER_TRANSFER_WALLET_TO_BANK()",
      "body": [
        "NET_GAMESERVER_TRANSFER_WALLET_TO_BANK(${1:int charSlot}, ${2:int amount})"
      ],
      "description": "NET_GAMESERVER_TRANSFER_WALLET_TO_BANK()"
    },
    "NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS": {
      "prefix": "NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS()",
      "body": ["NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS()"],
      "description": "NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS()"
    },
    "NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS": {
      "prefix": "NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS()",
      "body": ["NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS()"],
      "description": "NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS()"
    },
    "NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED": {
      "prefix": "NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED()",
      "body": ["NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED()"],
      "description": "NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED()"
    },
    "NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED": {
      "prefix": "NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED()",
      "body": ["NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED(${1:int p0})"],
      "description": "NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED()"
    },
    "NETWORK_IS_SIGNED_IN": {
      "prefix": "NETWORK_IS_SIGNED_IN()",
      "body": ["NETWORK_IS_SIGNED_IN()"],
      "description": "NETWORK_IS_SIGNED_IN()"
    },
    "NETWORK_IS_SIGNED_ONLINE": {
      "prefix": "NETWORK_IS_SIGNED_ONLINE()",
      "body": ["NETWORK_IS_SIGNED_ONLINE()"],
      "description": "NETWORK_IS_SIGNED_ONLINE()"
    },
    "NETWORK_IS_NP_AVAILABLE": {
      "prefix": "NETWORK_IS_NP_AVAILABLE()",
      "body": ["NETWORK_IS_NP_AVAILABLE()"],
      "description": "NETWORK_IS_NP_AVAILABLE()"
    },
    "NETWORK_IS_NP_PENDING": {
      "prefix": "NETWORK_IS_NP_PENDING()",
      "body": ["NETWORK_IS_NP_PENDING()"],
      "description": "NETWORK_IS_NP_PENDING()"
    },
    "NETWORK_GET_NP_UNAVAILABLE_REASON": {
      "prefix": "NETWORK_GET_NP_UNAVAILABLE_REASON()",
      "body": ["NETWORK_GET_NP_UNAVAILABLE_REASON()"],
      "description": "NETWORK_GET_NP_UNAVAILABLE_REASON()"
    },
    "NETWORK_IS_CONNETED_TO_NP_PRESENCE": {
      "prefix": "NETWORK_IS_CONNETED_TO_NP_PRESENCE()",
      "body": ["NETWORK_IS_CONNETED_TO_NP_PRESENCE()"],
      "description": "NETWORK_IS_CONNETED_TO_NP_PRESENCE()"
    },
    "NETWORK_IS_LOGGED_IN_TO_PSN": {
      "prefix": "NETWORK_IS_LOGGED_IN_TO_PSN()",
      "body": ["NETWORK_IS_LOGGED_IN_TO_PSN()"],
      "description": "NETWORK_IS_LOGGED_IN_TO_PSN()"
    },
    "NETWORK_HAS_VALID_ROS_CREDENTIALS": {
      "prefix": "NETWORK_HAS_VALID_ROS_CREDENTIALS()",
      "body": ["NETWORK_HAS_VALID_ROS_CREDENTIALS()"],
      "description": "NETWORK_HAS_VALID_ROS_CREDENTIALS()"
    },
    "NETWORK_IS_REFRESHING_ROS_CREDENTIALS": {
      "prefix": "NETWORK_IS_REFRESHING_ROS_CREDENTIALS()",
      "body": ["NETWORK_IS_REFRESHING_ROS_CREDENTIALS()"],
      "description": "NETWORK_IS_REFRESHING_ROS_CREDENTIALS()"
    },
    "NETWORK_IS_CLOUD_AVAILABLE": {
      "prefix": "NETWORK_IS_CLOUD_AVAILABLE()",
      "body": ["NETWORK_IS_CLOUD_AVAILABLE()"],
      "description": "NETWORK_IS_CLOUD_AVAILABLE()"
    },
    "NETWORK_HAS_SOCIAL_CLUB_ACCOUNT": {
      "prefix": "NETWORK_HAS_SOCIAL_CLUB_ACCOUNT()",
      "body": ["NETWORK_HAS_SOCIAL_CLUB_ACCOUNT()"],
      "description": "NETWORK_HAS_SOCIAL_CLUB_ACCOUNT()"
    },
    "NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT": {
      "prefix": "NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT()",
      "body": ["NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT()"],
      "description": "NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT()"
    },
    "NETWORK_IS_HOST": {
      "prefix": "NETWORK_IS_HOST()",
      "body": ["NETWORK_IS_HOST()"],
      "description": "NETWORK_IS_HOST()"
    },
    "NETWORK_GET_HOST_PLAYER_INDEX": {
      "prefix": "NETWORK_GET_HOST_PLAYER_INDEX()",
      "body": ["NETWORK_GET_HOST_PLAYER_INDEX()"],
      "description": "NETWORK_GET_HOST_PLAYER_INDEX()"
    },
    "NETWORK_WAS_GAME_SUSPENDED": {
      "prefix": "NETWORK_WAS_GAME_SUSPENDED()",
      "body": ["NETWORK_WAS_GAME_SUSPENDED()"],
      "description": "NETWORK_WAS_GAME_SUSPENDED()"
    },
    "NETWORK_HAVE_ONLINE_PRIVILEGES": {
      "prefix": "NETWORK_HAVE_ONLINE_PRIVILEGES()",
      "body": ["NETWORK_HAVE_ONLINE_PRIVILEGES()"],
      "description": "NETWORK_HAVE_ONLINE_PRIVILEGES()"
    },
    "NETWORK_HAS_AGE_RESTRICTIONS": {
      "prefix": "NETWORK_HAS_AGE_RESTRICTIONS()",
      "body": ["NETWORK_HAS_AGE_RESTRICTIONS()"],
      "description": "NETWORK_HAS_AGE_RESTRICTIONS()"
    },
    "NETWORK_HAVE_USER_CONTENT_PRIVILEGES": {
      "prefix": "NETWORK_HAVE_USER_CONTENT_PRIVILEGES()",
      "body": ["NETWORK_HAVE_USER_CONTENT_PRIVILEGES(${1:int p0})"],
      "description": "NETWORK_HAVE_USER_CONTENT_PRIVILEGES()"
    },
    "NETWORK_HAVE_COMMUNICATION_PRIVILEGES": {
      "prefix": "NETWORK_HAVE_COMMUNICATION_PRIVILEGES()",
      "body": [
        "NETWORK_HAVE_COMMUNICATION_PRIVILEGES(${1:int p0}, ${2:Player player})"
      ],
      "description": "NETWORK_HAVE_COMMUNICATION_PRIVILEGES()"
    },
    "_NETWORK_HAVE_PLATFORM_COMMUNICATION_PRIVILEGES": {
      "prefix": "_NETWORK_HAVE_PLATFORM_COMMUNICATION_PRIVILEGES()",
      "body": ["_NETWORK_HAVE_PLATFORM_COMMUNICATION_PRIVILEGES()"],
      "description": "_NETWORK_HAVE_PLATFORM_COMMUNICATION_PRIVILEGES()"
    },
    "NETWORK_CHECK_ONLINE_PRIVILEGES": {
      "prefix": "NETWORK_CHECK_ONLINE_PRIVILEGES()",
      "body": ["NETWORK_CHECK_ONLINE_PRIVILEGES(${1:Any p0}, ${2:BOOL p1})"],
      "description": "NETWORK_CHECK_ONLINE_PRIVILEGES()"
    },
    "NETWORK_CHECK_USER_CONTENT_PRIVILEGES": {
      "prefix": "NETWORK_CHECK_USER_CONTENT_PRIVILEGES()",
      "body": [
        "NETWORK_CHECK_USER_CONTENT_PRIVILEGES(${1:int p0}, ${2:int p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_CHECK_USER_CONTENT_PRIVILEGES()"
    },
    "NETWORK_CHECK_COMMUNICATION_PRIVILEGES": {
      "prefix": "NETWORK_CHECK_COMMUNICATION_PRIVILEGES()",
      "body": [
        "NETWORK_CHECK_COMMUNICATION_PRIVILEGES(${1:int p0}, ${2:int p1}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_CHECK_COMMUNICATION_PRIVILEGES()"
    },
    "NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES": {
      "prefix": "NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES()",
      "body": [
        "NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES()"
    },
    "NETWORK_IS_USING_ONLINE_PROMOTION": {
      "prefix": "NETWORK_IS_USING_ONLINE_PROMOTION()",
      "body": ["NETWORK_IS_USING_ONLINE_PROMOTION()"],
      "description": "NETWORK_IS_USING_ONLINE_PROMOTION()"
    },
    "NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN": {
      "prefix": "NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN()",
      "body": ["NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN()"],
      "description": "NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN()"
    },
    "NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV": {
      "prefix": "NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV()",
      "body": ["NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV()"],
      "description": "NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV()"
    },
    "NETWORK_GET_AGE_GROUP": {
      "prefix": "NETWORK_GET_AGE_GROUP()",
      "body": ["NETWORK_GET_AGE_GROUP()"],
      "description": "NETWORK_GET_AGE_GROUP()"
    },
    "NETWORK_CHECK_PRIVILEGES": {
      "prefix": "NETWORK_CHECK_PRIVILEGES()",
      "body": ["NETWORK_CHECK_PRIVILEGES(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"],
      "description": "NETWORK_CHECK_PRIVILEGES()"
    },
    "NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS": {
      "prefix": "NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS()",
      "body": ["NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS()"],
      "description": "NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS()"
    },
    "NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED": {
      "prefix": "NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED()",
      "body": ["NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED()"],
      "description": "NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED()"
    },
    "NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT": {
      "prefix": "NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT()",
      "body": ["NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT()"],
      "description": "NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT()"
    },
    "NETWORK_HAVE_PLATFORM_SUBSCRIPTION": {
      "prefix": "NETWORK_HAVE_PLATFORM_SUBSCRIPTION()",
      "body": ["NETWORK_HAVE_PLATFORM_SUBSCRIPTION()"],
      "description": "NETWORK_HAVE_PLATFORM_SUBSCRIPTION()"
    },
    "NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING": {
      "prefix": "NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING()",
      "body": ["NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING()"],
      "description": "NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING()"
    },
    "NETWORK_SHOW_ACCOUNT_UPGRADE_UI": {
      "prefix": "NETWORK_SHOW_ACCOUNT_UPGRADE_UI()",
      "body": ["NETWORK_SHOW_ACCOUNT_UPGRADE_UI()"],
      "description": "NETWORK_SHOW_ACCOUNT_UPGRADE_UI()"
    },
    "NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL": {
      "prefix": "NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL()",
      "body": ["NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL()"],
      "description": "NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL()"
    },
    "NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED": {
      "prefix": "NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED()",
      "body": ["NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED()"],
      "description": "NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED()"
    },
    "NETWORK_CAN_BAIL": {
      "prefix": "NETWORK_CAN_BAIL()",
      "body": ["NETWORK_CAN_BAIL()"],
      "description": "NETWORK_CAN_BAIL()"
    },
    "NETWORK_BAIL": {
      "prefix": "NETWORK_BAIL()",
      "body": ["NETWORK_BAIL(${1:int p0}, ${2:int p1}, ${3:int p2})"],
      "description": "NETWORK_BAIL()"
    },
    "NETWORK_ON_RETURN_TO_SINGLE_PLAYER": {
      "prefix": "NETWORK_ON_RETURN_TO_SINGLE_PLAYER()",
      "body": ["NETWORK_ON_RETURN_TO_SINGLE_PLAYER()"],
      "description": "NETWORK_ON_RETURN_TO_SINGLE_PLAYER()"
    },
    "NETWORK_TRANSITION_START": {
      "prefix": "NETWORK_TRANSITION_START()",
      "body": [
        "NETWORK_TRANSITION_START(${1:int p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_TRANSITION_START()"
    },
    "NETWORK_TRANSITION_ADD_STAGE": {
      "prefix": "NETWORK_TRANSITION_ADD_STAGE()",
      "body": [
        "NETWORK_TRANSITION_ADD_STAGE(${1:Hash hash}, ${2:int p1}, ${3:int p2}, ${4:int state}, ${5:int p4})"
      ],
      "description": "NETWORK_TRANSITION_ADD_STAGE()"
    },
    "NETWORK_TRANSITION_FINISH": {
      "prefix": "NETWORK_TRANSITION_FINISH()",
      "body": [
        "NETWORK_TRANSITION_FINISH(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_TRANSITION_FINISH()"
    },
    "NETWORK_CAN_ACCESS_MULTIPLAYER": {
      "prefix": "NETWORK_CAN_ACCESS_MULTIPLAYER()",
      "body": ["NETWORK_CAN_ACCESS_MULTIPLAYER(${1:int* loadingState})"],
      "description": "NETWORK_CAN_ACCESS_MULTIPLAYER()"
    },
    "NETWORK_IS_MULTIPLAYER_DISABLED": {
      "prefix": "NETWORK_IS_MULTIPLAYER_DISABLED()",
      "body": ["NETWORK_IS_MULTIPLAYER_DISABLED()"],
      "description": "NETWORK_IS_MULTIPLAYER_DISABLED()"
    },
    "NETWORK_CAN_ENTER_MULTIPLAYER": {
      "prefix": "NETWORK_CAN_ENTER_MULTIPLAYER()",
      "body": ["NETWORK_CAN_ENTER_MULTIPLAYER()"],
      "description": "NETWORK_CAN_ENTER_MULTIPLAYER()"
    },
    "NETWORK_SESSION_DO_FREEROAM_QUICKMATCH": {
      "prefix": "NETWORK_SESSION_DO_FREEROAM_QUICKMATCH()",
      "body": [
        "NETWORK_SESSION_DO_FREEROAM_QUICKMATCH(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_SESSION_DO_FREEROAM_QUICKMATCH()"
    },
    "NETWORK_SESSION_DO_FRIEND_MATCHMAKING": {
      "prefix": "NETWORK_SESSION_DO_FRIEND_MATCHMAKING()",
      "body": [
        "NETWORK_SESSION_DO_FRIEND_MATCHMAKING(${1:int p0}, ${2:int p1}, ${3:int p2})"
      ],
      "description": "NETWORK_SESSION_DO_FRIEND_MATCHMAKING()"
    },
    "NETWORK_SESSION_DO_CREW_MATCHMAKING": {
      "prefix": "NETWORK_SESSION_DO_CREW_MATCHMAKING()",
      "body": [
        "NETWORK_SESSION_DO_CREW_MATCHMAKING(${1:int crewId}, ${2:int p1}, ${3:int p2}, ${4:int maxPlayers})"
      ],
      "description": "NETWORK_SESSION_DO_CREW_MATCHMAKING()"
    },
    "NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH": {
      "prefix": "NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH()",
      "body": [
        "NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH()"
    },
    "NETWORK_SESSION_HOST": {
      "prefix": "NETWORK_SESSION_HOST()",
      "body": [
        "NETWORK_SESSION_HOST(${1:int p0}, ${2:int maxPlayers}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SESSION_HOST()"
    },
    "NETWORK_SESSION_HOST_CLOSED": {
      "prefix": "NETWORK_SESSION_HOST_CLOSED()",
      "body": ["NETWORK_SESSION_HOST_CLOSED(${1:int p0}, ${2:int maxPlayers})"],
      "description": "NETWORK_SESSION_HOST_CLOSED()"
    },
    "NETWORK_SESSION_HOST_FRIENDS_ONLY": {
      "prefix": "NETWORK_SESSION_HOST_FRIENDS_ONLY()",
      "body": [
        "NETWORK_SESSION_HOST_FRIENDS_ONLY(${1:int p0}, ${2:int maxPlayers})"
      ],
      "description": "NETWORK_SESSION_HOST_FRIENDS_ONLY()"
    },
    "NETWORK_SESSION_IS_CLOSED_FRIENDS": {
      "prefix": "NETWORK_SESSION_IS_CLOSED_FRIENDS()",
      "body": ["NETWORK_SESSION_IS_CLOSED_FRIENDS()"],
      "description": "NETWORK_SESSION_IS_CLOSED_FRIENDS()"
    },
    "NETWORK_SESSION_IS_CLOSED_CREW": {
      "prefix": "NETWORK_SESSION_IS_CLOSED_CREW()",
      "body": ["NETWORK_SESSION_IS_CLOSED_CREW()"],
      "description": "NETWORK_SESSION_IS_CLOSED_CREW()"
    },
    "NETWORK_SESSION_IS_SOLO": {
      "prefix": "NETWORK_SESSION_IS_SOLO()",
      "body": ["NETWORK_SESSION_IS_SOLO()"],
      "description": "NETWORK_SESSION_IS_SOLO()"
    },
    "NETWORK_SESSION_IS_PRIVATE": {
      "prefix": "NETWORK_SESSION_IS_PRIVATE()",
      "body": ["NETWORK_SESSION_IS_PRIVATE()"],
      "description": "NETWORK_SESSION_IS_PRIVATE()"
    },
    "_NETWORK_SESSION_LEAVE_INCLUDING_REASON": {
      "prefix": "_NETWORK_SESSION_LEAVE_INCLUDING_REASON()",
      "body": [
        "_NETWORK_SESSION_LEAVE_INCLUDING_REASON(${1:int leaveFlags}, ${2:int leaveReason})"
      ],
      "description": "_NETWORK_SESSION_LEAVE_INCLUDING_REASON()"
    },
    "NETWORK_SESSION_END": {
      "prefix": "NETWORK_SESSION_END()",
      "body": ["NETWORK_SESSION_END(${1:BOOL p0}, ${2:BOOL p1})"],
      "description": "NETWORK_SESSION_END()"
    },
    "NETWORK_SESSION_LEAVE": {
      "prefix": "NETWORK_SESSION_LEAVE()",
      "body": ["NETWORK_SESSION_LEAVE(${1:Any p0})"],
      "description": "NETWORK_SESSION_LEAVE()"
    },
    "NETWORK_SESSION_KICK_PLAYER": {
      "prefix": "NETWORK_SESSION_KICK_PLAYER()",
      "body": ["NETWORK_SESSION_KICK_PLAYER(${1:Player player})"],
      "description": "NETWORK_SESSION_KICK_PLAYER()"
    },
    "NETWORK_SESSION_GET_KICK_VOTE": {
      "prefix": "NETWORK_SESSION_GET_KICK_VOTE()",
      "body": ["NETWORK_SESSION_GET_KICK_VOTE(${1:Player player})"],
      "description": "NETWORK_SESSION_GET_KICK_VOTE()"
    },
    "NETWORK_SESSION_RESERVE_SLOTS_TRANSITION": {
      "prefix": "NETWORK_SESSION_RESERVE_SLOTS_TRANSITION()",
      "body": [
        "NETWORK_SESSION_RESERVE_SLOTS_TRANSITION(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_SESSION_RESERVE_SLOTS_TRANSITION()"
    },
    "NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION": {
      "prefix": "NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION()",
      "body": ["NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION()"],
      "description": "NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION()"
    },
    "NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION": {
      "prefix": "NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION()",
      "body": ["NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION()"],
      "description": "NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION()"
    },
    "NETWORK_SESSION_SET_MATCHMAKING_GROUP": {
      "prefix": "NETWORK_SESSION_SET_MATCHMAKING_GROUP()",
      "body": [
        "NETWORK_SESSION_SET_MATCHMAKING_GROUP(${1:int matchmakingGroup})"
      ],
      "description": "NETWORK_SESSION_SET_MATCHMAKING_GROUP()"
    },
    "NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX": {
      "prefix": "NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX()",
      "body": [
        "NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX(${1:int playerType}, ${2:int playerCount})"
      ],
      "description": "NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX()"
    },
    "NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE": {
      "prefix": "NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE()",
      "body": ["NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE(${1:int p0})"],
      "description": "NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE()"
    },
    "NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP": {
      "prefix": "NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP()",
      "body": ["NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP(${1:int groupId})"],
      "description": "NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP()"
    },
    "NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT": {
      "prefix": "NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT()",
      "body": ["NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT(${1:Any p0})"],
      "description": "NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT()"
    },
    "NETWORK_SESSION_GET_UNIQUE_CREW_LIMIT": {
      "prefix": "NETWORK_SESSION_GET_UNIQUE_CREW_LIMIT()",
      "body": ["NETWORK_SESSION_GET_UNIQUE_CREW_LIMIT()"],
      "description": "NETWORK_SESSION_GET_UNIQUE_CREW_LIMIT()"
    },
    "NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION": {
      "prefix": "NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION()",
      "body": ["NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION(${1:Any p0})"],
      "description": "NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION()"
    },
    "NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION": {
      "prefix": "NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION()",
      "body": [
        "NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION(${1:BOOL p0})"
      ],
      "description": "NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION()"
    },
    "NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION": {
      "prefix": "NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION()",
      "body": [
        "NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION(${1:Any p0})"
      ],
      "description": "NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION()"
    },
    "NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID": {
      "prefix": "NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID()",
      "body": ["NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID(${1:BOOL p0})"],
      "description": "NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID()"
    },
    "NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE": {
      "prefix": "NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE()",
      "body": ["NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE(${1:int p0})"],
      "description": "NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE()"
    },
    "NETWORK_SESSION_SET_NUM_BOSSES": {
      "prefix": "NETWORK_SESSION_SET_NUM_BOSSES()",
      "body": ["NETWORK_SESSION_SET_NUM_BOSSES(${1:int num})"],
      "description": "NETWORK_SESSION_SET_NUM_BOSSES()"
    },
    "NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN": {
      "prefix": "NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN()",
      "body": ["NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN()"],
      "description": "NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN()"
    },
    "NETWORK_SESSION_VALIDATE_JOIN": {
      "prefix": "NETWORK_SESSION_VALIDATE_JOIN()",
      "body": ["NETWORK_SESSION_VALIDATE_JOIN(${1:BOOL p0})"],
      "description": "NETWORK_SESSION_VALIDATE_JOIN()"
    },
    "NETWORK_ADD_FOLLOWERS": {
      "prefix": "NETWORK_ADD_FOLLOWERS()",
      "body": ["NETWORK_ADD_FOLLOWERS(${1:int* p0}, ${2:int p1})"],
      "description": "NETWORK_ADD_FOLLOWERS()"
    },
    "NETWORK_CLEAR_FOLLOWERS": {
      "prefix": "NETWORK_CLEAR_FOLLOWERS()",
      "body": ["NETWORK_CLEAR_FOLLOWERS()"],
      "description": "NETWORK_CLEAR_FOLLOWERS()"
    },
    "NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK": {
      "prefix": "NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK()",
      "body": [
        "NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK(${1:int* hours}, ${2:int* minutes}, ${3:int* seconds})"
      ],
      "description": "NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK()"
    },
    "NETWORK_SESSION_SET_GAMEMODE": {
      "prefix": "NETWORK_SESSION_SET_GAMEMODE()",
      "body": ["NETWORK_SESSION_SET_GAMEMODE(${1:Any p0})"],
      "description": "NETWORK_SESSION_SET_GAMEMODE()"
    },
    "NETWORK_SESSION_GET_HOST_AIM_PREFERENCE": {
      "prefix": "NETWORK_SESSION_GET_HOST_AIM_PREFERENCE()",
      "body": ["NETWORK_SESSION_GET_HOST_AIM_PREFERENCE()"],
      "description": "NETWORK_SESSION_GET_HOST_AIM_PREFERENCE()"
    },
    "NETWORK_FIND_GAMERS_IN_CREW": {
      "prefix": "NETWORK_FIND_GAMERS_IN_CREW()",
      "body": ["NETWORK_FIND_GAMERS_IN_CREW(${1:int crewId})"],
      "description": "NETWORK_FIND_GAMERS_IN_CREW()"
    },
    "NETWORK_FIND_MATCHED_GAMERS": {
      "prefix": "NETWORK_FIND_MATCHED_GAMERS()",
      "body": [
        "NETWORK_FIND_MATCHED_GAMERS(${1:int attribute}, ${2:float fallbackLimit}, ${3:float lowerLimit}, ${4:float upperLimit})"
      ],
      "description": "NETWORK_FIND_MATCHED_GAMERS()"
    },
    "NETWORK_IS_FINDING_GAMERS": {
      "prefix": "NETWORK_IS_FINDING_GAMERS()",
      "body": ["NETWORK_IS_FINDING_GAMERS()"],
      "description": "NETWORK_IS_FINDING_GAMERS()"
    },
    "NETWORK_DID_FIND_GAMERS_SUCCEED": {
      "prefix": "NETWORK_DID_FIND_GAMERS_SUCCEED()",
      "body": ["NETWORK_DID_FIND_GAMERS_SUCCEED()"],
      "description": "NETWORK_DID_FIND_GAMERS_SUCCEED()"
    },
    "NETWORK_GET_NUM_FOUND_GAMERS": {
      "prefix": "NETWORK_GET_NUM_FOUND_GAMERS()",
      "body": ["NETWORK_GET_NUM_FOUND_GAMERS()"],
      "description": "NETWORK_GET_NUM_FOUND_GAMERS()"
    },
    "NETWORK_GET_FOUND_GAMER": {
      "prefix": "NETWORK_GET_FOUND_GAMER()",
      "body": ["NETWORK_GET_FOUND_GAMER(${1:Any* p0}, ${2:Any p1})"],
      "description": "NETWORK_GET_FOUND_GAMER()"
    },
    "NETWORK_CLEAR_FOUND_GAMERS": {
      "prefix": "NETWORK_CLEAR_FOUND_GAMERS()",
      "body": ["NETWORK_CLEAR_FOUND_GAMERS()"],
      "description": "NETWORK_CLEAR_FOUND_GAMERS()"
    },
    "NETWORK_QUEUE_GAMER_FOR_STATUS": {
      "prefix": "NETWORK_QUEUE_GAMER_FOR_STATUS()",
      "body": ["NETWORK_QUEUE_GAMER_FOR_STATUS(${1:Any* p0})"],
      "description": "NETWORK_QUEUE_GAMER_FOR_STATUS()"
    },
    "NETWORK_GET_GAMER_STATUS_FROM_QUEUE": {
      "prefix": "NETWORK_GET_GAMER_STATUS_FROM_QUEUE()",
      "body": ["NETWORK_GET_GAMER_STATUS_FROM_QUEUE()"],
      "description": "NETWORK_GET_GAMER_STATUS_FROM_QUEUE()"
    },
    "NETWORK_IS_GETTING_GAMER_STATUS": {
      "prefix": "NETWORK_IS_GETTING_GAMER_STATUS()",
      "body": ["NETWORK_IS_GETTING_GAMER_STATUS()"],
      "description": "NETWORK_IS_GETTING_GAMER_STATUS()"
    },
    "NETWORK_DID_GET_GAMER_STATUS_SUCCEED": {
      "prefix": "NETWORK_DID_GET_GAMER_STATUS_SUCCEED()",
      "body": ["NETWORK_DID_GET_GAMER_STATUS_SUCCEED()"],
      "description": "NETWORK_DID_GET_GAMER_STATUS_SUCCEED()"
    },
    "NETWORK_GET_GAMER_STATUS_RESULT": {
      "prefix": "NETWORK_GET_GAMER_STATUS_RESULT()",
      "body": ["NETWORK_GET_GAMER_STATUS_RESULT(${1:Any* p0}, ${2:Any p1})"],
      "description": "NETWORK_GET_GAMER_STATUS_RESULT()"
    },
    "NETWORK_CLEAR_GET_GAMER_STATUS": {
      "prefix": "NETWORK_CLEAR_GET_GAMER_STATUS()",
      "body": ["NETWORK_CLEAR_GET_GAMER_STATUS()"],
      "description": "NETWORK_CLEAR_GET_GAMER_STATUS()"
    },
    "NETWORK_SESSION_JOIN_INVITE": {
      "prefix": "NETWORK_SESSION_JOIN_INVITE()",
      "body": ["NETWORK_SESSION_JOIN_INVITE()"],
      "description": "NETWORK_SESSION_JOIN_INVITE()"
    },
    "NETWORK_SESSION_CANCEL_INVITE": {
      "prefix": "NETWORK_SESSION_CANCEL_INVITE()",
      "body": ["NETWORK_SESSION_CANCEL_INVITE()"],
      "description": "NETWORK_SESSION_CANCEL_INVITE()"
    },
    "NETWORK_SESSION_FORCE_CANCEL_INVITE": {
      "prefix": "NETWORK_SESSION_FORCE_CANCEL_INVITE()",
      "body": ["NETWORK_SESSION_FORCE_CANCEL_INVITE()"],
      "description": "NETWORK_SESSION_FORCE_CANCEL_INVITE()"
    },
    "NETWORK_HAS_PENDING_INVITE": {
      "prefix": "NETWORK_HAS_PENDING_INVITE()",
      "body": ["NETWORK_HAS_PENDING_INVITE()"],
      "description": "NETWORK_HAS_PENDING_INVITE()"
    },
    "NETWORK_HAS_CONFIRMED_INVITE": {
      "prefix": "NETWORK_HAS_CONFIRMED_INVITE()",
      "body": ["NETWORK_HAS_CONFIRMED_INVITE()"],
      "description": "NETWORK_HAS_CONFIRMED_INVITE()"
    },
    "NETWORK_REQUEST_INVITE_CONFIRMED_EVENT": {
      "prefix": "NETWORK_REQUEST_INVITE_CONFIRMED_EVENT()",
      "body": ["NETWORK_REQUEST_INVITE_CONFIRMED_EVENT()"],
      "description": "NETWORK_REQUEST_INVITE_CONFIRMED_EVENT()"
    },
    "NETWORK_SESSION_WAS_INVITED": {
      "prefix": "NETWORK_SESSION_WAS_INVITED()",
      "body": ["NETWORK_SESSION_WAS_INVITED()"],
      "description": "NETWORK_SESSION_WAS_INVITED()"
    },
    "NETWORK_SESSION_GET_INVITER": {
      "prefix": "NETWORK_SESSION_GET_INVITER()",
      "body": ["NETWORK_SESSION_GET_INVITER(${1:Any* gamerHandle})"],
      "description": "NETWORK_SESSION_GET_INVITER()"
    },
    "NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE": {
      "prefix": "NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE()",
      "body": ["NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE()"],
      "description": "NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE()"
    },
    "NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION": {
      "prefix": "NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION()",
      "body": ["NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION()"],
      "description": "NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION()"
    },
    "NETWORK_SUPPRESS_INVITE": {
      "prefix": "NETWORK_SUPPRESS_INVITE()",
      "body": ["NETWORK_SUPPRESS_INVITE(${1:BOOL toggle})"],
      "description": "NETWORK_SUPPRESS_INVITE()"
    },
    "NETWORK_BLOCK_INVITES": {
      "prefix": "NETWORK_BLOCK_INVITES()",
      "body": ["NETWORK_BLOCK_INVITES(${1:BOOL toggle})"],
      "description": "NETWORK_BLOCK_INVITES()"
    },
    "NETWORK_BLOCK_JOIN_QUEUE_INVITES": {
      "prefix": "NETWORK_BLOCK_JOIN_QUEUE_INVITES()",
      "body": ["NETWORK_BLOCK_JOIN_QUEUE_INVITES(${1:BOOL toggle})"],
      "description": "NETWORK_BLOCK_JOIN_QUEUE_INVITES()"
    },
    "NETWORK_SET_CAN_RECEIVE_RS_INVITES": {
      "prefix": "NETWORK_SET_CAN_RECEIVE_RS_INVITES()",
      "body": ["NETWORK_SET_CAN_RECEIVE_RS_INVITES(${1:BOOL p0})"],
      "description": "NETWORK_SET_CAN_RECEIVE_RS_INVITES()"
    },
    "NETWORK_STORE_INVITE_THROUGH_RESTART": {
      "prefix": "NETWORK_STORE_INVITE_THROUGH_RESTART()",
      "body": ["NETWORK_STORE_INVITE_THROUGH_RESTART()"],
      "description": "NETWORK_STORE_INVITE_THROUGH_RESTART()"
    },
    "NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH": {
      "prefix": "NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH()",
      "body": ["NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH(${1:BOOL p0})"],
      "description": "NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH()"
    },
    "NETWORK_SET_SCRIPT_READY_FOR_EVENTS": {
      "prefix": "NETWORK_SET_SCRIPT_READY_FOR_EVENTS()",
      "body": ["NETWORK_SET_SCRIPT_READY_FOR_EVENTS(${1:BOOL toggle})"],
      "description": "NETWORK_SET_SCRIPT_READY_FOR_EVENTS()"
    },
    "NETWORK_IS_OFFLINE_INVITE_PENDING": {
      "prefix": "NETWORK_IS_OFFLINE_INVITE_PENDING()",
      "body": ["NETWORK_IS_OFFLINE_INVITE_PENDING()"],
      "description": "NETWORK_IS_OFFLINE_INVITE_PENDING()"
    },
    "NETWORK_CLEAR_OFFLINE_INVITE_PENDING": {
      "prefix": "NETWORK_CLEAR_OFFLINE_INVITE_PENDING()",
      "body": ["NETWORK_CLEAR_OFFLINE_INVITE_PENDING()"],
      "description": "NETWORK_CLEAR_OFFLINE_INVITE_PENDING()"
    },
    "_NETWORK_INVITE_CLEAR_JOIN_FAIL_REASON": {
      "prefix": "_NETWORK_INVITE_CLEAR_JOIN_FAIL_REASON()",
      "body": ["_NETWORK_INVITE_CLEAR_JOIN_FAIL_REASON()"],
      "description": "_NETWORK_INVITE_CLEAR_JOIN_FAIL_REASON()"
    },
    "NETWORK_SESSION_HOST_SINGLE_PLAYER": {
      "prefix": "NETWORK_SESSION_HOST_SINGLE_PLAYER()",
      "body": ["NETWORK_SESSION_HOST_SINGLE_PLAYER(${1:int p0})"],
      "description": "NETWORK_SESSION_HOST_SINGLE_PLAYER()"
    },
    "NETWORK_SESSION_LEAVE_SINGLE_PLAYER": {
      "prefix": "NETWORK_SESSION_LEAVE_SINGLE_PLAYER()",
      "body": ["NETWORK_SESSION_LEAVE_SINGLE_PLAYER()"],
      "description": "NETWORK_SESSION_LEAVE_SINGLE_PLAYER()"
    },
    "NETWORK_IS_GAME_IN_PROGRESS": {
      "prefix": "NETWORK_IS_GAME_IN_PROGRESS()",
      "body": ["NETWORK_IS_GAME_IN_PROGRESS()"],
      "description": "NETWORK_IS_GAME_IN_PROGRESS()"
    },
    "NETWORK_IS_SESSION_ACTIVE": {
      "prefix": "NETWORK_IS_SESSION_ACTIVE()",
      "body": ["NETWORK_IS_SESSION_ACTIVE()"],
      "description": "NETWORK_IS_SESSION_ACTIVE()"
    },
    "NETWORK_IS_IN_SESSION": {
      "prefix": "NETWORK_IS_IN_SESSION()",
      "body": ["NETWORK_IS_IN_SESSION()"],
      "description": "NETWORK_IS_IN_SESSION()"
    },
    "_NETWORK_IS_AMERICAS_VERSION": {
      "prefix": "_NETWORK_IS_AMERICAS_VERSION()",
      "body": ["_NETWORK_IS_AMERICAS_VERSION()"],
      "description": "_NETWORK_IS_AMERICAS_VERSION()"
    },
    "NETWORK_IS_SESSION_STARTED": {
      "prefix": "NETWORK_IS_SESSION_STARTED()",
      "body": ["NETWORK_IS_SESSION_STARTED()"],
      "description": "NETWORK_IS_SESSION_STARTED()"
    },
    "NETWORK_IS_SESSION_BUSY": {
      "prefix": "NETWORK_IS_SESSION_BUSY()",
      "body": ["NETWORK_IS_SESSION_BUSY()"],
      "description": "NETWORK_IS_SESSION_BUSY()"
    },
    "NETWORK_CAN_SESSION_END": {
      "prefix": "NETWORK_CAN_SESSION_END()",
      "body": ["NETWORK_CAN_SESSION_END()"],
      "description": "NETWORK_CAN_SESSION_END()"
    },
    "NETWORK_GET_GAME_MODE": {
      "prefix": "NETWORK_GET_GAME_MODE()",
      "body": ["NETWORK_GET_GAME_MODE()"],
      "description": "NETWORK_GET_GAME_MODE()"
    },
    "NETWORK_SESSION_MARK_VISIBLE": {
      "prefix": "NETWORK_SESSION_MARK_VISIBLE()",
      "body": ["NETWORK_SESSION_MARK_VISIBLE(${1:BOOL toggle})"],
      "description": "NETWORK_SESSION_MARK_VISIBLE()"
    },
    "NETWORK_SESSION_IS_VISIBLE": {
      "prefix": "NETWORK_SESSION_IS_VISIBLE()",
      "body": ["NETWORK_SESSION_IS_VISIBLE()"],
      "description": "NETWORK_SESSION_IS_VISIBLE()"
    },
    "NETWORK_SESSION_BLOCK_JOIN_REQUESTS": {
      "prefix": "NETWORK_SESSION_BLOCK_JOIN_REQUESTS()",
      "body": ["NETWORK_SESSION_BLOCK_JOIN_REQUESTS(${1:BOOL toggle})"],
      "description": "NETWORK_SESSION_BLOCK_JOIN_REQUESTS()"
    },
    "NETWORK_SESSION_CHANGE_SLOTS": {
      "prefix": "NETWORK_SESSION_CHANGE_SLOTS()",
      "body": ["NETWORK_SESSION_CHANGE_SLOTS(${1:int slots}, ${2:BOOL p1})"],
      "description": "NETWORK_SESSION_CHANGE_SLOTS()"
    },
    "NETWORK_SESSION_GET_PRIVATE_SLOTS": {
      "prefix": "NETWORK_SESSION_GET_PRIVATE_SLOTS()",
      "body": ["NETWORK_SESSION_GET_PRIVATE_SLOTS()"],
      "description": "NETWORK_SESSION_GET_PRIVATE_SLOTS()"
    },
    "NETWORK_SESSION_VOICE_HOST": {
      "prefix": "NETWORK_SESSION_VOICE_HOST()",
      "body": ["NETWORK_SESSION_VOICE_HOST()"],
      "description": "NETWORK_SESSION_VOICE_HOST()"
    },
    "NETWORK_SESSION_VOICE_LEAVE": {
      "prefix": "NETWORK_SESSION_VOICE_LEAVE()",
      "body": ["NETWORK_SESSION_VOICE_LEAVE()"],
      "description": "NETWORK_SESSION_VOICE_LEAVE()"
    },
    "NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER": {
      "prefix": "NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER()",
      "body": ["NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER(${1:Any* gamerHandle})"],
      "description": "NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER()"
    },
    "NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST": {
      "prefix": "NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST()",
      "body": [
        "NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST(${1:BOOL p0}, ${2:int p1})"
      ],
      "description": "NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST()"
    },
    "NETWORK_SESSION_VOICE_SET_TIMEOUT": {
      "prefix": "NETWORK_SESSION_VOICE_SET_TIMEOUT()",
      "body": ["NETWORK_SESSION_VOICE_SET_TIMEOUT(${1:int timeout})"],
      "description": "NETWORK_SESSION_VOICE_SET_TIMEOUT()"
    },
    "NETWORK_SESSION_IS_IN_VOICE_SESSION": {
      "prefix": "NETWORK_SESSION_IS_IN_VOICE_SESSION()",
      "body": ["NETWORK_SESSION_IS_IN_VOICE_SESSION()"],
      "description": "NETWORK_SESSION_IS_IN_VOICE_SESSION()"
    },
    "NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE": {
      "prefix": "NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE()",
      "body": ["NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE()"],
      "description": "NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE()"
    },
    "NETWORK_SESSION_IS_VOICE_SESSION_BUSY": {
      "prefix": "NETWORK_SESSION_IS_VOICE_SESSION_BUSY()",
      "body": ["NETWORK_SESSION_IS_VOICE_SESSION_BUSY()"],
      "description": "NETWORK_SESSION_IS_VOICE_SESSION_BUSY()"
    },
    "NETWORK_SEND_TEXT_MESSAGE": {
      "prefix": "NETWORK_SEND_TEXT_MESSAGE()",
      "body": [
        "NETWORK_SEND_TEXT_MESSAGE(${1:const char* message}, ${2:Any* gamerHandle})"
      ],
      "description": "NETWORK_SEND_TEXT_MESSAGE()"
    },
    "NETWORK_SET_ACTIVITY_SPECTATOR": {
      "prefix": "NETWORK_SET_ACTIVITY_SPECTATOR()",
      "body": ["NETWORK_SET_ACTIVITY_SPECTATOR(${1:BOOL toggle})"],
      "description": "NETWORK_SET_ACTIVITY_SPECTATOR()"
    },
    "NETWORK_IS_ACTIVITY_SPECTATOR": {
      "prefix": "NETWORK_IS_ACTIVITY_SPECTATOR()",
      "body": ["NETWORK_IS_ACTIVITY_SPECTATOR()"],
      "description": "NETWORK_IS_ACTIVITY_SPECTATOR()"
    },
    "NETWORK_SET_ACTIVITY_PLAYER_MAX": {
      "prefix": "NETWORK_SET_ACTIVITY_PLAYER_MAX()",
      "body": ["NETWORK_SET_ACTIVITY_PLAYER_MAX(${1:Any p0})"],
      "description": "NETWORK_SET_ACTIVITY_PLAYER_MAX()"
    },
    "NETWORK_SET_ACTIVITY_SPECTATOR_MAX": {
      "prefix": "NETWORK_SET_ACTIVITY_SPECTATOR_MAX()",
      "body": ["NETWORK_SET_ACTIVITY_SPECTATOR_MAX(${1:int maxSpectators})"],
      "description": "NETWORK_SET_ACTIVITY_SPECTATOR_MAX()"
    },
    "NETWORK_GET_ACTIVITY_PLAYER_NUM": {
      "prefix": "NETWORK_GET_ACTIVITY_PLAYER_NUM()",
      "body": ["NETWORK_GET_ACTIVITY_PLAYER_NUM(${1:BOOL p0})"],
      "description": "NETWORK_GET_ACTIVITY_PLAYER_NUM()"
    },
    "NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE": {
      "prefix": "NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE()",
      "body": [
        "NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE(${1:Any* gamerHandle})"
      ],
      "description": "NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE()"
    },
    "NETWORK_HOST_TRANSITION": {
      "prefix": "NETWORK_HOST_TRANSITION()",
      "body": [
        "NETWORK_HOST_TRANSITION(${1:int p0}, ${2:int p1}, ${3:int p2}, ${4:int p3}, ${5:Any p4}, ${6:BOOL p5}, ${7:BOOL p6}, ${8:int p7}, ${9:Any p8}, ${10:int p9})"
      ],
      "description": "NETWORK_HOST_TRANSITION()"
    },
    "NETWORK_DO_TRANSITION_QUICKMATCH": {
      "prefix": "NETWORK_DO_TRANSITION_QUICKMATCH()",
      "body": [
        "NETWORK_DO_TRANSITION_QUICKMATCH(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
      ],
      "description": "NETWORK_DO_TRANSITION_QUICKMATCH()"
    },
    "NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC": {
      "prefix": "NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC()",
      "body": [
        "NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
      ],
      "description": "NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC()"
    },
    "NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP": {
      "prefix": "NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP()",
      "body": [
        "NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any* p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7})"
      ],
      "description": "NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP()"
    },
    "NETWORK_JOIN_GROUP_ACTIVITY": {
      "prefix": "NETWORK_JOIN_GROUP_ACTIVITY()",
      "body": ["NETWORK_JOIN_GROUP_ACTIVITY()"],
      "description": "NETWORK_JOIN_GROUP_ACTIVITY()"
    },
    "NETWORK_CLEAR_GROUP_ACTIVITY": {
      "prefix": "NETWORK_CLEAR_GROUP_ACTIVITY()",
      "body": ["NETWORK_CLEAR_GROUP_ACTIVITY()"],
      "description": "NETWORK_CLEAR_GROUP_ACTIVITY()"
    },
    "NETWORK_RETAIN_ACTIVITY_GROUP": {
      "prefix": "NETWORK_RETAIN_ACTIVITY_GROUP()",
      "body": ["NETWORK_RETAIN_ACTIVITY_GROUP()"],
      "description": "NETWORK_RETAIN_ACTIVITY_GROUP()"
    },
    "NETWORK_IS_TRANSITION_CLOSED_FRIENDS": {
      "prefix": "NETWORK_IS_TRANSITION_CLOSED_FRIENDS()",
      "body": ["NETWORK_IS_TRANSITION_CLOSED_FRIENDS()"],
      "description": "NETWORK_IS_TRANSITION_CLOSED_FRIENDS()"
    },
    "NETWORK_IS_TRANSITION_CLOSED_CREW": {
      "prefix": "NETWORK_IS_TRANSITION_CLOSED_CREW()",
      "body": ["NETWORK_IS_TRANSITION_CLOSED_CREW()"],
      "description": "NETWORK_IS_TRANSITION_CLOSED_CREW()"
    },
    "NETWORK_IS_TRANSITION_SOLO": {
      "prefix": "NETWORK_IS_TRANSITION_SOLO()",
      "body": ["NETWORK_IS_TRANSITION_SOLO()"],
      "description": "NETWORK_IS_TRANSITION_SOLO()"
    },
    "NETWORK_IS_TRANSITION_PRIVATE": {
      "prefix": "NETWORK_IS_TRANSITION_PRIVATE()",
      "body": ["NETWORK_IS_TRANSITION_PRIVATE()"],
      "description": "NETWORK_IS_TRANSITION_PRIVATE()"
    },
    "NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS": {
      "prefix": "NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS()",
      "body": ["NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS()"],
      "description": "NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS()"
    },
    "NETWORK_MARK_AS_PREFERRED_ACTIVITY": {
      "prefix": "NETWORK_MARK_AS_PREFERRED_ACTIVITY()",
      "body": ["NETWORK_MARK_AS_PREFERRED_ACTIVITY(${1:BOOL p0})"],
      "description": "NETWORK_MARK_AS_PREFERRED_ACTIVITY()"
    },
    "NETWORK_MARK_AS_WAITING_ASYNC": {
      "prefix": "NETWORK_MARK_AS_WAITING_ASYNC()",
      "body": ["NETWORK_MARK_AS_WAITING_ASYNC(${1:BOOL p0})"],
      "description": "NETWORK_MARK_AS_WAITING_ASYNC()"
    },
    "NETWORK_SET_IN_PROGRESS_FINISH_TIME": {
      "prefix": "NETWORK_SET_IN_PROGRESS_FINISH_TIME()",
      "body": ["NETWORK_SET_IN_PROGRESS_FINISH_TIME(${1:Any p0})"],
      "description": "NETWORK_SET_IN_PROGRESS_FINISH_TIME()"
    },
    "NETWORK_SET_TRANSITION_CREATOR_HANDLE": {
      "prefix": "NETWORK_SET_TRANSITION_CREATOR_HANDLE()",
      "body": ["NETWORK_SET_TRANSITION_CREATOR_HANDLE(${1:Any* p0})"],
      "description": "NETWORK_SET_TRANSITION_CREATOR_HANDLE()"
    },
    "NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE": {
      "prefix": "NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE()",
      "body": ["NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE()"],
      "description": "NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE()"
    },
    "NETWORK_INVITE_GAMERS_TO_TRANSITION": {
      "prefix": "NETWORK_INVITE_GAMERS_TO_TRANSITION()",
      "body": ["NETWORK_INVITE_GAMERS_TO_TRANSITION(${1:Any* p0}, ${2:Any p1})"],
      "description": "NETWORK_INVITE_GAMERS_TO_TRANSITION()"
    },
    "NETWORK_SET_GAMER_INVITED_TO_TRANSITION": {
      "prefix": "NETWORK_SET_GAMER_INVITED_TO_TRANSITION()",
      "body": ["NETWORK_SET_GAMER_INVITED_TO_TRANSITION(${1:Any* gamerHandle})"],
      "description": "NETWORK_SET_GAMER_INVITED_TO_TRANSITION()"
    },
    "NETWORK_LEAVE_TRANSITION": {
      "prefix": "NETWORK_LEAVE_TRANSITION()",
      "body": ["NETWORK_LEAVE_TRANSITION()"],
      "description": "NETWORK_LEAVE_TRANSITION()"
    },
    "NETWORK_LAUNCH_TRANSITION": {
      "prefix": "NETWORK_LAUNCH_TRANSITION()",
      "body": ["NETWORK_LAUNCH_TRANSITION()"],
      "description": "NETWORK_LAUNCH_TRANSITION()"
    },
    "NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST": {
      "prefix": "NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST()",
      "body": [
        "NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST(${1:BOOL toggle})"
      ],
      "description": "NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST()"
    },
    "NETWORK_CANCEL_TRANSITION_MATCHMAKING": {
      "prefix": "NETWORK_CANCEL_TRANSITION_MATCHMAKING()",
      "body": ["NETWORK_CANCEL_TRANSITION_MATCHMAKING()"],
      "description": "NETWORK_CANCEL_TRANSITION_MATCHMAKING()"
    },
    "NETWORK_BAIL_TRANSITION": {
      "prefix": "NETWORK_BAIL_TRANSITION()",
      "body": ["NETWORK_BAIL_TRANSITION(${1:int p0}, ${2:int p1}, ${3:int p2})"],
      "description": "NETWORK_BAIL_TRANSITION()"
    },
    "NETWORK_DO_TRANSITION_TO_GAME": {
      "prefix": "NETWORK_DO_TRANSITION_TO_GAME()",
      "body": [
        "NETWORK_DO_TRANSITION_TO_GAME(${1:BOOL p0}, ${2:int maxPlayers})"
      ],
      "description": "NETWORK_DO_TRANSITION_TO_GAME()"
    },
    "NETWORK_DO_TRANSITION_TO_NEW_GAME": {
      "prefix": "NETWORK_DO_TRANSITION_TO_NEW_GAME()",
      "body": [
        "NETWORK_DO_TRANSITION_TO_NEW_GAME(${1:BOOL p0}, ${2:int maxPlayers}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_DO_TRANSITION_TO_NEW_GAME()"
    },
    "NETWORK_DO_TRANSITION_TO_FREEMODE": {
      "prefix": "NETWORK_DO_TRANSITION_TO_FREEMODE()",
      "body": [
        "NETWORK_DO_TRANSITION_TO_FREEMODE(${1:Any* p0}, ${2:Any p1}, ${3:BOOL p2}, ${4:int players}, ${5:BOOL p4})"
      ],
      "description": "NETWORK_DO_TRANSITION_TO_FREEMODE()"
    },
    "NETWORK_DO_TRANSITION_TO_NEW_FREEMODE": {
      "prefix": "NETWORK_DO_TRANSITION_TO_NEW_FREEMODE()",
      "body": [
        "NETWORK_DO_TRANSITION_TO_NEW_FREEMODE(${1:Any* p0}, ${2:Any p1}, ${3:int players}, ${4:BOOL p3}, ${5:BOOL p4}, ${6:BOOL p5})"
      ],
      "description": "NETWORK_DO_TRANSITION_TO_NEW_FREEMODE()"
    },
    "NETWORK_IS_TRANSITION_TO_GAME": {
      "prefix": "NETWORK_IS_TRANSITION_TO_GAME()",
      "body": ["NETWORK_IS_TRANSITION_TO_GAME()"],
      "description": "NETWORK_IS_TRANSITION_TO_GAME()"
    },
    "NETWORK_GET_TRANSITION_MEMBERS": {
      "prefix": "NETWORK_GET_TRANSITION_MEMBERS()",
      "body": [
        "NETWORK_GET_TRANSITION_MEMBERS(${1:Any* data}, ${2:int dataCount})"
      ],
      "description": "NETWORK_GET_TRANSITION_MEMBERS()"
    },
    "NETWORK_APPLY_TRANSITION_PARAMETER": {
      "prefix": "NETWORK_APPLY_TRANSITION_PARAMETER()",
      "body": ["NETWORK_APPLY_TRANSITION_PARAMETER(${1:int p0}, ${2:int p1})"],
      "description": "NETWORK_APPLY_TRANSITION_PARAMETER()"
    },
    "NETWORK_APPLY_TRANSITION_PARAMETER_STRING": {
      "prefix": "NETWORK_APPLY_TRANSITION_PARAMETER_STRING()",
      "body": [
        "NETWORK_APPLY_TRANSITION_PARAMETER_STRING(${1:int p0}, ${2:const char* string}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_APPLY_TRANSITION_PARAMETER_STRING()"
    },
    "NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION": {
      "prefix": "NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION()",
      "body": [
        "NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION(${1:Any* gamerHandle}, ${2:const char* p1}, ${3:int p2}, ${4:int p3}, ${5:BOOL p4})"
      ],
      "description": "NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION()"
    },
    "NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED": {
      "prefix": "NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED()",
      "body": ["NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED(${1:Any* p0})"],
      "description": "NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED()"
    },
    "NETWORK_IS_TRANSITION_HOST": {
      "prefix": "NETWORK_IS_TRANSITION_HOST()",
      "body": ["NETWORK_IS_TRANSITION_HOST()"],
      "description": "NETWORK_IS_TRANSITION_HOST()"
    },
    "NETWORK_IS_TRANSITION_HOST_FROM_HANDLE": {
      "prefix": "NETWORK_IS_TRANSITION_HOST_FROM_HANDLE()",
      "body": ["NETWORK_IS_TRANSITION_HOST_FROM_HANDLE(${1:Any* gamerHandle})"],
      "description": "NETWORK_IS_TRANSITION_HOST_FROM_HANDLE()"
    },
    "NETWORK_GET_TRANSITION_HOST": {
      "prefix": "NETWORK_GET_TRANSITION_HOST()",
      "body": ["NETWORK_GET_TRANSITION_HOST(${1:Any* gamerHandle})"],
      "description": "NETWORK_GET_TRANSITION_HOST()"
    },
    "NETWORK_IS_IN_TRANSITION": {
      "prefix": "NETWORK_IS_IN_TRANSITION()",
      "body": ["NETWORK_IS_IN_TRANSITION()"],
      "description": "NETWORK_IS_IN_TRANSITION()"
    },
    "NETWORK_IS_TRANSITION_STARTED": {
      "prefix": "NETWORK_IS_TRANSITION_STARTED()",
      "body": ["NETWORK_IS_TRANSITION_STARTED()"],
      "description": "NETWORK_IS_TRANSITION_STARTED()"
    },
    "NETWORK_IS_TRANSITION_BUSY": {
      "prefix": "NETWORK_IS_TRANSITION_BUSY()",
      "body": ["NETWORK_IS_TRANSITION_BUSY()"],
      "description": "NETWORK_IS_TRANSITION_BUSY()"
    },
    "NETWORK_IS_TRANSITION_MATCHMAKING": {
      "prefix": "NETWORK_IS_TRANSITION_MATCHMAKING()",
      "body": ["NETWORK_IS_TRANSITION_MATCHMAKING()"],
      "description": "NETWORK_IS_TRANSITION_MATCHMAKING()"
    },
    "NETWORK_IS_TRANSITION_LEAVE_POSTPONED": {
      "prefix": "NETWORK_IS_TRANSITION_LEAVE_POSTPONED()",
      "body": ["NETWORK_IS_TRANSITION_LEAVE_POSTPONED()"],
      "description": "NETWORK_IS_TRANSITION_LEAVE_POSTPONED()"
    },
    "NETWORK_TRANSITION_SET_IN_PROGRESS": {
      "prefix": "NETWORK_TRANSITION_SET_IN_PROGRESS()",
      "body": ["NETWORK_TRANSITION_SET_IN_PROGRESS(${1:Any p0})"],
      "description": "NETWORK_TRANSITION_SET_IN_PROGRESS()"
    },
    "NETWORK_TRANSITION_SET_CONTENT_CREATOR": {
      "prefix": "NETWORK_TRANSITION_SET_CONTENT_CREATOR()",
      "body": ["NETWORK_TRANSITION_SET_CONTENT_CREATOR(${1:Any p0})"],
      "description": "NETWORK_TRANSITION_SET_CONTENT_CREATOR()"
    },
    "NETWORK_TRANSITION_SET_ACTIVITY_ISLAND": {
      "prefix": "NETWORK_TRANSITION_SET_ACTIVITY_ISLAND()",
      "body": ["NETWORK_TRANSITION_SET_ACTIVITY_ISLAND(${1:Any p0})"],
      "description": "NETWORK_TRANSITION_SET_ACTIVITY_ISLAND()"
    },
    "NETWORK_OPEN_TRANSITION_MATCHMAKING": {
      "prefix": "NETWORK_OPEN_TRANSITION_MATCHMAKING()",
      "body": ["NETWORK_OPEN_TRANSITION_MATCHMAKING()"],
      "description": "NETWORK_OPEN_TRANSITION_MATCHMAKING()"
    },
    "NETWORK_CLOSE_TRANSITION_MATCHMAKING": {
      "prefix": "NETWORK_CLOSE_TRANSITION_MATCHMAKING()",
      "body": ["NETWORK_CLOSE_TRANSITION_MATCHMAKING()"],
      "description": "NETWORK_CLOSE_TRANSITION_MATCHMAKING()"
    },
    "NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING": {
      "prefix": "NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING()",
      "body": ["NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING()"],
      "description": "NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING()"
    },
    "NETWORK_SET_TRANSITION_VISIBILITY_LOCK": {
      "prefix": "NETWORK_SET_TRANSITION_VISIBILITY_LOCK()",
      "body": [
        "NETWORK_SET_TRANSITION_VISIBILITY_LOCK(${1:BOOL p0}, ${2:BOOL p1})"
      ],
      "description": "NETWORK_SET_TRANSITION_VISIBILITY_LOCK()"
    },
    "NETWORK_IS_TRANSITION_VISIBILITY_LOCKED": {
      "prefix": "NETWORK_IS_TRANSITION_VISIBILITY_LOCKED()",
      "body": ["NETWORK_IS_TRANSITION_VISIBILITY_LOCKED()"],
      "description": "NETWORK_IS_TRANSITION_VISIBILITY_LOCKED()"
    },
    "NETWORK_SET_TRANSITION_ACTIVITY_ID": {
      "prefix": "NETWORK_SET_TRANSITION_ACTIVITY_ID()",
      "body": ["NETWORK_SET_TRANSITION_ACTIVITY_ID(${1:Any p0})"],
      "description": "NETWORK_SET_TRANSITION_ACTIVITY_ID()"
    },
    "NETWORK_CHANGE_TRANSITION_SLOTS": {
      "prefix": "NETWORK_CHANGE_TRANSITION_SLOTS()",
      "body": ["NETWORK_CHANGE_TRANSITION_SLOTS(${1:Any p0}, ${2:BOOL p1})"],
      "description": "NETWORK_CHANGE_TRANSITION_SLOTS()"
    },
    "NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS": {
      "prefix": "NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS()",
      "body": ["NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS(${1:BOOL p0})"],
      "description": "NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS()"
    },
    "NETWORK_HAS_PLAYER_STARTED_TRANSITION": {
      "prefix": "NETWORK_HAS_PLAYER_STARTED_TRANSITION()",
      "body": ["NETWORK_HAS_PLAYER_STARTED_TRANSITION(${1:Player player})"],
      "description": "NETWORK_HAS_PLAYER_STARTED_TRANSITION()"
    },
    "NETWORK_ARE_TRANSITION_DETAILS_VALID": {
      "prefix": "NETWORK_ARE_TRANSITION_DETAILS_VALID()",
      "body": ["NETWORK_ARE_TRANSITION_DETAILS_VALID(${1:Any p0})"],
      "description": "NETWORK_ARE_TRANSITION_DETAILS_VALID()"
    },
    "NETWORK_JOIN_TRANSITION": {
      "prefix": "NETWORK_JOIN_TRANSITION()",
      "body": ["NETWORK_JOIN_TRANSITION(${1:Player player})"],
      "description": "NETWORK_JOIN_TRANSITION()"
    },
    "NETWORK_HAS_INVITED_GAMER_TO_TRANSITION": {
      "prefix": "NETWORK_HAS_INVITED_GAMER_TO_TRANSITION()",
      "body": ["NETWORK_HAS_INVITED_GAMER_TO_TRANSITION(${1:Any* p0})"],
      "description": "NETWORK_HAS_INVITED_GAMER_TO_TRANSITION()"
    },
    "NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED": {
      "prefix": "NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED()",
      "body": ["NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED(${1:Any* p0})"],
      "description": "NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED()"
    },
    "NETWORK_IS_ACTIVITY_SESSION": {
      "prefix": "NETWORK_IS_ACTIVITY_SESSION()",
      "body": ["NETWORK_IS_ACTIVITY_SESSION()"],
      "description": "NETWORK_IS_ACTIVITY_SESSION()"
    },
    "NETWORK_DISABLE_REALTIME_MULTIPLAYER": {
      "prefix": "NETWORK_DISABLE_REALTIME_MULTIPLAYER()",
      "body": ["NETWORK_DISABLE_REALTIME_MULTIPLAYER()"],
      "description": "NETWORK_DISABLE_REALTIME_MULTIPLAYER()"
    },
    "NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED": {
      "prefix": "NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED()",
      "body": ["NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED(${1:BOOL toggle})"],
      "description": "NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED()"
    },
    "NETWORK_SEND_INVITE_VIA_PRESENCE": {
      "prefix": "NETWORK_SEND_INVITE_VIA_PRESENCE()",
      "body": [
        "NETWORK_SEND_INVITE_VIA_PRESENCE(${1:Any* gamerHandle}, ${2:const char* p1}, ${3:int dataCount}, ${4:int p3})"
      ],
      "description": "NETWORK_SEND_INVITE_VIA_PRESENCE()"
    },
    "NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE": {
      "prefix": "NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE()",
      "body": [
        "NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE(${1:Any* gamerHandle}, ${2:const char* p1}, ${3:int dataCount}, ${4:int p3})"
      ],
      "description": "NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE()"
    },
    "NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE": {
      "prefix": "NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE()",
      "body": [
        "NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE(${1:Any* gamerHandle}, ${2:const char* p1}, ${3:int dataCount}, ${4:int p3})"
      ],
      "description": "NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE()"
    },
    "NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID": {
      "prefix": "NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID()",
      "body": ["NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID(${1:int p0})"],
      "description": "NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID()"
    },
    "NETWORK_GET_NUM_PRESENCE_INVITES": {
      "prefix": "NETWORK_GET_NUM_PRESENCE_INVITES()",
      "body": ["NETWORK_GET_NUM_PRESENCE_INVITES()"],
      "description": "NETWORK_GET_NUM_PRESENCE_INVITES()"
    },
    "NETWORK_ACCEPT_PRESENCE_INVITE": {
      "prefix": "NETWORK_ACCEPT_PRESENCE_INVITE()",
      "body": ["NETWORK_ACCEPT_PRESENCE_INVITE(${1:int p0})"],
      "description": "NETWORK_ACCEPT_PRESENCE_INVITE()"
    },
    "NETWORK_REMOVE_PRESENCE_INVITE": {
      "prefix": "NETWORK_REMOVE_PRESENCE_INVITE()",
      "body": ["NETWORK_REMOVE_PRESENCE_INVITE(${1:int p0})"],
      "description": "NETWORK_REMOVE_PRESENCE_INVITE()"
    },
    "NETWORK_GET_PRESENCE_INVITE_ID": {
      "prefix": "NETWORK_GET_PRESENCE_INVITE_ID()",
      "body": ["NETWORK_GET_PRESENCE_INVITE_ID(${1:int p0})"],
      "description": "NETWORK_GET_PRESENCE_INVITE_ID()"
    },
    "NETWORK_GET_PRESENCE_INVITE_HANDLE": {
      "prefix": "NETWORK_GET_PRESENCE_INVITE_HANDLE()",
      "body": ["NETWORK_GET_PRESENCE_INVITE_HANDLE(${1:Any p0}, ${2:Any* p1})"],
      "description": "NETWORK_GET_PRESENCE_INVITE_HANDLE()"
    },
    "NETWORK_GET_PRESENCE_INVITE_SESSION_ID": {
      "prefix": "NETWORK_GET_PRESENCE_INVITE_SESSION_ID()",
      "body": ["NETWORK_GET_PRESENCE_INVITE_SESSION_ID(${1:Any p0})"],
      "description": "NETWORK_GET_PRESENCE_INVITE_SESSION_ID()"
    },
    "NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH": {
      "prefix": "NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH()",
      "body": ["NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH(${1:int p0})"],
      "description": "NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH()"
    },
    "NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT": {
      "prefix": "NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT()",
      "body": ["NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT(${1:int p0})"],
      "description": "NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT()"
    },
    "NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN": {
      "prefix": "NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN()",
      "body": ["NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN(${1:int p0})"],
      "description": "NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN()"
    },
    "NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT": {
      "prefix": "NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT()",
      "body": ["NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT(${1:Any p0})"],
      "description": "NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT()"
    },
    "NETWORK_HAS_FOLLOW_INVITE": {
      "prefix": "NETWORK_HAS_FOLLOW_INVITE()",
      "body": ["NETWORK_HAS_FOLLOW_INVITE()"],
      "description": "NETWORK_HAS_FOLLOW_INVITE()"
    },
    "NETWORK_ACTION_FOLLOW_INVITE": {
      "prefix": "NETWORK_ACTION_FOLLOW_INVITE()",
      "body": ["NETWORK_ACTION_FOLLOW_INVITE()"],
      "description": "NETWORK_ACTION_FOLLOW_INVITE()"
    },
    "NETWORK_CLEAR_FOLLOW_INVITE": {
      "prefix": "NETWORK_CLEAR_FOLLOW_INVITE()",
      "body": ["NETWORK_CLEAR_FOLLOW_INVITE()"],
      "description": "NETWORK_CLEAR_FOLLOW_INVITE()"
    },
    "NETWORK_REMOVE_AND_CANCEL_ALL_INVITES": {
      "prefix": "NETWORK_REMOVE_AND_CANCEL_ALL_INVITES()",
      "body": ["NETWORK_REMOVE_AND_CANCEL_ALL_INVITES()"],
      "description": "NETWORK_REMOVE_AND_CANCEL_ALL_INVITES()"
    },
    "NETWORK_REMOVE_TRANSITION_INVITE": {
      "prefix": "NETWORK_REMOVE_TRANSITION_INVITE()",
      "body": ["NETWORK_REMOVE_TRANSITION_INVITE(${1:Any* p0})"],
      "description": "NETWORK_REMOVE_TRANSITION_INVITE()"
    },
    "NETWORK_REMOVE_ALL_TRANSITION_INVITE": {
      "prefix": "NETWORK_REMOVE_ALL_TRANSITION_INVITE()",
      "body": ["NETWORK_REMOVE_ALL_TRANSITION_INVITE()"],
      "description": "NETWORK_REMOVE_ALL_TRANSITION_INVITE()"
    },
    "NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES": {
      "prefix": "NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES()",
      "body": ["NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES()"],
      "description": "NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES()"
    },
    "NETWORK_INVITE_GAMERS": {
      "prefix": "NETWORK_INVITE_GAMERS()",
      "body": [
        "NETWORK_INVITE_GAMERS(${1:Any* p0}, ${2:Any p1}, ${3:Any* p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_INVITE_GAMERS()"
    },
    "NETWORK_HAS_INVITED_GAMER": {
      "prefix": "NETWORK_HAS_INVITED_GAMER()",
      "body": ["NETWORK_HAS_INVITED_GAMER(${1:Any* p0})"],
      "description": "NETWORK_HAS_INVITED_GAMER()"
    },
    "NETWORK_HAS_MADE_INVITE_DECISION": {
      "prefix": "NETWORK_HAS_MADE_INVITE_DECISION()",
      "body": ["NETWORK_HAS_MADE_INVITE_DECISION(${1:Any* gamerHandle})"],
      "description": "NETWORK_HAS_MADE_INVITE_DECISION()"
    },
    "NETWORK_GET_INVITE_REPLY_STATUS": {
      "prefix": "NETWORK_GET_INVITE_REPLY_STATUS()",
      "body": ["NETWORK_GET_INVITE_REPLY_STATUS(${1:Any p0})"],
      "description": "NETWORK_GET_INVITE_REPLY_STATUS()"
    },
    "NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU": {
      "prefix": "NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU()",
      "body": [
        "NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(${1:Any* p0})"
      ],
      "description": "NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU()"
    },
    "NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU": {
      "prefix": "NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU()",
      "body": [
        "NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(${1:Any* p0})"
      ],
      "description": "NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU()"
    },
    "NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU": {
      "prefix": "NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU()",
      "body": ["NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU(${1:Any* p0})"],
      "description": "NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU()"
    },
    "NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE": {
      "prefix": "NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE()",
      "body": [
        "NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE(${1:int p0}, ${2:Any* gamerHandle})"
      ],
      "description": "NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE()"
    },
    "NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE": {
      "prefix": "NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE()",
      "body": [
        "NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE(${1:Any p0}, ${2:Any* gamerHandle})"
      ],
      "description": "NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE()"
    },
    "NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU": {
      "prefix": "NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU()",
      "body": [
        "NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU(${1:Any* p0}, ${2:Any* p1})"
      ],
      "description": "NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU()"
    },
    "FILLOUT_PM_PLAYER_LIST": {
      "prefix": "FILLOUT_PM_PLAYER_LIST()",
      "body": [
        "FILLOUT_PM_PLAYER_LIST(${1:Any* gamerHandle}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "FILLOUT_PM_PLAYER_LIST()"
    },
    "FILLOUT_PM_PLAYER_LIST_WITH_NAMES": {
      "prefix": "FILLOUT_PM_PLAYER_LIST_WITH_NAMES()",
      "body": [
        "FILLOUT_PM_PLAYER_LIST_WITH_NAMES(${1:Any* p0}, ${2:Any* p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "FILLOUT_PM_PLAYER_LIST_WITH_NAMES()"
    },
    "REFRESH_PLAYER_LIST_STATS": {
      "prefix": "REFRESH_PLAYER_LIST_STATS()",
      "body": ["REFRESH_PLAYER_LIST_STATS(${1:int p0})"],
      "description": "REFRESH_PLAYER_LIST_STATS()"
    },
    "NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE": {
      "prefix": "NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE()",
      "body": ["NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE(${1:Any* p0})"],
      "description": "NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE()"
    },
    "NETWORK_IS_IN_PLATFORM_PARTY": {
      "prefix": "NETWORK_IS_IN_PLATFORM_PARTY()",
      "body": ["NETWORK_IS_IN_PLATFORM_PARTY()"],
      "description": "NETWORK_IS_IN_PLATFORM_PARTY()"
    },
    "NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT": {
      "prefix": "NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT()",
      "body": ["NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT()"],
      "description": "NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT()"
    },
    "NETWORK_GET_PLATFORM_PARTY_MEMBERS": {
      "prefix": "NETWORK_GET_PLATFORM_PARTY_MEMBERS()",
      "body": [
        "NETWORK_GET_PLATFORM_PARTY_MEMBERS(${1:Any* data}, ${2:int dataSize})"
      ],
      "description": "NETWORK_GET_PLATFORM_PARTY_MEMBERS()"
    },
    "NETWORK_IS_IN_PLATFORM_PARTY_CHAT": {
      "prefix": "NETWORK_IS_IN_PLATFORM_PARTY_CHAT()",
      "body": ["NETWORK_IS_IN_PLATFORM_PARTY_CHAT()"],
      "description": "NETWORK_IS_IN_PLATFORM_PARTY_CHAT()"
    },
    "NETWORK_IS_CHATTING_IN_PLATFORM_PARTY": {
      "prefix": "NETWORK_IS_CHATTING_IN_PLATFORM_PARTY()",
      "body": ["NETWORK_IS_CHATTING_IN_PLATFORM_PARTY(${1:Any* gamerHandle})"],
      "description": "NETWORK_IS_CHATTING_IN_PLATFORM_PARTY()"
    },
    "NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN": {
      "prefix": "NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN()",
      "body": ["NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN()"],
      "description": "NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN()"
    },
    "NETWORK_IS_QUEUING_FOR_SESSION_JOIN": {
      "prefix": "NETWORK_IS_QUEUING_FOR_SESSION_JOIN()",
      "body": ["NETWORK_IS_QUEUING_FOR_SESSION_JOIN()"],
      "description": "NETWORK_IS_QUEUING_FOR_SESSION_JOIN()"
    },
    "NETWORK_CLEAR_QUEUED_JOIN_REQUEST": {
      "prefix": "NETWORK_CLEAR_QUEUED_JOIN_REQUEST()",
      "body": ["NETWORK_CLEAR_QUEUED_JOIN_REQUEST()"],
      "description": "NETWORK_CLEAR_QUEUED_JOIN_REQUEST()"
    },
    "NETWORK_SEND_QUEUED_JOIN_REQUEST": {
      "prefix": "NETWORK_SEND_QUEUED_JOIN_REQUEST()",
      "body": ["NETWORK_SEND_QUEUED_JOIN_REQUEST()"],
      "description": "NETWORK_SEND_QUEUED_JOIN_REQUEST()"
    },
    "NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS": {
      "prefix": "NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS()",
      "body": ["NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS()"],
      "description": "NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS()"
    },
    "NETWORK_SEED_RANDOM_NUMBER_GENERATOR": {
      "prefix": "NETWORK_SEED_RANDOM_NUMBER_GENERATOR()",
      "body": ["NETWORK_SEED_RANDOM_NUMBER_GENERATOR(${1:int seed})"],
      "description": "NETWORK_SEED_RANDOM_NUMBER_GENERATOR()"
    },
    "NETWORK_GET_RANDOM_INT": {
      "prefix": "NETWORK_GET_RANDOM_INT()",
      "body": ["NETWORK_GET_RANDOM_INT()"],
      "description": "NETWORK_GET_RANDOM_INT()"
    },
    "NETWORK_GET_RANDOM_INT_RANGED": {
      "prefix": "NETWORK_GET_RANDOM_INT_RANGED()",
      "body": [
        "NETWORK_GET_RANDOM_INT_RANGED(${1:int rangeStart}, ${2:int rangeEnd})"
      ],
      "description": "NETWORK_GET_RANDOM_INT_RANGED()"
    },
    "_NETWORK_GET_RANDOM_FLOAT_RANGED": {
      "prefix": "_NETWORK_GET_RANDOM_FLOAT_RANGED()",
      "body": [
        "_NETWORK_GET_RANDOM_FLOAT_RANGED(${1:float rangeStart}, ${2:float rangeEnd})"
      ],
      "description": "_NETWORK_GET_RANDOM_FLOAT_RANGED()"
    },
    "NETWORK_PLAYER_IS_CHEATER": {
      "prefix": "NETWORK_PLAYER_IS_CHEATER()",
      "body": ["NETWORK_PLAYER_IS_CHEATER()"],
      "description": "NETWORK_PLAYER_IS_CHEATER()"
    },
    "NETWORK_PLAYER_GET_CHEATER_REASON": {
      "prefix": "NETWORK_PLAYER_GET_CHEATER_REASON()",
      "body": ["NETWORK_PLAYER_GET_CHEATER_REASON()"],
      "description": "NETWORK_PLAYER_GET_CHEATER_REASON()"
    },
    "NETWORK_PLAYER_IS_BADSPORT": {
      "prefix": "NETWORK_PLAYER_IS_BADSPORT()",
      "body": ["NETWORK_PLAYER_IS_BADSPORT()"],
      "description": "NETWORK_PLAYER_IS_BADSPORT()"
    },
    "REMOTE_CHEATER_PLAYER_DETECTED": {
      "prefix": "REMOTE_CHEATER_PLAYER_DETECTED()",
      "body": [
        "REMOTE_CHEATER_PLAYER_DETECTED(${1:Player player}, ${2:int a}, ${3:int b})"
      ],
      "description": "REMOTE_CHEATER_PLAYER_DETECTED()"
    },
    "BAD_SPORT_PLAYER_LEFT_DETECTED": {
      "prefix": "BAD_SPORT_PLAYER_LEFT_DETECTED()",
      "body": [
        "BAD_SPORT_PLAYER_LEFT_DETECTED(${1:Any* gamerHandle}, ${2:int event}, ${3:int amountReceived})"
      ],
      "description": "BAD_SPORT_PLAYER_LEFT_DETECTED()"
    },
    "NETWORK_ADD_INVALID_OBJECT_MODEL": {
      "prefix": "NETWORK_ADD_INVALID_OBJECT_MODEL()",
      "body": ["NETWORK_ADD_INVALID_OBJECT_MODEL(${1:Hash modelHash})"],
      "description": "NETWORK_ADD_INVALID_OBJECT_MODEL()"
    },
    "NETWORK_REMOVE_INVALID_OBJECT_MODEL": {
      "prefix": "NETWORK_REMOVE_INVALID_OBJECT_MODEL()",
      "body": ["NETWORK_REMOVE_INVALID_OBJECT_MODEL(${1:Hash modelHash})"],
      "description": "NETWORK_REMOVE_INVALID_OBJECT_MODEL()"
    },
    "NETWORK_CLEAR_INVALID_OBJECT_MODELS": {
      "prefix": "NETWORK_CLEAR_INVALID_OBJECT_MODELS()",
      "body": ["NETWORK_CLEAR_INVALID_OBJECT_MODELS()"],
      "description": "NETWORK_CLEAR_INVALID_OBJECT_MODELS()"
    },
    "NETWORK_APPLY_PED_SCAR_DATA": {
      "prefix": "NETWORK_APPLY_PED_SCAR_DATA()",
      "body": ["NETWORK_APPLY_PED_SCAR_DATA(${1:Ped ped}, ${2:int p1})"],
      "description": "NETWORK_APPLY_PED_SCAR_DATA()"
    },
    "NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT": {
      "prefix": "NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT()",
      "body": [
        "NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(${1:int maxNumMissionParticipants}, ${2:BOOL p1}, ${3:int instanceId})"
      ],
      "description": "NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT()"
    },
    "NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT": {
      "prefix": "NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT()",
      "body": [
        "NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(${1:Any p0}, ${2:BOOL p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT()"
    },
    "NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT": {
      "prefix": "NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT()",
      "body": ["NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT()"],
      "description": "NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT()"
    },
    "NETWORK_GET_MAX_NUM_PARTICIPANTS": {
      "prefix": "NETWORK_GET_MAX_NUM_PARTICIPANTS()",
      "body": ["NETWORK_GET_MAX_NUM_PARTICIPANTS()"],
      "description": "NETWORK_GET_MAX_NUM_PARTICIPANTS()"
    },
    "NETWORK_GET_NUM_PARTICIPANTS": {
      "prefix": "NETWORK_GET_NUM_PARTICIPANTS()",
      "body": ["NETWORK_GET_NUM_PARTICIPANTS()"],
      "description": "NETWORK_GET_NUM_PARTICIPANTS()"
    },
    "NETWORK_GET_SCRIPT_STATUS": {
      "prefix": "NETWORK_GET_SCRIPT_STATUS()",
      "body": ["NETWORK_GET_SCRIPT_STATUS()"],
      "description": "NETWORK_GET_SCRIPT_STATUS()"
    },
    "NETWORK_REGISTER_HOST_BROADCAST_VARIABLES": {
      "prefix": "NETWORK_REGISTER_HOST_BROADCAST_VARIABLES()",
      "body": [
        "NETWORK_REGISTER_HOST_BROADCAST_VARIABLES(${1:int* vars}, ${2:int numVars}, ${3:const char* debugName})"
      ],
      "description": "NETWORK_REGISTER_HOST_BROADCAST_VARIABLES()"
    },
    "NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES": {
      "prefix": "NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES()",
      "body": [
        "NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES(${1:int* vars}, ${2:int numVars}, ${3:const char* debugName})"
      ],
      "description": "NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES()"
    },
    "NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES": {
      "prefix": "NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES()",
      "body": [
        "NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES()"
    },
    "NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES": {
      "prefix": "NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES()",
      "body": [
        "NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES()"
    },
    "NETWORK_FINISH_BROADCASTING_DATA": {
      "prefix": "NETWORK_FINISH_BROADCASTING_DATA()",
      "body": ["NETWORK_FINISH_BROADCASTING_DATA()"],
      "description": "NETWORK_FINISH_BROADCASTING_DATA()"
    },
    "NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA": {
      "prefix": "NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA()",
      "body": ["NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA()"],
      "description": "NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA()"
    },
    "NETWORK_GET_PLAYER_INDEX": {
      "prefix": "NETWORK_GET_PLAYER_INDEX()",
      "body": ["NETWORK_GET_PLAYER_INDEX(${1:Player player})"],
      "description": "NETWORK_GET_PLAYER_INDEX()"
    },
    "NETWORK_GET_PARTICIPANT_INDEX": {
      "prefix": "NETWORK_GET_PARTICIPANT_INDEX()",
      "body": ["NETWORK_GET_PARTICIPANT_INDEX(${1:int index})"],
      "description": "NETWORK_GET_PARTICIPANT_INDEX()"
    },
    "NETWORK_GET_PLAYER_INDEX_FROM_PED": {
      "prefix": "NETWORK_GET_PLAYER_INDEX_FROM_PED()",
      "body": ["NETWORK_GET_PLAYER_INDEX_FROM_PED(${1:Ped ped})"],
      "description": "NETWORK_GET_PLAYER_INDEX_FROM_PED()"
    },
    "NETWORK_GET_NUM_CONNECTED_PLAYERS": {
      "prefix": "NETWORK_GET_NUM_CONNECTED_PLAYERS()",
      "body": ["NETWORK_GET_NUM_CONNECTED_PLAYERS()"],
      "description": "NETWORK_GET_NUM_CONNECTED_PLAYERS()"
    },
    "NETWORK_IS_PLAYER_CONNECTED": {
      "prefix": "NETWORK_IS_PLAYER_CONNECTED()",
      "body": ["NETWORK_IS_PLAYER_CONNECTED(${1:Player player})"],
      "description": "NETWORK_IS_PLAYER_CONNECTED()"
    },
    "NETWORK_GET_TOTAL_NUM_PLAYERS": {
      "prefix": "NETWORK_GET_TOTAL_NUM_PLAYERS()",
      "body": ["NETWORK_GET_TOTAL_NUM_PLAYERS()"],
      "description": "NETWORK_GET_TOTAL_NUM_PLAYERS()"
    },
    "NETWORK_IS_PARTICIPANT_ACTIVE": {
      "prefix": "NETWORK_IS_PARTICIPANT_ACTIVE()",
      "body": ["NETWORK_IS_PARTICIPANT_ACTIVE(${1:int p0})"],
      "description": "NETWORK_IS_PARTICIPANT_ACTIVE()"
    },
    "NETWORK_IS_PLAYER_ACTIVE": {
      "prefix": "NETWORK_IS_PLAYER_ACTIVE()",
      "body": ["NETWORK_IS_PLAYER_ACTIVE(${1:Player player})"],
      "description": "NETWORK_IS_PLAYER_ACTIVE()"
    },
    "NETWORK_IS_PLAYER_A_PARTICIPANT": {
      "prefix": "NETWORK_IS_PLAYER_A_PARTICIPANT()",
      "body": ["NETWORK_IS_PLAYER_A_PARTICIPANT(${1:Player player})"],
      "description": "NETWORK_IS_PLAYER_A_PARTICIPANT()"
    },
    "NETWORK_IS_HOST_OF_THIS_SCRIPT": {
      "prefix": "NETWORK_IS_HOST_OF_THIS_SCRIPT()",
      "body": ["NETWORK_IS_HOST_OF_THIS_SCRIPT()"],
      "description": "NETWORK_IS_HOST_OF_THIS_SCRIPT()"
    },
    "NETWORK_GET_HOST_OF_THIS_SCRIPT": {
      "prefix": "NETWORK_GET_HOST_OF_THIS_SCRIPT()",
      "body": ["NETWORK_GET_HOST_OF_THIS_SCRIPT()"],
      "description": "NETWORK_GET_HOST_OF_THIS_SCRIPT()"
    },
    "NETWORK_GET_HOST_OF_SCRIPT": {
      "prefix": "NETWORK_GET_HOST_OF_SCRIPT()",
      "body": [
        "NETWORK_GET_HOST_OF_SCRIPT(${1:const char* scriptName}, ${2:int instance_id}, ${3:int position_hash})"
      ],
      "description": "NETWORK_GET_HOST_OF_SCRIPT()"
    },
    "NETWORK_SET_MISSION_FINISHED": {
      "prefix": "NETWORK_SET_MISSION_FINISHED()",
      "body": ["NETWORK_SET_MISSION_FINISHED()"],
      "description": "NETWORK_SET_MISSION_FINISHED()"
    },
    "NETWORK_IS_SCRIPT_ACTIVE": {
      "prefix": "NETWORK_IS_SCRIPT_ACTIVE()",
      "body": [
        "NETWORK_IS_SCRIPT_ACTIVE(${1:const char* scriptName}, ${2:int instance_id}, ${3:BOOL p2}, ${4:int position_hash})"
      ],
      "description": "NETWORK_IS_SCRIPT_ACTIVE()"
    },
    "NETWORK_IS_SCRIPT_ACTIVE_BY_HASH": {
      "prefix": "NETWORK_IS_SCRIPT_ACTIVE_BY_HASH()",
      "body": [
        "NETWORK_IS_SCRIPT_ACTIVE_BY_HASH(${1:Hash scriptHash}, ${2:int p1}, ${3:BOOL p2}, ${4:int p3})"
      ],
      "description": "NETWORK_IS_SCRIPT_ACTIVE_BY_HASH()"
    },
    "NETWORK_IS_THREAD_A_NETWORK_SCRIPT": {
      "prefix": "NETWORK_IS_THREAD_A_NETWORK_SCRIPT()",
      "body": ["NETWORK_IS_THREAD_A_NETWORK_SCRIPT(${1:int threadId})"],
      "description": "NETWORK_IS_THREAD_A_NETWORK_SCRIPT()"
    },
    "NETWORK_GET_NUM_SCRIPT_PARTICIPANTS": {
      "prefix": "NETWORK_GET_NUM_SCRIPT_PARTICIPANTS()",
      "body": [
        "NETWORK_GET_NUM_SCRIPT_PARTICIPANTS(${1:const char* scriptName}, ${2:int instance_id}, ${3:int position_hash})"
      ],
      "description": "NETWORK_GET_NUM_SCRIPT_PARTICIPANTS()"
    },
    "NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT": {
      "prefix": "NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT()",
      "body": ["NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT()"],
      "description": "NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT()"
    },
    "NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT": {
      "prefix": "NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT()",
      "body": ["NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT()"],
      "description": "NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT()"
    },
    "NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT": {
      "prefix": "NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT()",
      "body": [
        "NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT(${1:Player player}, ${2:const char* script}, ${3:int instance_id})"
      ],
      "description": "NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT()"
    },
    "NETWORK_PREVENT_SCRIPT_HOST_MIGRATION": {
      "prefix": "NETWORK_PREVENT_SCRIPT_HOST_MIGRATION()",
      "body": ["NETWORK_PREVENT_SCRIPT_HOST_MIGRATION()"],
      "description": "NETWORK_PREVENT_SCRIPT_HOST_MIGRATION()"
    },
    "NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT": {
      "prefix": "NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT()",
      "body": ["NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT()"],
      "description": "NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT()"
    },
    "PARTICIPANT_ID": {
      "prefix": "PARTICIPANT_ID()",
      "body": ["PARTICIPANT_ID()"],
      "description": "PARTICIPANT_ID()"
    },
    "PARTICIPANT_ID_TO_INT": {
      "prefix": "PARTICIPANT_ID_TO_INT()",
      "body": ["PARTICIPANT_ID_TO_INT()"],
      "description": "PARTICIPANT_ID_TO_INT()"
    },
    "NETWORK_GET_KILLER_OF_PLAYER": {
      "prefix": "NETWORK_GET_KILLER_OF_PLAYER()",
      "body": [
        "NETWORK_GET_KILLER_OF_PLAYER(${1:Player player}, ${2:Hash* weaponHash})"
      ],
      "description": "NETWORK_GET_KILLER_OF_PLAYER()"
    },
    "NETWORK_GET_DESTROYER_OF_NETWORK_ID": {
      "prefix": "NETWORK_GET_DESTROYER_OF_NETWORK_ID()",
      "body": [
        "NETWORK_GET_DESTROYER_OF_NETWORK_ID(${1:int netId}, ${2:Hash* weaponHash})"
      ],
      "description": "NETWORK_GET_DESTROYER_OF_NETWORK_ID()"
    },
    "NETWORK_GET_DESTROYER_OF_ENTITY": {
      "prefix": "NETWORK_GET_DESTROYER_OF_ENTITY()",
      "body": [
        "NETWORK_GET_DESTROYER_OF_ENTITY(${1:Entity entity}, ${2:Hash* weaponHash})"
      ],
      "description": "NETWORK_GET_DESTROYER_OF_ENTITY()"
    },
    "NETWORK_GET_ASSISTED_KILL_OF_ENTITY": {
      "prefix": "NETWORK_GET_ASSISTED_KILL_OF_ENTITY()",
      "body": [
        "NETWORK_GET_ASSISTED_KILL_OF_ENTITY(${1:Player player}, ${2:Entity entity}, ${3:int* p2})"
      ],
      "description": "NETWORK_GET_ASSISTED_KILL_OF_ENTITY()"
    },
    "NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY": {
      "prefix": "NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY()",
      "body": [
        "NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY(${1:Player player}, ${2:Entity entity}, ${3:int* p2})"
      ],
      "description": "NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY()"
    },
    "NETWORK_GET_ENTITY_KILLER_OF_PLAYER": {
      "prefix": "NETWORK_GET_ENTITY_KILLER_OF_PLAYER()",
      "body": [
        "NETWORK_GET_ENTITY_KILLER_OF_PLAYER(${1:Player player}, ${2:Hash* weaponHash})"
      ],
      "description": "NETWORK_GET_ENTITY_KILLER_OF_PLAYER()"
    },
    "NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID": {
      "prefix": "NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID()",
      "body": [
        "NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID(${1:const char* missionId})"
      ],
      "description": "NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID()"
    },
    "NETWORK_SET_CURRENT_CHAT_OPTION": {
      "prefix": "NETWORK_SET_CURRENT_CHAT_OPTION()",
      "body": ["NETWORK_SET_CURRENT_CHAT_OPTION(${1:int newChatOption})"],
      "description": "NETWORK_SET_CURRENT_CHAT_OPTION()"
    },
    "NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION": {
      "prefix": "NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION()",
      "body": [
        "NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION(${1:Hash mpSettingSpawn})"
      ],
      "description": "NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION()"
    },
    "NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE": {
      "prefix": "NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE()",
      "body": ["NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE(${1:BOOL toggle})"],
      "description": "NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE()"
    },
    "NETWORK_SET_VEHICLE_DRIVEN_LOCATION": {
      "prefix": "NETWORK_SET_VEHICLE_DRIVEN_LOCATION()",
      "body": ["NETWORK_SET_VEHICLE_DRIVEN_LOCATION(${1:Hash location})"],
      "description": "NETWORK_SET_VEHICLE_DRIVEN_LOCATION()"
    },
    "NETWORK_RESURRECT_LOCAL_PLAYER": {
      "prefix": "NETWORK_RESURRECT_LOCAL_PLAYER()",
      "body": [
        "NETWORK_RESURRECT_LOCAL_PLAYER(${1:float x}, ${2:float y}, ${3:float z}, ${4:float heading}, ${5:BOOL p4}, ${6:BOOL changetime}, ${7:BOOL p6}, ${8:int p7}, ${9:int p8})"
      ],
      "description": "NETWORK_RESURRECT_LOCAL_PLAYER()"
    },
    "NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME": {
      "prefix": "NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME()",
      "body": ["NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(${1:int time})"],
      "description": "NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME()"
    },
    "NETWORK_IS_LOCAL_PLAYER_INVINCIBLE": {
      "prefix": "NETWORK_IS_LOCAL_PLAYER_INVINCIBLE()",
      "body": ["NETWORK_IS_LOCAL_PLAYER_INVINCIBLE()"],
      "description": "NETWORK_IS_LOCAL_PLAYER_INVINCIBLE()"
    },
    "NETWORK_DISABLE_INVINCIBLE_FLASHING": {
      "prefix": "NETWORK_DISABLE_INVINCIBLE_FLASHING()",
      "body": [
        "NETWORK_DISABLE_INVINCIBLE_FLASHING(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "NETWORK_DISABLE_INVINCIBLE_FLASHING()"
    },
    "NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT": {
      "prefix": "NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT()",
      "body": ["NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT(${1:Ped ped})"],
      "description": "NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT()"
    },
    "NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT": {
      "prefix": "NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT()",
      "body": ["NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT(${1:BOOL toggle})"],
      "description": "NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT()"
    },
    "NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD": {
      "prefix": "NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD()",
      "body": [
        "NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD(${1:Entity entity})"
      ],
      "description": "NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD()"
    },
    "NETWORK_GET_NETWORK_ID_FROM_ENTITY": {
      "prefix": "NETWORK_GET_NETWORK_ID_FROM_ENTITY()",
      "body": ["NETWORK_GET_NETWORK_ID_FROM_ENTITY(${1:Entity entity})"],
      "description": "NETWORK_GET_NETWORK_ID_FROM_ENTITY()"
    },
    "NETWORK_GET_ENTITY_FROM_NETWORK_ID": {
      "prefix": "NETWORK_GET_ENTITY_FROM_NETWORK_ID()",
      "body": ["NETWORK_GET_ENTITY_FROM_NETWORK_ID(${1:int netId})"],
      "description": "NETWORK_GET_ENTITY_FROM_NETWORK_ID()"
    },
    "NETWORK_GET_ENTITY_IS_NETWORKED": {
      "prefix": "NETWORK_GET_ENTITY_IS_NETWORKED()",
      "body": ["NETWORK_GET_ENTITY_IS_NETWORKED(${1:Entity entity})"],
      "description": "NETWORK_GET_ENTITY_IS_NETWORKED()"
    },
    "NETWORK_GET_ENTITY_IS_LOCAL": {
      "prefix": "NETWORK_GET_ENTITY_IS_LOCAL()",
      "body": ["NETWORK_GET_ENTITY_IS_LOCAL(${1:Entity entity})"],
      "description": "NETWORK_GET_ENTITY_IS_LOCAL()"
    },
    "NETWORK_REGISTER_ENTITY_AS_NETWORKED": {
      "prefix": "NETWORK_REGISTER_ENTITY_AS_NETWORKED()",
      "body": ["NETWORK_REGISTER_ENTITY_AS_NETWORKED(${1:Entity entity})"],
      "description": "NETWORK_REGISTER_ENTITY_AS_NETWORKED()"
    },
    "NETWORK_UNREGISTER_NETWORKED_ENTITY": {
      "prefix": "NETWORK_UNREGISTER_NETWORKED_ENTITY()",
      "body": ["NETWORK_UNREGISTER_NETWORKED_ENTITY(${1:Entity entity})"],
      "description": "NETWORK_UNREGISTER_NETWORKED_ENTITY()"
    },
    "NETWORK_DOES_NETWORK_ID_EXIST": {
      "prefix": "NETWORK_DOES_NETWORK_ID_EXIST()",
      "body": ["NETWORK_DOES_NETWORK_ID_EXIST(${1:int netId})"],
      "description": "NETWORK_DOES_NETWORK_ID_EXIST()"
    },
    "NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID": {
      "prefix": "NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID()",
      "body": ["NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID(${1:int netId})"],
      "description": "NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID()"
    },
    "NETWORK_REQUEST_CONTROL_OF_NETWORK_ID": {
      "prefix": "NETWORK_REQUEST_CONTROL_OF_NETWORK_ID()",
      "body": ["NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(${1:int netId})"],
      "description": "NETWORK_REQUEST_CONTROL_OF_NETWORK_ID()"
    },
    "NETWORK_HAS_CONTROL_OF_NETWORK_ID": {
      "prefix": "NETWORK_HAS_CONTROL_OF_NETWORK_ID()",
      "body": ["NETWORK_HAS_CONTROL_OF_NETWORK_ID(${1:int netId})"],
      "description": "NETWORK_HAS_CONTROL_OF_NETWORK_ID()"
    },
    "NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED": {
      "prefix": "NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED()",
      "body": ["NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED(${1:int netId})"],
      "description": "NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED()"
    },
    "NETWORK_REQUEST_CONTROL_OF_ENTITY": {
      "prefix": "NETWORK_REQUEST_CONTROL_OF_ENTITY()",
      "body": ["NETWORK_REQUEST_CONTROL_OF_ENTITY(${1:Entity entity})"],
      "description": "NETWORK_REQUEST_CONTROL_OF_ENTITY()"
    },
    "NETWORK_REQUEST_CONTROL_OF_DOOR": {
      "prefix": "NETWORK_REQUEST_CONTROL_OF_DOOR()",
      "body": ["NETWORK_REQUEST_CONTROL_OF_DOOR(${1:int doorID})"],
      "description": "NETWORK_REQUEST_CONTROL_OF_DOOR()"
    },
    "NETWORK_HAS_CONTROL_OF_ENTITY": {
      "prefix": "NETWORK_HAS_CONTROL_OF_ENTITY()",
      "body": ["NETWORK_HAS_CONTROL_OF_ENTITY(${1:Entity entity})"],
      "description": "NETWORK_HAS_CONTROL_OF_ENTITY()"
    },
    "NETWORK_HAS_CONTROL_OF_PICKUP": {
      "prefix": "NETWORK_HAS_CONTROL_OF_PICKUP()",
      "body": ["NETWORK_HAS_CONTROL_OF_PICKUP(${1:Pickup pickup})"],
      "description": "NETWORK_HAS_CONTROL_OF_PICKUP()"
    },
    "NETWORK_HAS_CONTROL_OF_DOOR": {
      "prefix": "NETWORK_HAS_CONTROL_OF_DOOR()",
      "body": ["NETWORK_HAS_CONTROL_OF_DOOR(${1:Hash doorHash})"],
      "description": "NETWORK_HAS_CONTROL_OF_DOOR()"
    },
    "NETWORK_IS_DOOR_NETWORKED": {
      "prefix": "NETWORK_IS_DOOR_NETWORKED()",
      "body": ["NETWORK_IS_DOOR_NETWORKED(${1:Hash doorHash})"],
      "description": "NETWORK_IS_DOOR_NETWORKED()"
    },
    "VEH_TO_NET": {
      "prefix": "VEH_TO_NET()",
      "body": ["VEH_TO_NET(${1:Vehicle vehicle})"],
      "description": "VEH_TO_NET()"
    },
    "PED_TO_NET": {
      "prefix": "PED_TO_NET()",
      "body": ["PED_TO_NET(${1:Ped ped})"],
      "description": "PED_TO_NET()"
    },
    "OBJ_TO_NET": {
      "prefix": "OBJ_TO_NET()",
      "body": ["OBJ_TO_NET(${1:Object object})"],
      "description": "OBJ_TO_NET()"
    },
    "NET_TO_VEH": {
      "prefix": "NET_TO_VEH()",
      "body": ["NET_TO_VEH(${1:int netHandle})"],
      "description": "NET_TO_VEH()"
    },
    "NET_TO_PED": {
      "prefix": "NET_TO_PED()",
      "body": ["NET_TO_PED(${1:int netHandle})"],
      "description": "NET_TO_PED()"
    },
    "NET_TO_OBJ": {
      "prefix": "NET_TO_OBJ()",
      "body": ["NET_TO_OBJ(${1:int netHandle})"],
      "description": "NET_TO_OBJ()"
    },
    "NET_TO_ENT": {
      "prefix": "NET_TO_ENT()",
      "body": ["NET_TO_ENT(${1:int netHandle})"],
      "description": "NET_TO_ENT()"
    },
    "NETWORK_GET_LOCAL_HANDLE": {
      "prefix": "NETWORK_GET_LOCAL_HANDLE()",
      "body": [
        "NETWORK_GET_LOCAL_HANDLE(${1:Any* gamerHandle}, ${2:int gamerHandleSize})"
      ],
      "description": "NETWORK_GET_LOCAL_HANDLE()"
    },
    "NETWORK_HANDLE_FROM_USER_ID": {
      "prefix": "NETWORK_HANDLE_FROM_USER_ID()",
      "body": [
        "NETWORK_HANDLE_FROM_USER_ID(${1:const char* userId}, ${2:Any* gamerHandle}, ${3:int gamerHandleSize})"
      ],
      "description": "NETWORK_HANDLE_FROM_USER_ID()"
    },
    "NETWORK_HANDLE_FROM_MEMBER_ID": {
      "prefix": "NETWORK_HANDLE_FROM_MEMBER_ID()",
      "body": [
        "NETWORK_HANDLE_FROM_MEMBER_ID(${1:const char* memberId}, ${2:Any* gamerHandle}, ${3:int gamerHandleSize})"
      ],
      "description": "NETWORK_HANDLE_FROM_MEMBER_ID()"
    },
    "NETWORK_HANDLE_FROM_PLAYER": {
      "prefix": "NETWORK_HANDLE_FROM_PLAYER()",
      "body": [
        "NETWORK_HANDLE_FROM_PLAYER(${1:Player player}, ${2:Any* gamerHandle}, ${3:int gamerHandleSize})"
      ],
      "description": "NETWORK_HANDLE_FROM_PLAYER()"
    },
    "NETWORK_HASH_FROM_PLAYER_HANDLE": {
      "prefix": "NETWORK_HASH_FROM_PLAYER_HANDLE()",
      "body": ["NETWORK_HASH_FROM_PLAYER_HANDLE(${1:Player player})"],
      "description": "NETWORK_HASH_FROM_PLAYER_HANDLE()"
    },
    "NETWORK_HASH_FROM_GAMER_HANDLE": {
      "prefix": "NETWORK_HASH_FROM_GAMER_HANDLE()",
      "body": ["NETWORK_HASH_FROM_GAMER_HANDLE(${1:Any* gamerHandle})"],
      "description": "NETWORK_HASH_FROM_GAMER_HANDLE()"
    },
    "NETWORK_HANDLE_FROM_FRIEND": {
      "prefix": "NETWORK_HANDLE_FROM_FRIEND()",
      "body": [
        "NETWORK_HANDLE_FROM_FRIEND(${1:int friendIndex}, ${2:Any* gamerHandle}, ${3:int gamerHandleSize})"
      ],
      "description": "NETWORK_HANDLE_FROM_FRIEND()"
    },
    "NETWORK_GAMERTAG_FROM_HANDLE_START": {
      "prefix": "NETWORK_GAMERTAG_FROM_HANDLE_START()",
      "body": ["NETWORK_GAMERTAG_FROM_HANDLE_START(${1:Any* gamerHandle})"],
      "description": "NETWORK_GAMERTAG_FROM_HANDLE_START()"
    },
    "NETWORK_GAMERTAG_FROM_HANDLE_PENDING": {
      "prefix": "NETWORK_GAMERTAG_FROM_HANDLE_PENDING()",
      "body": ["NETWORK_GAMERTAG_FROM_HANDLE_PENDING()"],
      "description": "NETWORK_GAMERTAG_FROM_HANDLE_PENDING()"
    },
    "NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED": {
      "prefix": "NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED()",
      "body": ["NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED()"],
      "description": "NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED()"
    },
    "NETWORK_DISPLAYNAMES_FROM_HANDLES_START": {
      "prefix": "NETWORK_DISPLAYNAMES_FROM_HANDLES_START()",
      "body": [
        "NETWORK_DISPLAYNAMES_FROM_HANDLES_START(${1:Any* p0}, ${2:Any p1})"
      ],
      "description": "NETWORK_DISPLAYNAMES_FROM_HANDLES_START()"
    },
    "NETWORK_GET_DISPLAYNAMES_FROM_HANDLES": {
      "prefix": "NETWORK_GET_DISPLAYNAMES_FROM_HANDLES()",
      "body": [
        "NETWORK_GET_DISPLAYNAMES_FROM_HANDLES(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "NETWORK_GET_DISPLAYNAMES_FROM_HANDLES()"
    },
    "NETWORK_ARE_HANDLES_THE_SAME": {
      "prefix": "NETWORK_ARE_HANDLES_THE_SAME()",
      "body": [
        "NETWORK_ARE_HANDLES_THE_SAME(${1:Any* gamerHandle1}, ${2:Any* gamerHandle2})"
      ],
      "description": "NETWORK_ARE_HANDLES_THE_SAME()"
    },
    "NETWORK_IS_HANDLE_VALID": {
      "prefix": "NETWORK_IS_HANDLE_VALID()",
      "body": [
        "NETWORK_IS_HANDLE_VALID(${1:Any* gamerHandle}, ${2:int gamerHandleSize})"
      ],
      "description": "NETWORK_IS_HANDLE_VALID()"
    },
    "NETWORK_GET_PLAYER_FROM_GAMER_HANDLE": {
      "prefix": "NETWORK_GET_PLAYER_FROM_GAMER_HANDLE()",
      "body": ["NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(${1:Any* gamerHandle})"],
      "description": "NETWORK_GET_PLAYER_FROM_GAMER_HANDLE()"
    },
    "NETWORK_IS_GAMER_IN_MY_SESSION": {
      "prefix": "NETWORK_IS_GAMER_IN_MY_SESSION()",
      "body": ["NETWORK_IS_GAMER_IN_MY_SESSION(${1:Any* gamerHandle})"],
      "description": "NETWORK_IS_GAMER_IN_MY_SESSION()"
    },
    "NETWORK_SHOW_PROFILE_UI": {
      "prefix": "NETWORK_SHOW_PROFILE_UI()",
      "body": ["NETWORK_SHOW_PROFILE_UI(${1:Any* gamerHandle})"],
      "description": "NETWORK_SHOW_PROFILE_UI()"
    },
    "NETWORK_PLAYER_IS_ROCKSTAR_DEV": {
      "prefix": "NETWORK_PLAYER_IS_ROCKSTAR_DEV()",
      "body": ["NETWORK_PLAYER_IS_ROCKSTAR_DEV(${1:Player player})"],
      "description": "NETWORK_PLAYER_IS_ROCKSTAR_DEV()"
    },
    "NETWORK_PLAYER_INDEX_IS_CHEATER": {
      "prefix": "NETWORK_PLAYER_INDEX_IS_CHEATER()",
      "body": ["NETWORK_PLAYER_INDEX_IS_CHEATER(${1:Player player})"],
      "description": "NETWORK_PLAYER_INDEX_IS_CHEATER()"
    },
    "NETWORK_ENTITY_GET_OBJECT_ID": {
      "prefix": "NETWORK_ENTITY_GET_OBJECT_ID()",
      "body": ["NETWORK_ENTITY_GET_OBJECT_ID(${1:Entity entity})"],
      "description": "NETWORK_ENTITY_GET_OBJECT_ID()"
    },
    "NETWORK_GET_ENTITY_FROM_OBJECT_ID": {
      "prefix": "NETWORK_GET_ENTITY_FROM_OBJECT_ID()",
      "body": ["NETWORK_GET_ENTITY_FROM_OBJECT_ID(${1:Any p0})"],
      "description": "NETWORK_GET_ENTITY_FROM_OBJECT_ID()"
    },
    "NETWORK_IS_INACTIVE_PROFILE": {
      "prefix": "NETWORK_IS_INACTIVE_PROFILE()",
      "body": ["NETWORK_IS_INACTIVE_PROFILE(${1:Any* p0})"],
      "description": "NETWORK_IS_INACTIVE_PROFILE()"
    },
    "NETWORK_GET_MAX_FRIENDS": {
      "prefix": "NETWORK_GET_MAX_FRIENDS()",
      "body": ["NETWORK_GET_MAX_FRIENDS()"],
      "description": "NETWORK_GET_MAX_FRIENDS()"
    },
    "NETWORK_GET_FRIEND_COUNT": {
      "prefix": "NETWORK_GET_FRIEND_COUNT()",
      "body": ["NETWORK_GET_FRIEND_COUNT()"],
      "description": "NETWORK_GET_FRIEND_COUNT()"
    },
    "NETWORK_IS_FRIEND_ONLINE": {
      "prefix": "NETWORK_IS_FRIEND_ONLINE()",
      "body": ["NETWORK_IS_FRIEND_ONLINE(${1:const char* name})"],
      "description": "NETWORK_IS_FRIEND_ONLINE()"
    },
    "NETWORK_IS_FRIEND_HANDLE_ONLINE": {
      "prefix": "NETWORK_IS_FRIEND_HANDLE_ONLINE()",
      "body": ["NETWORK_IS_FRIEND_HANDLE_ONLINE(${1:Any* gamerHandle})"],
      "description": "NETWORK_IS_FRIEND_HANDLE_ONLINE()"
    },
    "NETWORK_IS_FRIEND_IN_SAME_TITLE": {
      "prefix": "NETWORK_IS_FRIEND_IN_SAME_TITLE()",
      "body": ["NETWORK_IS_FRIEND_IN_SAME_TITLE(${1:const char* friendName})"],
      "description": "NETWORK_IS_FRIEND_IN_SAME_TITLE()"
    },
    "NETWORK_IS_FRIEND_IN_MULTIPLAYER": {
      "prefix": "NETWORK_IS_FRIEND_IN_MULTIPLAYER()",
      "body": ["NETWORK_IS_FRIEND_IN_MULTIPLAYER(${1:const char* friendName})"],
      "description": "NETWORK_IS_FRIEND_IN_MULTIPLAYER()"
    },
    "NETWORK_IS_FRIEND": {
      "prefix": "NETWORK_IS_FRIEND()",
      "body": ["NETWORK_IS_FRIEND(${1:Any* gamerHandle})"],
      "description": "NETWORK_IS_FRIEND()"
    },
    "NETWORK_IS_PENDING_FRIEND": {
      "prefix": "NETWORK_IS_PENDING_FRIEND()",
      "body": ["NETWORK_IS_PENDING_FRIEND(${1:Any p0})"],
      "description": "NETWORK_IS_PENDING_FRIEND()"
    },
    "NETWORK_IS_ADDING_FRIEND": {
      "prefix": "NETWORK_IS_ADDING_FRIEND()",
      "body": ["NETWORK_IS_ADDING_FRIEND()"],
      "description": "NETWORK_IS_ADDING_FRIEND()"
    },
    "NETWORK_ADD_FRIEND": {
      "prefix": "NETWORK_ADD_FRIEND()",
      "body": [
        "NETWORK_ADD_FRIEND(${1:Any* gamerHandle}, ${2:const char* message})"
      ],
      "description": "NETWORK_ADD_FRIEND()"
    },
    "NETWORK_IS_FRIEND_INDEX_ONLINE": {
      "prefix": "NETWORK_IS_FRIEND_INDEX_ONLINE()",
      "body": ["NETWORK_IS_FRIEND_INDEX_ONLINE(${1:int friendIndex})"],
      "description": "NETWORK_IS_FRIEND_INDEX_ONLINE()"
    },
    "NETWORK_SET_PLAYER_IS_PASSIVE": {
      "prefix": "NETWORK_SET_PLAYER_IS_PASSIVE()",
      "body": ["NETWORK_SET_PLAYER_IS_PASSIVE(${1:BOOL toggle})"],
      "description": "NETWORK_SET_PLAYER_IS_PASSIVE()"
    },
    "NETWORK_GET_PLAYER_OWNS_WAYPOINT": {
      "prefix": "NETWORK_GET_PLAYER_OWNS_WAYPOINT()",
      "body": ["NETWORK_GET_PLAYER_OWNS_WAYPOINT(${1:Player player})"],
      "description": "NETWORK_GET_PLAYER_OWNS_WAYPOINT()"
    },
    "NETWORK_CAN_SET_WAYPOINT": {
      "prefix": "NETWORK_CAN_SET_WAYPOINT()",
      "body": ["NETWORK_CAN_SET_WAYPOINT()"],
      "description": "NETWORK_CAN_SET_WAYPOINT()"
    },
    "NETWORK_IGNORE_REMOTE_WAYPOINTS": {
      "prefix": "NETWORK_IGNORE_REMOTE_WAYPOINTS()",
      "body": ["NETWORK_IGNORE_REMOTE_WAYPOINTS()"],
      "description": "NETWORK_IGNORE_REMOTE_WAYPOINTS()"
    },
    "_NETWORK_DOES_COMMUNICATION_GROUP_EXIST": {
      "prefix": "_NETWORK_DOES_COMMUNICATION_GROUP_EXIST()",
      "body": [
        "_NETWORK_DOES_COMMUNICATION_GROUP_EXIST(${1:int communicationType})"
      ],
      "description": "_NETWORK_DOES_COMMUNICATION_GROUP_EXIST()"
    },
    "_NETWORK_GET_COMMUNICATION_GROUP_FLAGS": {
      "prefix": "_NETWORK_GET_COMMUNICATION_GROUP_FLAGS()",
      "body": [
        "_NETWORK_GET_COMMUNICATION_GROUP_FLAGS(${1:int communicationType})"
      ],
      "description": "_NETWORK_GET_COMMUNICATION_GROUP_FLAGS()"
    },
    "_NETWORK_SET_COMMUNICATION_GROUP_FLAGS": {
      "prefix": "_NETWORK_SET_COMMUNICATION_GROUP_FLAGS()",
      "body": [
        "_NETWORK_SET_COMMUNICATION_GROUP_FLAGS(${1:int communicationType}, ${2:int communicationGroupFlag})"
      ],
      "description": "_NETWORK_SET_COMMUNICATION_GROUP_FLAGS()"
    },
    "NETWORK_IS_PLAYER_ON_BLOCKLIST": {
      "prefix": "NETWORK_IS_PLAYER_ON_BLOCKLIST()",
      "body": ["NETWORK_IS_PLAYER_ON_BLOCKLIST(${1:Any* gamerHandle})"],
      "description": "NETWORK_IS_PLAYER_ON_BLOCKLIST()"
    },
    "NETWORK_SET_SCRIPT_AUTOMUTED": {
      "prefix": "NETWORK_SET_SCRIPT_AUTOMUTED()",
      "body": ["NETWORK_SET_SCRIPT_AUTOMUTED(${1:Any p0})"],
      "description": "NETWORK_SET_SCRIPT_AUTOMUTED()"
    },
    "NETWORK_HAS_AUTOMUTE_OVERRIDE": {
      "prefix": "NETWORK_HAS_AUTOMUTE_OVERRIDE()",
      "body": ["NETWORK_HAS_AUTOMUTE_OVERRIDE()"],
      "description": "NETWORK_HAS_AUTOMUTE_OVERRIDE()"
    },
    "NETWORK_HAS_HEADSET": {
      "prefix": "NETWORK_HAS_HEADSET()",
      "body": ["NETWORK_HAS_HEADSET()"],
      "description": "NETWORK_HAS_HEADSET()"
    },
    "NETWORK_SET_LOOK_AT_TALKERS": {
      "prefix": "NETWORK_SET_LOOK_AT_TALKERS()",
      "body": ["NETWORK_SET_LOOK_AT_TALKERS(${1:BOOL p0})"],
      "description": "NETWORK_SET_LOOK_AT_TALKERS()"
    },
    "NETWORK_IS_PUSH_TO_TALK_ACTIVE": {
      "prefix": "NETWORK_IS_PUSH_TO_TALK_ACTIVE()",
      "body": ["NETWORK_IS_PUSH_TO_TALK_ACTIVE()"],
      "description": "NETWORK_IS_PUSH_TO_TALK_ACTIVE()"
    },
    "NETWORK_GAMER_HAS_HEADSET": {
      "prefix": "NETWORK_GAMER_HAS_HEADSET()",
      "body": ["NETWORK_GAMER_HAS_HEADSET(${1:Any* gamerHandle})"],
      "description": "NETWORK_GAMER_HAS_HEADSET()"
    },
    "NETWORK_IS_GAMER_TALKING": {
      "prefix": "NETWORK_IS_GAMER_TALKING()",
      "body": ["NETWORK_IS_GAMER_TALKING(${1:Any* gamerHandle})"],
      "description": "NETWORK_IS_GAMER_TALKING()"
    },
    "NETWORK_PERMISSIONS_HAS_GAMER_RECORD": {
      "prefix": "NETWORK_PERMISSIONS_HAS_GAMER_RECORD()",
      "body": ["NETWORK_PERMISSIONS_HAS_GAMER_RECORD(${1:Any* gamerHandle})"],
      "description": "NETWORK_PERMISSIONS_HAS_GAMER_RECORD()"
    },
    "NETWORK_CAN_COMMUNICATE_WITH_GAMER": {
      "prefix": "NETWORK_CAN_COMMUNICATE_WITH_GAMER()",
      "body": ["NETWORK_CAN_COMMUNICATE_WITH_GAMER(${1:Any* gamerHandle})"],
      "description": "NETWORK_CAN_COMMUNICATE_WITH_GAMER()"
    },
    "NETWORK_CAN_TEXT_CHAT_WITH_GAMER": {
      "prefix": "NETWORK_CAN_TEXT_CHAT_WITH_GAMER()",
      "body": ["NETWORK_CAN_TEXT_CHAT_WITH_GAMER(${1:Any* gamerHandle})"],
      "description": "NETWORK_CAN_TEXT_CHAT_WITH_GAMER()"
    },
    "NETWORK_IS_GAMER_MUTED_BY_ME": {
      "prefix": "NETWORK_IS_GAMER_MUTED_BY_ME()",
      "body": ["NETWORK_IS_GAMER_MUTED_BY_ME(${1:Any* gamerHandle})"],
      "description": "NETWORK_IS_GAMER_MUTED_BY_ME()"
    },
    "NETWORK_AM_I_MUTED_BY_GAMER": {
      "prefix": "NETWORK_AM_I_MUTED_BY_GAMER()",
      "body": ["NETWORK_AM_I_MUTED_BY_GAMER(${1:Any* gamerHandle})"],
      "description": "NETWORK_AM_I_MUTED_BY_GAMER()"
    },
    "NETWORK_IS_GAMER_BLOCKED_BY_ME": {
      "prefix": "NETWORK_IS_GAMER_BLOCKED_BY_ME()",
      "body": ["NETWORK_IS_GAMER_BLOCKED_BY_ME(${1:Any* gamerHandle})"],
      "description": "NETWORK_IS_GAMER_BLOCKED_BY_ME()"
    },
    "NETWORK_AM_I_BLOCKED_BY_GAMER": {
      "prefix": "NETWORK_AM_I_BLOCKED_BY_GAMER()",
      "body": ["NETWORK_AM_I_BLOCKED_BY_GAMER(${1:Any* gamerHandle})"],
      "description": "NETWORK_AM_I_BLOCKED_BY_GAMER()"
    },
    "NETWORK_CAN_VIEW_GAMER_USER_CONTENT": {
      "prefix": "NETWORK_CAN_VIEW_GAMER_USER_CONTENT()",
      "body": ["NETWORK_CAN_VIEW_GAMER_USER_CONTENT(${1:Any* gamerHandle})"],
      "description": "NETWORK_CAN_VIEW_GAMER_USER_CONTENT()"
    },
    "NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT": {
      "prefix": "NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT()",
      "body": [
        "NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT(${1:Any* gamerHandle})"
      ],
      "description": "NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT()"
    },
    "NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER": {
      "prefix": "NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER()",
      "body": ["NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER(${1:Any* gamerHandle})"],
      "description": "NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER()"
    },
    "NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME": {
      "prefix": "NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME()",
      "body": [
        "NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME(${1:Any* gamerHandle})"
      ],
      "description": "NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME()"
    },
    "NETWORK_CAN_SEND_LOCAL_INVITE": {
      "prefix": "NETWORK_CAN_SEND_LOCAL_INVITE()",
      "body": ["NETWORK_CAN_SEND_LOCAL_INVITE(${1:Any* gamerHandle})"],
      "description": "NETWORK_CAN_SEND_LOCAL_INVITE()"
    },
    "NETWORK_CAN_RECEIVE_LOCAL_INVITE": {
      "prefix": "NETWORK_CAN_RECEIVE_LOCAL_INVITE()",
      "body": ["NETWORK_CAN_RECEIVE_LOCAL_INVITE(${1:Any* gamerHandle})"],
      "description": "NETWORK_CAN_RECEIVE_LOCAL_INVITE()"
    },
    "NETWORK_IS_PLAYER_TALKING": {
      "prefix": "NETWORK_IS_PLAYER_TALKING()",
      "body": ["NETWORK_IS_PLAYER_TALKING(${1:Player player})"],
      "description": "NETWORK_IS_PLAYER_TALKING()"
    },
    "NETWORK_PLAYER_HAS_HEADSET": {
      "prefix": "NETWORK_PLAYER_HAS_HEADSET()",
      "body": ["NETWORK_PLAYER_HAS_HEADSET(${1:Player player})"],
      "description": "NETWORK_PLAYER_HAS_HEADSET()"
    },
    "NETWORK_IS_PLAYER_MUTED_BY_ME": {
      "prefix": "NETWORK_IS_PLAYER_MUTED_BY_ME()",
      "body": ["NETWORK_IS_PLAYER_MUTED_BY_ME(${1:Player player})"],
      "description": "NETWORK_IS_PLAYER_MUTED_BY_ME()"
    },
    "NETWORK_AM_I_MUTED_BY_PLAYER": {
      "prefix": "NETWORK_AM_I_MUTED_BY_PLAYER()",
      "body": ["NETWORK_AM_I_MUTED_BY_PLAYER(${1:Player player})"],
      "description": "NETWORK_AM_I_MUTED_BY_PLAYER()"
    },
    "NETWORK_IS_PLAYER_BLOCKED_BY_ME": {
      "prefix": "NETWORK_IS_PLAYER_BLOCKED_BY_ME()",
      "body": ["NETWORK_IS_PLAYER_BLOCKED_BY_ME(${1:Player player})"],
      "description": "NETWORK_IS_PLAYER_BLOCKED_BY_ME()"
    },
    "NETWORK_AM_I_BLOCKED_BY_PLAYER": {
      "prefix": "NETWORK_AM_I_BLOCKED_BY_PLAYER()",
      "body": ["NETWORK_AM_I_BLOCKED_BY_PLAYER(${1:Player player})"],
      "description": "NETWORK_AM_I_BLOCKED_BY_PLAYER()"
    },
    "NETWORK_GET_PLAYER_LOUDNESS": {
      "prefix": "NETWORK_GET_PLAYER_LOUDNESS()",
      "body": ["NETWORK_GET_PLAYER_LOUDNESS(${1:Player player})"],
      "description": "NETWORK_GET_PLAYER_LOUDNESS()"
    },
    "NETWORK_SET_TALKER_PROXIMITY": {
      "prefix": "NETWORK_SET_TALKER_PROXIMITY()",
      "body": ["NETWORK_SET_TALKER_PROXIMITY(${1:float value})"],
      "description": "NETWORK_SET_TALKER_PROXIMITY()"
    },
    "NETWORK_GET_TALKER_PROXIMITY": {
      "prefix": "NETWORK_GET_TALKER_PROXIMITY()",
      "body": ["NETWORK_GET_TALKER_PROXIMITY()"],
      "description": "NETWORK_GET_TALKER_PROXIMITY()"
    },
    "NETWORK_SET_VOICE_ACTIVE": {
      "prefix": "NETWORK_SET_VOICE_ACTIVE()",
      "body": ["NETWORK_SET_VOICE_ACTIVE(${1:BOOL toggle})"],
      "description": "NETWORK_SET_VOICE_ACTIVE()"
    },
    "NETWORK_REMAIN_IN_GAME_CHAT": {
      "prefix": "NETWORK_REMAIN_IN_GAME_CHAT()",
      "body": ["NETWORK_REMAIN_IN_GAME_CHAT(${1:BOOL p0})"],
      "description": "NETWORK_REMAIN_IN_GAME_CHAT()"
    },
    "NETWORK_OVERRIDE_TRANSITION_CHAT": {
      "prefix": "NETWORK_OVERRIDE_TRANSITION_CHAT()",
      "body": ["NETWORK_OVERRIDE_TRANSITION_CHAT(${1:BOOL p0})"],
      "description": "NETWORK_OVERRIDE_TRANSITION_CHAT()"
    },
    "NETWORK_SET_TEAM_ONLY_CHAT": {
      "prefix": "NETWORK_SET_TEAM_ONLY_CHAT()",
      "body": ["NETWORK_SET_TEAM_ONLY_CHAT(${1:BOOL toggle})"],
      "description": "NETWORK_SET_TEAM_ONLY_CHAT()"
    },
    "NETWORK_SET_SCRIPT_CONTROLLING_TEAMS": {
      "prefix": "NETWORK_SET_SCRIPT_CONTROLLING_TEAMS()",
      "body": ["NETWORK_SET_SCRIPT_CONTROLLING_TEAMS(${1:Any p0})"],
      "description": "NETWORK_SET_SCRIPT_CONTROLLING_TEAMS()"
    },
    "NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER": {
      "prefix": "NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER()",
      "body": ["NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER()"
    },
    "NETWORK_OVERRIDE_TEAM_RESTRICTIONS": {
      "prefix": "NETWORK_OVERRIDE_TEAM_RESTRICTIONS()",
      "body": [
        "NETWORK_OVERRIDE_TEAM_RESTRICTIONS(${1:int team}, ${2:BOOL toggle})"
      ],
      "description": "NETWORK_OVERRIDE_TEAM_RESTRICTIONS()"
    },
    "NETWORK_SET_OVERRIDE_SPECTATOR_MODE": {
      "prefix": "NETWORK_SET_OVERRIDE_SPECTATOR_MODE()",
      "body": ["NETWORK_SET_OVERRIDE_SPECTATOR_MODE(${1:BOOL toggle})"],
      "description": "NETWORK_SET_OVERRIDE_SPECTATOR_MODE()"
    },
    "NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT": {
      "prefix": "NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT()",
      "body": ["NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT(${1:BOOL toggle})"],
      "description": "NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT()"
    },
    "NETWORK_SET_PROXIMITY_AFFECTS_TEAM": {
      "prefix": "NETWORK_SET_PROXIMITY_AFFECTS_TEAM()",
      "body": ["NETWORK_SET_PROXIMITY_AFFECTS_TEAM(${1:BOOL toggle})"],
      "description": "NETWORK_SET_PROXIMITY_AFFECTS_TEAM()"
    },
    "NETWORK_SET_NO_SPECTATOR_CHAT": {
      "prefix": "NETWORK_SET_NO_SPECTATOR_CHAT()",
      "body": ["NETWORK_SET_NO_SPECTATOR_CHAT(${1:BOOL toggle})"],
      "description": "NETWORK_SET_NO_SPECTATOR_CHAT()"
    },
    "NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM": {
      "prefix": "NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM()",
      "body": [
        "NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM(${1:BOOL toggle})"
      ],
      "description": "NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM()"
    },
    "NETWORK_OVERRIDE_CHAT_RESTRICTIONS": {
      "prefix": "NETWORK_OVERRIDE_CHAT_RESTRICTIONS()",
      "body": [
        "NETWORK_OVERRIDE_CHAT_RESTRICTIONS(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "NETWORK_OVERRIDE_CHAT_RESTRICTIONS()"
    },
    "NETWORK_OVERRIDE_SEND_RESTRICTIONS": {
      "prefix": "NETWORK_OVERRIDE_SEND_RESTRICTIONS()",
      "body": [
        "NETWORK_OVERRIDE_SEND_RESTRICTIONS(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "NETWORK_OVERRIDE_SEND_RESTRICTIONS()"
    },
    "NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL": {
      "prefix": "NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL()",
      "body": ["NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL(${1:BOOL toggle})"],
      "description": "NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL()"
    },
    "NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS": {
      "prefix": "NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS()",
      "body": [
        "NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS()"
    },
    "NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL": {
      "prefix": "NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL()",
      "body": ["NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL(${1:BOOL toggle})"],
      "description": "NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL()"
    },
    "NETWORK_SET_VOICE_CHANNEL": {
      "prefix": "NETWORK_SET_VOICE_CHANNEL()",
      "body": ["NETWORK_SET_VOICE_CHANNEL(${1:int channel})"],
      "description": "NETWORK_SET_VOICE_CHANNEL()"
    },
    "NETWORK_CLEAR_VOICE_CHANNEL": {
      "prefix": "NETWORK_CLEAR_VOICE_CHANNEL()",
      "body": ["NETWORK_CLEAR_VOICE_CHANNEL()"],
      "description": "NETWORK_CLEAR_VOICE_CHANNEL()"
    },
    "NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE": {
      "prefix": "NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE()",
      "body": [
        "NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE()"
    },
    "NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE": {
      "prefix": "NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE()",
      "body": ["NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE()"],
      "description": "NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE()"
    },
    "NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION": {
      "prefix": "NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION()",
      "body": ["NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION(${1:Player player})"],
      "description": "NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION()"
    },
    "NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION": {
      "prefix": "NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION()",
      "body": ["NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION(${1:Player player})"],
      "description": "NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION()"
    },
    "NETWORK_GET_MUTE_COUNT_FOR_PLAYER": {
      "prefix": "NETWORK_GET_MUTE_COUNT_FOR_PLAYER()",
      "body": [
        "NETWORK_GET_MUTE_COUNT_FOR_PLAYER(${1:Player p0}, ${2:float* p1}, ${3:float* p2})"
      ],
      "description": "NETWORK_GET_MUTE_COUNT_FOR_PLAYER()"
    },
    "NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT": {
      "prefix": "NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT()",
      "body": [
        "NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT(${1:BOOL toggle})"
      ],
      "description": "NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT()"
    },
    "NETWORK_TEXT_CHAT_IS_TYPING": {
      "prefix": "NETWORK_TEXT_CHAT_IS_TYPING()",
      "body": ["NETWORK_TEXT_CHAT_IS_TYPING()"],
      "description": "NETWORK_TEXT_CHAT_IS_TYPING()"
    },
    "SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME": {
      "prefix": "SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME()",
      "body": ["SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME()"],
      "description": "SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME()"
    },
    "SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE": {
      "prefix": "SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE()",
      "body": ["SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE()"],
      "description": "SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE()"
    },
    "NETWORK_SET_FRIENDLY_FIRE_OPTION": {
      "prefix": "NETWORK_SET_FRIENDLY_FIRE_OPTION()",
      "body": ["NETWORK_SET_FRIENDLY_FIRE_OPTION(${1:BOOL toggle})"],
      "description": "NETWORK_SET_FRIENDLY_FIRE_OPTION()"
    },
    "NETWORK_SET_RICH_PRESENCE": {
      "prefix": "NETWORK_SET_RICH_PRESENCE()",
      "body": [
        "NETWORK_SET_RICH_PRESENCE(${1:int p0}, ${2:int p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "NETWORK_SET_RICH_PRESENCE()"
    },
    "NETWORK_SET_RICH_PRESENCE_STRING": {
      "prefix": "NETWORK_SET_RICH_PRESENCE_STRING()",
      "body": [
        "NETWORK_SET_RICH_PRESENCE_STRING(${1:int p0}, ${2:const char* textLabel})"
      ],
      "description": "NETWORK_SET_RICH_PRESENCE_STRING()"
    },
    "NETWORK_GET_TIMEOUT_TIME": {
      "prefix": "NETWORK_GET_TIMEOUT_TIME()",
      "body": ["NETWORK_GET_TIMEOUT_TIME()"],
      "description": "NETWORK_GET_TIMEOUT_TIME()"
    },
    "NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP": {
      "prefix": "NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP()",
      "body": [
        "NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP(${1:Player player}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL p4}, ${6:BOOL p5})"
      ],
      "description": "NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP()"
    },
    "NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE": {
      "prefix": "NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE()",
      "body": [
        "NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE(${1:Player player}, ${2:BOOL p1})"
      ],
      "description": "NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE()"
    },
    "REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY": {
      "prefix": "REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY()",
      "body": [
        "REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY(${1:Entity entity}, ${2:Ped ped})"
      ],
      "description": "REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY()"
    },
    "NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE": {
      "prefix": "NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE()",
      "body": [
        "NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE()"
    },
    "NETWORK_IS_ANY_PLAYER_NEAR": {
      "prefix": "NETWORK_IS_ANY_PLAYER_NEAR()",
      "body": [
        "NETWORK_IS_ANY_PLAYER_NEAR(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
      ],
      "description": "NETWORK_IS_ANY_PLAYER_NEAR()"
    },
    "NETWORK_CLAN_SERVICE_IS_VALID": {
      "prefix": "NETWORK_CLAN_SERVICE_IS_VALID()",
      "body": ["NETWORK_CLAN_SERVICE_IS_VALID()"],
      "description": "NETWORK_CLAN_SERVICE_IS_VALID()"
    },
    "NETWORK_CLAN_PLAYER_IS_ACTIVE": {
      "prefix": "NETWORK_CLAN_PLAYER_IS_ACTIVE()",
      "body": ["NETWORK_CLAN_PLAYER_IS_ACTIVE(${1:Any* gamerHandle})"],
      "description": "NETWORK_CLAN_PLAYER_IS_ACTIVE()"
    },
    "NETWORK_CLAN_PLAYER_GET_DESC": {
      "prefix": "NETWORK_CLAN_PLAYER_GET_DESC()",
      "body": [
        "NETWORK_CLAN_PLAYER_GET_DESC(${1:Any* clanDesc}, ${2:int bufferSize}, ${3:Any* gamerHandle})"
      ],
      "description": "NETWORK_CLAN_PLAYER_GET_DESC()"
    },
    "NETWORK_CLAN_IS_ROCKSTAR_CLAN": {
      "prefix": "NETWORK_CLAN_IS_ROCKSTAR_CLAN()",
      "body": [
        "NETWORK_CLAN_IS_ROCKSTAR_CLAN(${1:Any* clanDesc}, ${2:int bufferSize})"
      ],
      "description": "NETWORK_CLAN_IS_ROCKSTAR_CLAN()"
    },
    "NETWORK_CLAN_GET_UI_FORMATTED_TAG": {
      "prefix": "NETWORK_CLAN_GET_UI_FORMATTED_TAG()",
      "body": [
        "NETWORK_CLAN_GET_UI_FORMATTED_TAG(${1:Any* clanDesc}, ${2:int bufferSize}, ${3:char* formattedTag})"
      ],
      "description": "NETWORK_CLAN_GET_UI_FORMATTED_TAG()"
    },
    "NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT": {
      "prefix": "NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT()",
      "body": ["NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT()"],
      "description": "NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT()"
    },
    "NETWORK_CLAN_GET_MEMBERSHIP_DESC": {
      "prefix": "NETWORK_CLAN_GET_MEMBERSHIP_DESC()",
      "body": [
        "NETWORK_CLAN_GET_MEMBERSHIP_DESC(${1:Any* memberDesc}, ${2:int p1})"
      ],
      "description": "NETWORK_CLAN_GET_MEMBERSHIP_DESC()"
    },
    "NETWORK_CLAN_DOWNLOAD_MEMBERSHIP": {
      "prefix": "NETWORK_CLAN_DOWNLOAD_MEMBERSHIP()",
      "body": ["NETWORK_CLAN_DOWNLOAD_MEMBERSHIP(${1:Any* gamerHandle})"],
      "description": "NETWORK_CLAN_DOWNLOAD_MEMBERSHIP()"
    },
    "NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING": {
      "prefix": "NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING()",
      "body": ["NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING(${1:Any* p0})"],
      "description": "NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING()"
    },
    "NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING": {
      "prefix": "NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING()",
      "body": ["NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING()"],
      "description": "NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING()"
    },
    "NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE": {
      "prefix": "NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE()",
      "body": ["NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(${1:int* p0})"],
      "description": "NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE()"
    },
    "NETWORK_CLAN_GET_MEMBERSHIP_COUNT": {
      "prefix": "NETWORK_CLAN_GET_MEMBERSHIP_COUNT()",
      "body": ["NETWORK_CLAN_GET_MEMBERSHIP_COUNT(${1:int* p0})"],
      "description": "NETWORK_CLAN_GET_MEMBERSHIP_COUNT()"
    },
    "NETWORK_CLAN_GET_MEMBERSHIP_VALID": {
      "prefix": "NETWORK_CLAN_GET_MEMBERSHIP_VALID()",
      "body": ["NETWORK_CLAN_GET_MEMBERSHIP_VALID(${1:int* p0}, ${2:Any p1})"],
      "description": "NETWORK_CLAN_GET_MEMBERSHIP_VALID()"
    },
    "NETWORK_CLAN_GET_MEMBERSHIP": {
      "prefix": "NETWORK_CLAN_GET_MEMBERSHIP()",
      "body": [
        "NETWORK_CLAN_GET_MEMBERSHIP(${1:int* p0}, ${2:Any* clanMembership}, ${3:int p2})"
      ],
      "description": "NETWORK_CLAN_GET_MEMBERSHIP()"
    },
    "NETWORK_CLAN_JOIN": {
      "prefix": "NETWORK_CLAN_JOIN()",
      "body": ["NETWORK_CLAN_JOIN(${1:int clanDesc})"],
      "description": "NETWORK_CLAN_JOIN()"
    },
    "NETWORK_CLAN_CREWINFO_GET_STRING_VALUE": {
      "prefix": "NETWORK_CLAN_CREWINFO_GET_STRING_VALUE()",
      "body": [
        "NETWORK_CLAN_CREWINFO_GET_STRING_VALUE(${1:const char* animDict}, ${2:const char* animName})"
      ],
      "description": "NETWORK_CLAN_CREWINFO_GET_STRING_VALUE()"
    },
    "NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE": {
      "prefix": "NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE()",
      "body": [
        "NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE(${1:int p0}, ${2:const char* p1})"
      ],
      "description": "NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE()"
    },
    "NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED": {
      "prefix": "NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED()",
      "body": ["NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED()"],
      "description": "NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED()"
    },
    "NETWORK_CLAN_GET_EMBLEM_TXD_NAME": {
      "prefix": "NETWORK_CLAN_GET_EMBLEM_TXD_NAME()",
      "body": [
        "NETWORK_CLAN_GET_EMBLEM_TXD_NAME(${1:Any* netHandle}, ${2:char* txdName})"
      ],
      "description": "NETWORK_CLAN_GET_EMBLEM_TXD_NAME()"
    },
    "NETWORK_CLAN_REQUEST_EMBLEM": {
      "prefix": "NETWORK_CLAN_REQUEST_EMBLEM()",
      "body": ["NETWORK_CLAN_REQUEST_EMBLEM(${1:Any p0})"],
      "description": "NETWORK_CLAN_REQUEST_EMBLEM()"
    },
    "NETWORK_CLAN_IS_EMBLEM_READY": {
      "prefix": "NETWORK_CLAN_IS_EMBLEM_READY()",
      "body": ["NETWORK_CLAN_IS_EMBLEM_READY(${1:Any p0}, ${2:Any* p1})"],
      "description": "NETWORK_CLAN_IS_EMBLEM_READY()"
    },
    "NETWORK_CLAN_RELEASE_EMBLEM": {
      "prefix": "NETWORK_CLAN_RELEASE_EMBLEM()",
      "body": ["NETWORK_CLAN_RELEASE_EMBLEM(${1:Any p0})"],
      "description": "NETWORK_CLAN_RELEASE_EMBLEM()"
    },
    "NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR": {
      "prefix": "NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR()",
      "body": ["NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR()"],
      "description": "NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR()"
    },
    "NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL": {
      "prefix": "NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL()",
      "body": ["NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL()"],
      "description": "NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL()"
    },
    "NETWORK_GET_PRIMARY_CLAN_DATA_START": {
      "prefix": "NETWORK_GET_PRIMARY_CLAN_DATA_START()",
      "body": ["NETWORK_GET_PRIMARY_CLAN_DATA_START(${1:Any* p0}, ${2:Any p1})"],
      "description": "NETWORK_GET_PRIMARY_CLAN_DATA_START()"
    },
    "NETWORK_GET_PRIMARY_CLAN_DATA_PENDING": {
      "prefix": "NETWORK_GET_PRIMARY_CLAN_DATA_PENDING()",
      "body": ["NETWORK_GET_PRIMARY_CLAN_DATA_PENDING()"],
      "description": "NETWORK_GET_PRIMARY_CLAN_DATA_PENDING()"
    },
    "NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS": {
      "prefix": "NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS()",
      "body": ["NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS()"],
      "description": "NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS()"
    },
    "NETWORK_GET_PRIMARY_CLAN_DATA_NEW": {
      "prefix": "NETWORK_GET_PRIMARY_CLAN_DATA_NEW()",
      "body": ["NETWORK_GET_PRIMARY_CLAN_DATA_NEW(${1:Any* p0}, ${2:Any* p1})"],
      "description": "NETWORK_GET_PRIMARY_CLAN_DATA_NEW()"
    },
    "SET_NETWORK_ID_CAN_MIGRATE": {
      "prefix": "SET_NETWORK_ID_CAN_MIGRATE()",
      "body": ["SET_NETWORK_ID_CAN_MIGRATE(${1:int netId}, ${2:BOOL toggle})"],
      "description": "SET_NETWORK_ID_CAN_MIGRATE()"
    },
    "SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES": {
      "prefix": "SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES()",
      "body": [
        "SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(${1:int netId}, ${2:BOOL toggle})"
      ],
      "description": "SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES()"
    },
    "SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER": {
      "prefix": "SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER()",
      "body": [
        "SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER(${1:int netId}, ${2:Player player}, ${3:BOOL toggle})"
      ],
      "description": "SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER()"
    },
    "SET_NETWORK_ID_CAN_BE_REASSIGNED": {
      "prefix": "SET_NETWORK_ID_CAN_BE_REASSIGNED()",
      "body": [
        "SET_NETWORK_ID_CAN_BE_REASSIGNED(${1:int netId}, ${2:BOOL toggle})"
      ],
      "description": "SET_NETWORK_ID_CAN_BE_REASSIGNED()"
    },
    "NETWORK_SET_ENTITY_CAN_BLEND": {
      "prefix": "NETWORK_SET_ENTITY_CAN_BLEND()",
      "body": [
        "NETWORK_SET_ENTITY_CAN_BLEND(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "NETWORK_SET_ENTITY_CAN_BLEND()"
    },
    "NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED": {
      "prefix": "NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED()",
      "body": [
        "NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED(${1:Object object}, ${2:BOOL toggle})"
      ],
      "description": "NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED()"
    },
    "NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS": {
      "prefix": "NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS()",
      "body": [
        "NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS()"
    },
    "SET_NETWORK_ID_VISIBLE_IN_CUTSCENE": {
      "prefix": "SET_NETWORK_ID_VISIBLE_IN_CUTSCENE()",
      "body": [
        "SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(${1:int netId}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "SET_NETWORK_ID_VISIBLE_IN_CUTSCENE()"
    },
    "SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK": {
      "prefix": "SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK()",
      "body": [
        "SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK(${1:int netId}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK()"
    },
    "SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK": {
      "prefix": "SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK()",
      "body": [
        "SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK()"
    },
    "SET_NETWORK_CUTSCENE_ENTITIES": {
      "prefix": "SET_NETWORK_CUTSCENE_ENTITIES()",
      "body": ["SET_NETWORK_CUTSCENE_ENTITIES(${1:BOOL toggle})"],
      "description": "SET_NETWORK_CUTSCENE_ENTITIES()"
    },
    "ARE_CUTSCENE_ENTITIES_NETWORKED": {
      "prefix": "ARE_CUTSCENE_ENTITIES_NETWORKED()",
      "body": ["ARE_CUTSCENE_ENTITIES_NETWORKED()"],
      "description": "ARE_CUTSCENE_ENTITIES_NETWORKED()"
    },
    "SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL": {
      "prefix": "SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL()",
      "body": [
        "SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL(${1:int netId}, ${2:BOOL state})"
      ],
      "description": "SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL()"
    },
    "IS_NETWORK_ID_OWNED_BY_PARTICIPANT": {
      "prefix": "IS_NETWORK_ID_OWNED_BY_PARTICIPANT()",
      "body": ["IS_NETWORK_ID_OWNED_BY_PARTICIPANT(${1:int netId})"],
      "description": "IS_NETWORK_ID_OWNED_BY_PARTICIPANT()"
    },
    "SET_REMOTE_PLAYER_VISIBLE_IN_CUTSCENE": {
      "prefix": "SET_REMOTE_PLAYER_VISIBLE_IN_CUTSCENE()",
      "body": [
        "SET_REMOTE_PLAYER_VISIBLE_IN_CUTSCENE(${1:Player player}, ${2:BOOL locallyVisible})"
      ],
      "description": "SET_REMOTE_PLAYER_VISIBLE_IN_CUTSCENE()"
    },
    "SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE": {
      "prefix": "SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE()",
      "body": [
        "SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(${1:BOOL p0}, ${2:BOOL p1})"
      ],
      "description": "SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE()"
    },
    "SET_LOCAL_PLAYER_INVISIBLE_LOCALLY": {
      "prefix": "SET_LOCAL_PLAYER_INVISIBLE_LOCALLY()",
      "body": [
        "SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(${1:BOOL bIncludePlayersVehicle})"
      ],
      "description": "SET_LOCAL_PLAYER_INVISIBLE_LOCALLY()"
    },
    "SET_LOCAL_PLAYER_VISIBLE_LOCALLY": {
      "prefix": "SET_LOCAL_PLAYER_VISIBLE_LOCALLY()",
      "body": [
        "SET_LOCAL_PLAYER_VISIBLE_LOCALLY(${1:BOOL bIncludePlayersVehicle})"
      ],
      "description": "SET_LOCAL_PLAYER_VISIBLE_LOCALLY()"
    },
    "SET_PLAYER_INVISIBLE_LOCALLY": {
      "prefix": "SET_PLAYER_INVISIBLE_LOCALLY()",
      "body": [
        "SET_PLAYER_INVISIBLE_LOCALLY(${1:Player player}, ${2:BOOL bIncludePlayersVehicle})"
      ],
      "description": "SET_PLAYER_INVISIBLE_LOCALLY()"
    },
    "SET_PLAYER_VISIBLE_LOCALLY": {
      "prefix": "SET_PLAYER_VISIBLE_LOCALLY()",
      "body": [
        "SET_PLAYER_VISIBLE_LOCALLY(${1:Player player}, ${2:BOOL bIncludePlayersVehicle})"
      ],
      "description": "SET_PLAYER_VISIBLE_LOCALLY()"
    },
    "FADE_OUT_LOCAL_PLAYER": {
      "prefix": "FADE_OUT_LOCAL_PLAYER()",
      "body": ["FADE_OUT_LOCAL_PLAYER(${1:BOOL p0})"],
      "description": "FADE_OUT_LOCAL_PLAYER()"
    },
    "NETWORK_FADE_OUT_ENTITY": {
      "prefix": "NETWORK_FADE_OUT_ENTITY()",
      "body": [
        "NETWORK_FADE_OUT_ENTITY(${1:Entity entity}, ${2:BOOL normal}, ${3:BOOL slow})"
      ],
      "description": "NETWORK_FADE_OUT_ENTITY()"
    },
    "NETWORK_FADE_IN_ENTITY": {
      "prefix": "NETWORK_FADE_IN_ENTITY()",
      "body": [
        "NETWORK_FADE_IN_ENTITY(${1:Entity entity}, ${2:BOOL state}, ${3:Any p2})"
      ],
      "description": "NETWORK_FADE_IN_ENTITY()"
    },
    "NETWORK_IS_PLAYER_FADING": {
      "prefix": "NETWORK_IS_PLAYER_FADING()",
      "body": ["NETWORK_IS_PLAYER_FADING(${1:Player player})"],
      "description": "NETWORK_IS_PLAYER_FADING()"
    },
    "NETWORK_IS_ENTITY_FADING": {
      "prefix": "NETWORK_IS_ENTITY_FADING()",
      "body": ["NETWORK_IS_ENTITY_FADING(${1:Entity entity})"],
      "description": "NETWORK_IS_ENTITY_FADING()"
    },
    "IS_PLAYER_IN_CUTSCENE": {
      "prefix": "IS_PLAYER_IN_CUTSCENE()",
      "body": ["IS_PLAYER_IN_CUTSCENE(${1:Player player})"],
      "description": "IS_PLAYER_IN_CUTSCENE()"
    },
    "SET_ENTITY_VISIBLE_IN_CUTSCENE": {
      "prefix": "SET_ENTITY_VISIBLE_IN_CUTSCENE()",
      "body": [
        "SET_ENTITY_VISIBLE_IN_CUTSCENE(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "SET_ENTITY_VISIBLE_IN_CUTSCENE()"
    },
    "SET_ENTITY_LOCALLY_INVISIBLE": {
      "prefix": "SET_ENTITY_LOCALLY_INVISIBLE()",
      "body": ["SET_ENTITY_LOCALLY_INVISIBLE(${1:Entity entity})"],
      "description": "SET_ENTITY_LOCALLY_INVISIBLE()"
    },
    "SET_ENTITY_LOCALLY_VISIBLE": {
      "prefix": "SET_ENTITY_LOCALLY_VISIBLE()",
      "body": ["SET_ENTITY_LOCALLY_VISIBLE(${1:Entity entity})"],
      "description": "SET_ENTITY_LOCALLY_VISIBLE()"
    },
    "IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID": {
      "prefix": "IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID()",
      "body": ["IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(${1:int netID})"],
      "description": "IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID()"
    },
    "ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID": {
      "prefix": "ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID()",
      "body": [
        "ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(${1:int netID}, ${2:BOOL toggle})"
      ],
      "description": "ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID()"
    },
    "IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER": {
      "prefix": "IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER()",
      "body": ["IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER(${1:Player player})"],
      "description": "IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER()"
    },
    "ACTIVATE_DAMAGE_TRACKER_ON_PLAYER": {
      "prefix": "ACTIVATE_DAMAGE_TRACKER_ON_PLAYER()",
      "body": [
        "ACTIVATE_DAMAGE_TRACKER_ON_PLAYER(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "ACTIVATE_DAMAGE_TRACKER_ON_PLAYER()"
    },
    "IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE": {
      "prefix": "IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE()",
      "body": [
        "IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
      ],
      "description": "IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE()"
    },
    "IS_SPHERE_VISIBLE_TO_PLAYER": {
      "prefix": "IS_SPHERE_VISIBLE_TO_PLAYER()",
      "body": [
        "IS_SPHERE_VISIBLE_TO_PLAYER(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4})"
      ],
      "description": "IS_SPHERE_VISIBLE_TO_PLAYER()"
    },
    "RESERVE_NETWORK_MISSION_OBJECTS": {
      "prefix": "RESERVE_NETWORK_MISSION_OBJECTS()",
      "body": ["RESERVE_NETWORK_MISSION_OBJECTS(${1:int amount})"],
      "description": "RESERVE_NETWORK_MISSION_OBJECTS()"
    },
    "RESERVE_NETWORK_MISSION_PEDS": {
      "prefix": "RESERVE_NETWORK_MISSION_PEDS()",
      "body": ["RESERVE_NETWORK_MISSION_PEDS(${1:int amount})"],
      "description": "RESERVE_NETWORK_MISSION_PEDS()"
    },
    "RESERVE_NETWORK_MISSION_VEHICLES": {
      "prefix": "RESERVE_NETWORK_MISSION_VEHICLES()",
      "body": ["RESERVE_NETWORK_MISSION_VEHICLES(${1:int amount})"],
      "description": "RESERVE_NETWORK_MISSION_VEHICLES()"
    },
    "RESERVE_LOCAL_NETWORK_MISSION_OBJECTS": {
      "prefix": "RESERVE_LOCAL_NETWORK_MISSION_OBJECTS()",
      "body": ["RESERVE_LOCAL_NETWORK_MISSION_OBJECTS(${1:int amount})"],
      "description": "RESERVE_LOCAL_NETWORK_MISSION_OBJECTS()"
    },
    "RESERVE_LOCAL_NETWORK_MISSION_PEDS": {
      "prefix": "RESERVE_LOCAL_NETWORK_MISSION_PEDS()",
      "body": ["RESERVE_LOCAL_NETWORK_MISSION_PEDS(${1:int amount})"],
      "description": "RESERVE_LOCAL_NETWORK_MISSION_PEDS()"
    },
    "RESERVE_LOCAL_NETWORK_MISSION_VEHICLES": {
      "prefix": "RESERVE_LOCAL_NETWORK_MISSION_VEHICLES()",
      "body": ["RESERVE_LOCAL_NETWORK_MISSION_VEHICLES(${1:int amount})"],
      "description": "RESERVE_LOCAL_NETWORK_MISSION_VEHICLES()"
    },
    "CAN_REGISTER_MISSION_OBJECTS": {
      "prefix": "CAN_REGISTER_MISSION_OBJECTS()",
      "body": ["CAN_REGISTER_MISSION_OBJECTS(${1:int amount})"],
      "description": "CAN_REGISTER_MISSION_OBJECTS()"
    },
    "CAN_REGISTER_MISSION_PEDS": {
      "prefix": "CAN_REGISTER_MISSION_PEDS()",
      "body": ["CAN_REGISTER_MISSION_PEDS(${1:int amount})"],
      "description": "CAN_REGISTER_MISSION_PEDS()"
    },
    "CAN_REGISTER_MISSION_VEHICLES": {
      "prefix": "CAN_REGISTER_MISSION_VEHICLES()",
      "body": ["CAN_REGISTER_MISSION_VEHICLES(${1:int amount})"],
      "description": "CAN_REGISTER_MISSION_VEHICLES()"
    },
    "CAN_REGISTER_MISSION_PICKUPS": {
      "prefix": "CAN_REGISTER_MISSION_PICKUPS()",
      "body": ["CAN_REGISTER_MISSION_PICKUPS(${1:int amount})"],
      "description": "CAN_REGISTER_MISSION_PICKUPS()"
    },
    "CAN_REGISTER_MISSION_DOORS": {
      "prefix": "CAN_REGISTER_MISSION_DOORS()",
      "body": ["CAN_REGISTER_MISSION_DOORS(${1:Any p0})"],
      "description": "CAN_REGISTER_MISSION_DOORS()"
    },
    "CAN_REGISTER_MISSION_ENTITIES": {
      "prefix": "CAN_REGISTER_MISSION_ENTITIES()",
      "body": [
        "CAN_REGISTER_MISSION_ENTITIES(${1:int ped_amt}, ${2:int vehicle_amt}, ${3:int object_amt}, ${4:int pickup_amt})"
      ],
      "description": "CAN_REGISTER_MISSION_ENTITIES()"
    },
    "GET_NUM_RESERVED_MISSION_OBJECTS": {
      "prefix": "GET_NUM_RESERVED_MISSION_OBJECTS()",
      "body": ["GET_NUM_RESERVED_MISSION_OBJECTS(${1:BOOL p0}, ${2:Any p1})"],
      "description": "GET_NUM_RESERVED_MISSION_OBJECTS()"
    },
    "GET_NUM_RESERVED_MISSION_PEDS": {
      "prefix": "GET_NUM_RESERVED_MISSION_PEDS()",
      "body": ["GET_NUM_RESERVED_MISSION_PEDS(${1:BOOL p0}, ${2:Any p1})"],
      "description": "GET_NUM_RESERVED_MISSION_PEDS()"
    },
    "GET_NUM_RESERVED_MISSION_VEHICLES": {
      "prefix": "GET_NUM_RESERVED_MISSION_VEHICLES()",
      "body": ["GET_NUM_RESERVED_MISSION_VEHICLES(${1:BOOL p0}, ${2:Any p1})"],
      "description": "GET_NUM_RESERVED_MISSION_VEHICLES()"
    },
    "GET_NUM_CREATED_MISSION_OBJECTS": {
      "prefix": "GET_NUM_CREATED_MISSION_OBJECTS()",
      "body": ["GET_NUM_CREATED_MISSION_OBJECTS(${1:BOOL p0})"],
      "description": "GET_NUM_CREATED_MISSION_OBJECTS()"
    },
    "GET_NUM_CREATED_MISSION_PEDS": {
      "prefix": "GET_NUM_CREATED_MISSION_PEDS()",
      "body": ["GET_NUM_CREATED_MISSION_PEDS(${1:BOOL p0})"],
      "description": "GET_NUM_CREATED_MISSION_PEDS()"
    },
    "GET_NUM_CREATED_MISSION_VEHICLES": {
      "prefix": "GET_NUM_CREATED_MISSION_VEHICLES()",
      "body": ["GET_NUM_CREATED_MISSION_VEHICLES(${1:BOOL p0})"],
      "description": "GET_NUM_CREATED_MISSION_VEHICLES()"
    },
    "GET_RESERVED_MISSION_ENTITIES_IN_AREA": {
      "prefix": "GET_RESERVED_MISSION_ENTITIES_IN_AREA()",
      "body": [
        "GET_RESERVED_MISSION_ENTITIES_IN_AREA(${1:float x}, ${2:float y}, ${3:float z}, ${4:Any p3}, ${5:Any* out1}, ${6:Any* out2}, ${7:Any* out3})"
      ],
      "description": "GET_RESERVED_MISSION_ENTITIES_IN_AREA()"
    },
    "GET_MAX_NUM_NETWORK_OBJECTS": {
      "prefix": "GET_MAX_NUM_NETWORK_OBJECTS()",
      "body": ["GET_MAX_NUM_NETWORK_OBJECTS()"],
      "description": "GET_MAX_NUM_NETWORK_OBJECTS()"
    },
    "GET_MAX_NUM_NETWORK_PEDS": {
      "prefix": "GET_MAX_NUM_NETWORK_PEDS()",
      "body": ["GET_MAX_NUM_NETWORK_PEDS()"],
      "description": "GET_MAX_NUM_NETWORK_PEDS()"
    },
    "GET_MAX_NUM_NETWORK_VEHICLES": {
      "prefix": "GET_MAX_NUM_NETWORK_VEHICLES()",
      "body": ["GET_MAX_NUM_NETWORK_VEHICLES()"],
      "description": "GET_MAX_NUM_NETWORK_VEHICLES()"
    },
    "GET_MAX_NUM_NETWORK_PICKUPS": {
      "prefix": "GET_MAX_NUM_NETWORK_PICKUPS()",
      "body": ["GET_MAX_NUM_NETWORK_PICKUPS()"],
      "description": "GET_MAX_NUM_NETWORK_PICKUPS()"
    },
    "NETWORK_SET_OBJECT_SCOPE_DISTANCE": {
      "prefix": "NETWORK_SET_OBJECT_SCOPE_DISTANCE()",
      "body": [
        "NETWORK_SET_OBJECT_SCOPE_DISTANCE(${1:Object object}, ${2:float range})"
      ],
      "description": "NETWORK_SET_OBJECT_SCOPE_DISTANCE()"
    },
    "NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL": {
      "prefix": "NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL()",
      "body": [
        "NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL()"
    },
    "NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER": {
      "prefix": "NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER()",
      "body": ["NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER(${1:Any p0})"],
      "description": "NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER()"
    },
    "GET_NETWORK_TIME": {
      "prefix": "GET_NETWORK_TIME()",
      "body": ["GET_NETWORK_TIME()"],
      "description": "GET_NETWORK_TIME()"
    },
    "GET_NETWORK_TIME_ACCURATE": {
      "prefix": "GET_NETWORK_TIME_ACCURATE()",
      "body": ["GET_NETWORK_TIME_ACCURATE()"],
      "description": "GET_NETWORK_TIME_ACCURATE()"
    },
    "HAS_NETWORK_TIME_STARTED": {
      "prefix": "HAS_NETWORK_TIME_STARTED()",
      "body": ["HAS_NETWORK_TIME_STARTED()"],
      "description": "HAS_NETWORK_TIME_STARTED()"
    },
    "GET_TIME_OFFSET": {
      "prefix": "GET_TIME_OFFSET()",
      "body": ["GET_TIME_OFFSET(${1:int timeA}, ${2:int timeB})"],
      "description": "GET_TIME_OFFSET()"
    },
    "IS_TIME_LESS_THAN": {
      "prefix": "IS_TIME_LESS_THAN()",
      "body": ["IS_TIME_LESS_THAN(${1:int timeA}, ${2:int timeB})"],
      "description": "IS_TIME_LESS_THAN()"
    },
    "IS_TIME_MORE_THAN": {
      "prefix": "IS_TIME_MORE_THAN()",
      "body": ["IS_TIME_MORE_THAN(${1:int timeA}, ${2:int timeB})"],
      "description": "IS_TIME_MORE_THAN()"
    },
    "IS_TIME_EQUAL_TO": {
      "prefix": "IS_TIME_EQUAL_TO()",
      "body": ["IS_TIME_EQUAL_TO(${1:int timeA}, ${2:int timeB})"],
      "description": "IS_TIME_EQUAL_TO()"
    },
    "GET_TIME_DIFFERENCE": {
      "prefix": "GET_TIME_DIFFERENCE()",
      "body": ["GET_TIME_DIFFERENCE(${1:int timeA}, ${2:int timeB})"],
      "description": "GET_TIME_DIFFERENCE()"
    },
    "GET_CLOUD_TIME_AS_INT": {
      "prefix": "GET_CLOUD_TIME_AS_INT()",
      "body": ["GET_CLOUD_TIME_AS_INT()"],
      "description": "GET_CLOUD_TIME_AS_INT()"
    },
    "CONVERT_POSIX_TIME": {
      "prefix": "CONVERT_POSIX_TIME()",
      "body": ["CONVERT_POSIX_TIME(${1:int posixTime}, ${2:Any* timeStructure})"],
      "description": "CONVERT_POSIX_TIME()"
    },
    "NETWORK_SET_IN_SPECTATOR_MODE": {
      "prefix": "NETWORK_SET_IN_SPECTATOR_MODE()",
      "body": [
        "NETWORK_SET_IN_SPECTATOR_MODE(${1:BOOL toggle}, ${2:Ped playerPed})"
      ],
      "description": "NETWORK_SET_IN_SPECTATOR_MODE()"
    },
    "NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED": {
      "prefix": "NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED()",
      "body": [
        "NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED(${1:BOOL toggle}, ${2:Ped playerPed}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED()"
    },
    "NETWORK_SET_IN_FREE_CAM_MODE": {
      "prefix": "NETWORK_SET_IN_FREE_CAM_MODE()",
      "body": ["NETWORK_SET_IN_FREE_CAM_MODE(${1:BOOL toggle})"],
      "description": "NETWORK_SET_IN_FREE_CAM_MODE()"
    },
    "NETWORK_SET_ANTAGONISTIC_TO_PLAYER": {
      "prefix": "NETWORK_SET_ANTAGONISTIC_TO_PLAYER()",
      "body": [
        "NETWORK_SET_ANTAGONISTIC_TO_PLAYER(${1:BOOL toggle}, ${2:Player player})"
      ],
      "description": "NETWORK_SET_ANTAGONISTIC_TO_PLAYER()"
    },
    "NETWORK_IS_IN_SPECTATOR_MODE": {
      "prefix": "NETWORK_IS_IN_SPECTATOR_MODE()",
      "body": ["NETWORK_IS_IN_SPECTATOR_MODE()"],
      "description": "NETWORK_IS_IN_SPECTATOR_MODE()"
    },
    "NETWORK_SET_IN_MP_CUTSCENE": {
      "prefix": "NETWORK_SET_IN_MP_CUTSCENE()",
      "body": ["NETWORK_SET_IN_MP_CUTSCENE(${1:BOOL p0}, ${2:BOOL p1})"],
      "description": "NETWORK_SET_IN_MP_CUTSCENE()"
    },
    "NETWORK_IS_IN_MP_CUTSCENE": {
      "prefix": "NETWORK_IS_IN_MP_CUTSCENE()",
      "body": ["NETWORK_IS_IN_MP_CUTSCENE()"],
      "description": "NETWORK_IS_IN_MP_CUTSCENE()"
    },
    "NETWORK_IS_PLAYER_IN_MP_CUTSCENE": {
      "prefix": "NETWORK_IS_PLAYER_IN_MP_CUTSCENE()",
      "body": ["NETWORK_IS_PLAYER_IN_MP_CUTSCENE(${1:Player player})"],
      "description": "NETWORK_IS_PLAYER_IN_MP_CUTSCENE()"
    },
    "NETWORK_HIDE_PROJECTILE_IN_CUTSCENE": {
      "prefix": "NETWORK_HIDE_PROJECTILE_IN_CUTSCENE()",
      "body": ["NETWORK_HIDE_PROJECTILE_IN_CUTSCENE()"],
      "description": "NETWORK_HIDE_PROJECTILE_IN_CUTSCENE()"
    },
    "SET_NETWORK_VEHICLE_RESPOT_TIMER": {
      "prefix": "SET_NETWORK_VEHICLE_RESPOT_TIMER()",
      "body": [
        "SET_NETWORK_VEHICLE_RESPOT_TIMER(${1:int netId}, ${2:int time}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "SET_NETWORK_VEHICLE_RESPOT_TIMER()"
    },
    "IS_NETWORK_VEHICLE_RUNNING_RESPOT_TIMER": {
      "prefix": "IS_NETWORK_VEHICLE_RUNNING_RESPOT_TIMER()",
      "body": ["IS_NETWORK_VEHICLE_RUNNING_RESPOT_TIMER(${1:int networkID})"],
      "description": "IS_NETWORK_VEHICLE_RUNNING_RESPOT_TIMER()"
    },
    "SET_NETWORK_VEHICLE_AS_GHOST": {
      "prefix": "SET_NETWORK_VEHICLE_AS_GHOST()",
      "body": [
        "SET_NETWORK_VEHICLE_AS_GHOST(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_NETWORK_VEHICLE_AS_GHOST()"
    },
    "SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER": {
      "prefix": "SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER()",
      "body": [
        "SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER(${1:Vehicle vehicle}, ${2:float multiplier})"
      ],
      "description": "SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER()"
    },
    "SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION": {
      "prefix": "SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION()",
      "body": [
        "SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION()"
    },
    "SET_LOCAL_PLAYER_AS_GHOST": {
      "prefix": "SET_LOCAL_PLAYER_AS_GHOST()",
      "body": ["SET_LOCAL_PLAYER_AS_GHOST(${1:BOOL toggle}, ${2:BOOL p1})"],
      "description": "SET_LOCAL_PLAYER_AS_GHOST()"
    },
    "IS_ENTITY_A_GHOST": {
      "prefix": "IS_ENTITY_A_GHOST()",
      "body": ["IS_ENTITY_A_GHOST(${1:Entity entity})"],
      "description": "IS_ENTITY_A_GHOST()"
    },
    "SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS": {
      "prefix": "SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS()",
      "body": ["SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS(${1:BOOL p0})"],
      "description": "SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS()"
    },
    "SET_REMOTE_PLAYER_AS_GHOST": {
      "prefix": "SET_REMOTE_PLAYER_AS_GHOST()",
      "body": ["SET_REMOTE_PLAYER_AS_GHOST(${1:Player player}, ${2:BOOL p1})"],
      "description": "SET_REMOTE_PLAYER_AS_GHOST()"
    },
    "SET_GHOST_ALPHA": {
      "prefix": "SET_GHOST_ALPHA()",
      "body": ["SET_GHOST_ALPHA(${1:int alpha})"],
      "description": "SET_GHOST_ALPHA()"
    },
    "RESET_GHOST_ALPHA": {
      "prefix": "RESET_GHOST_ALPHA()",
      "body": ["RESET_GHOST_ALPHA()"],
      "description": "RESET_GHOST_ALPHA()"
    },
    "SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS": {
      "prefix": "SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS()",
      "body": [
        "SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS()"
    },
    "SET_INVERT_GHOSTING": {
      "prefix": "SET_INVERT_GHOSTING()",
      "body": ["SET_INVERT_GHOSTING(${1:BOOL p0})"],
      "description": "SET_INVERT_GHOSTING()"
    },
    "IS_ENTITY_IN_GHOST_COLLISION": {
      "prefix": "IS_ENTITY_IN_GHOST_COLLISION()",
      "body": ["IS_ENTITY_IN_GHOST_COLLISION(${1:Entity entity})"],
      "description": "IS_ENTITY_IN_GHOST_COLLISION()"
    },
    "USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR": {
      "prefix": "USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR()",
      "body": ["USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR(${1:BOOL toggle})"],
      "description": "USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR()"
    },
    "NETWORK_CREATE_SYNCHRONISED_SCENE": {
      "prefix": "NETWORK_CREATE_SYNCHRONISED_SCENE()",
      "body": [
        "NETWORK_CREATE_SYNCHRONISED_SCENE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float xRot}, ${5:float yRot}, ${6:float zRot}, ${7:int rotationOrder}, ${8:BOOL useOcclusionPortal}, ${9:BOOL looped}, ${10:float p9}, ${11:float animTime}, ${12:float p11})"
      ],
      "description": "NETWORK_CREATE_SYNCHRONISED_SCENE()"
    },
    "NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE": {
      "prefix": "NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE()",
      "body": [
        "NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(${1:Ped ped}, ${2:int netScene}, ${3:const char* animDict}, ${4:const char* animnName}, ${5:float speed}, ${6:float speedMultiplier}, ${7:int duration}, ${8:int flag}, ${9:float playbackRate}, ${10:Any p9})"
      ],
      "description": "NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE()"
    },
    "NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK": {
      "prefix": "NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK()",
      "body": [
        "NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:Any p9})"
      ],
      "description": "NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK()"
    },
    "NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE": {
      "prefix": "NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE()",
      "body": [
        "NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE(${1:Entity entity}, ${2:int netScene}, ${3:const char* animDict}, ${4:const char* animName}, ${5:float speed}, ${6:float speedMulitiplier}, ${7:int flag})"
      ],
      "description": "NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE()"
    },
    "NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE": {
      "prefix": "NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE()",
      "body": [
        "NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE(${1:int netScene}, ${2:Hash modelHash}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float p5}, ${7:const char* p6}, ${8:float p7}, ${9:float p8}, ${10:int flags})"
      ],
      "description": "NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE()"
    },
    "NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA": {
      "prefix": "NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA()",
      "body": [
        "NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA(${1:int netScene}, ${2:const char* animDict}, ${3:const char* animName})"
      ],
      "description": "NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA()"
    },
    "NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY": {
      "prefix": "NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY()",
      "body": [
        "NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY(${1:int netScene}, ${2:Entity entity}, ${3:int bone})"
      ],
      "description": "NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY()"
    },
    "NETWORK_START_SYNCHRONISED_SCENE": {
      "prefix": "NETWORK_START_SYNCHRONISED_SCENE()",
      "body": ["NETWORK_START_SYNCHRONISED_SCENE(${1:int netScene})"],
      "description": "NETWORK_START_SYNCHRONISED_SCENE()"
    },
    "NETWORK_STOP_SYNCHRONISED_SCENE": {
      "prefix": "NETWORK_STOP_SYNCHRONISED_SCENE()",
      "body": ["NETWORK_STOP_SYNCHRONISED_SCENE(${1:int netScene})"],
      "description": "NETWORK_STOP_SYNCHRONISED_SCENE()"
    },
    "NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID": {
      "prefix": "NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID()",
      "body": ["NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(${1:int netId})"],
      "description": "NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID()"
    },
    "NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA": {
      "prefix": "NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA()",
      "body": [
        "NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA(${1:int netScene})"
      ],
      "description": "NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA()"
    },
    "NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS": {
      "prefix": "NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS()",
      "body": [
        "NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS(${1:Any p0})"
      ],
      "description": "NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS()"
    },
    "NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS": {
      "prefix": "NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS()",
      "body": ["NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS(${1:int p0}, ${2:Any p1})"],
      "description": "NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS()"
    },
    "NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER": {
      "prefix": "NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER()",
      "body": [
        "NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER(${1:Player player}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:int flags})"
      ],
      "description": "NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER()"
    },
    "NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER": {
      "prefix": "NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER()",
      "body": [
        "NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER(${1:Player player}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2}, ${8:float width}, ${9:float p8}, ${10:float p9}, ${11:float p10}, ${12:int flags})"
      ],
      "description": "NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER()"
    },
    "NETWORK_QUERY_RESPAWN_RESULTS": {
      "prefix": "NETWORK_QUERY_RESPAWN_RESULTS()",
      "body": ["NETWORK_QUERY_RESPAWN_RESULTS(${1:Any* p0})"],
      "description": "NETWORK_QUERY_RESPAWN_RESULTS()"
    },
    "NETWORK_CANCEL_RESPAWN_SEARCH": {
      "prefix": "NETWORK_CANCEL_RESPAWN_SEARCH()",
      "body": ["NETWORK_CANCEL_RESPAWN_SEARCH()"],
      "description": "NETWORK_CANCEL_RESPAWN_SEARCH()"
    },
    "NETWORK_GET_RESPAWN_RESULT": {
      "prefix": "NETWORK_GET_RESPAWN_RESULT()",
      "body": [
        "NETWORK_GET_RESPAWN_RESULT(${1:int randomInt}, ${2:Vector3* coordinates}, ${3:float* heading})"
      ],
      "description": "NETWORK_GET_RESPAWN_RESULT()"
    },
    "NETWORK_GET_RESPAWN_RESULT_FLAGS": {
      "prefix": "NETWORK_GET_RESPAWN_RESULT_FLAGS()",
      "body": ["NETWORK_GET_RESPAWN_RESULT_FLAGS(${1:int p0})"],
      "description": "NETWORK_GET_RESPAWN_RESULT_FLAGS()"
    },
    "NETWORK_START_SOLO_TUTORIAL_SESSION": {
      "prefix": "NETWORK_START_SOLO_TUTORIAL_SESSION()",
      "body": ["NETWORK_START_SOLO_TUTORIAL_SESSION()"],
      "description": "NETWORK_START_SOLO_TUTORIAL_SESSION()"
    },
    "NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION": {
      "prefix": "NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION()",
      "body": [
        "NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION(${1:int teamId}, ${2:int instanceId})"
      ],
      "description": "NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION()"
    },
    "NETWORK_END_TUTORIAL_SESSION": {
      "prefix": "NETWORK_END_TUTORIAL_SESSION()",
      "body": ["NETWORK_END_TUTORIAL_SESSION()"],
      "description": "NETWORK_END_TUTORIAL_SESSION()"
    },
    "NETWORK_IS_IN_TUTORIAL_SESSION": {
      "prefix": "NETWORK_IS_IN_TUTORIAL_SESSION()",
      "body": ["NETWORK_IS_IN_TUTORIAL_SESSION()"],
      "description": "NETWORK_IS_IN_TUTORIAL_SESSION()"
    },
    "NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION": {
      "prefix": "NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION()",
      "body": ["NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION()"],
      "description": "NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION()"
    },
    "NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING": {
      "prefix": "NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING()",
      "body": ["NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING()"],
      "description": "NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING()"
    },
    "NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE": {
      "prefix": "NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE()",
      "body": [
        "NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE(${1:Player player})"
      ],
      "description": "NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE()"
    },
    "NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION": {
      "prefix": "NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION()",
      "body": [
        "NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION(${1:Player player}, ${2:int index})"
      ],
      "description": "NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION()"
    },
    "NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS": {
      "prefix": "NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS()",
      "body": [
        "NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS(${1:Any p0})"
      ],
      "description": "NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS()"
    },
    "NETWORK_CONCEAL_PLAYER": {
      "prefix": "NETWORK_CONCEAL_PLAYER()",
      "body": [
        "NETWORK_CONCEAL_PLAYER(${1:Player player}, ${2:BOOL toggle}, ${3:BOOL p2})"
      ],
      "description": "NETWORK_CONCEAL_PLAYER()"
    },
    "NETWORK_IS_PLAYER_CONCEALED": {
      "prefix": "NETWORK_IS_PLAYER_CONCEALED()",
      "body": ["NETWORK_IS_PLAYER_CONCEALED(${1:Player player})"],
      "description": "NETWORK_IS_PLAYER_CONCEALED()"
    },
    "NETWORK_CONCEAL_ENTITY": {
      "prefix": "NETWORK_CONCEAL_ENTITY()",
      "body": ["NETWORK_CONCEAL_ENTITY(${1:Entity entity}, ${2:BOOL toggle})"],
      "description": "NETWORK_CONCEAL_ENTITY()"
    },
    "NETWORK_IS_ENTITY_CONCEALED": {
      "prefix": "NETWORK_IS_ENTITY_CONCEALED()",
      "body": ["NETWORK_IS_ENTITY_CONCEALED(${1:Entity entity})"],
      "description": "NETWORK_IS_ENTITY_CONCEALED()"
    },
    "NETWORK_OVERRIDE_CLOCK_TIME": {
      "prefix": "NETWORK_OVERRIDE_CLOCK_TIME()",
      "body": [
        "NETWORK_OVERRIDE_CLOCK_TIME(${1:int hours}, ${2:int minutes}, ${3:int seconds})"
      ],
      "description": "NETWORK_OVERRIDE_CLOCK_TIME()"
    },
    "NETWORK_OVERRIDE_CLOCK_RATE": {
      "prefix": "NETWORK_OVERRIDE_CLOCK_RATE()",
      "body": ["NETWORK_OVERRIDE_CLOCK_RATE(${1:int ms})"],
      "description": "NETWORK_OVERRIDE_CLOCK_RATE()"
    },
    "NETWORK_CLEAR_CLOCK_TIME_OVERRIDE": {
      "prefix": "NETWORK_CLEAR_CLOCK_TIME_OVERRIDE()",
      "body": ["NETWORK_CLEAR_CLOCK_TIME_OVERRIDE()"],
      "description": "NETWORK_CLEAR_CLOCK_TIME_OVERRIDE()"
    },
    "NETWORK_IS_CLOCK_TIME_OVERRIDDEN": {
      "prefix": "NETWORK_IS_CLOCK_TIME_OVERRIDDEN()",
      "body": ["NETWORK_IS_CLOCK_TIME_OVERRIDDEN()"],
      "description": "NETWORK_IS_CLOCK_TIME_OVERRIDDEN()"
    },
    "NETWORK_ADD_ENTITY_AREA": {
      "prefix": "NETWORK_ADD_ENTITY_AREA()",
      "body": [
        "NETWORK_ADD_ENTITY_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
      ],
      "description": "NETWORK_ADD_ENTITY_AREA()"
    },
    "NETWORK_ADD_ENTITY_ANGLED_AREA": {
      "prefix": "NETWORK_ADD_ENTITY_ANGLED_AREA()",
      "body": [
        "NETWORK_ADD_ENTITY_ANGLED_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float width})"
      ],
      "description": "NETWORK_ADD_ENTITY_ANGLED_AREA()"
    },
    "NETWORK_ADD_CLIENT_ENTITY_AREA": {
      "prefix": "NETWORK_ADD_CLIENT_ENTITY_AREA()",
      "body": [
        "NETWORK_ADD_CLIENT_ENTITY_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
      ],
      "description": "NETWORK_ADD_CLIENT_ENTITY_AREA()"
    },
    "NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA": {
      "prefix": "NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA()",
      "body": [
        "NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float radius})"
      ],
      "description": "NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA()"
    },
    "NETWORK_REMOVE_ENTITY_AREA": {
      "prefix": "NETWORK_REMOVE_ENTITY_AREA()",
      "body": ["NETWORK_REMOVE_ENTITY_AREA(${1:int areaHandle})"],
      "description": "NETWORK_REMOVE_ENTITY_AREA()"
    },
    "NETWORK_ENTITY_AREA_DOES_EXIST": {
      "prefix": "NETWORK_ENTITY_AREA_DOES_EXIST()",
      "body": ["NETWORK_ENTITY_AREA_DOES_EXIST(${1:int areaHandle})"],
      "description": "NETWORK_ENTITY_AREA_DOES_EXIST()"
    },
    "NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED": {
      "prefix": "NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED()",
      "body": ["NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED(${1:int areaHandle})"],
      "description": "NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED()"
    },
    "NETWORK_ENTITY_AREA_IS_OCCUPIED": {
      "prefix": "NETWORK_ENTITY_AREA_IS_OCCUPIED()",
      "body": ["NETWORK_ENTITY_AREA_IS_OCCUPIED(${1:int areaHandle})"],
      "description": "NETWORK_ENTITY_AREA_IS_OCCUPIED()"
    },
    "NETWORK_USE_HIGH_PRECISION_BLENDING": {
      "prefix": "NETWORK_USE_HIGH_PRECISION_BLENDING()",
      "body": [
        "NETWORK_USE_HIGH_PRECISION_BLENDING(${1:int netID}, ${2:BOOL toggle})"
      ],
      "description": "NETWORK_USE_HIGH_PRECISION_BLENDING()"
    },
    "NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS": {
      "prefix": "NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS()",
      "body": ["NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS(${1:int netId})"],
      "description": "NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS()"
    },
    "NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION": {
      "prefix": "NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION()",
      "body": [
        "NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION(${1:int netId}, ${2:BOOL toggle})"
      ],
      "description": "NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION()"
    },
    "NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS": {
      "prefix": "NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS()",
      "body": ["NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS()"],
      "description": "NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS()"
    },
    "NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING": {
      "prefix": "NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING()",
      "body": ["NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING()"],
      "description": "NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING()"
    },
    "NETWORK_REQUEST_CLOUD_TUNABLES": {
      "prefix": "NETWORK_REQUEST_CLOUD_TUNABLES()",
      "body": ["NETWORK_REQUEST_CLOUD_TUNABLES()"],
      "description": "NETWORK_REQUEST_CLOUD_TUNABLES()"
    },
    "NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING": {
      "prefix": "NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING()",
      "body": ["NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING()"],
      "description": "NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING()"
    },
    "NETWORK_GET_TUNABLE_CLOUD_CRC": {
      "prefix": "NETWORK_GET_TUNABLE_CLOUD_CRC()",
      "body": ["NETWORK_GET_TUNABLE_CLOUD_CRC()"],
      "description": "NETWORK_GET_TUNABLE_CLOUD_CRC()"
    },
    "NETWORK_DOES_TUNABLE_EXIST": {
      "prefix": "NETWORK_DOES_TUNABLE_EXIST()",
      "body": [
        "NETWORK_DOES_TUNABLE_EXIST(${1:const char* tunableContext}, ${2:const char* tunableName})"
      ],
      "description": "NETWORK_DOES_TUNABLE_EXIST()"
    },
    "NETWORK_ACCESS_TUNABLE_INT": {
      "prefix": "NETWORK_ACCESS_TUNABLE_INT()",
      "body": [
        "NETWORK_ACCESS_TUNABLE_INT(${1:const char* tunableContext}, ${2:const char* tunableName}, ${3:int* value})"
      ],
      "description": "NETWORK_ACCESS_TUNABLE_INT()"
    },
    "NETWORK_ACCESS_TUNABLE_FLOAT": {
      "prefix": "NETWORK_ACCESS_TUNABLE_FLOAT()",
      "body": [
        "NETWORK_ACCESS_TUNABLE_FLOAT(${1:const char* tunableContext}, ${2:const char* tunableName}, ${3:float* value})"
      ],
      "description": "NETWORK_ACCESS_TUNABLE_FLOAT()"
    },
    "NETWORK_ACCESS_TUNABLE_BOOL": {
      "prefix": "NETWORK_ACCESS_TUNABLE_BOOL()",
      "body": [
        "NETWORK_ACCESS_TUNABLE_BOOL(${1:const char* tunableContext}, ${2:const char* tunableName})"
      ],
      "description": "NETWORK_ACCESS_TUNABLE_BOOL()"
    },
    "NETWORK_DOES_TUNABLE_EXIST_HASH": {
      "prefix": "NETWORK_DOES_TUNABLE_EXIST_HASH()",
      "body": [
        "NETWORK_DOES_TUNABLE_EXIST_HASH(${1:Hash tunableContext}, ${2:Hash tunableName})"
      ],
      "description": "NETWORK_DOES_TUNABLE_EXIST_HASH()"
    },
    "NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR": {
      "prefix": "NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR()",
      "body": ["NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR()"],
      "description": "NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR()"
    },
    "NETWORK_ACCESS_TUNABLE_INT_HASH": {
      "prefix": "NETWORK_ACCESS_TUNABLE_INT_HASH()",
      "body": [
        "NETWORK_ACCESS_TUNABLE_INT_HASH(${1:Hash tunableContext}, ${2:Hash tunableName}, ${3:int* value})"
      ],
      "description": "NETWORK_ACCESS_TUNABLE_INT_HASH()"
    },
    "NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH": {
      "prefix": "NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH()",
      "body": [
        "NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH(${1:Hash contextHash}, ${2:Hash nameHash}, ${3:int* value})"
      ],
      "description": "NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH()"
    },
    "NETWORK_ACCESS_TUNABLE_FLOAT_HASH": {
      "prefix": "NETWORK_ACCESS_TUNABLE_FLOAT_HASH()",
      "body": [
        "NETWORK_ACCESS_TUNABLE_FLOAT_HASH(${1:Hash tunableContext}, ${2:Hash tunableName}, ${3:float* value})"
      ],
      "description": "NETWORK_ACCESS_TUNABLE_FLOAT_HASH()"
    },
    "NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH": {
      "prefix": "NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH()",
      "body": [
        "NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH(${1:Hash contextHash}, ${2:Hash nameHash}, ${3:float* value})"
      ],
      "description": "NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH()"
    },
    "NETWORK_ACCESS_TUNABLE_BOOL_HASH": {
      "prefix": "NETWORK_ACCESS_TUNABLE_BOOL_HASH()",
      "body": [
        "NETWORK_ACCESS_TUNABLE_BOOL_HASH(${1:Hash tunableContext}, ${2:Hash tunableName})"
      ],
      "description": "NETWORK_ACCESS_TUNABLE_BOOL_HASH()"
    },
    "NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH": {
      "prefix": "NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH()",
      "body": [
        "NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH(${1:Hash contextHash}, ${2:Hash nameHash}, ${3:BOOL* value})"
      ],
      "description": "NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH()"
    },
    "NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH": {
      "prefix": "NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH()",
      "body": [
        "NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH(${1:Hash tunableContext}, ${2:Hash tunableName}, ${3:BOOL defaultValue})"
      ],
      "description": "NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH()"
    },
    "NETWORK_GET_CONTENT_MODIFIER_LIST_ID": {
      "prefix": "NETWORK_GET_CONTENT_MODIFIER_LIST_ID()",
      "body": ["NETWORK_GET_CONTENT_MODIFIER_LIST_ID(${1:Hash contentHash})"],
      "description": "NETWORK_GET_CONTENT_MODIFIER_LIST_ID()"
    },
    "NETWORK_GET_BONE_ID_OF_FATAL_HIT": {
      "prefix": "NETWORK_GET_BONE_ID_OF_FATAL_HIT()",
      "body": ["NETWORK_GET_BONE_ID_OF_FATAL_HIT()"],
      "description": "NETWORK_GET_BONE_ID_OF_FATAL_HIT()"
    },
    "NETWORK_RESET_BODY_TRACKER": {
      "prefix": "NETWORK_RESET_BODY_TRACKER()",
      "body": ["NETWORK_RESET_BODY_TRACKER()"],
      "description": "NETWORK_RESET_BODY_TRACKER()"
    },
    "NETWORK_GET_NUMBER_BODY_TRACKER_HITS": {
      "prefix": "NETWORK_GET_NUMBER_BODY_TRACKER_HITS()",
      "body": ["NETWORK_GET_NUMBER_BODY_TRACKER_HITS()"],
      "description": "NETWORK_GET_NUMBER_BODY_TRACKER_HITS()"
    },
    "NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER": {
      "prefix": "NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER()",
      "body": ["NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER(${1:int boneIndex})"],
      "description": "NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER()"
    },
    "NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER": {
      "prefix": "NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER()",
      "body": [
        "NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER(${1:Ped ped}, ${2:Player player})"
      ],
      "description": "NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER()"
    },
    "NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE": {
      "prefix": "NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE()",
      "body": [
        "NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE()"
    },
    "NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH": {
      "prefix": "NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH()",
      "body": [
        "NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH()"
    },
    "NETWORK_SET_NO_LONGER_NEEDED": {
      "prefix": "NETWORK_SET_NO_LONGER_NEEDED()",
      "body": [
        "NETWORK_SET_NO_LONGER_NEEDED(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "NETWORK_SET_NO_LONGER_NEEDED()"
    },
    "NETWORK_EXPLODE_VEHICLE": {
      "prefix": "NETWORK_EXPLODE_VEHICLE()",
      "body": [
        "NETWORK_EXPLODE_VEHICLE(${1:Vehicle vehicle}, ${2:BOOL isAudible}, ${3:BOOL isInvisible}, ${4:int netId})"
      ],
      "description": "NETWORK_EXPLODE_VEHICLE()"
    },
    "NETWORK_EXPLODE_HELI": {
      "prefix": "NETWORK_EXPLODE_HELI()",
      "body": [
        "NETWORK_EXPLODE_HELI(${1:Vehicle vehicle}, ${2:BOOL isAudible}, ${3:BOOL isInvisible}, ${4:int netId})"
      ],
      "description": "NETWORK_EXPLODE_HELI()"
    },
    "NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME": {
      "prefix": "NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME()",
      "body": ["NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME(${1:Entity entity})"],
      "description": "NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME()"
    },
    "NETWORK_OVERRIDE_COORDS_AND_HEADING": {
      "prefix": "NETWORK_OVERRIDE_COORDS_AND_HEADING()",
      "body": [
        "NETWORK_OVERRIDE_COORDS_AND_HEADING(${1:Entity entity}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float heading})"
      ],
      "description": "NETWORK_OVERRIDE_COORDS_AND_HEADING()"
    },
    "NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS": {
      "prefix": "NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS()",
      "body": [
        "NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS(${1:int netId}, ${2:BOOL toggle})"
      ],
      "description": "NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS()"
    },
    "NETWORK_DISABLE_PROXIMITY_MIGRATION": {
      "prefix": "NETWORK_DISABLE_PROXIMITY_MIGRATION()",
      "body": ["NETWORK_DISABLE_PROXIMITY_MIGRATION(${1:int netID})"],
      "description": "NETWORK_DISABLE_PROXIMITY_MIGRATION()"
    },
    "NETWORK_SET_PROPERTY_ID": {
      "prefix": "NETWORK_SET_PROPERTY_ID()",
      "body": ["NETWORK_SET_PROPERTY_ID(${1:int id})"],
      "description": "NETWORK_SET_PROPERTY_ID()"
    },
    "NETWORK_CLEAR_PROPERTY_ID": {
      "prefix": "NETWORK_CLEAR_PROPERTY_ID()",
      "body": ["NETWORK_CLEAR_PROPERTY_ID()"],
      "description": "NETWORK_CLEAR_PROPERTY_ID()"
    },
    "NETWORK_SET_PLAYER_MENTAL_STATE": {
      "prefix": "NETWORK_SET_PLAYER_MENTAL_STATE()",
      "body": ["NETWORK_SET_PLAYER_MENTAL_STATE(${1:int p0})"],
      "description": "NETWORK_SET_PLAYER_MENTAL_STATE()"
    },
    "NETWORK_SET_MINIMUM_RANK_FOR_MISSION": {
      "prefix": "NETWORK_SET_MINIMUM_RANK_FOR_MISSION()",
      "body": ["NETWORK_SET_MINIMUM_RANK_FOR_MISSION(${1:BOOL p0})"],
      "description": "NETWORK_SET_MINIMUM_RANK_FOR_MISSION()"
    },
    "NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA": {
      "prefix": "NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA()",
      "body": ["NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA()"],
      "description": "NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA()"
    },
    "NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA": {
      "prefix": "NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA()",
      "body": ["NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA(${1:Player player})"],
      "description": "NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA()"
    },
    "NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA": {
      "prefix": "NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA()",
      "body": [
        "NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA(${1:Ped ped}, ${2:Player player})"
      ],
      "description": "NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA()"
    },
    "GET_NUM_COMMERCE_ITEMS": {
      "prefix": "GET_NUM_COMMERCE_ITEMS()",
      "body": ["GET_NUM_COMMERCE_ITEMS()"],
      "description": "GET_NUM_COMMERCE_ITEMS()"
    },
    "IS_COMMERCE_DATA_VALID": {
      "prefix": "IS_COMMERCE_DATA_VALID()",
      "body": ["IS_COMMERCE_DATA_VALID()"],
      "description": "IS_COMMERCE_DATA_VALID()"
    },
    "TRIGGER_COMMERCE_DATA_FETCH": {
      "prefix": "TRIGGER_COMMERCE_DATA_FETCH()",
      "body": ["TRIGGER_COMMERCE_DATA_FETCH(${1:Any p0})"],
      "description": "TRIGGER_COMMERCE_DATA_FETCH()"
    },
    "IS_COMMERCE_DATA_FETCH_IN_PROGRESS": {
      "prefix": "IS_COMMERCE_DATA_FETCH_IN_PROGRESS()",
      "body": ["IS_COMMERCE_DATA_FETCH_IN_PROGRESS()"],
      "description": "IS_COMMERCE_DATA_FETCH_IN_PROGRESS()"
    },
    "GET_COMMERCE_ITEM_NUM_CATS": {
      "prefix": "GET_COMMERCE_ITEM_NUM_CATS()",
      "body": ["GET_COMMERCE_ITEM_NUM_CATS(${1:int index})"],
      "description": "GET_COMMERCE_ITEM_NUM_CATS()"
    },
    "OPEN_COMMERCE_STORE": {
      "prefix": "OPEN_COMMERCE_STORE()",
      "body": [
        "OPEN_COMMERCE_STORE(${1:const char* p0}, ${2:const char* p1}, ${3:int p2})"
      ],
      "description": "OPEN_COMMERCE_STORE()"
    },
    "IS_COMMERCE_STORE_OPEN": {
      "prefix": "IS_COMMERCE_STORE_OPEN()",
      "body": ["IS_COMMERCE_STORE_OPEN()"],
      "description": "IS_COMMERCE_STORE_OPEN()"
    },
    "SET_STORE_ENABLED": {
      "prefix": "SET_STORE_ENABLED()",
      "body": ["SET_STORE_ENABLED(${1:BOOL toggle})"],
      "description": "SET_STORE_ENABLED()"
    },
    "REQUEST_COMMERCE_ITEM_IMAGE": {
      "prefix": "REQUEST_COMMERCE_ITEM_IMAGE()",
      "body": ["REQUEST_COMMERCE_ITEM_IMAGE(${1:int index})"],
      "description": "REQUEST_COMMERCE_ITEM_IMAGE()"
    },
    "RELEASE_ALL_COMMERCE_ITEM_IMAGES": {
      "prefix": "RELEASE_ALL_COMMERCE_ITEM_IMAGES()",
      "body": ["RELEASE_ALL_COMMERCE_ITEM_IMAGES()"],
      "description": "RELEASE_ALL_COMMERCE_ITEM_IMAGES()"
    },
    "IS_STORE_AVAILABLE_TO_USER": {
      "prefix": "IS_STORE_AVAILABLE_TO_USER()",
      "body": ["IS_STORE_AVAILABLE_TO_USER()"],
      "description": "IS_STORE_AVAILABLE_TO_USER()"
    },
    "DELAY_MP_STORE_OPEN": {
      "prefix": "DELAY_MP_STORE_OPEN()",
      "body": ["DELAY_MP_STORE_OPEN()"],
      "description": "DELAY_MP_STORE_OPEN()"
    },
    "RESET_STORE_NETWORK_GAME_TRACKING": {
      "prefix": "RESET_STORE_NETWORK_GAME_TRACKING()",
      "body": ["RESET_STORE_NETWORK_GAME_TRACKING()"],
      "description": "RESET_STORE_NETWORK_GAME_TRACKING()"
    },
    "IS_USER_OLD_ENOUGH_TO_ACCESS_STORE": {
      "prefix": "IS_USER_OLD_ENOUGH_TO_ACCESS_STORE()",
      "body": ["IS_USER_OLD_ENOUGH_TO_ACCESS_STORE()"],
      "description": "IS_USER_OLD_ENOUGH_TO_ACCESS_STORE()"
    },
    "SET_LAST_VIEWED_SHOP_ITEM": {
      "prefix": "SET_LAST_VIEWED_SHOP_ITEM()",
      "body": [
        "SET_LAST_VIEWED_SHOP_ITEM(${1:Hash p0}, ${2:int p1}, ${3:Hash p2})"
      ],
      "description": "SET_LAST_VIEWED_SHOP_ITEM()"
    },
    "GET_USER_PREMIUM_ACCESS": {
      "prefix": "GET_USER_PREMIUM_ACCESS()",
      "body": ["GET_USER_PREMIUM_ACCESS()"],
      "description": "GET_USER_PREMIUM_ACCESS()"
    },
    "GET_USER_STARTER_ACCESS": {
      "prefix": "GET_USER_STARTER_ACCESS()",
      "body": ["GET_USER_STARTER_ACCESS()"],
      "description": "GET_USER_STARTER_ACCESS()"
    },
    "CLOUD_DELETE_MEMBER_FILE": {
      "prefix": "CLOUD_DELETE_MEMBER_FILE()",
      "body": ["CLOUD_DELETE_MEMBER_FILE(${1:const char* p0})"],
      "description": "CLOUD_DELETE_MEMBER_FILE()"
    },
    "CLOUD_HAS_REQUEST_COMPLETED": {
      "prefix": "CLOUD_HAS_REQUEST_COMPLETED()",
      "body": ["CLOUD_HAS_REQUEST_COMPLETED(${1:int requestId})"],
      "description": "CLOUD_HAS_REQUEST_COMPLETED()"
    },
    "CLOUD_DID_REQUEST_SUCCEED": {
      "prefix": "CLOUD_DID_REQUEST_SUCCEED()",
      "body": ["CLOUD_DID_REQUEST_SUCCEED(${1:int requestId})"],
      "description": "CLOUD_DID_REQUEST_SUCCEED()"
    },
    "CLOUD_CHECK_AVAILABILITY": {
      "prefix": "CLOUD_CHECK_AVAILABILITY()",
      "body": ["CLOUD_CHECK_AVAILABILITY()"],
      "description": "CLOUD_CHECK_AVAILABILITY()"
    },
    "CLOUD_IS_CHECKING_AVAILABILITY": {
      "prefix": "CLOUD_IS_CHECKING_AVAILABILITY()",
      "body": ["CLOUD_IS_CHECKING_AVAILABILITY()"],
      "description": "CLOUD_IS_CHECKING_AVAILABILITY()"
    },
    "CLOUD_GET_AVAILABILITY_CHECK_RESULT": {
      "prefix": "CLOUD_GET_AVAILABILITY_CHECK_RESULT()",
      "body": ["CLOUD_GET_AVAILABILITY_CHECK_RESULT()"],
      "description": "CLOUD_GET_AVAILABILITY_CHECK_RESULT()"
    },
    "GET_CONTENT_TO_LOAD_TYPE": {
      "prefix": "GET_CONTENT_TO_LOAD_TYPE()",
      "body": ["GET_CONTENT_TO_LOAD_TYPE()"],
      "description": "GET_CONTENT_TO_LOAD_TYPE()"
    },
    "GET_IS_LAUNCH_FROM_LIVE_AREA": {
      "prefix": "GET_IS_LAUNCH_FROM_LIVE_AREA()",
      "body": ["GET_IS_LAUNCH_FROM_LIVE_AREA()"],
      "description": "GET_IS_LAUNCH_FROM_LIVE_AREA()"
    },
    "GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT": {
      "prefix": "GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT()",
      "body": ["GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT()"],
      "description": "GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT()"
    },
    "CLEAR_SERVICE_EVENT_ARGUMENTS": {
      "prefix": "CLEAR_SERVICE_EVENT_ARGUMENTS()",
      "body": ["CLEAR_SERVICE_EVENT_ARGUMENTS()"],
      "description": "CLEAR_SERVICE_EVENT_ARGUMENTS()"
    },
    "UGC_COPY_CONTENT": {
      "prefix": "UGC_COPY_CONTENT()",
      "body": ["UGC_COPY_CONTENT(${1:Any* p0}, ${2:Any* p1})"],
      "description": "UGC_COPY_CONTENT()"
    },
    "UGC_IS_CREATING": {
      "prefix": "UGC_IS_CREATING()",
      "body": ["UGC_IS_CREATING()"],
      "description": "UGC_IS_CREATING()"
    },
    "UGC_HAS_CREATE_FINISHED": {
      "prefix": "UGC_HAS_CREATE_FINISHED()",
      "body": ["UGC_HAS_CREATE_FINISHED()"],
      "description": "UGC_HAS_CREATE_FINISHED()"
    },
    "UGC_DID_CREATE_SUCCEED": {
      "prefix": "UGC_DID_CREATE_SUCCEED()",
      "body": ["UGC_DID_CREATE_SUCCEED()"],
      "description": "UGC_DID_CREATE_SUCCEED()"
    },
    "UGC_GET_CREATE_RESULT": {
      "prefix": "UGC_GET_CREATE_RESULT()",
      "body": ["UGC_GET_CREATE_RESULT()"],
      "description": "UGC_GET_CREATE_RESULT()"
    },
    "UGC_CLEAR_CREATE_RESULT": {
      "prefix": "UGC_CLEAR_CREATE_RESULT()",
      "body": ["UGC_CLEAR_CREATE_RESULT()"],
      "description": "UGC_CLEAR_CREATE_RESULT()"
    },
    "UGC_QUERY_MY_CONTENT": {
      "prefix": "UGC_QUERY_MY_CONTENT()",
      "body": [
        "UGC_QUERY_MY_CONTENT(${1:Any p0}, ${2:Any p1}, ${3:Any* p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
      ],
      "description": "UGC_QUERY_MY_CONTENT()"
    },
    "UGC_QUERY_BY_CATEGORY": {
      "prefix": "UGC_QUERY_BY_CATEGORY()",
      "body": [
        "UGC_QUERY_BY_CATEGORY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:const char* p3}, ${5:Any p4}, ${6:BOOL p5})"
      ],
      "description": "UGC_QUERY_BY_CATEGORY()"
    },
    "UGC_QUERY_BY_CONTENT_ID": {
      "prefix": "UGC_QUERY_BY_CONTENT_ID()",
      "body": [
        "UGC_QUERY_BY_CONTENT_ID(${1:const char* contentId}, ${2:BOOL latestVersion}, ${3:const char* contentTypeName})"
      ],
      "description": "UGC_QUERY_BY_CONTENT_ID()"
    },
    "UGC_QUERY_BY_CONTENT_IDS": {
      "prefix": "UGC_QUERY_BY_CONTENT_IDS()",
      "body": [
        "UGC_QUERY_BY_CONTENT_IDS(${1:Any* data}, ${2:int count}, ${3:BOOL latestVersion}, ${4:const char* contentTypeName})"
      ],
      "description": "UGC_QUERY_BY_CONTENT_IDS()"
    },
    "UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT": {
      "prefix": "UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT()",
      "body": [
        "UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT(${1:int offset}, ${2:int count}, ${3:const char* contentTypeName}, ${4:int p3})"
      ],
      "description": "UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT()"
    },
    "UGC_GET_BOOKMARKED_CONTENT": {
      "prefix": "UGC_GET_BOOKMARKED_CONTENT()",
      "body": [
        "UGC_GET_BOOKMARKED_CONTENT(${1:Any p0}, ${2:Any p1}, ${3:const char* p2}, ${4:Any* p3})"
      ],
      "description": "UGC_GET_BOOKMARKED_CONTENT()"
    },
    "UGC_GET_MY_CONTENT": {
      "prefix": "UGC_GET_MY_CONTENT()",
      "body": [
        "UGC_GET_MY_CONTENT(${1:Any p0}, ${2:Any p1}, ${3:const char* p2}, ${4:Any* p3})"
      ],
      "description": "UGC_GET_MY_CONTENT()"
    },
    "UGC_GET_FRIEND_CONTENT": {
      "prefix": "UGC_GET_FRIEND_CONTENT()",
      "body": [
        "UGC_GET_FRIEND_CONTENT(${1:Any p0}, ${2:Any p1}, ${3:const char* p2}, ${4:Any* p3})"
      ],
      "description": "UGC_GET_FRIEND_CONTENT()"
    },
    "UGC_GET_CREW_CONTENT": {
      "prefix": "UGC_GET_CREW_CONTENT()",
      "body": [
        "UGC_GET_CREW_CONTENT(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:const char* p3}, ${5:Any* p4})"
      ],
      "description": "UGC_GET_CREW_CONTENT()"
    },
    "UGC_GET_GET_BY_CATEGORY": {
      "prefix": "UGC_GET_GET_BY_CATEGORY()",
      "body": [
        "UGC_GET_GET_BY_CATEGORY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:const char* p3}, ${5:Any* p4})"
      ],
      "description": "UGC_GET_GET_BY_CATEGORY()"
    },
    "UGC_GET_GET_BY_CONTENT_ID": {
      "prefix": "UGC_GET_GET_BY_CONTENT_ID()",
      "body": [
        "UGC_GET_GET_BY_CONTENT_ID(${1:const char* contentId}, ${2:const char* contentTypeName})"
      ],
      "description": "UGC_GET_GET_BY_CONTENT_ID()"
    },
    "UGC_GET_GET_BY_CONTENT_IDS": {
      "prefix": "UGC_GET_GET_BY_CONTENT_IDS()",
      "body": [
        "UGC_GET_GET_BY_CONTENT_IDS(${1:Any* data}, ${2:int dataCount}, ${3:const char* contentTypeName})"
      ],
      "description": "UGC_GET_GET_BY_CONTENT_IDS()"
    },
    "UGC_GET_MOST_RECENTLY_CREATED_CONTENT": {
      "prefix": "UGC_GET_MOST_RECENTLY_CREATED_CONTENT()",
      "body": [
        "UGC_GET_MOST_RECENTLY_CREATED_CONTENT(${1:Any p0}, ${2:Any p1}, ${3:Any* p2}, ${4:Any* p3})"
      ],
      "description": "UGC_GET_MOST_RECENTLY_CREATED_CONTENT()"
    },
    "UGC_GET_MOST_RECENTLY_PLAYED_CONTENT": {
      "prefix": "UGC_GET_MOST_RECENTLY_PLAYED_CONTENT()",
      "body": [
        "UGC_GET_MOST_RECENTLY_PLAYED_CONTENT(${1:Any p0}, ${2:Any p1}, ${3:Any* p2}, ${4:Any* p3})"
      ],
      "description": "UGC_GET_MOST_RECENTLY_PLAYED_CONTENT()"
    },
    "UGC_GET_TOP_RATED_CONTENT": {
      "prefix": "UGC_GET_TOP_RATED_CONTENT()",
      "body": [
        "UGC_GET_TOP_RATED_CONTENT(${1:Any p0}, ${2:Any p1}, ${3:Any* p2}, ${4:Any* p3})"
      ],
      "description": "UGC_GET_TOP_RATED_CONTENT()"
    },
    "UGC_CANCEL_QUERY": {
      "prefix": "UGC_CANCEL_QUERY()",
      "body": ["UGC_CANCEL_QUERY()"],
      "description": "UGC_CANCEL_QUERY()"
    },
    "UGC_IS_GETTING": {
      "prefix": "UGC_IS_GETTING()",
      "body": ["UGC_IS_GETTING()"],
      "description": "UGC_IS_GETTING()"
    },
    "UGC_HAS_GET_FINISHED": {
      "prefix": "UGC_HAS_GET_FINISHED()",
      "body": ["UGC_HAS_GET_FINISHED()"],
      "description": "UGC_HAS_GET_FINISHED()"
    },
    "UGC_DID_GET_SUCCEED": {
      "prefix": "UGC_DID_GET_SUCCEED()",
      "body": ["UGC_DID_GET_SUCCEED()"],
      "description": "UGC_DID_GET_SUCCEED()"
    },
    "UGC_WAS_QUERY_FORCE_CANCELLED": {
      "prefix": "UGC_WAS_QUERY_FORCE_CANCELLED()",
      "body": ["UGC_WAS_QUERY_FORCE_CANCELLED()"],
      "description": "UGC_WAS_QUERY_FORCE_CANCELLED()"
    },
    "UGC_GET_QUERY_RESULT": {
      "prefix": "UGC_GET_QUERY_RESULT()",
      "body": ["UGC_GET_QUERY_RESULT()"],
      "description": "UGC_GET_QUERY_RESULT()"
    },
    "UGC_GET_CONTENT_NUM": {
      "prefix": "UGC_GET_CONTENT_NUM()",
      "body": ["UGC_GET_CONTENT_NUM()"],
      "description": "UGC_GET_CONTENT_NUM()"
    },
    "UGC_GET_CONTENT_TOTAL": {
      "prefix": "UGC_GET_CONTENT_TOTAL()",
      "body": ["UGC_GET_CONTENT_TOTAL()"],
      "description": "UGC_GET_CONTENT_TOTAL()"
    },
    "UGC_GET_CONTENT_HASH": {
      "prefix": "UGC_GET_CONTENT_HASH()",
      "body": ["UGC_GET_CONTENT_HASH()"],
      "description": "UGC_GET_CONTENT_HASH()"
    },
    "UGC_CLEAR_QUERY_RESULTS": {
      "prefix": "UGC_CLEAR_QUERY_RESULTS()",
      "body": ["UGC_CLEAR_QUERY_RESULTS()"],
      "description": "UGC_CLEAR_QUERY_RESULTS()"
    },
    "UGC_GET_CONTENT_CREATOR_GAMER_HANDLE": {
      "prefix": "UGC_GET_CONTENT_CREATOR_GAMER_HANDLE()",
      "body": ["UGC_GET_CONTENT_CREATOR_GAMER_HANDLE(${1:int p0}, ${2:Any* p1})"],
      "description": "UGC_GET_CONTENT_CREATOR_GAMER_HANDLE()"
    },
    "UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER": {
      "prefix": "UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER()",
      "body": ["UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER(${1:Any p0})"],
      "description": "UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER()"
    },
    "UGC_GET_CONTENT_IS_USING_SC_NICKNAME": {
      "prefix": "UGC_GET_CONTENT_IS_USING_SC_NICKNAME()",
      "body": ["UGC_GET_CONTENT_IS_USING_SC_NICKNAME(${1:Any p0})"],
      "description": "UGC_GET_CONTENT_IS_USING_SC_NICKNAME()"
    },
    "UGC_GET_CONTENT_CATEGORY": {
      "prefix": "UGC_GET_CONTENT_CATEGORY()",
      "body": ["UGC_GET_CONTENT_CATEGORY(${1:int p0})"],
      "description": "UGC_GET_CONTENT_CATEGORY()"
    },
    "UGC_GET_CONTENT_DESCRIPTION_HASH": {
      "prefix": "UGC_GET_CONTENT_DESCRIPTION_HASH()",
      "body": ["UGC_GET_CONTENT_DESCRIPTION_HASH(${1:Any p0})"],
      "description": "UGC_GET_CONTENT_DESCRIPTION_HASH()"
    },
    "UGC_GET_CONTENT_UPDATED_DATE": {
      "prefix": "UGC_GET_CONTENT_UPDATED_DATE()",
      "body": ["UGC_GET_CONTENT_UPDATED_DATE(${1:Any p0}, ${2:Any* p1})"],
      "description": "UGC_GET_CONTENT_UPDATED_DATE()"
    },
    "UGC_GET_CONTENT_FILE_VERSION": {
      "prefix": "UGC_GET_CONTENT_FILE_VERSION()",
      "body": ["UGC_GET_CONTENT_FILE_VERSION(${1:Any p0}, ${2:Any p1})"],
      "description": "UGC_GET_CONTENT_FILE_VERSION()"
    },
    "UGC_GET_CONTENT_HAS_LO_RES_PHOTO": {
      "prefix": "UGC_GET_CONTENT_HAS_LO_RES_PHOTO()",
      "body": ["UGC_GET_CONTENT_HAS_LO_RES_PHOTO(${1:int p0})"],
      "description": "UGC_GET_CONTENT_HAS_LO_RES_PHOTO()"
    },
    "UGC_GET_CONTENT_HAS_HI_RES_PHOTO": {
      "prefix": "UGC_GET_CONTENT_HAS_HI_RES_PHOTO()",
      "body": ["UGC_GET_CONTENT_HAS_HI_RES_PHOTO(${1:int p0})"],
      "description": "UGC_GET_CONTENT_HAS_HI_RES_PHOTO()"
    },
    "UGC_GET_CONTENT_LANGUAGE": {
      "prefix": "UGC_GET_CONTENT_LANGUAGE()",
      "body": ["UGC_GET_CONTENT_LANGUAGE(${1:Any p0})"],
      "description": "UGC_GET_CONTENT_LANGUAGE()"
    },
    "UGC_GET_CONTENT_IS_PUBLISHED": {
      "prefix": "UGC_GET_CONTENT_IS_PUBLISHED()",
      "body": ["UGC_GET_CONTENT_IS_PUBLISHED(${1:Any p0})"],
      "description": "UGC_GET_CONTENT_IS_PUBLISHED()"
    },
    "UGC_GET_CONTENT_IS_VERIFIED": {
      "prefix": "UGC_GET_CONTENT_IS_VERIFIED()",
      "body": ["UGC_GET_CONTENT_IS_VERIFIED(${1:Any p0})"],
      "description": "UGC_GET_CONTENT_IS_VERIFIED()"
    },
    "UGC_GET_CONTENT_RATING": {
      "prefix": "UGC_GET_CONTENT_RATING()",
      "body": ["UGC_GET_CONTENT_RATING(${1:Any p0}, ${2:Any p1})"],
      "description": "UGC_GET_CONTENT_RATING()"
    },
    "UGC_GET_CONTENT_RATING_COUNT": {
      "prefix": "UGC_GET_CONTENT_RATING_COUNT()",
      "body": ["UGC_GET_CONTENT_RATING_COUNT(${1:Any p0}, ${2:Any p1})"],
      "description": "UGC_GET_CONTENT_RATING_COUNT()"
    },
    "UGC_GET_CONTENT_RATING_POSITIVE_COUNT": {
      "prefix": "UGC_GET_CONTENT_RATING_POSITIVE_COUNT()",
      "body": ["UGC_GET_CONTENT_RATING_POSITIVE_COUNT(${1:Any p0}, ${2:Any p1})"],
      "description": "UGC_GET_CONTENT_RATING_POSITIVE_COUNT()"
    },
    "UGC_GET_CONTENT_RATING_NEGATIVE_COUNT": {
      "prefix": "UGC_GET_CONTENT_RATING_NEGATIVE_COUNT()",
      "body": ["UGC_GET_CONTENT_RATING_NEGATIVE_COUNT(${1:Any p0}, ${2:Any p1})"],
      "description": "UGC_GET_CONTENT_RATING_NEGATIVE_COUNT()"
    },
    "UGC_GET_CONTENT_HAS_PLAYER_RECORD": {
      "prefix": "UGC_GET_CONTENT_HAS_PLAYER_RECORD()",
      "body": ["UGC_GET_CONTENT_HAS_PLAYER_RECORD(${1:Any p0})"],
      "description": "UGC_GET_CONTENT_HAS_PLAYER_RECORD()"
    },
    "UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED": {
      "prefix": "UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED()",
      "body": ["UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED(${1:Any p0})"],
      "description": "UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED()"
    },
    "UGC_REQUEST_CONTENT_DATA_FROM_INDEX": {
      "prefix": "UGC_REQUEST_CONTENT_DATA_FROM_INDEX()",
      "body": ["UGC_REQUEST_CONTENT_DATA_FROM_INDEX(${1:int p0}, ${2:int p1})"],
      "description": "UGC_REQUEST_CONTENT_DATA_FROM_INDEX()"
    },
    "UGC_REQUEST_CONTENT_DATA_FROM_PARAMS": {
      "prefix": "UGC_REQUEST_CONTENT_DATA_FROM_PARAMS()",
      "body": [
        "UGC_REQUEST_CONTENT_DATA_FROM_PARAMS(${1:const char* contentTypeName}, ${2:const char* contentId}, ${3:int p2}, ${4:int p3}, ${5:int p4})"
      ],
      "description": "UGC_REQUEST_CONTENT_DATA_FROM_PARAMS()"
    },
    "UGC_REQUEST_CACHED_DESCRIPTION": {
      "prefix": "UGC_REQUEST_CACHED_DESCRIPTION()",
      "body": ["UGC_REQUEST_CACHED_DESCRIPTION(${1:int p0})"],
      "description": "UGC_REQUEST_CACHED_DESCRIPTION()"
    },
    "UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS": {
      "prefix": "UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS()",
      "body": ["UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS(${1:Any p0})"],
      "description": "UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS()"
    },
    "UGC_HAS_DESCRIPTION_REQUEST_FINISHED": {
      "prefix": "UGC_HAS_DESCRIPTION_REQUEST_FINISHED()",
      "body": ["UGC_HAS_DESCRIPTION_REQUEST_FINISHED(${1:Any p0})"],
      "description": "UGC_HAS_DESCRIPTION_REQUEST_FINISHED()"
    },
    "UGC_DID_DESCRIPTION_REQUEST_SUCCEED": {
      "prefix": "UGC_DID_DESCRIPTION_REQUEST_SUCCEED()",
      "body": ["UGC_DID_DESCRIPTION_REQUEST_SUCCEED(${1:Any p0})"],
      "description": "UGC_DID_DESCRIPTION_REQUEST_SUCCEED()"
    },
    "UGC_RELEASE_CACHED_DESCRIPTION": {
      "prefix": "UGC_RELEASE_CACHED_DESCRIPTION()",
      "body": ["UGC_RELEASE_CACHED_DESCRIPTION(${1:Any p0})"],
      "description": "UGC_RELEASE_CACHED_DESCRIPTION()"
    },
    "UGC_RELEASE_ALL_CACHED_DESCRIPTIONS": {
      "prefix": "UGC_RELEASE_ALL_CACHED_DESCRIPTIONS()",
      "body": ["UGC_RELEASE_ALL_CACHED_DESCRIPTIONS()"],
      "description": "UGC_RELEASE_ALL_CACHED_DESCRIPTIONS()"
    },
    "UGC_HAS_PERMISSION_TO_WRITE": {
      "prefix": "UGC_HAS_PERMISSION_TO_WRITE()",
      "body": ["UGC_HAS_PERMISSION_TO_WRITE()"],
      "description": "UGC_HAS_PERMISSION_TO_WRITE()"
    },
    "UGC_PUBLISH": {
      "prefix": "UGC_PUBLISH()",
      "body": [
        "UGC_PUBLISH(${1:const char* contentId}, ${2:const char* baseContentId}, ${3:const char* contentTypeName})"
      ],
      "description": "UGC_PUBLISH()"
    },
    "UGC_SET_BOOKMARKED": {
      "prefix": "UGC_SET_BOOKMARKED()",
      "body": [
        "UGC_SET_BOOKMARKED(${1:const char* contentId}, ${2:BOOL bookmarked}, ${3:const char* contentTypeName})"
      ],
      "description": "UGC_SET_BOOKMARKED()"
    },
    "UGC_SET_DELETED": {
      "prefix": "UGC_SET_DELETED()",
      "body": [
        "UGC_SET_DELETED(${1:Any* p0}, ${2:BOOL p1}, ${3:const char* p2})"
      ],
      "description": "UGC_SET_DELETED()"
    },
    "UGC_IS_MODIFYING": {
      "prefix": "UGC_IS_MODIFYING()",
      "body": ["UGC_IS_MODIFYING()"],
      "description": "UGC_IS_MODIFYING()"
    },
    "UGC_HAS_MODIFY_FINISHED": {
      "prefix": "UGC_HAS_MODIFY_FINISHED()",
      "body": ["UGC_HAS_MODIFY_FINISHED()"],
      "description": "UGC_HAS_MODIFY_FINISHED()"
    },
    "UGC_DID_MODIFY_SUCCEED": {
      "prefix": "UGC_DID_MODIFY_SUCCEED()",
      "body": ["UGC_DID_MODIFY_SUCCEED()"],
      "description": "UGC_DID_MODIFY_SUCCEED()"
    },
    "UGC_GET_MODIFY_RESULT": {
      "prefix": "UGC_GET_MODIFY_RESULT()",
      "body": ["UGC_GET_MODIFY_RESULT()"],
      "description": "UGC_GET_MODIFY_RESULT()"
    },
    "UGC_CLEAR_MODIFY_RESULT": {
      "prefix": "UGC_CLEAR_MODIFY_RESULT()",
      "body": ["UGC_CLEAR_MODIFY_RESULT()"],
      "description": "UGC_CLEAR_MODIFY_RESULT()"
    },
    "UGC_GET_CREATORS_BY_USER_ID": {
      "prefix": "UGC_GET_CREATORS_BY_USER_ID()",
      "body": ["UGC_GET_CREATORS_BY_USER_ID(${1:Any* p0}, ${2:Any* p1})"],
      "description": "UGC_GET_CREATORS_BY_USER_ID()"
    },
    "UGC_HAS_QUERY_CREATORS_FINISHED": {
      "prefix": "UGC_HAS_QUERY_CREATORS_FINISHED()",
      "body": ["UGC_HAS_QUERY_CREATORS_FINISHED()"],
      "description": "UGC_HAS_QUERY_CREATORS_FINISHED()"
    },
    "UGC_DID_QUERY_CREATORS_SUCCEED": {
      "prefix": "UGC_DID_QUERY_CREATORS_SUCCEED()",
      "body": ["UGC_DID_QUERY_CREATORS_SUCCEED()"],
      "description": "UGC_DID_QUERY_CREATORS_SUCCEED()"
    },
    "UGC_GET_CREATOR_NUM": {
      "prefix": "UGC_GET_CREATOR_NUM()",
      "body": ["UGC_GET_CREATOR_NUM()"],
      "description": "UGC_GET_CREATOR_NUM()"
    },
    "UGC_LOAD_OFFLINE_QUERY": {
      "prefix": "UGC_LOAD_OFFLINE_QUERY()",
      "body": ["UGC_LOAD_OFFLINE_QUERY(${1:Any p0})"],
      "description": "UGC_LOAD_OFFLINE_QUERY()"
    },
    "UGC_CLEAR_OFFLINE_QUERY": {
      "prefix": "UGC_CLEAR_OFFLINE_QUERY()",
      "body": ["UGC_CLEAR_OFFLINE_QUERY()"],
      "description": "UGC_CLEAR_OFFLINE_QUERY()"
    },
    "UGC_SET_QUERY_DATA_FROM_OFFLINE": {
      "prefix": "UGC_SET_QUERY_DATA_FROM_OFFLINE()",
      "body": ["UGC_SET_QUERY_DATA_FROM_OFFLINE(${1:BOOL p0})"],
      "description": "UGC_SET_QUERY_DATA_FROM_OFFLINE()"
    },
    "UGC_SET_USING_OFFLINE_CONTENT": {
      "prefix": "UGC_SET_USING_OFFLINE_CONTENT()",
      "body": ["UGC_SET_USING_OFFLINE_CONTENT(${1:BOOL p0})"],
      "description": "UGC_SET_USING_OFFLINE_CONTENT()"
    },
    "UGC_IS_LANGUAGE_SUPPORTED": {
      "prefix": "UGC_IS_LANGUAGE_SUPPORTED()",
      "body": ["UGC_IS_LANGUAGE_SUPPORTED(${1:Any p0})"],
      "description": "UGC_IS_LANGUAGE_SUPPORTED()"
    },
    "FACEBOOK_POST_COMPLETED_HEIST": {
      "prefix": "FACEBOOK_POST_COMPLETED_HEIST()",
      "body": [
        "FACEBOOK_POST_COMPLETED_HEIST(${1:const char* heistName}, ${2:int cashEarned}, ${3:int xpEarned})"
      ],
      "description": "FACEBOOK_POST_COMPLETED_HEIST()"
    },
    "FACEBOOK_POST_CREATE_CHARACTER": {
      "prefix": "FACEBOOK_POST_CREATE_CHARACTER()",
      "body": ["FACEBOOK_POST_CREATE_CHARACTER()"],
      "description": "FACEBOOK_POST_CREATE_CHARACTER()"
    },
    "FACEBOOK_POST_COMPLETED_MILESTONE": {
      "prefix": "FACEBOOK_POST_COMPLETED_MILESTONE()",
      "body": ["FACEBOOK_POST_COMPLETED_MILESTONE(${1:int milestoneId})"],
      "description": "FACEBOOK_POST_COMPLETED_MILESTONE()"
    },
    "FACEBOOK_HAS_POST_COMPLETED": {
      "prefix": "FACEBOOK_HAS_POST_COMPLETED()",
      "body": ["FACEBOOK_HAS_POST_COMPLETED()"],
      "description": "FACEBOOK_HAS_POST_COMPLETED()"
    },
    "FACEBOOK_DID_POST_SUCCEED": {
      "prefix": "FACEBOOK_DID_POST_SUCCEED()",
      "body": ["FACEBOOK_DID_POST_SUCCEED()"],
      "description": "FACEBOOK_DID_POST_SUCCEED()"
    },
    "FACEBOOK_CAN_POST_TO_FACEBOOK": {
      "prefix": "FACEBOOK_CAN_POST_TO_FACEBOOK()",
      "body": ["FACEBOOK_CAN_POST_TO_FACEBOOK()"],
      "description": "FACEBOOK_CAN_POST_TO_FACEBOOK()"
    },
    "TEXTURE_DOWNLOAD_REQUEST": {
      "prefix": "TEXTURE_DOWNLOAD_REQUEST()",
      "body": [
        "TEXTURE_DOWNLOAD_REQUEST(${1:Any* gamerHandle}, ${2:const char* filePath}, ${3:const char* name}, ${4:BOOL p3})"
      ],
      "description": "TEXTURE_DOWNLOAD_REQUEST()"
    },
    "TITLE_TEXTURE_DOWNLOAD_REQUEST": {
      "prefix": "TITLE_TEXTURE_DOWNLOAD_REQUEST()",
      "body": [
        "TITLE_TEXTURE_DOWNLOAD_REQUEST(${1:const char* filePath}, ${2:const char* name}, ${3:BOOL p2})"
      ],
      "description": "TITLE_TEXTURE_DOWNLOAD_REQUEST()"
    },
    "UGC_TEXTURE_DOWNLOAD_REQUEST": {
      "prefix": "UGC_TEXTURE_DOWNLOAD_REQUEST()",
      "body": [
        "UGC_TEXTURE_DOWNLOAD_REQUEST(${1:const char* p0}, ${2:int p1}, ${3:int p2}, ${4:int p3}, ${5:const char* p4}, ${6:BOOL p5})"
      ],
      "description": "UGC_TEXTURE_DOWNLOAD_REQUEST()"
    },
    "TEXTURE_DOWNLOAD_RELEASE": {
      "prefix": "TEXTURE_DOWNLOAD_RELEASE()",
      "body": ["TEXTURE_DOWNLOAD_RELEASE(${1:int p0})"],
      "description": "TEXTURE_DOWNLOAD_RELEASE()"
    },
    "TEXTURE_DOWNLOAD_HAS_FAILED": {
      "prefix": "TEXTURE_DOWNLOAD_HAS_FAILED()",
      "body": ["TEXTURE_DOWNLOAD_HAS_FAILED(${1:int p0})"],
      "description": "TEXTURE_DOWNLOAD_HAS_FAILED()"
    },
    "GET_STATUS_OF_TEXTURE_DOWNLOAD": {
      "prefix": "GET_STATUS_OF_TEXTURE_DOWNLOAD()",
      "body": ["GET_STATUS_OF_TEXTURE_DOWNLOAD(${1:int p0})"],
      "description": "GET_STATUS_OF_TEXTURE_DOWNLOAD()"
    },
    "NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET": {
      "prefix": "NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET()",
      "body": ["NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET()"],
      "description": "NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET()"
    },
    "NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING": {
      "prefix": "NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING()",
      "body": ["NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING()"],
      "description": "NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING()"
    },
    "NETWORK_IS_CABLE_CONNECTED": {
      "prefix": "NETWORK_IS_CABLE_CONNECTED()",
      "body": ["NETWORK_IS_CABLE_CONNECTED()"],
      "description": "NETWORK_IS_CABLE_CONNECTED()"
    },
    "NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV": {
      "prefix": "NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV()",
      "body": ["NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV()"],
      "description": "NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV()"
    },
    "NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV": {
      "prefix": "NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV()",
      "body": ["NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV()"],
      "description": "NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV()"
    },
    "NETWORK_HAVE_ROS_BANNED_PRIV": {
      "prefix": "NETWORK_HAVE_ROS_BANNED_PRIV()",
      "body": ["NETWORK_HAVE_ROS_BANNED_PRIV()"],
      "description": "NETWORK_HAVE_ROS_BANNED_PRIV()"
    },
    "NETWORK_HAVE_ROS_CREATE_TICKET_PRIV": {
      "prefix": "NETWORK_HAVE_ROS_CREATE_TICKET_PRIV()",
      "body": ["NETWORK_HAVE_ROS_CREATE_TICKET_PRIV()"],
      "description": "NETWORK_HAVE_ROS_CREATE_TICKET_PRIV()"
    },
    "NETWORK_HAVE_ROS_MULTIPLAYER_PRIV": {
      "prefix": "NETWORK_HAVE_ROS_MULTIPLAYER_PRIV()",
      "body": ["NETWORK_HAVE_ROS_MULTIPLAYER_PRIV()"],
      "description": "NETWORK_HAVE_ROS_MULTIPLAYER_PRIV()"
    },
    "NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV": {
      "prefix": "NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV()",
      "body": ["NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV()"],
      "description": "NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV()"
    },
    "NETWORK_HAS_ROS_PRIVILEGE": {
      "prefix": "NETWORK_HAS_ROS_PRIVILEGE()",
      "body": ["NETWORK_HAS_ROS_PRIVILEGE(${1:int index})"],
      "description": "NETWORK_HAS_ROS_PRIVILEGE()"
    },
    "NETWORK_HAS_ROS_PRIVILEGE_END_DATE": {
      "prefix": "NETWORK_HAS_ROS_PRIVILEGE_END_DATE()",
      "body": [
        "NETWORK_HAS_ROS_PRIVILEGE_END_DATE(${1:int privilege}, ${2:int* banType}, ${3:Any* timeData})"
      ],
      "description": "NETWORK_HAS_ROS_PRIVILEGE_END_DATE()"
    },
    "NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN": {
      "prefix": "NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN()",
      "body": ["NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN()"],
      "description": "NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN()"
    },
    "NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT": {
      "prefix": "NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT()",
      "body": ["NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT()"],
      "description": "NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT()"
    },
    "_NETWORK_HAS_ROS_PRIVILEGE_MP_TEXT_COMMUNICATION": {
      "prefix": "_NETWORK_HAS_ROS_PRIVILEGE_MP_TEXT_COMMUNICATION()",
      "body": ["_NETWORK_HAS_ROS_PRIVILEGE_MP_TEXT_COMMUNICATION()"],
      "description": "_NETWORK_HAS_ROS_PRIVILEGE_MP_TEXT_COMMUNICATION()"
    },
    "_NETWORK_HAS_ROS_PRIVILEGE_MP_VOICE_COMMUNICATION": {
      "prefix": "_NETWORK_HAS_ROS_PRIVILEGE_MP_VOICE_COMMUNICATION()",
      "body": ["_NETWORK_HAS_ROS_PRIVILEGE_MP_VOICE_COMMUNICATION()"],
      "description": "_NETWORK_HAS_ROS_PRIVILEGE_MP_VOICE_COMMUNICATION()"
    },
    "NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK": {
      "prefix": "NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK()",
      "body": ["NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK(${1:Any p0})"],
      "description": "NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK()"
    },
    "NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK": {
      "prefix": "NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK()",
      "body": [
        "NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK(${1:Any* netHandle})"
      ],
      "description": "NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK()"
    },
    "NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE": {
      "prefix": "NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE()",
      "body": ["NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE()"],
      "description": "NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE()"
    },
    "NETWORK_SKIP_RADIO_RESET_NEXT_OPEN": {
      "prefix": "NETWORK_SKIP_RADIO_RESET_NEXT_OPEN()",
      "body": ["NETWORK_SKIP_RADIO_RESET_NEXT_OPEN()"],
      "description": "NETWORK_SKIP_RADIO_RESET_NEXT_OPEN()"
    },
    "NETWORK_SKIP_RADIO_WARNING": {
      "prefix": "NETWORK_SKIP_RADIO_WARNING()",
      "body": ["NETWORK_SKIP_RADIO_WARNING()"],
      "description": "NETWORK_SKIP_RADIO_WARNING()"
    },
    "NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC": {
      "prefix": "NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC()",
      "body": ["NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC()"],
      "description": "NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC()"
    },
    "NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND": {
      "prefix": "NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND()",
      "body": ["NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND(${1:BOOL toggle})"],
      "description": "NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND()"
    },
    "NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION": {
      "prefix": "NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION()",
      "body": [
        "NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION()"
    },
    "NETWORK_SHOW_CHAT_RESTRICTION_MSC": {
      "prefix": "NETWORK_SHOW_CHAT_RESTRICTION_MSC()",
      "body": ["NETWORK_SHOW_CHAT_RESTRICTION_MSC(${1:Player player})"],
      "description": "NETWORK_SHOW_CHAT_RESTRICTION_MSC()"
    },
    "NETWORK_SHOW_PSN_UGC_RESTRICTION": {
      "prefix": "NETWORK_SHOW_PSN_UGC_RESTRICTION()",
      "body": ["NETWORK_SHOW_PSN_UGC_RESTRICTION()"],
      "description": "NETWORK_SHOW_PSN_UGC_RESTRICTION()"
    },
    "NETWORK_IS_TITLE_UPDATE_REQUIRED": {
      "prefix": "NETWORK_IS_TITLE_UPDATE_REQUIRED()",
      "body": ["NETWORK_IS_TITLE_UPDATE_REQUIRED()"],
      "description": "NETWORK_IS_TITLE_UPDATE_REQUIRED()"
    },
    "NETWORK_QUIT_MP_TO_DESKTOP": {
      "prefix": "NETWORK_QUIT_MP_TO_DESKTOP()",
      "body": ["NETWORK_QUIT_MP_TO_DESKTOP()"],
      "description": "NETWORK_QUIT_MP_TO_DESKTOP()"
    },
    "NETWORK_IS_CONNECTED_VIA_RELAY": {
      "prefix": "NETWORK_IS_CONNECTED_VIA_RELAY()",
      "body": ["NETWORK_IS_CONNECTED_VIA_RELAY(${1:Player player})"],
      "description": "NETWORK_IS_CONNECTED_VIA_RELAY()"
    },
    "NETWORK_GET_AVERAGE_LATENCY": {
      "prefix": "NETWORK_GET_AVERAGE_LATENCY()",
      "body": ["NETWORK_GET_AVERAGE_LATENCY(${1:Player player})"],
      "description": "NETWORK_GET_AVERAGE_LATENCY()"
    },
    "NETWORK_GET_AVERAGE_PING": {
      "prefix": "NETWORK_GET_AVERAGE_PING()",
      "body": ["NETWORK_GET_AVERAGE_PING(${1:Player player})"],
      "description": "NETWORK_GET_AVERAGE_PING()"
    },
    "NETWORK_GET_AVERAGE_PACKET_LOSS": {
      "prefix": "NETWORK_GET_AVERAGE_PACKET_LOSS()",
      "body": ["NETWORK_GET_AVERAGE_PACKET_LOSS(${1:Player player})"],
      "description": "NETWORK_GET_AVERAGE_PACKET_LOSS()"
    },
    "NETWORK_GET_NUM_UNACKED_RELIABLES": {
      "prefix": "NETWORK_GET_NUM_UNACKED_RELIABLES()",
      "body": ["NETWORK_GET_NUM_UNACKED_RELIABLES(${1:Player player})"],
      "description": "NETWORK_GET_NUM_UNACKED_RELIABLES()"
    },
    "NETWORK_GET_UNRELIABLE_RESEND_COUNT": {
      "prefix": "NETWORK_GET_UNRELIABLE_RESEND_COUNT()",
      "body": ["NETWORK_GET_UNRELIABLE_RESEND_COUNT(${1:Player player})"],
      "description": "NETWORK_GET_UNRELIABLE_RESEND_COUNT()"
    },
    "NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT": {
      "prefix": "NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT()",
      "body": ["NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT(${1:Player player})"],
      "description": "NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT()"
    },
    "NETWORK_REPORT_CODE_TAMPER": {
      "prefix": "NETWORK_REPORT_CODE_TAMPER()",
      "body": ["NETWORK_REPORT_CODE_TAMPER()"],
      "description": "NETWORK_REPORT_CODE_TAMPER()"
    },
    "NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK": {
      "prefix": "NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK()",
      "body": [
        "NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK(${1:Entity entity})"
      ],
      "description": "NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK()"
    },
    "NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK": {
      "prefix": "NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK()",
      "body": [
        "NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK(${1:Player player})"
      ],
      "description": "NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK()"
    },
    "NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK": {
      "prefix": "NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK()",
      "body": ["NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK(${1:Entity entity})"],
      "description": "NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK()"
    },
    "NETWORK_GET_PREDICTED_VELOCITY": {
      "prefix": "NETWORK_GET_PREDICTED_VELOCITY()",
      "body": [
        "NETWORK_GET_PREDICTED_VELOCITY(${1:Entity entity}, ${2:float maxSpeedToPredict})"
      ],
      "description": "NETWORK_GET_PREDICTED_VELOCITY()"
    },
    "NETWORK_DUMP_NET_IF_CONFIG": {
      "prefix": "NETWORK_DUMP_NET_IF_CONFIG()",
      "body": ["NETWORK_DUMP_NET_IF_CONFIG()"],
      "description": "NETWORK_DUMP_NET_IF_CONFIG()"
    },
    "NETWORK_GET_SIGNALLING_INFO": {
      "prefix": "NETWORK_GET_SIGNALLING_INFO()",
      "body": ["NETWORK_GET_SIGNALLING_INFO(${1:Any* p0})"],
      "description": "NETWORK_GET_SIGNALLING_INFO()"
    },
    "NETWORK_GET_NET_STATISTICS_INFO": {
      "prefix": "NETWORK_GET_NET_STATISTICS_INFO()",
      "body": ["NETWORK_GET_NET_STATISTICS_INFO(${1:Any* p0})"],
      "description": "NETWORK_GET_NET_STATISTICS_INFO()"
    },
    "NETWORK_GET_PLAYER_ACCOUNT_ID": {
      "prefix": "NETWORK_GET_PLAYER_ACCOUNT_ID()",
      "body": ["NETWORK_GET_PLAYER_ACCOUNT_ID(${1:Player player})"],
      "description": "NETWORK_GET_PLAYER_ACCOUNT_ID()"
    },
    "NETWORK_UGC_NAV": {
      "prefix": "NETWORK_UGC_NAV()",
      "body": ["NETWORK_UGC_NAV(${1:Any p0}, ${2:Any p1})"],
      "description": "NETWORK_UGC_NAV()"
    },
    "CREATE_OBJECT": {
      "prefix": "CREATE_OBJECT()",
      "body": [
        "CREATE_OBJECT(${1:Hash modelHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL isNetwork}, ${6:BOOL bScriptHostObj}, ${7:BOOL dynamic})"
      ],
      "description": "CREATE_OBJECT()"
    },
    "CREATE_OBJECT_NO_OFFSET": {
      "prefix": "CREATE_OBJECT_NO_OFFSET()",
      "body": [
        "CREATE_OBJECT_NO_OFFSET(${1:Hash modelHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL isNetwork}, ${6:BOOL bScriptHostObj}, ${7:BOOL dynamic})"
      ],
      "description": "CREATE_OBJECT_NO_OFFSET()"
    },
    "DELETE_OBJECT": {
      "prefix": "DELETE_OBJECT()",
      "body": ["DELETE_OBJECT(${1:Object* object})"],
      "description": "DELETE_OBJECT()"
    },
    "PLACE_OBJECT_ON_GROUND_PROPERLY": {
      "prefix": "PLACE_OBJECT_ON_GROUND_PROPERLY()",
      "body": ["PLACE_OBJECT_ON_GROUND_PROPERLY(${1:Object object})"],
      "description": "PLACE_OBJECT_ON_GROUND_PROPERLY()"
    },
    "PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY": {
      "prefix": "PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY()",
      "body": ["PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY(${1:Object object})"],
      "description": "PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY()"
    },
    "ROTATE_OBJECT": {
      "prefix": "ROTATE_OBJECT()",
      "body": [
        "ROTATE_OBJECT(${1:Object object}, ${2:float p1}, ${3:float p2}, ${4:BOOL p3})"
      ],
      "description": "ROTATE_OBJECT()"
    },
    "SLIDE_OBJECT": {
      "prefix": "SLIDE_OBJECT()",
      "body": [
        "SLIDE_OBJECT(${1:Object object}, ${2:float toX}, ${3:float toY}, ${4:float toZ}, ${5:float speedX}, ${6:float speedY}, ${7:float speedZ}, ${8:BOOL collision})"
      ],
      "description": "SLIDE_OBJECT()"
    },
    "SET_OBJECT_TARGETTABLE": {
      "prefix": "SET_OBJECT_TARGETTABLE()",
      "body": [
        "SET_OBJECT_TARGETTABLE(${1:Object object}, ${2:BOOL targettable}, ${3:Any p2})"
      ],
      "description": "SET_OBJECT_TARGETTABLE()"
    },
    "SET_OBJECT_FORCE_VEHICLES_TO_AVOID": {
      "prefix": "SET_OBJECT_FORCE_VEHICLES_TO_AVOID()",
      "body": [
        "SET_OBJECT_FORCE_VEHICLES_TO_AVOID(${1:Object object}, ${2:BOOL toggle})"
      ],
      "description": "SET_OBJECT_FORCE_VEHICLES_TO_AVOID()"
    },
    "GET_CLOSEST_OBJECT_OF_TYPE": {
      "prefix": "GET_CLOSEST_OBJECT_OF_TYPE()",
      "body": [
        "GET_CLOSEST_OBJECT_OF_TYPE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash modelHash}, ${6:BOOL isMission}, ${7:BOOL p6}, ${8:BOOL p7})"
      ],
      "description": "GET_CLOSEST_OBJECT_OF_TYPE()"
    },
    "HAS_OBJECT_BEEN_BROKEN": {
      "prefix": "HAS_OBJECT_BEEN_BROKEN()",
      "body": ["HAS_OBJECT_BEEN_BROKEN(${1:Object object}, ${2:Any p1})"],
      "description": "HAS_OBJECT_BEEN_BROKEN()"
    },
    "HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN": {
      "prefix": "HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN()",
      "body": [
        "HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:Hash modelHash}, ${6:Any p5})"
      ],
      "description": "HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN()"
    },
    "HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED": {
      "prefix": "HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED()",
      "body": [
        "HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash modelHash}, ${6:BOOL p5})"
      ],
      "description": "HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED()"
    },
    "GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED": {
      "prefix": "GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED()",
      "body": ["GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED(${1:Any p0})"],
      "description": "GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED()"
    },
    "GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS": {
      "prefix": "GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS()",
      "body": [
        "GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS(${1:float xPos}, ${2:float yPos}, ${3:float zPos}, ${4:float heading}, ${5:float xOffset}, ${6:float yOffset}, ${7:float zOffset})"
      ],
      "description": "GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS()"
    },
    "GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE": {
      "prefix": "GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE()",
      "body": [
        "GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash modelHash}, ${6:Vector3* outPosition}, ${7:Vector3* outRotation}, ${8:int rotationOrder})"
      ],
      "description": "GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE()"
    },
    "SET_STATE_OF_CLOSEST_DOOR_OF_TYPE": {
      "prefix": "SET_STATE_OF_CLOSEST_DOOR_OF_TYPE()",
      "body": [
        "SET_STATE_OF_CLOSEST_DOOR_OF_TYPE(${1:Hash type}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL locked}, ${6:float heading}, ${7:BOOL p6})"
      ],
      "description": "SET_STATE_OF_CLOSEST_DOOR_OF_TYPE()"
    },
    "GET_STATE_OF_CLOSEST_DOOR_OF_TYPE": {
      "prefix": "GET_STATE_OF_CLOSEST_DOOR_OF_TYPE()",
      "body": [
        "GET_STATE_OF_CLOSEST_DOOR_OF_TYPE(${1:Hash type}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL* locked}, ${6:float* heading})"
      ],
      "description": "GET_STATE_OF_CLOSEST_DOOR_OF_TYPE()"
    },
    "SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE": {
      "prefix": "SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE()",
      "body": [
        "SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${1:Hash modelHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL locked}, ${6:float xRotMult}, ${7:float yRotMult}, ${8:float zRotMult})"
      ],
      "description": "SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE()"
    },
    "PLAY_OBJECT_AUTO_START_ANIM": {
      "prefix": "PLAY_OBJECT_AUTO_START_ANIM()",
      "body": ["PLAY_OBJECT_AUTO_START_ANIM(${1:Any p0})"],
      "description": "PLAY_OBJECT_AUTO_START_ANIM()"
    },
    "ADD_DOOR_TO_SYSTEM": {
      "prefix": "ADD_DOOR_TO_SYSTEM()",
      "body": [
        "ADD_DOOR_TO_SYSTEM(${1:Hash doorHash}, ${2:Hash modelHash}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:BOOL p5}, ${7:BOOL scriptDoor}, ${8:BOOL isLocal})"
      ],
      "description": "ADD_DOOR_TO_SYSTEM()"
    },
    "REMOVE_DOOR_FROM_SYSTEM": {
      "prefix": "REMOVE_DOOR_FROM_SYSTEM()",
      "body": ["REMOVE_DOOR_FROM_SYSTEM(${1:Hash doorHash}, ${2:Any p1})"],
      "description": "REMOVE_DOOR_FROM_SYSTEM()"
    },
    "DOOR_SYSTEM_SET_DOOR_STATE": {
      "prefix": "DOOR_SYSTEM_SET_DOOR_STATE()",
      "body": [
        "DOOR_SYSTEM_SET_DOOR_STATE(${1:Hash doorHash}, ${2:int state}, ${3:BOOL requestDoor}, ${4:BOOL forceUpdate})"
      ],
      "description": "DOOR_SYSTEM_SET_DOOR_STATE()"
    },
    "DOOR_SYSTEM_GET_DOOR_STATE": {
      "prefix": "DOOR_SYSTEM_GET_DOOR_STATE()",
      "body": ["DOOR_SYSTEM_GET_DOOR_STATE(${1:Hash doorHash})"],
      "description": "DOOR_SYSTEM_GET_DOOR_STATE()"
    },
    "DOOR_SYSTEM_GET_DOOR_PENDING_STATE": {
      "prefix": "DOOR_SYSTEM_GET_DOOR_PENDING_STATE()",
      "body": ["DOOR_SYSTEM_GET_DOOR_PENDING_STATE(${1:Hash doorHash})"],
      "description": "DOOR_SYSTEM_GET_DOOR_PENDING_STATE()"
    },
    "DOOR_SYSTEM_SET_AUTOMATIC_RATE": {
      "prefix": "DOOR_SYSTEM_SET_AUTOMATIC_RATE()",
      "body": [
        "DOOR_SYSTEM_SET_AUTOMATIC_RATE(${1:Hash doorHash}, ${2:float rate}, ${3:BOOL requestDoor}, ${4:BOOL forceUpdate})"
      ],
      "description": "DOOR_SYSTEM_SET_AUTOMATIC_RATE()"
    },
    "DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE": {
      "prefix": "DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE()",
      "body": [
        "DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE(${1:Hash doorHash}, ${2:float distance}, ${3:BOOL requestDoor}, ${4:BOOL forceUpdate})"
      ],
      "description": "DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE()"
    },
    "DOOR_SYSTEM_SET_OPEN_RATIO": {
      "prefix": "DOOR_SYSTEM_SET_OPEN_RATIO()",
      "body": [
        "DOOR_SYSTEM_SET_OPEN_RATIO(${1:Hash doorHash}, ${2:float ajar}, ${3:BOOL requestDoor}, ${4:BOOL forceUpdate})"
      ],
      "description": "DOOR_SYSTEM_SET_OPEN_RATIO()"
    },
    "DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE": {
      "prefix": "DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE()",
      "body": ["DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE(${1:Hash doorHash})"],
      "description": "DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE()"
    },
    "DOOR_SYSTEM_GET_OPEN_RATIO": {
      "prefix": "DOOR_SYSTEM_GET_OPEN_RATIO()",
      "body": ["DOOR_SYSTEM_GET_OPEN_RATIO(${1:Hash doorHash})"],
      "description": "DOOR_SYSTEM_GET_OPEN_RATIO()"
    },
    "DOOR_SYSTEM_SET_SPRING_REMOVED": {
      "prefix": "DOOR_SYSTEM_SET_SPRING_REMOVED()",
      "body": [
        "DOOR_SYSTEM_SET_SPRING_REMOVED(${1:Hash doorHash}, ${2:BOOL removed}, ${3:BOOL requestDoor}, ${4:BOOL forceUpdate})"
      ],
      "description": "DOOR_SYSTEM_SET_SPRING_REMOVED()"
    },
    "DOOR_SYSTEM_SET_HOLD_OPEN": {
      "prefix": "DOOR_SYSTEM_SET_HOLD_OPEN()",
      "body": ["DOOR_SYSTEM_SET_HOLD_OPEN(${1:Hash doorHash}, ${2:BOOL toggle})"],
      "description": "DOOR_SYSTEM_SET_HOLD_OPEN()"
    },
    "DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES": {
      "prefix": "DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES()",
      "body": [
        "DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES(${1:Hash doorHash}, ${2:BOOL p1})"
      ],
      "description": "DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES()"
    },
    "IS_DOOR_REGISTERED_WITH_SYSTEM": {
      "prefix": "IS_DOOR_REGISTERED_WITH_SYSTEM()",
      "body": ["IS_DOOR_REGISTERED_WITH_SYSTEM(${1:Hash doorHash})"],
      "description": "IS_DOOR_REGISTERED_WITH_SYSTEM()"
    },
    "IS_DOOR_CLOSED": {
      "prefix": "IS_DOOR_CLOSED()",
      "body": ["IS_DOOR_CLOSED(${1:Hash doorHash})"],
      "description": "IS_DOOR_CLOSED()"
    },
    "OPEN_ALL_BARRIERS_FOR_RACE": {
      "prefix": "OPEN_ALL_BARRIERS_FOR_RACE()",
      "body": ["OPEN_ALL_BARRIERS_FOR_RACE(${1:BOOL p0})"],
      "description": "OPEN_ALL_BARRIERS_FOR_RACE()"
    },
    "CLOSE_ALL_BARRIERS_FOR_RACE": {
      "prefix": "CLOSE_ALL_BARRIERS_FOR_RACE()",
      "body": ["CLOSE_ALL_BARRIERS_FOR_RACE()"],
      "description": "CLOSE_ALL_BARRIERS_FOR_RACE()"
    },
    "DOOR_SYSTEM_GET_IS_PHYSICS_LOADED": {
      "prefix": "DOOR_SYSTEM_GET_IS_PHYSICS_LOADED()",
      "body": ["DOOR_SYSTEM_GET_IS_PHYSICS_LOADED(${1:Any p0})"],
      "description": "DOOR_SYSTEM_GET_IS_PHYSICS_LOADED()"
    },
    "DOOR_SYSTEM_FIND_EXISTING_DOOR": {
      "prefix": "DOOR_SYSTEM_FIND_EXISTING_DOOR()",
      "body": [
        "DOOR_SYSTEM_FIND_EXISTING_DOOR(${1:float x}, ${2:float y}, ${3:float z}, ${4:Hash modelHash}, ${5:Hash* outDoorHash})"
      ],
      "description": "DOOR_SYSTEM_FIND_EXISTING_DOOR()"
    },
    "IS_GARAGE_EMPTY": {
      "prefix": "IS_GARAGE_EMPTY()",
      "body": [
        "IS_GARAGE_EMPTY(${1:Hash garageHash}, ${2:BOOL p1}, ${3:int p2})"
      ],
      "description": "IS_GARAGE_EMPTY()"
    },
    "IS_PLAYER_ENTIRELY_INSIDE_GARAGE": {
      "prefix": "IS_PLAYER_ENTIRELY_INSIDE_GARAGE()",
      "body": [
        "IS_PLAYER_ENTIRELY_INSIDE_GARAGE(${1:Hash garageHash}, ${2:Player player}, ${3:float p2}, ${4:int p3})"
      ],
      "description": "IS_PLAYER_ENTIRELY_INSIDE_GARAGE()"
    },
    "IS_PLAYER_PARTIALLY_INSIDE_GARAGE": {
      "prefix": "IS_PLAYER_PARTIALLY_INSIDE_GARAGE()",
      "body": [
        "IS_PLAYER_PARTIALLY_INSIDE_GARAGE(${1:Hash garageHash}, ${2:Player player}, ${3:int p2})"
      ],
      "description": "IS_PLAYER_PARTIALLY_INSIDE_GARAGE()"
    },
    "ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE": {
      "prefix": "ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE()",
      "body": [
        "ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE(${1:Hash garageHash}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:Any p4})"
      ],
      "description": "ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE()"
    },
    "IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE": {
      "prefix": "IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE()",
      "body": [
        "IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE(${1:Hash garageHash}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:Any p4})"
      ],
      "description": "IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE()"
    },
    "IS_OBJECT_ENTIRELY_INSIDE_GARAGE": {
      "prefix": "IS_OBJECT_ENTIRELY_INSIDE_GARAGE()",
      "body": [
        "IS_OBJECT_ENTIRELY_INSIDE_GARAGE(${1:Hash garageHash}, ${2:Entity entity}, ${3:float p2}, ${4:int p3})"
      ],
      "description": "IS_OBJECT_ENTIRELY_INSIDE_GARAGE()"
    },
    "IS_OBJECT_PARTIALLY_INSIDE_GARAGE": {
      "prefix": "IS_OBJECT_PARTIALLY_INSIDE_GARAGE()",
      "body": [
        "IS_OBJECT_PARTIALLY_INSIDE_GARAGE(${1:Hash garageHash}, ${2:Entity entity}, ${3:int p2})"
      ],
      "description": "IS_OBJECT_PARTIALLY_INSIDE_GARAGE()"
    },
    "CLEAR_GARAGE": {
      "prefix": "CLEAR_GARAGE()",
      "body": ["CLEAR_GARAGE(${1:Hash garageHash}, ${2:BOOL isNetwork})"],
      "description": "CLEAR_GARAGE()"
    },
    "CLEAR_OBJECTS_INSIDE_GARAGE": {
      "prefix": "CLEAR_OBJECTS_INSIDE_GARAGE()",
      "body": [
        "CLEAR_OBJECTS_INSIDE_GARAGE(${1:Hash garageHash}, ${2:BOOL vehicles}, ${3:BOOL peds}, ${4:BOOL objects}, ${5:BOOL isNetwork})"
      ],
      "description": "CLEAR_OBJECTS_INSIDE_GARAGE()"
    },
    "DISABLE_TIDYING_UP_IN_GARAGE": {
      "prefix": "DISABLE_TIDYING_UP_IN_GARAGE()",
      "body": ["DISABLE_TIDYING_UP_IN_GARAGE(${1:int id}, ${2:BOOL toggle})"],
      "description": "DISABLE_TIDYING_UP_IN_GARAGE()"
    },
    "ENABLE_SAVING_IN_GARAGE": {
      "prefix": "ENABLE_SAVING_IN_GARAGE()",
      "body": ["ENABLE_SAVING_IN_GARAGE(${1:Hash garageHash}, ${2:BOOL toggle})"],
      "description": "ENABLE_SAVING_IN_GARAGE()"
    },
    "CLOSE_SAFEHOUSE_GARAGES": {
      "prefix": "CLOSE_SAFEHOUSE_GARAGES()",
      "body": ["CLOSE_SAFEHOUSE_GARAGES()"],
      "description": "CLOSE_SAFEHOUSE_GARAGES()"
    },
    "DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS": {
      "prefix": "DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS()",
      "body": [
        "DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash hash}, ${6:BOOL p5})"
      ],
      "description": "DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS()"
    },
    "IS_POINT_IN_ANGLED_AREA": {
      "prefix": "IS_POINT_IN_ANGLED_AREA()",
      "body": [
        "IS_POINT_IN_ANGLED_AREA(${1:float xPos}, ${2:float yPos}, ${3:float zPos}, ${4:float x1}, ${5:float y1}, ${6:float z1}, ${7:float x2}, ${8:float y2}, ${9:float z2}, ${10:float width}, ${11:BOOL debug}, ${12:BOOL includeZ})"
      ],
      "description": "IS_POINT_IN_ANGLED_AREA()"
    },
    "SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY": {
      "prefix": "SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY()",
      "body": [
        "SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY(${1:Object object}, ${2:BOOL toggle})"
      ],
      "description": "SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY()"
    },
    "SET_OBJECT_PHYSICS_PARAMS": {
      "prefix": "SET_OBJECT_PHYSICS_PARAMS()",
      "body": [
        "SET_OBJECT_PHYSICS_PARAMS(${1:Object object}, ${2:float weight}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float gravity}, ${8:float p7}, ${9:float p8}, ${10:float p9}, ${11:float p10}, ${12:float buoyancy})"
      ],
      "description": "SET_OBJECT_PHYSICS_PARAMS()"
    },
    "GET_OBJECT_FRAGMENT_DAMAGE_HEALTH": {
      "prefix": "GET_OBJECT_FRAGMENT_DAMAGE_HEALTH()",
      "body": ["GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(${1:Any p0}, ${2:BOOL p1})"],
      "description": "GET_OBJECT_FRAGMENT_DAMAGE_HEALTH()"
    },
    "SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN": {
      "prefix": "SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN()",
      "body": [
        "SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(${1:Object object}, ${2:BOOL toggle})"
      ],
      "description": "SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN()"
    },
    "IS_ANY_OBJECT_NEAR_POINT": {
      "prefix": "IS_ANY_OBJECT_NEAR_POINT()",
      "body": [
        "IS_ANY_OBJECT_NEAR_POINT(${1:float x}, ${2:float y}, ${3:float z}, ${4:float range}, ${5:BOOL p4})"
      ],
      "description": "IS_ANY_OBJECT_NEAR_POINT()"
    },
    "IS_OBJECT_NEAR_POINT": {
      "prefix": "IS_OBJECT_NEAR_POINT()",
      "body": [
        "IS_OBJECT_NEAR_POINT(${1:Hash objectHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float range})"
      ],
      "description": "IS_OBJECT_NEAR_POINT()"
    },
    "REMOVE_OBJECT_HIGH_DETAIL_MODEL": {
      "prefix": "REMOVE_OBJECT_HIGH_DETAIL_MODEL()",
      "body": ["REMOVE_OBJECT_HIGH_DETAIL_MODEL(${1:Object object})"],
      "description": "REMOVE_OBJECT_HIGH_DETAIL_MODEL()"
    },
    "BREAK_OBJECT_FRAGMENT_CHILD": {
      "prefix": "BREAK_OBJECT_FRAGMENT_CHILD()",
      "body": [
        "BREAK_OBJECT_FRAGMENT_CHILD(${1:Object p0}, ${2:Any p1}, ${3:BOOL p2})"
      ],
      "description": "BREAK_OBJECT_FRAGMENT_CHILD()"
    },
    "DAMAGE_OBJECT_FRAGMENT_CHILD": {
      "prefix": "DAMAGE_OBJECT_FRAGMENT_CHILD()",
      "body": [
        "DAMAGE_OBJECT_FRAGMENT_CHILD(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "DAMAGE_OBJECT_FRAGMENT_CHILD()"
    },
    "FIX_OBJECT_FRAGMENT": {
      "prefix": "FIX_OBJECT_FRAGMENT()",
      "body": ["FIX_OBJECT_FRAGMENT(${1:Object object})"],
      "description": "FIX_OBJECT_FRAGMENT()"
    },
    "TRACK_OBJECT_VISIBILITY": {
      "prefix": "TRACK_OBJECT_VISIBILITY()",
      "body": ["TRACK_OBJECT_VISIBILITY(${1:Object object})"],
      "description": "TRACK_OBJECT_VISIBILITY()"
    },
    "IS_OBJECT_VISIBLE": {
      "prefix": "IS_OBJECT_VISIBLE()",
      "body": ["IS_OBJECT_VISIBLE(${1:Object object})"],
      "description": "IS_OBJECT_VISIBLE()"
    },
    "SET_OBJECT_IS_SPECIAL_GOLFBALL": {
      "prefix": "SET_OBJECT_IS_SPECIAL_GOLFBALL()",
      "body": [
        "SET_OBJECT_IS_SPECIAL_GOLFBALL(${1:Object object}, ${2:BOOL toggle})"
      ],
      "description": "SET_OBJECT_IS_SPECIAL_GOLFBALL()"
    },
    "SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS": {
      "prefix": "SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS()",
      "body": [
        "SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS(${1:Any p0}, ${2:BOOL p1})"
      ],
      "description": "SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS()"
    },
    "ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS": {
      "prefix": "ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS()",
      "body": ["ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS(${1:BOOL value})"],
      "description": "ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS()"
    },
    "SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME": {
      "prefix": "SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME()",
      "body": [
        "SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME(${1:Object object}, ${2:BOOL toggle})"
      ],
      "description": "SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME()"
    },
    "GET_RAYFIRE_MAP_OBJECT": {
      "prefix": "GET_RAYFIRE_MAP_OBJECT()",
      "body": [
        "GET_RAYFIRE_MAP_OBJECT(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:const char* name})"
      ],
      "description": "GET_RAYFIRE_MAP_OBJECT()"
    },
    "SET_STATE_OF_RAYFIRE_MAP_OBJECT": {
      "prefix": "SET_STATE_OF_RAYFIRE_MAP_OBJECT()",
      "body": [
        "SET_STATE_OF_RAYFIRE_MAP_OBJECT(${1:Object object}, ${2:int state})"
      ],
      "description": "SET_STATE_OF_RAYFIRE_MAP_OBJECT()"
    },
    "GET_STATE_OF_RAYFIRE_MAP_OBJECT": {
      "prefix": "GET_STATE_OF_RAYFIRE_MAP_OBJECT()",
      "body": ["GET_STATE_OF_RAYFIRE_MAP_OBJECT(${1:Object object})"],
      "description": "GET_STATE_OF_RAYFIRE_MAP_OBJECT()"
    },
    "DOES_RAYFIRE_MAP_OBJECT_EXIST": {
      "prefix": "DOES_RAYFIRE_MAP_OBJECT_EXIST()",
      "body": ["DOES_RAYFIRE_MAP_OBJECT_EXIST(${1:Object object})"],
      "description": "DOES_RAYFIRE_MAP_OBJECT_EXIST()"
    },
    "GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE": {
      "prefix": "GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE()",
      "body": ["GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE(${1:Object object})"],
      "description": "GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE()"
    },
    "CREATE_PICKUP": {
      "prefix": "CREATE_PICKUP()",
      "body": [
        "CREATE_PICKUP(${1:Hash pickupHash}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:int p4}, ${6:int value}, ${7:BOOL p6}, ${8:Hash modelHash})"
      ],
      "description": "CREATE_PICKUP()"
    },
    "CREATE_PICKUP_ROTATE": {
      "prefix": "CREATE_PICKUP_ROTATE()",
      "body": [
        "CREATE_PICKUP_ROTATE(${1:Hash pickupHash}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:float rotX}, ${6:float rotY}, ${7:float rotZ}, ${8:int flag}, ${9:int amount}, ${10:Any p9}, ${11:BOOL p10}, ${12:Hash modelHash})"
      ],
      "description": "CREATE_PICKUP_ROTATE()"
    },
    "FORCE_PICKUP_ROTATE_FACE_UP": {
      "prefix": "FORCE_PICKUP_ROTATE_FACE_UP()",
      "body": ["FORCE_PICKUP_ROTATE_FACE_UP()"],
      "description": "FORCE_PICKUP_ROTATE_FACE_UP()"
    },
    "SET_CUSTOM_PICKUP_WEAPON_HASH": {
      "prefix": "SET_CUSTOM_PICKUP_WEAPON_HASH()",
      "body": [
        "SET_CUSTOM_PICKUP_WEAPON_HASH(${1:Hash pickupHash}, ${2:Pickup pickup})"
      ],
      "description": "SET_CUSTOM_PICKUP_WEAPON_HASH()"
    },
    "CREATE_AMBIENT_PICKUP": {
      "prefix": "CREATE_AMBIENT_PICKUP()",
      "body": [
        "CREATE_AMBIENT_PICKUP(${1:Hash pickupHash}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:int flags}, ${6:int value}, ${7:Hash modelHash}, ${8:BOOL p7}, ${9:BOOL p8})"
      ],
      "description": "CREATE_AMBIENT_PICKUP()"
    },
    "CREATE_NON_NETWORKED_AMBIENT_PICKUP": {
      "prefix": "CREATE_NON_NETWORKED_AMBIENT_PICKUP()",
      "body": [
        "CREATE_NON_NETWORKED_AMBIENT_PICKUP(${1:Hash pickupHash}, ${2:float posX}, ${3:float posY}, ${4:float posZ}, ${5:int flags}, ${6:int value}, ${7:Hash modelHash}, ${8:BOOL p7}, ${9:BOOL p8})"
      ],
      "description": "CREATE_NON_NETWORKED_AMBIENT_PICKUP()"
    },
    "BLOCK_PLAYERS_FOR_AMBIENT_PICKUP": {
      "prefix": "BLOCK_PLAYERS_FOR_AMBIENT_PICKUP()",
      "body": ["BLOCK_PLAYERS_FOR_AMBIENT_PICKUP(${1:Any p0}, ${2:Any p1})"],
      "description": "BLOCK_PLAYERS_FOR_AMBIENT_PICKUP()"
    },
    "CREATE_PORTABLE_PICKUP": {
      "prefix": "CREATE_PORTABLE_PICKUP()",
      "body": [
        "CREATE_PORTABLE_PICKUP(${1:Hash pickupHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL placeOnGround}, ${6:Hash modelHash})"
      ],
      "description": "CREATE_PORTABLE_PICKUP()"
    },
    "CREATE_NON_NETWORKED_PORTABLE_PICKUP": {
      "prefix": "CREATE_NON_NETWORKED_PORTABLE_PICKUP()",
      "body": [
        "CREATE_NON_NETWORKED_PORTABLE_PICKUP(${1:Hash pickupHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL placeOnGround}, ${6:Hash modelHash})"
      ],
      "description": "CREATE_NON_NETWORKED_PORTABLE_PICKUP()"
    },
    "ATTACH_PORTABLE_PICKUP_TO_PED": {
      "prefix": "ATTACH_PORTABLE_PICKUP_TO_PED()",
      "body": [
        "ATTACH_PORTABLE_PICKUP_TO_PED(${1:Object pickupObject}, ${2:Ped ped})"
      ],
      "description": "ATTACH_PORTABLE_PICKUP_TO_PED()"
    },
    "DETACH_PORTABLE_PICKUP_FROM_PED": {
      "prefix": "DETACH_PORTABLE_PICKUP_FROM_PED()",
      "body": ["DETACH_PORTABLE_PICKUP_FROM_PED(${1:Object pickupObject})"],
      "description": "DETACH_PORTABLE_PICKUP_FROM_PED()"
    },
    "FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING": {
      "prefix": "FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING()",
      "body": [
        "FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING(${1:Object object})"
      ],
      "description": "FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING()"
    },
    "HIDE_PORTABLE_PICKUP_WHEN_DETACHED": {
      "prefix": "HIDE_PORTABLE_PICKUP_WHEN_DETACHED()",
      "body": [
        "HIDE_PORTABLE_PICKUP_WHEN_DETACHED(${1:Object pickupObject}, ${2:BOOL toggle})"
      ],
      "description": "HIDE_PORTABLE_PICKUP_WHEN_DETACHED()"
    },
    "SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER": {
      "prefix": "SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER()",
      "body": [
        "SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER(${1:Hash modelHash}, ${2:int number})"
      ],
      "description": "SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER()"
    },
    "SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS": {
      "prefix": "SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS()",
      "body": ["SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS(${1:BOOL toggle})"],
      "description": "SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS()"
    },
    "GET_SAFE_PICKUP_COORDS": {
      "prefix": "GET_SAFE_PICKUP_COORDS()",
      "body": [
        "GET_SAFE_PICKUP_COORDS(${1:float x}, ${2:float y}, ${3:float z}, ${4:float p3}, ${5:float p4})"
      ],
      "description": "GET_SAFE_PICKUP_COORDS()"
    },
    "ADD_EXTENDED_PICKUP_PROBE_AREA": {
      "prefix": "ADD_EXTENDED_PICKUP_PROBE_AREA()",
      "body": [
        "ADD_EXTENDED_PICKUP_PROBE_AREA(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius})"
      ],
      "description": "ADD_EXTENDED_PICKUP_PROBE_AREA()"
    },
    "CLEAR_EXTENDED_PICKUP_PROBE_AREAS": {
      "prefix": "CLEAR_EXTENDED_PICKUP_PROBE_AREAS()",
      "body": ["CLEAR_EXTENDED_PICKUP_PROBE_AREAS()"],
      "description": "CLEAR_EXTENDED_PICKUP_PROBE_AREAS()"
    },
    "GET_PICKUP_COORDS": {
      "prefix": "GET_PICKUP_COORDS()",
      "body": ["GET_PICKUP_COORDS(${1:Pickup pickup})"],
      "description": "GET_PICKUP_COORDS()"
    },
    "SUPPRESS_PICKUP_SOUND_FOR_PICKUP": {
      "prefix": "SUPPRESS_PICKUP_SOUND_FOR_PICKUP()",
      "body": ["SUPPRESS_PICKUP_SOUND_FOR_PICKUP(${1:Any p0}, ${2:Any p1})"],
      "description": "SUPPRESS_PICKUP_SOUND_FOR_PICKUP()"
    },
    "REMOVE_ALL_PICKUPS_OF_TYPE": {
      "prefix": "REMOVE_ALL_PICKUPS_OF_TYPE()",
      "body": ["REMOVE_ALL_PICKUPS_OF_TYPE(${1:Hash pickupHash})"],
      "description": "REMOVE_ALL_PICKUPS_OF_TYPE()"
    },
    "HAS_PICKUP_BEEN_COLLECTED": {
      "prefix": "HAS_PICKUP_BEEN_COLLECTED()",
      "body": ["HAS_PICKUP_BEEN_COLLECTED(${1:Pickup pickup})"],
      "description": "HAS_PICKUP_BEEN_COLLECTED()"
    },
    "REMOVE_PICKUP": {
      "prefix": "REMOVE_PICKUP()",
      "body": ["REMOVE_PICKUP(${1:Pickup pickup})"],
      "description": "REMOVE_PICKUP()"
    },
    "CREATE_MONEY_PICKUPS": {
      "prefix": "CREATE_MONEY_PICKUPS()",
      "body": [
        "CREATE_MONEY_PICKUPS(${1:float x}, ${2:float y}, ${3:float z}, ${4:int value}, ${5:int amount}, ${6:Hash model})"
      ],
      "description": "CREATE_MONEY_PICKUPS()"
    },
    "DOES_PICKUP_EXIST": {
      "prefix": "DOES_PICKUP_EXIST()",
      "body": ["DOES_PICKUP_EXIST(${1:Pickup pickup})"],
      "description": "DOES_PICKUP_EXIST()"
    },
    "DOES_PICKUP_OBJECT_EXIST": {
      "prefix": "DOES_PICKUP_OBJECT_EXIST()",
      "body": ["DOES_PICKUP_OBJECT_EXIST(${1:Object pickupObject})"],
      "description": "DOES_PICKUP_OBJECT_EXIST()"
    },
    "GET_PICKUP_OBJECT": {
      "prefix": "GET_PICKUP_OBJECT()",
      "body": ["GET_PICKUP_OBJECT(${1:Pickup pickup})"],
      "description": "GET_PICKUP_OBJECT()"
    },
    "IS_OBJECT_A_PICKUP": {
      "prefix": "IS_OBJECT_A_PICKUP()",
      "body": ["IS_OBJECT_A_PICKUP(${1:Object object})"],
      "description": "IS_OBJECT_A_PICKUP()"
    },
    "IS_OBJECT_A_PORTABLE_PICKUP": {
      "prefix": "IS_OBJECT_A_PORTABLE_PICKUP()",
      "body": ["IS_OBJECT_A_PORTABLE_PICKUP(${1:Object object})"],
      "description": "IS_OBJECT_A_PORTABLE_PICKUP()"
    },
    "DOES_PICKUP_OF_TYPE_EXIST_IN_AREA": {
      "prefix": "DOES_PICKUP_OF_TYPE_EXIST_IN_AREA()",
      "body": [
        "DOES_PICKUP_OF_TYPE_EXIST_IN_AREA(${1:Hash pickupHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius})"
      ],
      "description": "DOES_PICKUP_OF_TYPE_EXIST_IN_AREA()"
    },
    "SET_PICKUP_REGENERATION_TIME": {
      "prefix": "SET_PICKUP_REGENERATION_TIME()",
      "body": [
        "SET_PICKUP_REGENERATION_TIME(${1:Pickup pickup}, ${2:int duration})"
      ],
      "description": "SET_PICKUP_REGENERATION_TIME()"
    },
    "FORCE_PICKUP_REGENERATE": {
      "prefix": "FORCE_PICKUP_REGENERATE()",
      "body": ["FORCE_PICKUP_REGENERATE(${1:Any p0})"],
      "description": "FORCE_PICKUP_REGENERATE()"
    },
    "SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE": {
      "prefix": "SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE()",
      "body": [
        "SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(${1:Player player}, ${2:Hash pickupHash}, ${3:BOOL toggle})"
      ],
      "description": "SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE()"
    },
    "SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL": {
      "prefix": "SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL()",
      "body": [
        "SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL(${1:Hash modelHash}, ${2:BOOL toggle})"
      ],
      "description": "SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL()"
    },
    "ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE": {
      "prefix": "ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE()",
      "body": [
        "ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE(${1:Hash pickupHash})"
      ],
      "description": "ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE()"
    },
    "SET_TEAM_PICKUP_OBJECT": {
      "prefix": "SET_TEAM_PICKUP_OBJECT()",
      "body": [
        "SET_TEAM_PICKUP_OBJECT(${1:Object object}, ${2:Any p1}, ${3:BOOL p2})"
      ],
      "description": "SET_TEAM_PICKUP_OBJECT()"
    },
    "PREVENT_COLLECTION_OF_PORTABLE_PICKUP": {
      "prefix": "PREVENT_COLLECTION_OF_PORTABLE_PICKUP()",
      "body": [
        "PREVENT_COLLECTION_OF_PORTABLE_PICKUP(${1:Object object}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "PREVENT_COLLECTION_OF_PORTABLE_PICKUP()"
    },
    "SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE": {
      "prefix": "SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE()",
      "body": [
        "SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE(${1:Pickup pickup}, ${2:BOOL toggle})"
      ],
      "description": "SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE()"
    },
    "SET_PICKUP_GLOW_OFFSET": {
      "prefix": "SET_PICKUP_GLOW_OFFSET()",
      "body": ["SET_PICKUP_GLOW_OFFSET(${1:Pickup pickup}, ${2:float p1})"],
      "description": "SET_PICKUP_GLOW_OFFSET()"
    },
    "SET_PICKUP_OBJECT_GLOW_OFFSET": {
      "prefix": "SET_PICKUP_OBJECT_GLOW_OFFSET()",
      "body": [
        "SET_PICKUP_OBJECT_GLOW_OFFSET(${1:Pickup pickup}, ${2:float p1}, ${3:BOOL p2})"
      ],
      "description": "SET_PICKUP_OBJECT_GLOW_OFFSET()"
    },
    "SET_OBJECT_GLOW_IN_SAME_TEAM": {
      "prefix": "SET_OBJECT_GLOW_IN_SAME_TEAM()",
      "body": ["SET_OBJECT_GLOW_IN_SAME_TEAM(${1:Pickup pickup})"],
      "description": "SET_OBJECT_GLOW_IN_SAME_TEAM()"
    },
    "SET_PICKUP_OBJECT_ARROW_MARKER": {
      "prefix": "SET_PICKUP_OBJECT_ARROW_MARKER()",
      "body": [
        "SET_PICKUP_OBJECT_ARROW_MARKER(${1:Pickup pickup}, ${2:BOOL toggle})"
      ],
      "description": "SET_PICKUP_OBJECT_ARROW_MARKER()"
    },
    "ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE": {
      "prefix": "ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE()",
      "body": [
        "ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE(${1:Pickup pickup}, ${2:BOOL toggle})"
      ],
      "description": "ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE()"
    },
    "GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP": {
      "prefix": "GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP()",
      "body": ["GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP(${1:Hash pickupHash})"],
      "description": "GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP()"
    },
    "SET_PICKUP_GENERATION_RANGE_MULTIPLIER": {
      "prefix": "SET_PICKUP_GENERATION_RANGE_MULTIPLIER()",
      "body": ["SET_PICKUP_GENERATION_RANGE_MULTIPLIER(${1:float multiplier})"],
      "description": "SET_PICKUP_GENERATION_RANGE_MULTIPLIER()"
    },
    "GET_PICKUP_GENERATION_RANGE_MULTIPLIER": {
      "prefix": "GET_PICKUP_GENERATION_RANGE_MULTIPLIER()",
      "body": ["GET_PICKUP_GENERATION_RANGE_MULTIPLIER()"],
      "description": "GET_PICKUP_GENERATION_RANGE_MULTIPLIER()"
    },
    "SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW": {
      "prefix": "SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW()",
      "body": ["SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW(${1:BOOL p0})"],
      "description": "SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW()"
    },
    "SET_PICKUP_UNCOLLECTABLE": {
      "prefix": "SET_PICKUP_UNCOLLECTABLE()",
      "body": ["SET_PICKUP_UNCOLLECTABLE(${1:Pickup pickup}, ${2:BOOL toggle})"],
      "description": "SET_PICKUP_UNCOLLECTABLE()"
    },
    "SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE": {
      "prefix": "SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE()",
      "body": [
        "SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE(${1:Pickup pickup}, ${2:BOOL toggle})"
      ],
      "description": "SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE()"
    },
    "SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE": {
      "prefix": "SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE()",
      "body": [
        "SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE(${1:Pickup pickup}, ${2:BOOL toggle})"
      ],
      "description": "SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE()"
    },
    "SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE": {
      "prefix": "SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE()",
      "body": [
        "SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE(${1:Pickup pickup}, ${2:BOOL toggle})"
      ],
      "description": "SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE()"
    },
    "SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT": {
      "prefix": "SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT()",
      "body": ["SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT(${1:int p0})"],
      "description": "SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT()"
    },
    "SET_PORTABLE_PICKUP_PERSIST": {
      "prefix": "SET_PORTABLE_PICKUP_PERSIST()",
      "body": [
        "SET_PORTABLE_PICKUP_PERSIST(${1:Pickup pickup}, ${2:BOOL toggle})"
      ],
      "description": "SET_PORTABLE_PICKUP_PERSIST()"
    },
    "ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS": {
      "prefix": "ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS()",
      "body": [
        "ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS(${1:Pickup pickup}, ${2:BOOL toggle})"
      ],
      "description": "ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS()"
    },
    "FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP": {
      "prefix": "FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP()",
      "body": [
        "FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP(${1:Pickup pickup}, ${2:BOOL toggle})"
      ],
      "description": "FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP()"
    },
    "ALLOW_PICKUP_BY_NONE_PARTICIPANT": {
      "prefix": "ALLOW_PICKUP_BY_NONE_PARTICIPANT()",
      "body": [
        "ALLOW_PICKUP_BY_NONE_PARTICIPANT(${1:Pickup pickup}, ${2:BOOL toggle})"
      ],
      "description": "ALLOW_PICKUP_BY_NONE_PARTICIPANT()"
    },
    "SUPPRESS_PICKUP_REWARD_TYPE": {
      "prefix": "SUPPRESS_PICKUP_REWARD_TYPE()",
      "body": [
        "SUPPRESS_PICKUP_REWARD_TYPE(${1:int rewardType}, ${2:BOOL suppress})"
      ],
      "description": "SUPPRESS_PICKUP_REWARD_TYPE()"
    },
    "CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION": {
      "prefix": "CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION()",
      "body": ["CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION()"],
      "description": "CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION()"
    },
    "CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION": {
      "prefix": "CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION()",
      "body": ["CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION(${1:int rewardType})"],
      "description": "CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION()"
    },
    "RENDER_FAKE_PICKUP_GLOW": {
      "prefix": "RENDER_FAKE_PICKUP_GLOW()",
      "body": [
        "RENDER_FAKE_PICKUP_GLOW(${1:float x}, ${2:float y}, ${3:float z}, ${4:int colorIndex})"
      ],
      "description": "RENDER_FAKE_PICKUP_GLOW()"
    },
    "SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE": {
      "prefix": "SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE()",
      "body": ["SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE(${1:Pickup pickup})"],
      "description": "SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE()"
    },
    "SET_PICKUP_TRACK_DAMAGE_EVENTS": {
      "prefix": "SET_PICKUP_TRACK_DAMAGE_EVENTS()",
      "body": [
        "SET_PICKUP_TRACK_DAMAGE_EVENTS(${1:Pickup pickup}, ${2:BOOL toggle})"
      ],
      "description": "SET_PICKUP_TRACK_DAMAGE_EVENTS()"
    },
    "SET_ENTITY_FLAG_SUPPRESS_SHADOW": {
      "prefix": "SET_ENTITY_FLAG_SUPPRESS_SHADOW()",
      "body": [
        "SET_ENTITY_FLAG_SUPPRESS_SHADOW(${1:Entity entity}, ${2:BOOL toggle})"
      ],
      "description": "SET_ENTITY_FLAG_SUPPRESS_SHADOW()"
    },
    "SET_ENTITY_FLAG_RENDER_SMALL_SHADOW": {
      "prefix": "SET_ENTITY_FLAG_RENDER_SMALL_SHADOW()",
      "body": [
        "SET_ENTITY_FLAG_RENDER_SMALL_SHADOW(${1:Object object}, ${2:BOOL toggle})"
      ],
      "description": "SET_ENTITY_FLAG_RENDER_SMALL_SHADOW()"
    },
    "GET_WEAPON_TYPE_FROM_PICKUP_TYPE": {
      "prefix": "GET_WEAPON_TYPE_FROM_PICKUP_TYPE()",
      "body": ["GET_WEAPON_TYPE_FROM_PICKUP_TYPE(${1:Hash pickupHash})"],
      "description": "GET_WEAPON_TYPE_FROM_PICKUP_TYPE()"
    },
    "GET_PICKUP_TYPE_FROM_WEAPON_HASH": {
      "prefix": "GET_PICKUP_TYPE_FROM_WEAPON_HASH()",
      "body": ["GET_PICKUP_TYPE_FROM_WEAPON_HASH(${1:Hash weaponHash})"],
      "description": "GET_PICKUP_TYPE_FROM_WEAPON_HASH()"
    },
    "IS_PICKUP_WEAPON_OBJECT_VALID": {
      "prefix": "IS_PICKUP_WEAPON_OBJECT_VALID()",
      "body": ["IS_PICKUP_WEAPON_OBJECT_VALID(${1:Object object})"],
      "description": "IS_PICKUP_WEAPON_OBJECT_VALID()"
    },
    "GET_OBJECT_TINT_INDEX": {
      "prefix": "GET_OBJECT_TINT_INDEX()",
      "body": ["GET_OBJECT_TINT_INDEX(${1:Object object})"],
      "description": "GET_OBJECT_TINT_INDEX()"
    },
    "SET_OBJECT_TINT_INDEX": {
      "prefix": "SET_OBJECT_TINT_INDEX()",
      "body": [
        "SET_OBJECT_TINT_INDEX(${1:Object object}, ${2:int textureVariation})"
      ],
      "description": "SET_OBJECT_TINT_INDEX()"
    },
    "SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE": {
      "prefix": "SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE()",
      "body": [
        "SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash modelHash}, ${6:int textureVariation})"
      ],
      "description": "SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE()"
    },
    "SET_PROP_TINT_INDEX": {
      "prefix": "SET_PROP_TINT_INDEX()",
      "body": ["SET_PROP_TINT_INDEX(${1:Any p0}, ${2:Any p1})"],
      "description": "SET_PROP_TINT_INDEX()"
    },
    "SET_PROP_LIGHT_COLOR": {
      "prefix": "SET_PROP_LIGHT_COLOR()",
      "body": [
        "SET_PROP_LIGHT_COLOR(${1:Object object}, ${2:BOOL p1}, ${3:int r}, ${4:int g}, ${5:int b})"
      ],
      "description": "SET_PROP_LIGHT_COLOR()"
    },
    "IS_PROP_LIGHT_OVERRIDEN": {
      "prefix": "IS_PROP_LIGHT_OVERRIDEN()",
      "body": ["IS_PROP_LIGHT_OVERRIDEN(${1:Object object})"],
      "description": "IS_PROP_LIGHT_OVERRIDEN()"
    },
    "SET_OBJECT_IS_VISIBLE_IN_MIRRORS": {
      "prefix": "SET_OBJECT_IS_VISIBLE_IN_MIRRORS()",
      "body": [
        "SET_OBJECT_IS_VISIBLE_IN_MIRRORS(${1:Object object}, ${2:BOOL toggle})"
      ],
      "description": "SET_OBJECT_IS_VISIBLE_IN_MIRRORS()"
    },
    "SET_OBJECT_SPEED_BOOST_AMOUNT": {
      "prefix": "SET_OBJECT_SPEED_BOOST_AMOUNT()",
      "body": ["SET_OBJECT_SPEED_BOOST_AMOUNT(${1:Object object}, ${2:Any p1})"],
      "description": "SET_OBJECT_SPEED_BOOST_AMOUNT()"
    },
    "SET_OBJECT_SPEED_BOOST_DURATION": {
      "prefix": "SET_OBJECT_SPEED_BOOST_DURATION()",
      "body": [
        "SET_OBJECT_SPEED_BOOST_DURATION(${1:Object object}, ${2:float duration})"
      ],
      "description": "SET_OBJECT_SPEED_BOOST_DURATION()"
    },
    "CONVERT_OLD_PICKUP_TYPE_TO_NEW": {
      "prefix": "CONVERT_OLD_PICKUP_TYPE_TO_NEW()",
      "body": ["CONVERT_OLD_PICKUP_TYPE_TO_NEW(${1:Hash pickupHash})"],
      "description": "CONVERT_OLD_PICKUP_TYPE_TO_NEW()"
    },
    "SET_FORCE_OBJECT_THIS_FRAME": {
      "prefix": "SET_FORCE_OBJECT_THIS_FRAME()",
      "body": [
        "SET_FORCE_OBJECT_THIS_FRAME(${1:float x}, ${2:float y}, ${3:float z}, ${4:float p3})"
      ],
      "description": "SET_FORCE_OBJECT_THIS_FRAME()"
    },
    "ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE": {
      "prefix": "ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE()",
      "body": ["ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE(${1:Object object})"],
      "description": "ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE()"
    },
    "SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE": {
      "prefix": "SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE()",
      "body": [
        "SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE(${1:Any p0})"
      ],
      "description": "SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE()"
    },
    "SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT": {
      "prefix": "SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT()",
      "body": [
        "SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT(${1:Entity entity}, ${2:Any p1})"
      ],
      "description": "SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT()"
    },
    "SET_DRIVE_ARTICULATED_JOINT": {
      "prefix": "SET_DRIVE_ARTICULATED_JOINT()",
      "body": [
        "SET_DRIVE_ARTICULATED_JOINT(${1:Object object}, ${2:BOOL toggle}, ${3:int p2})"
      ],
      "description": "SET_DRIVE_ARTICULATED_JOINT()"
    },
    "SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR": {
      "prefix": "SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR()",
      "body": [
        "SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR(${1:Object object}, ${2:BOOL toggle}, ${3:int p2}, ${4:Ped ped})"
      ],
      "description": "SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR()"
    },
    "SET_OBJECT_IS_A_PRESSURE_PLATE": {
      "prefix": "SET_OBJECT_IS_A_PRESSURE_PLATE()",
      "body": [
        "SET_OBJECT_IS_A_PRESSURE_PLATE(${1:Object object}, ${2:BOOL toggle})"
      ],
      "description": "SET_OBJECT_IS_A_PRESSURE_PLATE()"
    },
    "SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE": {
      "prefix": "SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE()",
      "body": [
        "SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE(${1:Object object}, ${2:BOOL p1})"
      ],
      "description": "SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE()"
    },
    "GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE": {
      "prefix": "GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE()",
      "body": [
        "GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE(${1:Object object}, ${2:Any p1})"
      ],
      "description": "GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE()"
    },
    "GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE": {
      "prefix": "GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE()",
      "body": ["GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE(${1:Any p0}, ${2:Any p1})"],
      "description": "GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE()"
    },
    "SET_IS_OBJECT_ARTICULATED": {
      "prefix": "SET_IS_OBJECT_ARTICULATED()",
      "body": ["SET_IS_OBJECT_ARTICULATED(${1:Object object}, ${2:BOOL toggle})"],
      "description": "SET_IS_OBJECT_ARTICULATED()"
    },
    "SET_IS_OBJECT_BALL": {
      "prefix": "SET_IS_OBJECT_BALL()",
      "body": ["SET_IS_OBJECT_BALL(${1:Object object}, ${2:BOOL toggle})"],
      "description": "SET_IS_OBJECT_BALL()"
    },
    "IS_CONTROL_ENABLED": {
      "prefix": "IS_CONTROL_ENABLED()",
      "body": ["IS_CONTROL_ENABLED(${1:int control}, ${2:int action})"],
      "description": "IS_CONTROL_ENABLED()"
    },
    "IS_CONTROL_PRESSED": {
      "prefix": "IS_CONTROL_PRESSED()",
      "body": ["IS_CONTROL_PRESSED(${1:int control}, ${2:int action})"],
      "description": "IS_CONTROL_PRESSED()"
    },
    "IS_CONTROL_RELEASED": {
      "prefix": "IS_CONTROL_RELEASED()",
      "body": ["IS_CONTROL_RELEASED(${1:int control}, ${2:int action})"],
      "description": "IS_CONTROL_RELEASED()"
    },
    "IS_CONTROL_JUST_PRESSED": {
      "prefix": "IS_CONTROL_JUST_PRESSED()",
      "body": ["IS_CONTROL_JUST_PRESSED(${1:int control}, ${2:int action})"],
      "description": "IS_CONTROL_JUST_PRESSED()"
    },
    "IS_CONTROL_JUST_RELEASED": {
      "prefix": "IS_CONTROL_JUST_RELEASED()",
      "body": ["IS_CONTROL_JUST_RELEASED(${1:int control}, ${2:int action})"],
      "description": "IS_CONTROL_JUST_RELEASED()"
    },
    "GET_CONTROL_VALUE": {
      "prefix": "GET_CONTROL_VALUE()",
      "body": ["GET_CONTROL_VALUE(${1:int control}, ${2:int action})"],
      "description": "GET_CONTROL_VALUE()"
    },
    "GET_CONTROL_NORMAL": {
      "prefix": "GET_CONTROL_NORMAL()",
      "body": ["GET_CONTROL_NORMAL(${1:int control}, ${2:int action})"],
      "description": "GET_CONTROL_NORMAL()"
    },
    "SET_USE_ADJUSTED_MOUSE_COORDS": {
      "prefix": "SET_USE_ADJUSTED_MOUSE_COORDS()",
      "body": ["SET_USE_ADJUSTED_MOUSE_COORDS(${1:BOOL toggle})"],
      "description": "SET_USE_ADJUSTED_MOUSE_COORDS()"
    },
    "GET_CONTROL_UNBOUND_NORMAL": {
      "prefix": "GET_CONTROL_UNBOUND_NORMAL()",
      "body": ["GET_CONTROL_UNBOUND_NORMAL(${1:int control}, ${2:int action})"],
      "description": "GET_CONTROL_UNBOUND_NORMAL()"
    },
    "SET_CONTROL_VALUE_NEXT_FRAME": {
      "prefix": "SET_CONTROL_VALUE_NEXT_FRAME()",
      "body": [
        "SET_CONTROL_VALUE_NEXT_FRAME(${1:int control}, ${2:int action}, ${3:float value})"
      ],
      "description": "SET_CONTROL_VALUE_NEXT_FRAME()"
    },
    "IS_DISABLED_CONTROL_PRESSED": {
      "prefix": "IS_DISABLED_CONTROL_PRESSED()",
      "body": ["IS_DISABLED_CONTROL_PRESSED(${1:int control}, ${2:int action})"],
      "description": "IS_DISABLED_CONTROL_PRESSED()"
    },
    "IS_DISABLED_CONTROL_RELEASED": {
      "prefix": "IS_DISABLED_CONTROL_RELEASED()",
      "body": ["IS_DISABLED_CONTROL_RELEASED(${1:int control}, ${2:int action})"],
      "description": "IS_DISABLED_CONTROL_RELEASED()"
    },
    "IS_DISABLED_CONTROL_JUST_PRESSED": {
      "prefix": "IS_DISABLED_CONTROL_JUST_PRESSED()",
      "body": [
        "IS_DISABLED_CONTROL_JUST_PRESSED(${1:int control}, ${2:int action})"
      ],
      "description": "IS_DISABLED_CONTROL_JUST_PRESSED()"
    },
    "IS_DISABLED_CONTROL_JUST_RELEASED": {
      "prefix": "IS_DISABLED_CONTROL_JUST_RELEASED()",
      "body": [
        "IS_DISABLED_CONTROL_JUST_RELEASED(${1:int control}, ${2:int action})"
      ],
      "description": "IS_DISABLED_CONTROL_JUST_RELEASED()"
    },
    "GET_DISABLED_CONTROL_NORMAL": {
      "prefix": "GET_DISABLED_CONTROL_NORMAL()",
      "body": ["GET_DISABLED_CONTROL_NORMAL(${1:int control}, ${2:int action})"],
      "description": "GET_DISABLED_CONTROL_NORMAL()"
    },
    "GET_DISABLED_CONTROL_UNBOUND_NORMAL": {
      "prefix": "GET_DISABLED_CONTROL_UNBOUND_NORMAL()",
      "body": [
        "GET_DISABLED_CONTROL_UNBOUND_NORMAL(${1:int control}, ${2:int action})"
      ],
      "description": "GET_DISABLED_CONTROL_UNBOUND_NORMAL()"
    },
    "GET_CONTROL_HOW_LONG_AGO": {
      "prefix": "GET_CONTROL_HOW_LONG_AGO()",
      "body": ["GET_CONTROL_HOW_LONG_AGO(${1:int control})"],
      "description": "GET_CONTROL_HOW_LONG_AGO()"
    },
    "IS_USING_KEYBOARD_AND_MOUSE": {
      "prefix": "IS_USING_KEYBOARD_AND_MOUSE()",
      "body": ["IS_USING_KEYBOARD_AND_MOUSE(${1:int control})"],
      "description": "IS_USING_KEYBOARD_AND_MOUSE()"
    },
    "IS_USING_CURSOR": {
      "prefix": "IS_USING_CURSOR()",
      "body": ["IS_USING_CURSOR(${1:int control})"],
      "description": "IS_USING_CURSOR()"
    },
    "SET_CURSOR_POSITION": {
      "prefix": "SET_CURSOR_POSITION()",
      "body": ["SET_CURSOR_POSITION(${1:float x}, ${2:float y})"],
      "description": "SET_CURSOR_POSITION()"
    },
    "IS_USING_REMOTE_PLAY": {
      "prefix": "IS_USING_REMOTE_PLAY()",
      "body": ["IS_USING_REMOTE_PLAY(${1:int control})"],
      "description": "IS_USING_REMOTE_PLAY()"
    },
    "HAVE_CONTROLS_CHANGED": {
      "prefix": "HAVE_CONTROLS_CHANGED()",
      "body": ["HAVE_CONTROLS_CHANGED(${1:int control})"],
      "description": "HAVE_CONTROLS_CHANGED()"
    },
    "SET_CONTROL_LIGHT_EFFECT_COLOR": {
      "prefix": "SET_CONTROL_LIGHT_EFFECT_COLOR()",
      "body": [
        "SET_CONTROL_LIGHT_EFFECT_COLOR(${1:int control}, ${2:int red}, ${3:int green}, ${4:int blue})"
      ],
      "description": "SET_CONTROL_LIGHT_EFFECT_COLOR()"
    },
    "CLEAR_CONTROL_LIGHT_EFFECT": {
      "prefix": "CLEAR_CONTROL_LIGHT_EFFECT()",
      "body": ["CLEAR_CONTROL_LIGHT_EFFECT(${1:int control})"],
      "description": "CLEAR_CONTROL_LIGHT_EFFECT()"
    },
    "SET_CONTROL_SHAKE": {
      "prefix": "SET_CONTROL_SHAKE()",
      "body": [
        "SET_CONTROL_SHAKE(${1:int control}, ${2:int duration}, ${3:int frequency})"
      ],
      "description": "SET_CONTROL_SHAKE()"
    },
    "SET_CONTROL_TRIGGER_SHAKE": {
      "prefix": "SET_CONTROL_TRIGGER_SHAKE()",
      "body": [
        "SET_CONTROL_TRIGGER_SHAKE(${1:int control}, ${2:int leftDuration}, ${3:int leftFrequency}, ${4:int rightDuration}, ${5:int rightFrequency})"
      ],
      "description": "SET_CONTROL_TRIGGER_SHAKE()"
    },
    "STOP_CONTROL_SHAKE": {
      "prefix": "STOP_CONTROL_SHAKE()",
      "body": ["STOP_CONTROL_SHAKE(${1:int control})"],
      "description": "STOP_CONTROL_SHAKE()"
    },
    "SET_CONTROL_SHAKE_SUPPRESSED_ID": {
      "prefix": "SET_CONTROL_SHAKE_SUPPRESSED_ID()",
      "body": [
        "SET_CONTROL_SHAKE_SUPPRESSED_ID(${1:int control}, ${2:int uniqueId})"
      ],
      "description": "SET_CONTROL_SHAKE_SUPPRESSED_ID()"
    },
    "CLEAR_CONTROL_SHAKE_SUPPRESSED_ID": {
      "prefix": "CLEAR_CONTROL_SHAKE_SUPPRESSED_ID()",
      "body": ["CLEAR_CONTROL_SHAKE_SUPPRESSED_ID(${1:int control})"],
      "description": "CLEAR_CONTROL_SHAKE_SUPPRESSED_ID()"
    },
    "IS_LOOK_INVERTED": {
      "prefix": "IS_LOOK_INVERTED()",
      "body": ["IS_LOOK_INVERTED()"],
      "description": "IS_LOOK_INVERTED()"
    },
    "IS_MOUSE_LOOK_INVERTED": {
      "prefix": "IS_MOUSE_LOOK_INVERTED()",
      "body": ["IS_MOUSE_LOOK_INVERTED()"],
      "description": "IS_MOUSE_LOOK_INVERTED()"
    },
    "GET_LOCAL_PLAYER_AIM_STATE": {
      "prefix": "GET_LOCAL_PLAYER_AIM_STATE()",
      "body": ["GET_LOCAL_PLAYER_AIM_STATE()"],
      "description": "GET_LOCAL_PLAYER_AIM_STATE()"
    },
    "GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE": {
      "prefix": "GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE()",
      "body": ["GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE()"],
      "description": "GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE()"
    },
    "GET_IS_USING_ALTERNATE_HANDBRAKE": {
      "prefix": "GET_IS_USING_ALTERNATE_HANDBRAKE()",
      "body": ["GET_IS_USING_ALTERNATE_HANDBRAKE()"],
      "description": "GET_IS_USING_ALTERNATE_HANDBRAKE()"
    },
    "GET_IS_USING_ALTERNATE_DRIVEBY": {
      "prefix": "GET_IS_USING_ALTERNATE_DRIVEBY()",
      "body": ["GET_IS_USING_ALTERNATE_DRIVEBY()"],
      "description": "GET_IS_USING_ALTERNATE_DRIVEBY()"
    },
    "GET_ALLOW_MOVEMENT_WHILE_ZOOMED": {
      "prefix": "GET_ALLOW_MOVEMENT_WHILE_ZOOMED()",
      "body": ["GET_ALLOW_MOVEMENT_WHILE_ZOOMED()"],
      "description": "GET_ALLOW_MOVEMENT_WHILE_ZOOMED()"
    },
    "SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED": {
      "prefix": "SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED()",
      "body": ["SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED(${1:BOOL toggle})"],
      "description": "SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED()"
    },
    "SET_INPUT_EXCLUSIVE": {
      "prefix": "SET_INPUT_EXCLUSIVE()",
      "body": ["SET_INPUT_EXCLUSIVE(${1:int control}, ${2:int action})"],
      "description": "SET_INPUT_EXCLUSIVE()"
    },
    "DISABLE_CONTROL_ACTION": {
      "prefix": "DISABLE_CONTROL_ACTION()",
      "body": [
        "DISABLE_CONTROL_ACTION(${1:int control}, ${2:int action}, ${3:BOOL disableRelatedActions})"
      ],
      "description": "DISABLE_CONTROL_ACTION()"
    },
    "ENABLE_CONTROL_ACTION": {
      "prefix": "ENABLE_CONTROL_ACTION()",
      "body": [
        "ENABLE_CONTROL_ACTION(${1:int control}, ${2:int action}, ${3:BOOL enableRelatedActions})"
      ],
      "description": "ENABLE_CONTROL_ACTION()"
    },
    "DISABLE_ALL_CONTROL_ACTIONS": {
      "prefix": "DISABLE_ALL_CONTROL_ACTIONS()",
      "body": ["DISABLE_ALL_CONTROL_ACTIONS(${1:int control})"],
      "description": "DISABLE_ALL_CONTROL_ACTIONS()"
    },
    "ENABLE_ALL_CONTROL_ACTIONS": {
      "prefix": "ENABLE_ALL_CONTROL_ACTIONS()",
      "body": ["ENABLE_ALL_CONTROL_ACTIONS(${1:int control})"],
      "description": "ENABLE_ALL_CONTROL_ACTIONS()"
    },
    "INIT_PC_SCRIPTED_CONTROLS": {
      "prefix": "INIT_PC_SCRIPTED_CONTROLS()",
      "body": ["INIT_PC_SCRIPTED_CONTROLS(${1:const char* schemeName})"],
      "description": "INIT_PC_SCRIPTED_CONTROLS()"
    },
    "SWITCH_PC_SCRIPTED_CONTROLS": {
      "prefix": "SWITCH_PC_SCRIPTED_CONTROLS()",
      "body": ["SWITCH_PC_SCRIPTED_CONTROLS(${1:const char* schemeName})"],
      "description": "SWITCH_PC_SCRIPTED_CONTROLS()"
    },
    "SHUTDOWN_PC_SCRIPTED_CONTROLS": {
      "prefix": "SHUTDOWN_PC_SCRIPTED_CONTROLS()",
      "body": ["SHUTDOWN_PC_SCRIPTED_CONTROLS()"],
      "description": "SHUTDOWN_PC_SCRIPTED_CONTROLS()"
    },
    "ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT": {
      "prefix": "ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT()",
      "body": ["ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT(${1:int control})"],
      "description": "ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT()"
    },
    "SET_ROADS_IN_AREA": {
      "prefix": "SET_ROADS_IN_AREA()",
      "body": [
        "SET_ROADS_IN_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:BOOL nodeEnabled}, ${8:BOOL unknown2})"
      ],
      "description": "SET_ROADS_IN_AREA()"
    },
    "SET_ROADS_IN_ANGLED_AREA": {
      "prefix": "SET_ROADS_IN_ANGLED_AREA()",
      "body": [
        "SET_ROADS_IN_ANGLED_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float width}, ${8:BOOL unknown1}, ${9:BOOL unknown2}, ${10:BOOL unknown3})"
      ],
      "description": "SET_ROADS_IN_ANGLED_AREA()"
    },
    "SET_PED_PATHS_IN_AREA": {
      "prefix": "SET_PED_PATHS_IN_AREA()",
      "body": [
        "SET_PED_PATHS_IN_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:BOOL p6}, ${8:Any p7})"
      ],
      "description": "SET_PED_PATHS_IN_AREA()"
    },
    "GET_SAFE_COORD_FOR_PED": {
      "prefix": "GET_SAFE_COORD_FOR_PED()",
      "body": [
        "GET_SAFE_COORD_FOR_PED(${1:float x}, ${2:float y}, ${3:float z}, ${4:BOOL onGround}, ${5:Vector3* outPosition}, ${6:int flags})"
      ],
      "description": "GET_SAFE_COORD_FOR_PED()"
    },
    "GET_CLOSEST_VEHICLE_NODE": {
      "prefix": "GET_CLOSEST_VEHICLE_NODE()",
      "body": [
        "GET_CLOSEST_VEHICLE_NODE(${1:float x}, ${2:float y}, ${3:float z}, ${4:Vector3* outPosition}, ${5:int nodeFlags}, ${6:float p5}, ${7:float p6})"
      ],
      "description": "GET_CLOSEST_VEHICLE_NODE()"
    },
    "GET_CLOSEST_MAJOR_VEHICLE_NODE": {
      "prefix": "GET_CLOSEST_MAJOR_VEHICLE_NODE()",
      "body": [
        "GET_CLOSEST_MAJOR_VEHICLE_NODE(${1:float x}, ${2:float y}, ${3:float z}, ${4:Vector3* outPosition}, ${5:float unknown1}, ${6:float unknown2})"
      ],
      "description": "GET_CLOSEST_MAJOR_VEHICLE_NODE()"
    },
    "GET_CLOSEST_VEHICLE_NODE_WITH_HEADING": {
      "prefix": "GET_CLOSEST_VEHICLE_NODE_WITH_HEADING()",
      "body": [
        "GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(${1:float x}, ${2:float y}, ${3:float z}, ${4:Vector3* outPosition}, ${5:float* outHeading}, ${6:int nodeType}, ${7:float p6}, ${8:float p7})"
      ],
      "description": "GET_CLOSEST_VEHICLE_NODE_WITH_HEADING()"
    },
    "GET_NTH_CLOSEST_VEHICLE_NODE": {
      "prefix": "GET_NTH_CLOSEST_VEHICLE_NODE()",
      "body": [
        "GET_NTH_CLOSEST_VEHICLE_NODE(${1:float x}, ${2:float y}, ${3:float z}, ${4:int nthClosest}, ${5:Vector3* outPosition}, ${6:int nodeFlags}, ${7:float unknown1}, ${8:float unknown2})"
      ],
      "description": "GET_NTH_CLOSEST_VEHICLE_NODE()"
    },
    "GET_NTH_CLOSEST_VEHICLE_NODE_ID": {
      "prefix": "GET_NTH_CLOSEST_VEHICLE_NODE_ID()",
      "body": [
        "GET_NTH_CLOSEST_VEHICLE_NODE_ID(${1:float x}, ${2:float y}, ${3:float z}, ${4:int nth}, ${5:int nodeFlags}, ${6:float p5}, ${7:float p6})"
      ],
      "description": "GET_NTH_CLOSEST_VEHICLE_NODE_ID()"
    },
    "GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING": {
      "prefix": "GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING()",
      "body": [
        "GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING(${1:float x}, ${2:float y}, ${3:float z}, ${4:int nthClosest}, ${5:Vector3* outPosition}, ${6:float* outHeading}, ${7:int* outNumLanes}, ${8:int nodeFlags}, ${9:float unknown3}, ${10:float unknown4})"
      ],
      "description": "GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING()"
    },
    "GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING": {
      "prefix": "GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING()",
      "body": [
        "GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING(${1:float x}, ${2:float y}, ${3:float z}, ${4:int nthClosest}, ${5:Vector3* outPosition}, ${6:float* outHeading}, ${7:int nodeFlags}, ${8:float p7}, ${9:float p8})"
      ],
      "description": "GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING()"
    },
    "GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION": {
      "prefix": "GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION()",
      "body": [
        "GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION(${1:float x}, ${2:float y}, ${3:float z}, ${4:float desiredX}, ${5:float desiredY}, ${6:float desiredZ}, ${7:int nthClosest}, ${8:Vector3* outPosition}, ${9:float* outHeading}, ${10:int nodeFlags}, ${11:float p10}, ${12:float p11})"
      ],
      "description": "GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION()"
    },
    "GET_VEHICLE_NODE_PROPERTIES": {
      "prefix": "GET_VEHICLE_NODE_PROPERTIES()",
      "body": [
        "GET_VEHICLE_NODE_PROPERTIES(${1:float x}, ${2:float y}, ${3:float z}, ${4:int* density}, ${5:int* flags})"
      ],
      "description": "GET_VEHICLE_NODE_PROPERTIES()"
    },
    "IS_VEHICLE_NODE_ID_VALID": {
      "prefix": "IS_VEHICLE_NODE_ID_VALID()",
      "body": ["IS_VEHICLE_NODE_ID_VALID(${1:int vehicleNodeId})"],
      "description": "IS_VEHICLE_NODE_ID_VALID()"
    },
    "GET_VEHICLE_NODE_POSITION": {
      "prefix": "GET_VEHICLE_NODE_POSITION()",
      "body": [
        "GET_VEHICLE_NODE_POSITION(${1:int nodeId}, ${2:Vector3* outPosition})"
      ],
      "description": "GET_VEHICLE_NODE_POSITION()"
    },
    "GET_VEHICLE_NODE_IS_GPS_ALLOWED": {
      "prefix": "GET_VEHICLE_NODE_IS_GPS_ALLOWED()",
      "body": ["GET_VEHICLE_NODE_IS_GPS_ALLOWED(${1:int nodeID})"],
      "description": "GET_VEHICLE_NODE_IS_GPS_ALLOWED()"
    },
    "GET_VEHICLE_NODE_IS_SWITCHED_OFF": {
      "prefix": "GET_VEHICLE_NODE_IS_SWITCHED_OFF()",
      "body": ["GET_VEHICLE_NODE_IS_SWITCHED_OFF(${1:int nodeID})"],
      "description": "GET_VEHICLE_NODE_IS_SWITCHED_OFF()"
    },
    "GET_CLOSEST_ROAD": {
      "prefix": "GET_CLOSEST_ROAD()",
      "body": [
        "GET_CLOSEST_ROAD(${1:float x}, ${2:float y}, ${3:float z}, ${4:float p3}, ${5:int p4}, ${6:Vector3* p5}, ${7:Vector3* p6}, ${8:Any* p7}, ${9:Any* p8}, ${10:float* p9}, ${11:BOOL p10})"
      ],
      "description": "GET_CLOSEST_ROAD()"
    },
    "LOAD_ALL_PATH_NODES": {
      "prefix": "LOAD_ALL_PATH_NODES()",
      "body": ["LOAD_ALL_PATH_NODES(${1:BOOL set})"],
      "description": "LOAD_ALL_PATH_NODES()"
    },
    "SET_ALLOW_STREAM_PROLOGUE_NODES": {
      "prefix": "SET_ALLOW_STREAM_PROLOGUE_NODES()",
      "body": ["SET_ALLOW_STREAM_PROLOGUE_NODES(${1:BOOL toggle})"],
      "description": "SET_ALLOW_STREAM_PROLOGUE_NODES()"
    },
    "SET_ALLOW_STREAM_HEIST_ISLAND_NODES": {
      "prefix": "SET_ALLOW_STREAM_HEIST_ISLAND_NODES()",
      "body": ["SET_ALLOW_STREAM_HEIST_ISLAND_NODES(${1:int type})"],
      "description": "SET_ALLOW_STREAM_HEIST_ISLAND_NODES()"
    },
    "ARE_NODES_LOADED_FOR_AREA": {
      "prefix": "ARE_NODES_LOADED_FOR_AREA()",
      "body": [
        "ARE_NODES_LOADED_FOR_AREA(${1:float x1}, ${2:float y1}, ${3:float x2}, ${4:float y2})"
      ],
      "description": "ARE_NODES_LOADED_FOR_AREA()"
    },
    "REQUEST_PATH_NODES_IN_AREA_THIS_FRAME": {
      "prefix": "REQUEST_PATH_NODES_IN_AREA_THIS_FRAME()",
      "body": [
        "REQUEST_PATH_NODES_IN_AREA_THIS_FRAME(${1:float x1}, ${2:float y1}, ${3:float x2}, ${4:float y2})"
      ],
      "description": "REQUEST_PATH_NODES_IN_AREA_THIS_FRAME()"
    },
    "SET_ROADS_BACK_TO_ORIGINAL": {
      "prefix": "SET_ROADS_BACK_TO_ORIGINAL()",
      "body": [
        "SET_ROADS_BACK_TO_ORIGINAL(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:Any p6})"
      ],
      "description": "SET_ROADS_BACK_TO_ORIGINAL()"
    },
    "SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA": {
      "prefix": "SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA()",
      "body": [
        "SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float width}, ${8:Any p7})"
      ],
      "description": "SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA()"
    },
    "SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME": {
      "prefix": "SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME()",
      "body": [
        "SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME(${1:float multiplier})"
      ],
      "description": "SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME()"
    },
    "ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME": {
      "prefix": "ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME()",
      "body": [
        "ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
      ],
      "description": "ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME()"
    },
    "SET_PED_PATHS_BACK_TO_ORIGINAL": {
      "prefix": "SET_PED_PATHS_BACK_TO_ORIGINAL()",
      "body": [
        "SET_PED_PATHS_BACK_TO_ORIGINAL(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:Any p6})"
      ],
      "description": "SET_PED_PATHS_BACK_TO_ORIGINAL()"
    },
    "GET_RANDOM_VEHICLE_NODE": {
      "prefix": "GET_RANDOM_VEHICLE_NODE()",
      "body": [
        "GET_RANDOM_VEHICLE_NODE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:BOOL p4}, ${6:BOOL p5}, ${7:BOOL p6}, ${8:Vector3* outPosition}, ${9:int* nodeId})"
      ],
      "description": "GET_RANDOM_VEHICLE_NODE()"
    },
    "GET_SPAWN_COORDS_FOR_VEHICLE_NODE": {
      "prefix": "GET_SPAWN_COORDS_FOR_VEHICLE_NODE()",
      "body": [
        "GET_SPAWN_COORDS_FOR_VEHICLE_NODE(${1:int nodeAddress}, ${2:float towardsCoorsX}, ${3:float towardsCoorsY}, ${4:float towardsCoorsZ}, ${5:Vector3* centrePoint}, ${6:float* heading})"
      ],
      "description": "GET_SPAWN_COORDS_FOR_VEHICLE_NODE()"
    },
    "GET_STREET_NAME_AT_COORD": {
      "prefix": "GET_STREET_NAME_AT_COORD()",
      "body": [
        "GET_STREET_NAME_AT_COORD(${1:float x}, ${2:float y}, ${3:float z}, ${4:Hash* streetName}, ${5:Hash* crossingRoad})"
      ],
      "description": "GET_STREET_NAME_AT_COORD()"
    },
    "GENERATE_DIRECTIONS_TO_COORD": {
      "prefix": "GENERATE_DIRECTIONS_TO_COORD()",
      "body": [
        "GENERATE_DIRECTIONS_TO_COORD(${1:float x}, ${2:float y}, ${3:float z}, ${4:BOOL p3}, ${5:int* direction}, ${6:float* p5}, ${7:float* distToNxJunction})"
      ],
      "description": "GENERATE_DIRECTIONS_TO_COORD()"
    },
    "SET_IGNORE_NO_GPS_FLAG": {
      "prefix": "SET_IGNORE_NO_GPS_FLAG()",
      "body": ["SET_IGNORE_NO_GPS_FLAG(${1:BOOL toggle})"],
      "description": "SET_IGNORE_NO_GPS_FLAG()"
    },
    "SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE": {
      "prefix": "SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE()",
      "body": [
        "SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE(${1:BOOL toggle})"
      ],
      "description": "SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE()"
    },
    "SET_GPS_DISABLED_ZONE": {
      "prefix": "SET_GPS_DISABLED_ZONE()",
      "body": [
        "SET_GPS_DISABLED_ZONE(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z3})"
      ],
      "description": "SET_GPS_DISABLED_ZONE()"
    },
    "GET_GPS_BLIP_ROUTE_LENGTH": {
      "prefix": "GET_GPS_BLIP_ROUTE_LENGTH()",
      "body": ["GET_GPS_BLIP_ROUTE_LENGTH()"],
      "description": "GET_GPS_BLIP_ROUTE_LENGTH()"
    },
    "GET_POS_ALONG_GPS_TYPE_ROUTE": {
      "prefix": "GET_POS_ALONG_GPS_TYPE_ROUTE()",
      "body": [
        "GET_POS_ALONG_GPS_TYPE_ROUTE(${1:Vector3* result}, ${2:BOOL p1}, ${3:float p2}, ${4:int p3})"
      ],
      "description": "GET_POS_ALONG_GPS_TYPE_ROUTE()"
    },
    "GET_GPS_BLIP_ROUTE_FOUND": {
      "prefix": "GET_GPS_BLIP_ROUTE_FOUND()",
      "body": ["GET_GPS_BLIP_ROUTE_FOUND()"],
      "description": "GET_GPS_BLIP_ROUTE_FOUND()"
    },
    "GET_ROAD_BOUNDARY_USING_HEADING": {
      "prefix": "GET_ROAD_BOUNDARY_USING_HEADING()",
      "body": [
        "GET_ROAD_BOUNDARY_USING_HEADING(${1:float x}, ${2:float y}, ${3:float z}, ${4:float heading}, ${5:Vector3* outPosition})"
      ],
      "description": "GET_ROAD_BOUNDARY_USING_HEADING()"
    },
    "GET_POSITION_BY_SIDE_OF_ROAD": {
      "prefix": "GET_POSITION_BY_SIDE_OF_ROAD()",
      "body": [
        "GET_POSITION_BY_SIDE_OF_ROAD(${1:float x}, ${2:float y}, ${3:float z}, ${4:int p3}, ${5:Vector3* outPosition})"
      ],
      "description": "GET_POSITION_BY_SIDE_OF_ROAD()"
    },
    "IS_POINT_ON_ROAD": {
      "prefix": "IS_POINT_ON_ROAD()",
      "body": [
        "IS_POINT_ON_ROAD(${1:float x}, ${2:float y}, ${3:float z}, ${4:Vehicle vehicle})"
      ],
      "description": "IS_POINT_ON_ROAD()"
    },
    "GET_NEXT_GPS_DISABLED_ZONE_INDEX": {
      "prefix": "GET_NEXT_GPS_DISABLED_ZONE_INDEX()",
      "body": ["GET_NEXT_GPS_DISABLED_ZONE_INDEX()"],
      "description": "GET_NEXT_GPS_DISABLED_ZONE_INDEX()"
    },
    "SET_GPS_DISABLED_ZONE_AT_INDEX": {
      "prefix": "SET_GPS_DISABLED_ZONE_AT_INDEX()",
      "body": [
        "SET_GPS_DISABLED_ZONE_AT_INDEX(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int index})"
      ],
      "description": "SET_GPS_DISABLED_ZONE_AT_INDEX()"
    },
    "CLEAR_GPS_DISABLED_ZONE_AT_INDEX": {
      "prefix": "CLEAR_GPS_DISABLED_ZONE_AT_INDEX()",
      "body": ["CLEAR_GPS_DISABLED_ZONE_AT_INDEX(${1:int index})"],
      "description": "CLEAR_GPS_DISABLED_ZONE_AT_INDEX()"
    },
    "ADD_NAVMESH_REQUIRED_REGION": {
      "prefix": "ADD_NAVMESH_REQUIRED_REGION()",
      "body": [
        "ADD_NAVMESH_REQUIRED_REGION(${1:float x}, ${2:float y}, ${3:float radius})"
      ],
      "description": "ADD_NAVMESH_REQUIRED_REGION()"
    },
    "REMOVE_NAVMESH_REQUIRED_REGIONS": {
      "prefix": "REMOVE_NAVMESH_REQUIRED_REGIONS()",
      "body": ["REMOVE_NAVMESH_REQUIRED_REGIONS()"],
      "description": "REMOVE_NAVMESH_REQUIRED_REGIONS()"
    },
    "IS_NAVMESH_REQUIRED_REGION_IN_USE": {
      "prefix": "IS_NAVMESH_REQUIRED_REGION_IN_USE()",
      "body": ["IS_NAVMESH_REQUIRED_REGION_IN_USE()"],
      "description": "IS_NAVMESH_REQUIRED_REGION_IN_USE()"
    },
    "DISABLE_NAVMESH_IN_AREA": {
      "prefix": "DISABLE_NAVMESH_IN_AREA()",
      "body": [
        "DISABLE_NAVMESH_IN_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:BOOL toggle})"
      ],
      "description": "DISABLE_NAVMESH_IN_AREA()"
    },
    "ARE_ALL_NAVMESH_REGIONS_LOADED": {
      "prefix": "ARE_ALL_NAVMESH_REGIONS_LOADED()",
      "body": ["ARE_ALL_NAVMESH_REGIONS_LOADED()"],
      "description": "ARE_ALL_NAVMESH_REGIONS_LOADED()"
    },
    "IS_NAVMESH_LOADED_IN_AREA": {
      "prefix": "IS_NAVMESH_LOADED_IN_AREA()",
      "body": [
        "IS_NAVMESH_LOADED_IN_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
      ],
      "description": "IS_NAVMESH_LOADED_IN_AREA()"
    },
    "GET_NUM_NAVMESHES_EXISTING_IN_AREA": {
      "prefix": "GET_NUM_NAVMESHES_EXISTING_IN_AREA()",
      "body": [
        "GET_NUM_NAVMESHES_EXISTING_IN_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
      ],
      "description": "GET_NUM_NAVMESHES_EXISTING_IN_AREA()"
    },
    "ADD_NAVMESH_BLOCKING_OBJECT": {
      "prefix": "ADD_NAVMESH_BLOCKING_OBJECT()",
      "body": [
        "ADD_NAVMESH_BLOCKING_OBJECT(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:BOOL p7}, ${9:Any p8})"
      ],
      "description": "ADD_NAVMESH_BLOCKING_OBJECT()"
    },
    "UPDATE_NAVMESH_BLOCKING_OBJECT": {
      "prefix": "UPDATE_NAVMESH_BLOCKING_OBJECT()",
      "body": [
        "UPDATE_NAVMESH_BLOCKING_OBJECT(${1:Any p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:Any p8})"
      ],
      "description": "UPDATE_NAVMESH_BLOCKING_OBJECT()"
    },
    "REMOVE_NAVMESH_BLOCKING_OBJECT": {
      "prefix": "REMOVE_NAVMESH_BLOCKING_OBJECT()",
      "body": ["REMOVE_NAVMESH_BLOCKING_OBJECT(${1:Any p0})"],
      "description": "REMOVE_NAVMESH_BLOCKING_OBJECT()"
    },
    "DOES_NAVMESH_BLOCKING_OBJECT_EXIST": {
      "prefix": "DOES_NAVMESH_BLOCKING_OBJECT_EXIST()",
      "body": ["DOES_NAVMESH_BLOCKING_OBJECT_EXIST(${1:Any p0})"],
      "description": "DOES_NAVMESH_BLOCKING_OBJECT_EXIST()"
    },
    "GET_APPROX_HEIGHT_FOR_POINT": {
      "prefix": "GET_APPROX_HEIGHT_FOR_POINT()",
      "body": ["GET_APPROX_HEIGHT_FOR_POINT(${1:float x}, ${2:float y})"],
      "description": "GET_APPROX_HEIGHT_FOR_POINT()"
    },
    "GET_APPROX_HEIGHT_FOR_AREA": {
      "prefix": "GET_APPROX_HEIGHT_FOR_AREA()",
      "body": [
        "GET_APPROX_HEIGHT_FOR_AREA(${1:float x1}, ${2:float y1}, ${3:float x2}, ${4:float y2})"
      ],
      "description": "GET_APPROX_HEIGHT_FOR_AREA()"
    },
    "GET_APPROX_FLOOR_FOR_POINT": {
      "prefix": "GET_APPROX_FLOOR_FOR_POINT()",
      "body": ["GET_APPROX_FLOOR_FOR_POINT(${1:float x}, ${2:float y})"],
      "description": "GET_APPROX_FLOOR_FOR_POINT()"
    },
    "GET_APPROX_FLOOR_FOR_AREA": {
      "prefix": "GET_APPROX_FLOOR_FOR_AREA()",
      "body": [
        "GET_APPROX_FLOOR_FOR_AREA(${1:float x1}, ${2:float y1}, ${3:float x2}, ${4:float y2})"
      ],
      "description": "GET_APPROX_FLOOR_FOR_AREA()"
    },
    "CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS": {
      "prefix": "CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS()",
      "body": [
        "CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
      ],
      "description": "CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS()"
    },
    "CREATE_PED": {
      "prefix": "CREATE_PED()",
      "body": [
        "CREATE_PED(${1:int pedType}, ${2:Hash modelHash}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float heading}, ${7:BOOL isNetwork}, ${8:BOOL bScriptHostPed})"
      ],
      "description": "CREATE_PED()"
    },
    "DELETE_PED": {
      "prefix": "DELETE_PED()",
      "body": ["DELETE_PED(${1:Ped* ped})"],
      "description": "DELETE_PED()"
    },
    "CLONE_PED": {
      "prefix": "CLONE_PED()",
      "body": [
        "CLONE_PED(${1:Ped ped}, ${2:BOOL isNetwork}, ${3:BOOL bScriptHostPed}, ${4:BOOL copyHeadBlendFlag})"
      ],
      "description": "CLONE_PED()"
    },
    "CLONE_PED_ALT": {
      "prefix": "CLONE_PED_ALT()",
      "body": [
        "CLONE_PED_ALT(${1:Ped ped}, ${2:BOOL isNetwork}, ${3:BOOL bScriptHostPed}, ${4:BOOL copyHeadBlendFlag}, ${5:BOOL p4})"
      ],
      "description": "CLONE_PED_ALT()"
    },
    "CLONE_PED_TO_TARGET": {
      "prefix": "CLONE_PED_TO_TARGET()",
      "body": ["CLONE_PED_TO_TARGET(${1:Ped ped}, ${2:Ped targetPed})"],
      "description": "CLONE_PED_TO_TARGET()"
    },
    "CLONE_PED_TO_TARGET_ALT": {
      "prefix": "CLONE_PED_TO_TARGET_ALT()",
      "body": [
        "CLONE_PED_TO_TARGET_ALT(${1:Ped ped}, ${2:Ped targetPed}, ${3:BOOL p2})"
      ],
      "description": "CLONE_PED_TO_TARGET_ALT()"
    },
    "IS_PED_IN_VEHICLE": {
      "prefix": "IS_PED_IN_VEHICLE()",
      "body": [
        "IS_PED_IN_VEHICLE(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:BOOL atGetIn})"
      ],
      "description": "IS_PED_IN_VEHICLE()"
    },
    "IS_PED_IN_MODEL": {
      "prefix": "IS_PED_IN_MODEL()",
      "body": ["IS_PED_IN_MODEL(${1:Ped ped}, ${2:Hash modelHash})"],
      "description": "IS_PED_IN_MODEL()"
    },
    "IS_PED_IN_ANY_VEHICLE": {
      "prefix": "IS_PED_IN_ANY_VEHICLE()",
      "body": ["IS_PED_IN_ANY_VEHICLE(${1:Ped ped}, ${2:BOOL atGetIn})"],
      "description": "IS_PED_IN_ANY_VEHICLE()"
    },
    "IS_COP_PED_IN_AREA_3D": {
      "prefix": "IS_COP_PED_IN_AREA_3D()",
      "body": [
        "IS_COP_PED_IN_AREA_3D(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
      ],
      "description": "IS_COP_PED_IN_AREA_3D()"
    },
    "IS_PED_INJURED": {
      "prefix": "IS_PED_INJURED()",
      "body": ["IS_PED_INJURED(${1:Ped ped})"],
      "description": "IS_PED_INJURED()"
    },
    "IS_PED_HURT": {
      "prefix": "IS_PED_HURT()",
      "body": ["IS_PED_HURT(${1:Ped ped})"],
      "description": "IS_PED_HURT()"
    },
    "IS_PED_FATALLY_INJURED": {
      "prefix": "IS_PED_FATALLY_INJURED()",
      "body": ["IS_PED_FATALLY_INJURED(${1:Ped ped})"],
      "description": "IS_PED_FATALLY_INJURED()"
    },
    "IS_PED_DEAD_OR_DYING": {
      "prefix": "IS_PED_DEAD_OR_DYING()",
      "body": ["IS_PED_DEAD_OR_DYING(${1:Ped ped}, ${2:BOOL p1})"],
      "description": "IS_PED_DEAD_OR_DYING()"
    },
    "IS_CONVERSATION_PED_DEAD": {
      "prefix": "IS_CONVERSATION_PED_DEAD()",
      "body": ["IS_CONVERSATION_PED_DEAD(${1:Ped ped})"],
      "description": "IS_CONVERSATION_PED_DEAD()"
    },
    "IS_PED_AIMING_FROM_COVER": {
      "prefix": "IS_PED_AIMING_FROM_COVER()",
      "body": ["IS_PED_AIMING_FROM_COVER(${1:Ped ped})"],
      "description": "IS_PED_AIMING_FROM_COVER()"
    },
    "IS_PED_RELOADING": {
      "prefix": "IS_PED_RELOADING()",
      "body": ["IS_PED_RELOADING(${1:Ped ped})"],
      "description": "IS_PED_RELOADING()"
    },
    "IS_PED_A_PLAYER": {
      "prefix": "IS_PED_A_PLAYER()",
      "body": ["IS_PED_A_PLAYER(${1:Ped ped})"],
      "description": "IS_PED_A_PLAYER()"
    },
    "CREATE_PED_INSIDE_VEHICLE": {
      "prefix": "CREATE_PED_INSIDE_VEHICLE()",
      "body": [
        "CREATE_PED_INSIDE_VEHICLE(${1:Vehicle vehicle}, ${2:int pedType}, ${3:Hash modelHash}, ${4:int seat}, ${5:BOOL isNetwork}, ${6:BOOL bScriptHostPed})"
      ],
      "description": "CREATE_PED_INSIDE_VEHICLE()"
    },
    "SET_PED_DESIRED_HEADING": {
      "prefix": "SET_PED_DESIRED_HEADING()",
      "body": ["SET_PED_DESIRED_HEADING(${1:Ped ped}, ${2:float heading})"],
      "description": "SET_PED_DESIRED_HEADING()"
    },
    "FORCE_ALL_HEADING_VALUES_TO_ALIGN": {
      "prefix": "FORCE_ALL_HEADING_VALUES_TO_ALIGN()",
      "body": ["FORCE_ALL_HEADING_VALUES_TO_ALIGN(${1:Ped ped})"],
      "description": "FORCE_ALL_HEADING_VALUES_TO_ALIGN()"
    },
    "IS_PED_FACING_PED": {
      "prefix": "IS_PED_FACING_PED()",
      "body": [
        "IS_PED_FACING_PED(${1:Ped ped}, ${2:Ped otherPed}, ${3:float angle})"
      ],
      "description": "IS_PED_FACING_PED()"
    },
    "IS_PED_IN_MELEE_COMBAT": {
      "prefix": "IS_PED_IN_MELEE_COMBAT()",
      "body": ["IS_PED_IN_MELEE_COMBAT(${1:Ped ped})"],
      "description": "IS_PED_IN_MELEE_COMBAT()"
    },
    "IS_PED_STOPPED": {
      "prefix": "IS_PED_STOPPED()",
      "body": ["IS_PED_STOPPED(${1:Ped ped})"],
      "description": "IS_PED_STOPPED()"
    },
    "IS_PED_SHOOTING_IN_AREA": {
      "prefix": "IS_PED_SHOOTING_IN_AREA()",
      "body": [
        "IS_PED_SHOOTING_IN_AREA(${1:Ped ped}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2}, ${8:BOOL p7}, ${9:BOOL p8})"
      ],
      "description": "IS_PED_SHOOTING_IN_AREA()"
    },
    "IS_ANY_PED_SHOOTING_IN_AREA": {
      "prefix": "IS_ANY_PED_SHOOTING_IN_AREA()",
      "body": [
        "IS_ANY_PED_SHOOTING_IN_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:BOOL p6}, ${8:BOOL p7})"
      ],
      "description": "IS_ANY_PED_SHOOTING_IN_AREA()"
    },
    "IS_PED_SHOOTING": {
      "prefix": "IS_PED_SHOOTING()",
      "body": ["IS_PED_SHOOTING(${1:Ped ped})"],
      "description": "IS_PED_SHOOTING()"
    },
    "SET_PED_ACCURACY": {
      "prefix": "SET_PED_ACCURACY()",
      "body": ["SET_PED_ACCURACY(${1:Ped ped}, ${2:int accuracy})"],
      "description": "SET_PED_ACCURACY()"
    },
    "GET_PED_ACCURACY": {
      "prefix": "GET_PED_ACCURACY()",
      "body": ["GET_PED_ACCURACY(${1:Ped ped})"],
      "description": "GET_PED_ACCURACY()"
    },
    "SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER": {
      "prefix": "SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER()",
      "body": ["SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER(${1:float multiplier})"],
      "description": "SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER()"
    },
    "IS_PED_MODEL": {
      "prefix": "IS_PED_MODEL()",
      "body": ["IS_PED_MODEL(${1:Ped ped}, ${2:Hash modelHash})"],
      "description": "IS_PED_MODEL()"
    },
    "EXPLODE_PED_HEAD": {
      "prefix": "EXPLODE_PED_HEAD()",
      "body": ["EXPLODE_PED_HEAD(${1:Ped ped}, ${2:Hash weaponHash})"],
      "description": "EXPLODE_PED_HEAD()"
    },
    "REMOVE_PED_ELEGANTLY": {
      "prefix": "REMOVE_PED_ELEGANTLY()",
      "body": ["REMOVE_PED_ELEGANTLY(${1:Ped* ped})"],
      "description": "REMOVE_PED_ELEGANTLY()"
    },
    "ADD_ARMOUR_TO_PED": {
      "prefix": "ADD_ARMOUR_TO_PED()",
      "body": ["ADD_ARMOUR_TO_PED(${1:Ped ped}, ${2:int amount})"],
      "description": "ADD_ARMOUR_TO_PED()"
    },
    "SET_PED_ARMOUR": {
      "prefix": "SET_PED_ARMOUR()",
      "body": ["SET_PED_ARMOUR(${1:Ped ped}, ${2:int amount})"],
      "description": "SET_PED_ARMOUR()"
    },
    "SET_PED_INTO_VEHICLE": {
      "prefix": "SET_PED_INTO_VEHICLE()",
      "body": [
        "SET_PED_INTO_VEHICLE(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:int seatIndex})"
      ],
      "description": "SET_PED_INTO_VEHICLE()"
    },
    "SET_PED_ALLOW_VEHICLES_OVERRIDE": {
      "prefix": "SET_PED_ALLOW_VEHICLES_OVERRIDE()",
      "body": ["SET_PED_ALLOW_VEHICLES_OVERRIDE(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_ALLOW_VEHICLES_OVERRIDE()"
    },
    "CAN_CREATE_RANDOM_PED": {
      "prefix": "CAN_CREATE_RANDOM_PED()",
      "body": ["CAN_CREATE_RANDOM_PED(${1:BOOL p0})"],
      "description": "CAN_CREATE_RANDOM_PED()"
    },
    "CREATE_RANDOM_PED": {
      "prefix": "CREATE_RANDOM_PED()",
      "body": [
        "CREATE_RANDOM_PED(${1:float posX}, ${2:float posY}, ${3:float posZ})"
      ],
      "description": "CREATE_RANDOM_PED()"
    },
    "CREATE_RANDOM_PED_AS_DRIVER": {
      "prefix": "CREATE_RANDOM_PED_AS_DRIVER()",
      "body": [
        "CREATE_RANDOM_PED_AS_DRIVER(${1:Vehicle vehicle}, ${2:BOOL returnHandle})"
      ],
      "description": "CREATE_RANDOM_PED_AS_DRIVER()"
    },
    "CAN_CREATE_RANDOM_DRIVER": {
      "prefix": "CAN_CREATE_RANDOM_DRIVER()",
      "body": ["CAN_CREATE_RANDOM_DRIVER()"],
      "description": "CAN_CREATE_RANDOM_DRIVER()"
    },
    "CAN_CREATE_RANDOM_BIKE_RIDER": {
      "prefix": "CAN_CREATE_RANDOM_BIKE_RIDER()",
      "body": ["CAN_CREATE_RANDOM_BIKE_RIDER()"],
      "description": "CAN_CREATE_RANDOM_BIKE_RIDER()"
    },
    "SET_PED_MOVE_ANIMS_BLEND_OUT": {
      "prefix": "SET_PED_MOVE_ANIMS_BLEND_OUT()",
      "body": ["SET_PED_MOVE_ANIMS_BLEND_OUT(${1:Ped ped})"],
      "description": "SET_PED_MOVE_ANIMS_BLEND_OUT()"
    },
    "SET_PED_CAN_BE_DRAGGED_OUT": {
      "prefix": "SET_PED_CAN_BE_DRAGGED_OUT()",
      "body": ["SET_PED_CAN_BE_DRAGGED_OUT(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_CAN_BE_DRAGGED_OUT()"
    },
    "SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS": {
      "prefix": "SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS()",
      "body": [
        "SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS(${1:BOOL toggle})"
      ],
      "description": "SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS()"
    },
    "IS_PED_MALE": {
      "prefix": "IS_PED_MALE()",
      "body": ["IS_PED_MALE(${1:Ped ped})"],
      "description": "IS_PED_MALE()"
    },
    "IS_PED_HUMAN": {
      "prefix": "IS_PED_HUMAN()",
      "body": ["IS_PED_HUMAN(${1:Ped ped})"],
      "description": "IS_PED_HUMAN()"
    },
    "GET_VEHICLE_PED_IS_IN": {
      "prefix": "GET_VEHICLE_PED_IS_IN()",
      "body": ["GET_VEHICLE_PED_IS_IN(${1:Ped ped}, ${2:BOOL includeEntering})"],
      "description": "GET_VEHICLE_PED_IS_IN()"
    },
    "RESET_PED_LAST_VEHICLE": {
      "prefix": "RESET_PED_LAST_VEHICLE()",
      "body": ["RESET_PED_LAST_VEHICLE(${1:Ped ped})"],
      "description": "RESET_PED_LAST_VEHICLE()"
    },
    "SET_PED_DENSITY_MULTIPLIER_THIS_FRAME": {
      "prefix": "SET_PED_DENSITY_MULTIPLIER_THIS_FRAME()",
      "body": ["SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(${1:float multiplier})"],
      "description": "SET_PED_DENSITY_MULTIPLIER_THIS_FRAME()"
    },
    "SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME": {
      "prefix": "SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME()",
      "body": [
        "SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(${1:float p0}, ${2:float p1})"
      ],
      "description": "SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME()"
    },
    "SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME": {
      "prefix": "SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME()",
      "body": ["SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME()"],
      "description": "SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME()"
    },
    "SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME": {
      "prefix": "SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME()",
      "body": [
        "SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME()"
    },
    "SET_PED_NON_CREATION_AREA": {
      "prefix": "SET_PED_NON_CREATION_AREA()",
      "body": [
        "SET_PED_NON_CREATION_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
      ],
      "description": "SET_PED_NON_CREATION_AREA()"
    },
    "CLEAR_PED_NON_CREATION_AREA": {
      "prefix": "CLEAR_PED_NON_CREATION_AREA()",
      "body": ["CLEAR_PED_NON_CREATION_AREA()"],
      "description": "CLEAR_PED_NON_CREATION_AREA()"
    },
    "INSTANTLY_FILL_PED_POPULATION": {
      "prefix": "INSTANTLY_FILL_PED_POPULATION()",
      "body": ["INSTANTLY_FILL_PED_POPULATION()"],
      "description": "INSTANTLY_FILL_PED_POPULATION()"
    },
    "IS_PED_ON_MOUNT": {
      "prefix": "IS_PED_ON_MOUNT()",
      "body": ["IS_PED_ON_MOUNT(${1:Ped ped})"],
      "description": "IS_PED_ON_MOUNT()"
    },
    "GET_MOUNT": {
      "prefix": "GET_MOUNT()",
      "body": ["GET_MOUNT(${1:Ped ped})"],
      "description": "GET_MOUNT()"
    },
    "IS_PED_ON_VEHICLE": {
      "prefix": "IS_PED_ON_VEHICLE()",
      "body": ["IS_PED_ON_VEHICLE(${1:Ped ped})"],
      "description": "IS_PED_ON_VEHICLE()"
    },
    "IS_PED_ON_SPECIFIC_VEHICLE": {
      "prefix": "IS_PED_ON_SPECIFIC_VEHICLE()",
      "body": ["IS_PED_ON_SPECIFIC_VEHICLE(${1:Ped ped}, ${2:Vehicle vehicle})"],
      "description": "IS_PED_ON_SPECIFIC_VEHICLE()"
    },
    "SET_PED_MONEY": {
      "prefix": "SET_PED_MONEY()",
      "body": ["SET_PED_MONEY(${1:Ped ped}, ${2:int amount})"],
      "description": "SET_PED_MONEY()"
    },
    "GET_PED_MONEY": {
      "prefix": "GET_PED_MONEY()",
      "body": ["GET_PED_MONEY(${1:Ped ped})"],
      "description": "GET_PED_MONEY()"
    },
    "SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS": {
      "prefix": "SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS()",
      "body": [
        "SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS(${1:float p0}, ${2:Any p1})"
      ],
      "description": "SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS()"
    },
    "SET_AMBIENT_PEDS_DROP_MONEY": {
      "prefix": "SET_AMBIENT_PEDS_DROP_MONEY()",
      "body": ["SET_AMBIENT_PEDS_DROP_MONEY(${1:BOOL p0})"],
      "description": "SET_AMBIENT_PEDS_DROP_MONEY()"
    },
    "SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME": {
      "prefix": "SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME()",
      "body": [
        "SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME(${1:BOOL p0})"
      ],
      "description": "SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME()"
    },
    "SET_PED_SUFFERS_CRITICAL_HITS": {
      "prefix": "SET_PED_SUFFERS_CRITICAL_HITS()",
      "body": ["SET_PED_SUFFERS_CRITICAL_HITS(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_SUFFERS_CRITICAL_HITS()"
    },
    "SET_PED_UPPER_BODY_DAMAGE_ONLY": {
      "prefix": "SET_PED_UPPER_BODY_DAMAGE_ONLY()",
      "body": ["SET_PED_UPPER_BODY_DAMAGE_ONLY(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_UPPER_BODY_DAMAGE_ONLY()"
    },
    "IS_PED_SITTING_IN_VEHICLE": {
      "prefix": "IS_PED_SITTING_IN_VEHICLE()",
      "body": ["IS_PED_SITTING_IN_VEHICLE(${1:Ped ped}, ${2:Vehicle vehicle})"],
      "description": "IS_PED_SITTING_IN_VEHICLE()"
    },
    "IS_PED_SITTING_IN_ANY_VEHICLE": {
      "prefix": "IS_PED_SITTING_IN_ANY_VEHICLE()",
      "body": ["IS_PED_SITTING_IN_ANY_VEHICLE(${1:Ped ped})"],
      "description": "IS_PED_SITTING_IN_ANY_VEHICLE()"
    },
    "IS_PED_ON_FOOT": {
      "prefix": "IS_PED_ON_FOOT()",
      "body": ["IS_PED_ON_FOOT(${1:Ped ped})"],
      "description": "IS_PED_ON_FOOT()"
    },
    "IS_PED_ON_ANY_BIKE": {
      "prefix": "IS_PED_ON_ANY_BIKE()",
      "body": ["IS_PED_ON_ANY_BIKE(${1:Ped ped})"],
      "description": "IS_PED_ON_ANY_BIKE()"
    },
    "IS_PED_PLANTING_BOMB": {
      "prefix": "IS_PED_PLANTING_BOMB()",
      "body": ["IS_PED_PLANTING_BOMB(${1:Ped ped})"],
      "description": "IS_PED_PLANTING_BOMB()"
    },
    "GET_DEAD_PED_PICKUP_COORDS": {
      "prefix": "GET_DEAD_PED_PICKUP_COORDS()",
      "body": [
        "GET_DEAD_PED_PICKUP_COORDS(${1:Ped ped}, ${2:float p1}, ${3:float p2})"
      ],
      "description": "GET_DEAD_PED_PICKUP_COORDS()"
    },
    "IS_PED_IN_ANY_BOAT": {
      "prefix": "IS_PED_IN_ANY_BOAT()",
      "body": ["IS_PED_IN_ANY_BOAT(${1:Ped ped})"],
      "description": "IS_PED_IN_ANY_BOAT()"
    },
    "IS_PED_IN_ANY_SUB": {
      "prefix": "IS_PED_IN_ANY_SUB()",
      "body": ["IS_PED_IN_ANY_SUB(${1:Ped ped})"],
      "description": "IS_PED_IN_ANY_SUB()"
    },
    "IS_PED_IN_ANY_HELI": {
      "prefix": "IS_PED_IN_ANY_HELI()",
      "body": ["IS_PED_IN_ANY_HELI(${1:Ped ped})"],
      "description": "IS_PED_IN_ANY_HELI()"
    },
    "IS_PED_IN_ANY_PLANE": {
      "prefix": "IS_PED_IN_ANY_PLANE()",
      "body": ["IS_PED_IN_ANY_PLANE(${1:Ped ped})"],
      "description": "IS_PED_IN_ANY_PLANE()"
    },
    "IS_PED_IN_FLYING_VEHICLE": {
      "prefix": "IS_PED_IN_FLYING_VEHICLE()",
      "body": ["IS_PED_IN_FLYING_VEHICLE(${1:Ped ped})"],
      "description": "IS_PED_IN_FLYING_VEHICLE()"
    },
    "SET_PED_DIES_IN_WATER": {
      "prefix": "SET_PED_DIES_IN_WATER()",
      "body": ["SET_PED_DIES_IN_WATER(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_DIES_IN_WATER()"
    },
    "GET_PED_DIES_IN_WATER": {
      "prefix": "GET_PED_DIES_IN_WATER()",
      "body": ["GET_PED_DIES_IN_WATER(${1:Ped ped})"],
      "description": "GET_PED_DIES_IN_WATER()"
    },
    "SET_PED_DIES_IN_SINKING_VEHICLE": {
      "prefix": "SET_PED_DIES_IN_SINKING_VEHICLE()",
      "body": ["SET_PED_DIES_IN_SINKING_VEHICLE(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_DIES_IN_SINKING_VEHICLE()"
    },
    "GET_PED_ARMOUR": {
      "prefix": "GET_PED_ARMOUR()",
      "body": ["GET_PED_ARMOUR(${1:Ped ped})"],
      "description": "GET_PED_ARMOUR()"
    },
    "SET_PED_STAY_IN_VEHICLE_WHEN_JACKED": {
      "prefix": "SET_PED_STAY_IN_VEHICLE_WHEN_JACKED()",
      "body": [
        "SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "SET_PED_STAY_IN_VEHICLE_WHEN_JACKED()"
    },
    "SET_PED_CAN_BE_SHOT_IN_VEHICLE": {
      "prefix": "SET_PED_CAN_BE_SHOT_IN_VEHICLE()",
      "body": ["SET_PED_CAN_BE_SHOT_IN_VEHICLE(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_CAN_BE_SHOT_IN_VEHICLE()"
    },
    "GET_PED_LAST_DAMAGE_BONE": {
      "prefix": "GET_PED_LAST_DAMAGE_BONE()",
      "body": ["GET_PED_LAST_DAMAGE_BONE(${1:Ped ped}, ${2:int* outBone})"],
      "description": "GET_PED_LAST_DAMAGE_BONE()"
    },
    "CLEAR_PED_LAST_DAMAGE_BONE": {
      "prefix": "CLEAR_PED_LAST_DAMAGE_BONE()",
      "body": ["CLEAR_PED_LAST_DAMAGE_BONE(${1:Ped ped})"],
      "description": "CLEAR_PED_LAST_DAMAGE_BONE()"
    },
    "SET_AI_WEAPON_DAMAGE_MODIFIER": {
      "prefix": "SET_AI_WEAPON_DAMAGE_MODIFIER()",
      "body": ["SET_AI_WEAPON_DAMAGE_MODIFIER(${1:float value})"],
      "description": "SET_AI_WEAPON_DAMAGE_MODIFIER()"
    },
    "RESET_AI_WEAPON_DAMAGE_MODIFIER": {
      "prefix": "RESET_AI_WEAPON_DAMAGE_MODIFIER()",
      "body": ["RESET_AI_WEAPON_DAMAGE_MODIFIER()"],
      "description": "RESET_AI_WEAPON_DAMAGE_MODIFIER()"
    },
    "SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER": {
      "prefix": "SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER()",
      "body": ["SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(${1:float modifier})"],
      "description": "SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER()"
    },
    "RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER": {
      "prefix": "RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER()",
      "body": ["RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER()"],
      "description": "RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER()"
    },
    "SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON": {
      "prefix": "SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON()",
      "body": [
        "SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON(${1:Ped ped}, ${2:BOOL p1})"
      ],
      "description": "SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON()"
    },
    "SET_PED_CAN_BE_TARGETTED": {
      "prefix": "SET_PED_CAN_BE_TARGETTED()",
      "body": ["SET_PED_CAN_BE_TARGETTED(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_CAN_BE_TARGETTED()"
    },
    "SET_PED_CAN_BE_TARGETTED_BY_TEAM": {
      "prefix": "SET_PED_CAN_BE_TARGETTED_BY_TEAM()",
      "body": [
        "SET_PED_CAN_BE_TARGETTED_BY_TEAM(${1:Ped ped}, ${2:int team}, ${3:BOOL toggle})"
      ],
      "description": "SET_PED_CAN_BE_TARGETTED_BY_TEAM()"
    },
    "SET_PED_CAN_BE_TARGETTED_BY_PLAYER": {
      "prefix": "SET_PED_CAN_BE_TARGETTED_BY_PLAYER()",
      "body": [
        "SET_PED_CAN_BE_TARGETTED_BY_PLAYER(${1:Ped ped}, ${2:Player player}, ${3:BOOL toggle})"
      ],
      "description": "SET_PED_CAN_BE_TARGETTED_BY_PLAYER()"
    },
    "SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY": {
      "prefix": "SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY()",
      "body": [
        "SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY()"
    },
    "SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST": {
      "prefix": "SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST()",
      "body": [
        "SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST()"
    },
    "IS_PED_IN_ANY_POLICE_VEHICLE": {
      "prefix": "IS_PED_IN_ANY_POLICE_VEHICLE()",
      "body": ["IS_PED_IN_ANY_POLICE_VEHICLE(${1:Ped ped})"],
      "description": "IS_PED_IN_ANY_POLICE_VEHICLE()"
    },
    "FORCE_PED_TO_OPEN_PARACHUTE": {
      "prefix": "FORCE_PED_TO_OPEN_PARACHUTE()",
      "body": ["FORCE_PED_TO_OPEN_PARACHUTE(${1:Ped ped})"],
      "description": "FORCE_PED_TO_OPEN_PARACHUTE()"
    },
    "IS_PED_IN_PARACHUTE_FREE_FALL": {
      "prefix": "IS_PED_IN_PARACHUTE_FREE_FALL()",
      "body": ["IS_PED_IN_PARACHUTE_FREE_FALL(${1:Ped ped})"],
      "description": "IS_PED_IN_PARACHUTE_FREE_FALL()"
    },
    "IS_PED_FALLING": {
      "prefix": "IS_PED_FALLING()",
      "body": ["IS_PED_FALLING(${1:Ped ped})"],
      "description": "IS_PED_FALLING()"
    },
    "IS_PED_JUMPING": {
      "prefix": "IS_PED_JUMPING()",
      "body": ["IS_PED_JUMPING(${1:Ped ped})"],
      "description": "IS_PED_JUMPING()"
    },
    "IS_PED_LANDING": {
      "prefix": "IS_PED_LANDING()",
      "body": ["IS_PED_LANDING(${1:Any p0})"],
      "description": "IS_PED_LANDING()"
    },
    "IS_PED_DOING_A_BEAST_JUMP": {
      "prefix": "IS_PED_DOING_A_BEAST_JUMP()",
      "body": ["IS_PED_DOING_A_BEAST_JUMP(${1:Any p0})"],
      "description": "IS_PED_DOING_A_BEAST_JUMP()"
    },
    "IS_PED_CLIMBING": {
      "prefix": "IS_PED_CLIMBING()",
      "body": ["IS_PED_CLIMBING(${1:Ped ped})"],
      "description": "IS_PED_CLIMBING()"
    },
    "IS_PED_VAULTING": {
      "prefix": "IS_PED_VAULTING()",
      "body": ["IS_PED_VAULTING(${1:Ped ped})"],
      "description": "IS_PED_VAULTING()"
    },
    "IS_PED_DIVING": {
      "prefix": "IS_PED_DIVING()",
      "body": ["IS_PED_DIVING(${1:Ped ped})"],
      "description": "IS_PED_DIVING()"
    },
    "IS_PED_JUMPING_OUT_OF_VEHICLE": {
      "prefix": "IS_PED_JUMPING_OUT_OF_VEHICLE()",
      "body": ["IS_PED_JUMPING_OUT_OF_VEHICLE(${1:Ped ped})"],
      "description": "IS_PED_JUMPING_OUT_OF_VEHICLE()"
    },
    "IS_PED_OPENING_DOOR": {
      "prefix": "IS_PED_OPENING_DOOR()",
      "body": ["IS_PED_OPENING_DOOR(${1:Ped ped})"],
      "description": "IS_PED_OPENING_DOOR()"
    },
    "GET_PED_PARACHUTE_STATE": {
      "prefix": "GET_PED_PARACHUTE_STATE()",
      "body": ["GET_PED_PARACHUTE_STATE(${1:Ped ped})"],
      "description": "GET_PED_PARACHUTE_STATE()"
    },
    "GET_PED_PARACHUTE_LANDING_TYPE": {
      "prefix": "GET_PED_PARACHUTE_LANDING_TYPE()",
      "body": ["GET_PED_PARACHUTE_LANDING_TYPE(${1:Ped ped})"],
      "description": "GET_PED_PARACHUTE_LANDING_TYPE()"
    },
    "SET_PED_PARACHUTE_TINT_INDEX": {
      "prefix": "SET_PED_PARACHUTE_TINT_INDEX()",
      "body": ["SET_PED_PARACHUTE_TINT_INDEX(${1:Ped ped}, ${2:int tintIndex})"],
      "description": "SET_PED_PARACHUTE_TINT_INDEX()"
    },
    "GET_PED_PARACHUTE_TINT_INDEX": {
      "prefix": "GET_PED_PARACHUTE_TINT_INDEX()",
      "body": [
        "GET_PED_PARACHUTE_TINT_INDEX(${1:Ped ped}, ${2:int* outTintIndex})"
      ],
      "description": "GET_PED_PARACHUTE_TINT_INDEX()"
    },
    "SET_PED_RESERVE_PARACHUTE_TINT_INDEX": {
      "prefix": "SET_PED_RESERVE_PARACHUTE_TINT_INDEX()",
      "body": ["SET_PED_RESERVE_PARACHUTE_TINT_INDEX(${1:Ped ped}, ${2:Any p1})"],
      "description": "SET_PED_RESERVE_PARACHUTE_TINT_INDEX()"
    },
    "CREATE_PARACHUTE_BAG_OBJECT": {
      "prefix": "CREATE_PARACHUTE_BAG_OBJECT()",
      "body": [
        "CREATE_PARACHUTE_BAG_OBJECT(${1:Ped ped}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "CREATE_PARACHUTE_BAG_OBJECT()"
    },
    "SET_PED_DUCKING": {
      "prefix": "SET_PED_DUCKING()",
      "body": ["SET_PED_DUCKING(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_DUCKING()"
    },
    "IS_PED_DUCKING": {
      "prefix": "IS_PED_DUCKING()",
      "body": ["IS_PED_DUCKING(${1:Ped ped})"],
      "description": "IS_PED_DUCKING()"
    },
    "IS_PED_IN_ANY_TAXI": {
      "prefix": "IS_PED_IN_ANY_TAXI()",
      "body": ["IS_PED_IN_ANY_TAXI(${1:Ped ped})"],
      "description": "IS_PED_IN_ANY_TAXI()"
    },
    "SET_PED_ID_RANGE": {
      "prefix": "SET_PED_ID_RANGE()",
      "body": ["SET_PED_ID_RANGE(${1:Ped ped}, ${2:float value})"],
      "description": "SET_PED_ID_RANGE()"
    },
    "SET_PED_HIGHLY_PERCEPTIVE": {
      "prefix": "SET_PED_HIGHLY_PERCEPTIVE()",
      "body": ["SET_PED_HIGHLY_PERCEPTIVE(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_HIGHLY_PERCEPTIVE()"
    },
    "SET_COP_PERCEPTION_OVERRIDES": {
      "prefix": "SET_COP_PERCEPTION_OVERRIDES()",
      "body": [
        "SET_COP_PERCEPTION_OVERRIDES(${1:float seeingRange}, ${2:float seeingRangePeripheral}, ${3:float hearingRange}, ${4:float visualFieldMinAzimuthAngle}, ${5:float visualFieldMaxAzimuthAngle}, ${6:float fieldOfGazeMaxAngle}, ${7:float p6})"
      ],
      "description": "SET_COP_PERCEPTION_OVERRIDES()"
    },
    "SET_PED_INJURED_ON_GROUND_BEHAVIOUR": {
      "prefix": "SET_PED_INJURED_ON_GROUND_BEHAVIOUR()",
      "body": [
        "SET_PED_INJURED_ON_GROUND_BEHAVIOUR(${1:Ped ped}, ${2:float p1})"
      ],
      "description": "SET_PED_INJURED_ON_GROUND_BEHAVIOUR()"
    },
    "DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR": {
      "prefix": "DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR()",
      "body": ["DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR(${1:Ped ped})"],
      "description": "DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR()"
    },
    "SET_PED_SEEING_RANGE": {
      "prefix": "SET_PED_SEEING_RANGE()",
      "body": ["SET_PED_SEEING_RANGE(${1:Ped ped}, ${2:float value})"],
      "description": "SET_PED_SEEING_RANGE()"
    },
    "SET_PED_HEARING_RANGE": {
      "prefix": "SET_PED_HEARING_RANGE()",
      "body": ["SET_PED_HEARING_RANGE(${1:Ped ped}, ${2:float value})"],
      "description": "SET_PED_HEARING_RANGE()"
    },
    "SET_PED_VISUAL_FIELD_MIN_ANGLE": {
      "prefix": "SET_PED_VISUAL_FIELD_MIN_ANGLE()",
      "body": ["SET_PED_VISUAL_FIELD_MIN_ANGLE(${1:Ped ped}, ${2:float value})"],
      "description": "SET_PED_VISUAL_FIELD_MIN_ANGLE()"
    },
    "SET_PED_VISUAL_FIELD_MAX_ANGLE": {
      "prefix": "SET_PED_VISUAL_FIELD_MAX_ANGLE()",
      "body": ["SET_PED_VISUAL_FIELD_MAX_ANGLE(${1:Ped ped}, ${2:float value})"],
      "description": "SET_PED_VISUAL_FIELD_MAX_ANGLE()"
    },
    "SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE": {
      "prefix": "SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE()",
      "body": [
        "SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(${1:Ped ped}, ${2:float angle})"
      ],
      "description": "SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE()"
    },
    "SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE": {
      "prefix": "SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE()",
      "body": [
        "SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(${1:Ped ped}, ${2:float angle})"
      ],
      "description": "SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE()"
    },
    "SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE": {
      "prefix": "SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE()",
      "body": [
        "SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(${1:Ped ped}, ${2:float range})"
      ],
      "description": "SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE()"
    },
    "SET_PED_VISUAL_FIELD_CENTER_ANGLE": {
      "prefix": "SET_PED_VISUAL_FIELD_CENTER_ANGLE()",
      "body": [
        "SET_PED_VISUAL_FIELD_CENTER_ANGLE(${1:Ped ped}, ${2:float angle})"
      ],
      "description": "SET_PED_VISUAL_FIELD_CENTER_ANGLE()"
    },
    "GET_PED_VISUAL_FIELD_CENTER_ANGLE": {
      "prefix": "GET_PED_VISUAL_FIELD_CENTER_ANGLE()",
      "body": ["GET_PED_VISUAL_FIELD_CENTER_ANGLE(${1:Ped ped})"],
      "description": "GET_PED_VISUAL_FIELD_CENTER_ANGLE()"
    },
    "SET_PED_STEALTH_MOVEMENT": {
      "prefix": "SET_PED_STEALTH_MOVEMENT()",
      "body": [
        "SET_PED_STEALTH_MOVEMENT(${1:Ped ped}, ${2:BOOL p1}, ${3:const char* action})"
      ],
      "description": "SET_PED_STEALTH_MOVEMENT()"
    },
    "GET_PED_STEALTH_MOVEMENT": {
      "prefix": "GET_PED_STEALTH_MOVEMENT()",
      "body": ["GET_PED_STEALTH_MOVEMENT(${1:Ped ped})"],
      "description": "GET_PED_STEALTH_MOVEMENT()"
    },
    "CREATE_GROUP": {
      "prefix": "CREATE_GROUP()",
      "body": ["CREATE_GROUP(${1:int unused})"],
      "description": "CREATE_GROUP()"
    },
    "SET_PED_AS_GROUP_LEADER": {
      "prefix": "SET_PED_AS_GROUP_LEADER()",
      "body": ["SET_PED_AS_GROUP_LEADER(${1:Ped ped}, ${2:int groupId})"],
      "description": "SET_PED_AS_GROUP_LEADER()"
    },
    "SET_PED_AS_GROUP_MEMBER": {
      "prefix": "SET_PED_AS_GROUP_MEMBER()",
      "body": ["SET_PED_AS_GROUP_MEMBER(${1:Ped ped}, ${2:int groupId})"],
      "description": "SET_PED_AS_GROUP_MEMBER()"
    },
    "SET_PED_CAN_TELEPORT_TO_GROUP_LEADER": {
      "prefix": "SET_PED_CAN_TELEPORT_TO_GROUP_LEADER()",
      "body": [
        "SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(${1:Ped pedHandle}, ${2:int groupHandle}, ${3:BOOL toggle})"
      ],
      "description": "SET_PED_CAN_TELEPORT_TO_GROUP_LEADER()"
    },
    "REMOVE_GROUP": {
      "prefix": "REMOVE_GROUP()",
      "body": ["REMOVE_GROUP(${1:int groupId})"],
      "description": "REMOVE_GROUP()"
    },
    "REMOVE_PED_FROM_GROUP": {
      "prefix": "REMOVE_PED_FROM_GROUP()",
      "body": ["REMOVE_PED_FROM_GROUP(${1:Ped ped})"],
      "description": "REMOVE_PED_FROM_GROUP()"
    },
    "IS_PED_GROUP_MEMBER": {
      "prefix": "IS_PED_GROUP_MEMBER()",
      "body": ["IS_PED_GROUP_MEMBER(${1:Ped ped}, ${2:int groupId})"],
      "description": "IS_PED_GROUP_MEMBER()"
    },
    "IS_PED_HANGING_ON_TO_VEHICLE": {
      "prefix": "IS_PED_HANGING_ON_TO_VEHICLE()",
      "body": ["IS_PED_HANGING_ON_TO_VEHICLE(${1:Ped ped})"],
      "description": "IS_PED_HANGING_ON_TO_VEHICLE()"
    },
    "SET_GROUP_SEPARATION_RANGE": {
      "prefix": "SET_GROUP_SEPARATION_RANGE()",
      "body": [
        "SET_GROUP_SEPARATION_RANGE(${1:int groupHandle}, ${2:float separationRange})"
      ],
      "description": "SET_GROUP_SEPARATION_RANGE()"
    },
    "SET_PED_MIN_GROUND_TIME_FOR_STUNGUN": {
      "prefix": "SET_PED_MIN_GROUND_TIME_FOR_STUNGUN()",
      "body": ["SET_PED_MIN_GROUND_TIME_FOR_STUNGUN(${1:Ped ped}, ${2:int ms})"],
      "description": "SET_PED_MIN_GROUND_TIME_FOR_STUNGUN()"
    },
    "IS_PED_PRONE": {
      "prefix": "IS_PED_PRONE()",
      "body": ["IS_PED_PRONE(${1:Ped ped})"],
      "description": "IS_PED_PRONE()"
    },
    "IS_PED_IN_COMBAT": {
      "prefix": "IS_PED_IN_COMBAT()",
      "body": ["IS_PED_IN_COMBAT(${1:Ped ped}, ${2:Ped target})"],
      "description": "IS_PED_IN_COMBAT()"
    },
    "GET_PED_TARGET_FROM_COMBAT_PED": {
      "prefix": "GET_PED_TARGET_FROM_COMBAT_PED()",
      "body": ["GET_PED_TARGET_FROM_COMBAT_PED(${1:Ped ped}, ${2:Any p1})"],
      "description": "GET_PED_TARGET_FROM_COMBAT_PED()"
    },
    "CAN_PED_IN_COMBAT_SEE_TARGET": {
      "prefix": "CAN_PED_IN_COMBAT_SEE_TARGET()",
      "body": ["CAN_PED_IN_COMBAT_SEE_TARGET(${1:Ped ped}, ${2:Ped target})"],
      "description": "CAN_PED_IN_COMBAT_SEE_TARGET()"
    },
    "IS_PED_DOING_DRIVEBY": {
      "prefix": "IS_PED_DOING_DRIVEBY()",
      "body": ["IS_PED_DOING_DRIVEBY(${1:Ped ped})"],
      "description": "IS_PED_DOING_DRIVEBY()"
    },
    "IS_PED_JACKING": {
      "prefix": "IS_PED_JACKING()",
      "body": ["IS_PED_JACKING(${1:Ped ped})"],
      "description": "IS_PED_JACKING()"
    },
    "IS_PED_BEING_JACKED": {
      "prefix": "IS_PED_BEING_JACKED()",
      "body": ["IS_PED_BEING_JACKED(${1:Ped ped})"],
      "description": "IS_PED_BEING_JACKED()"
    },
    "IS_PED_BEING_STUNNED": {
      "prefix": "IS_PED_BEING_STUNNED()",
      "body": ["IS_PED_BEING_STUNNED(${1:Ped ped}, ${2:int p1})"],
      "description": "IS_PED_BEING_STUNNED()"
    },
    "GET_PEDS_JACKER": {
      "prefix": "GET_PEDS_JACKER()",
      "body": ["GET_PEDS_JACKER(${1:Ped ped})"],
      "description": "GET_PEDS_JACKER()"
    },
    "GET_JACK_TARGET": {
      "prefix": "GET_JACK_TARGET()",
      "body": ["GET_JACK_TARGET(${1:Ped ped})"],
      "description": "GET_JACK_TARGET()"
    },
    "IS_PED_FLEEING": {
      "prefix": "IS_PED_FLEEING()",
      "body": ["IS_PED_FLEEING(${1:Ped ped})"],
      "description": "IS_PED_FLEEING()"
    },
    "IS_PED_IN_COVER": {
      "prefix": "IS_PED_IN_COVER()",
      "body": ["IS_PED_IN_COVER(${1:Ped ped}, ${2:BOOL exceptUseWeapon})"],
      "description": "IS_PED_IN_COVER()"
    },
    "IS_PED_IN_COVER_FACING_LEFT": {
      "prefix": "IS_PED_IN_COVER_FACING_LEFT()",
      "body": ["IS_PED_IN_COVER_FACING_LEFT(${1:Ped ped})"],
      "description": "IS_PED_IN_COVER_FACING_LEFT()"
    },
    "IS_PED_IN_HIGH_COVER": {
      "prefix": "IS_PED_IN_HIGH_COVER()",
      "body": ["IS_PED_IN_HIGH_COVER(${1:Ped ped})"],
      "description": "IS_PED_IN_HIGH_COVER()"
    },
    "IS_PED_GOING_INTO_COVER": {
      "prefix": "IS_PED_GOING_INTO_COVER()",
      "body": ["IS_PED_GOING_INTO_COVER(${1:Ped ped})"],
      "description": "IS_PED_GOING_INTO_COVER()"
    },
    "SET_PED_PINNED_DOWN": {
      "prefix": "SET_PED_PINNED_DOWN()",
      "body": ["SET_PED_PINNED_DOWN(${1:Ped ped}, ${2:BOOL pinned}, ${3:int i})"],
      "description": "SET_PED_PINNED_DOWN()"
    },
    "_HAS_PED_CLEAR_LOS_TO_ENTITY": {
      "prefix": "_HAS_PED_CLEAR_LOS_TO_ENTITY()",
      "body": [
        "_HAS_PED_CLEAR_LOS_TO_ENTITY(${1:Ped ped}, ${2:Entity entity}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:int p5}, ${7:BOOL p6}, ${8:BOOL p7})"
      ],
      "description": "_HAS_PED_CLEAR_LOS_TO_ENTITY()"
    },
    "GET_SEAT_PED_IS_TRYING_TO_ENTER": {
      "prefix": "GET_SEAT_PED_IS_TRYING_TO_ENTER()",
      "body": ["GET_SEAT_PED_IS_TRYING_TO_ENTER(${1:Ped ped})"],
      "description": "GET_SEAT_PED_IS_TRYING_TO_ENTER()"
    },
    "GET_VEHICLE_PED_IS_TRYING_TO_ENTER": {
      "prefix": "GET_VEHICLE_PED_IS_TRYING_TO_ENTER()",
      "body": ["GET_VEHICLE_PED_IS_TRYING_TO_ENTER(${1:Ped ped})"],
      "description": "GET_VEHICLE_PED_IS_TRYING_TO_ENTER()"
    },
    "GET_PED_SOURCE_OF_DEATH": {
      "prefix": "GET_PED_SOURCE_OF_DEATH()",
      "body": ["GET_PED_SOURCE_OF_DEATH(${1:Ped ped})"],
      "description": "GET_PED_SOURCE_OF_DEATH()"
    },
    "GET_PED_CAUSE_OF_DEATH": {
      "prefix": "GET_PED_CAUSE_OF_DEATH()",
      "body": ["GET_PED_CAUSE_OF_DEATH(${1:Ped ped})"],
      "description": "GET_PED_CAUSE_OF_DEATH()"
    },
    "GET_PED_TIME_OF_DEATH": {
      "prefix": "GET_PED_TIME_OF_DEATH()",
      "body": ["GET_PED_TIME_OF_DEATH(${1:Ped ped})"],
      "description": "GET_PED_TIME_OF_DEATH()"
    },
    "COUNT_PEDS_IN_COMBAT_WITH_TARGET": {
      "prefix": "COUNT_PEDS_IN_COMBAT_WITH_TARGET()",
      "body": ["COUNT_PEDS_IN_COMBAT_WITH_TARGET(${1:Ped ped})"],
      "description": "COUNT_PEDS_IN_COMBAT_WITH_TARGET()"
    },
    "COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS": {
      "prefix": "COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS()",
      "body": [
        "COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius})"
      ],
      "description": "COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS()"
    },
    "SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH": {
      "prefix": "SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH()",
      "body": [
        "SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(${1:Ped ped}, ${2:Hash hash})"
      ],
      "description": "SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH()"
    },
    "SET_PED_RELATIONSHIP_GROUP_HASH": {
      "prefix": "SET_PED_RELATIONSHIP_GROUP_HASH()",
      "body": ["SET_PED_RELATIONSHIP_GROUP_HASH(${1:Ped ped}, ${2:Hash hash})"],
      "description": "SET_PED_RELATIONSHIP_GROUP_HASH()"
    },
    "SET_RELATIONSHIP_BETWEEN_GROUPS": {
      "prefix": "SET_RELATIONSHIP_BETWEEN_GROUPS()",
      "body": [
        "SET_RELATIONSHIP_BETWEEN_GROUPS(${1:int relationship}, ${2:Hash group1}, ${3:Hash group2})"
      ],
      "description": "SET_RELATIONSHIP_BETWEEN_GROUPS()"
    },
    "CLEAR_RELATIONSHIP_BETWEEN_GROUPS": {
      "prefix": "CLEAR_RELATIONSHIP_BETWEEN_GROUPS()",
      "body": [
        "CLEAR_RELATIONSHIP_BETWEEN_GROUPS(${1:int relationship}, ${2:Hash group1}, ${3:Hash group2})"
      ],
      "description": "CLEAR_RELATIONSHIP_BETWEEN_GROUPS()"
    },
    "ADD_RELATIONSHIP_GROUP": {
      "prefix": "ADD_RELATIONSHIP_GROUP()",
      "body": [
        "ADD_RELATIONSHIP_GROUP(${1:const char* name}, ${2:Hash* groupHash})"
      ],
      "description": "ADD_RELATIONSHIP_GROUP()"
    },
    "REMOVE_RELATIONSHIP_GROUP": {
      "prefix": "REMOVE_RELATIONSHIP_GROUP()",
      "body": ["REMOVE_RELATIONSHIP_GROUP(${1:Hash groupHash})"],
      "description": "REMOVE_RELATIONSHIP_GROUP()"
    },
    "DOES_RELATIONSHIP_GROUP_EXIST": {
      "prefix": "DOES_RELATIONSHIP_GROUP_EXIST()",
      "body": ["DOES_RELATIONSHIP_GROUP_EXIST(${1:Hash groupHash})"],
      "description": "DOES_RELATIONSHIP_GROUP_EXIST()"
    },
    "GET_RELATIONSHIP_BETWEEN_PEDS": {
      "prefix": "GET_RELATIONSHIP_BETWEEN_PEDS()",
      "body": ["GET_RELATIONSHIP_BETWEEN_PEDS(${1:Ped ped1}, ${2:Ped ped2})"],
      "description": "GET_RELATIONSHIP_BETWEEN_PEDS()"
    },
    "GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH": {
      "prefix": "GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH()",
      "body": ["GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(${1:Ped ped})"],
      "description": "GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH()"
    },
    "GET_PED_RELATIONSHIP_GROUP_HASH": {
      "prefix": "GET_PED_RELATIONSHIP_GROUP_HASH()",
      "body": ["GET_PED_RELATIONSHIP_GROUP_HASH(${1:Ped ped})"],
      "description": "GET_PED_RELATIONSHIP_GROUP_HASH()"
    },
    "GET_RELATIONSHIP_BETWEEN_GROUPS": {
      "prefix": "GET_RELATIONSHIP_BETWEEN_GROUPS()",
      "body": [
        "GET_RELATIONSHIP_BETWEEN_GROUPS(${1:Hash group1}, ${2:Hash group2})"
      ],
      "description": "GET_RELATIONSHIP_BETWEEN_GROUPS()"
    },
    "SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL": {
      "prefix": "SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL()",
      "body": [
        "SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL(${1:Hash group}, ${2:BOOL p1})"
      ],
      "description": "SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL()"
    },
    "TELL_GROUP_PEDS_IN_AREA_TO_ATTACK": {
      "prefix": "TELL_GROUP_PEDS_IN_AREA_TO_ATTACK()",
      "body": [
        "TELL_GROUP_PEDS_IN_AREA_TO_ATTACK(${1:Ped ped}, ${2:Any p1}, ${3:float p2}, ${4:Hash hash}, ${5:Any p4}, ${6:Any p5})"
      ],
      "description": "TELL_GROUP_PEDS_IN_AREA_TO_ATTACK()"
    },
    "SET_PED_CAN_BE_TARGETED_WITHOUT_LOS": {
      "prefix": "SET_PED_CAN_BE_TARGETED_WITHOUT_LOS()",
      "body": [
        "SET_PED_CAN_BE_TARGETED_WITHOUT_LOS(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "SET_PED_CAN_BE_TARGETED_WITHOUT_LOS()"
    },
    "SET_PED_TO_INFORM_RESPECTED_FRIENDS": {
      "prefix": "SET_PED_TO_INFORM_RESPECTED_FRIENDS()",
      "body": [
        "SET_PED_TO_INFORM_RESPECTED_FRIENDS(${1:Ped ped}, ${2:float radius}, ${3:int maxFriends})"
      ],
      "description": "SET_PED_TO_INFORM_RESPECTED_FRIENDS()"
    },
    "IS_PED_RESPONDING_TO_EVENT": {
      "prefix": "IS_PED_RESPONDING_TO_EVENT()",
      "body": ["IS_PED_RESPONDING_TO_EVENT(${1:Ped ped}, ${2:Any event})"],
      "description": "IS_PED_RESPONDING_TO_EVENT()"
    },
    "GET_POS_FROM_FIRED_EVENT": {
      "prefix": "GET_POS_FROM_FIRED_EVENT()",
      "body": [
        "GET_POS_FROM_FIRED_EVENT(${1:Ped ped}, ${2:int eventType}, ${3:Any* outData})"
      ],
      "description": "GET_POS_FROM_FIRED_EVENT()"
    },
    "SET_PED_FIRING_PATTERN": {
      "prefix": "SET_PED_FIRING_PATTERN()",
      "body": ["SET_PED_FIRING_PATTERN(${1:Ped ped}, ${2:Hash patternHash})"],
      "description": "SET_PED_FIRING_PATTERN()"
    },
    "SET_PED_SHOOT_RATE": {
      "prefix": "SET_PED_SHOOT_RATE()",
      "body": ["SET_PED_SHOOT_RATE(${1:Ped ped}, ${2:int shootRate})"],
      "description": "SET_PED_SHOOT_RATE()"
    },
    "SET_COMBAT_FLOAT": {
      "prefix": "SET_COMBAT_FLOAT()",
      "body": [
        "SET_COMBAT_FLOAT(${1:Ped ped}, ${2:int combatType}, ${3:float p2})"
      ],
      "description": "SET_COMBAT_FLOAT()"
    },
    "GET_COMBAT_FLOAT": {
      "prefix": "GET_COMBAT_FLOAT()",
      "body": ["GET_COMBAT_FLOAT(${1:Ped ped}, ${2:int p1})"],
      "description": "GET_COMBAT_FLOAT()"
    },
    "GET_GROUP_SIZE": {
      "prefix": "GET_GROUP_SIZE()",
      "body": [
        "GET_GROUP_SIZE(${1:int groupID}, ${2:Any* p1}, ${3:int* sizeInMembers})"
      ],
      "description": "GET_GROUP_SIZE()"
    },
    "DOES_GROUP_EXIST": {
      "prefix": "DOES_GROUP_EXIST()",
      "body": ["DOES_GROUP_EXIST(${1:int groupId})"],
      "description": "DOES_GROUP_EXIST()"
    },
    "GET_PED_GROUP_INDEX": {
      "prefix": "GET_PED_GROUP_INDEX()",
      "body": ["GET_PED_GROUP_INDEX(${1:Ped ped})"],
      "description": "GET_PED_GROUP_INDEX()"
    },
    "IS_PED_IN_GROUP": {
      "prefix": "IS_PED_IN_GROUP()",
      "body": ["IS_PED_IN_GROUP(${1:Ped ped})"],
      "description": "IS_PED_IN_GROUP()"
    },
    "GET_PLAYER_PED_IS_FOLLOWING": {
      "prefix": "GET_PLAYER_PED_IS_FOLLOWING()",
      "body": ["GET_PLAYER_PED_IS_FOLLOWING(${1:Ped ped})"],
      "description": "GET_PLAYER_PED_IS_FOLLOWING()"
    },
    "SET_GROUP_FORMATION": {
      "prefix": "SET_GROUP_FORMATION()",
      "body": ["SET_GROUP_FORMATION(${1:int groupId}, ${2:int formationType})"],
      "description": "SET_GROUP_FORMATION()"
    },
    "SET_GROUP_FORMATION_SPACING": {
      "prefix": "SET_GROUP_FORMATION_SPACING()",
      "body": [
        "SET_GROUP_FORMATION_SPACING(${1:int groupId}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "SET_GROUP_FORMATION_SPACING()"
    },
    "RESET_GROUP_FORMATION_DEFAULT_SPACING": {
      "prefix": "RESET_GROUP_FORMATION_DEFAULT_SPACING()",
      "body": ["RESET_GROUP_FORMATION_DEFAULT_SPACING(${1:int groupHandle})"],
      "description": "RESET_GROUP_FORMATION_DEFAULT_SPACING()"
    },
    "GET_VEHICLE_PED_IS_USING": {
      "prefix": "GET_VEHICLE_PED_IS_USING()",
      "body": ["GET_VEHICLE_PED_IS_USING(${1:Ped ped})"],
      "description": "GET_VEHICLE_PED_IS_USING()"
    },
    "GET_VEHICLE_PED_IS_ENTERING": {
      "prefix": "GET_VEHICLE_PED_IS_ENTERING()",
      "body": ["GET_VEHICLE_PED_IS_ENTERING(${1:Ped ped})"],
      "description": "GET_VEHICLE_PED_IS_ENTERING()"
    },
    "SET_PED_GRAVITY": {
      "prefix": "SET_PED_GRAVITY()",
      "body": ["SET_PED_GRAVITY(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_GRAVITY()"
    },
    "APPLY_DAMAGE_TO_PED": {
      "prefix": "APPLY_DAMAGE_TO_PED()",
      "body": [
        "APPLY_DAMAGE_TO_PED(${1:Ped ped}, ${2:int damageAmount}, ${3:BOOL p2}, ${4:Any p3}, ${5:Hash weaponType})"
      ],
      "description": "APPLY_DAMAGE_TO_PED()"
    },
    "GET_TIME_PED_DAMAGED_BY_WEAPON": {
      "prefix": "GET_TIME_PED_DAMAGED_BY_WEAPON()",
      "body": [
        "GET_TIME_PED_DAMAGED_BY_WEAPON(${1:Ped ped}, ${2:Hash weaponHash})"
      ],
      "description": "GET_TIME_PED_DAMAGED_BY_WEAPON()"
    },
    "SET_PED_ALLOWED_TO_DUCK": {
      "prefix": "SET_PED_ALLOWED_TO_DUCK()",
      "body": ["SET_PED_ALLOWED_TO_DUCK(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_ALLOWED_TO_DUCK()"
    },
    "SET_PED_NEVER_LEAVES_GROUP": {
      "prefix": "SET_PED_NEVER_LEAVES_GROUP()",
      "body": ["SET_PED_NEVER_LEAVES_GROUP(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_NEVER_LEAVES_GROUP()"
    },
    "GET_PED_TYPE": {
      "prefix": "GET_PED_TYPE()",
      "body": ["GET_PED_TYPE(${1:Ped ped})"],
      "description": "GET_PED_TYPE()"
    },
    "SET_PED_AS_COP": {
      "prefix": "SET_PED_AS_COP()",
      "body": ["SET_PED_AS_COP(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_AS_COP()"
    },
    "SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG": {
      "prefix": "SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG()",
      "body": [
        "SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG(${1:BOOL toggle})"
      ],
      "description": "SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG()"
    },
    "SET_PED_MAX_HEALTH": {
      "prefix": "SET_PED_MAX_HEALTH()",
      "body": ["SET_PED_MAX_HEALTH(${1:Ped ped}, ${2:int value})"],
      "description": "SET_PED_MAX_HEALTH()"
    },
    "GET_PED_MAX_HEALTH": {
      "prefix": "GET_PED_MAX_HEALTH()",
      "body": ["GET_PED_MAX_HEALTH(${1:Ped ped})"],
      "description": "GET_PED_MAX_HEALTH()"
    },
    "SET_PED_MAX_TIME_IN_WATER": {
      "prefix": "SET_PED_MAX_TIME_IN_WATER()",
      "body": ["SET_PED_MAX_TIME_IN_WATER(${1:Ped ped}, ${2:float value})"],
      "description": "SET_PED_MAX_TIME_IN_WATER()"
    },
    "SET_PED_MAX_TIME_UNDERWATER": {
      "prefix": "SET_PED_MAX_TIME_UNDERWATER()",
      "body": ["SET_PED_MAX_TIME_UNDERWATER(${1:Ped ped}, ${2:float value})"],
      "description": "SET_PED_MAX_TIME_UNDERWATER()"
    },
    "SET_CORPSE_RAGDOLL_FRICTION": {
      "prefix": "SET_CORPSE_RAGDOLL_FRICTION()",
      "body": ["SET_CORPSE_RAGDOLL_FRICTION(${1:Ped ped}, ${2:float p1})"],
      "description": "SET_CORPSE_RAGDOLL_FRICTION()"
    },
    "SET_PED_VEHICLE_FORCED_SEAT_USAGE": {
      "prefix": "SET_PED_VEHICLE_FORCED_SEAT_USAGE()",
      "body": [
        "SET_PED_VEHICLE_FORCED_SEAT_USAGE(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:int seatIndex}, ${4:int flags}, ${5:Any p4})"
      ],
      "description": "SET_PED_VEHICLE_FORCED_SEAT_USAGE()"
    },
    "CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE": {
      "prefix": "CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE()",
      "body": ["CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE(${1:Ped ped})"],
      "description": "CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE()"
    },
    "SET_PED_CAN_BE_KNOCKED_OFF_BIKE": {
      "prefix": "SET_PED_CAN_BE_KNOCKED_OFF_BIKE()",
      "body": ["SET_PED_CAN_BE_KNOCKED_OFF_BIKE(${1:Any p0}, ${2:Any p1})"],
      "description": "SET_PED_CAN_BE_KNOCKED_OFF_BIKE()"
    },
    "SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE": {
      "prefix": "SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE()",
      "body": [
        "SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(${1:Ped ped}, ${2:int state})"
      ],
      "description": "SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE()"
    },
    "CAN_KNOCK_PED_OFF_VEHICLE": {
      "prefix": "CAN_KNOCK_PED_OFF_VEHICLE()",
      "body": ["CAN_KNOCK_PED_OFF_VEHICLE(${1:Ped ped})"],
      "description": "CAN_KNOCK_PED_OFF_VEHICLE()"
    },
    "KNOCK_PED_OFF_VEHICLE": {
      "prefix": "KNOCK_PED_OFF_VEHICLE()",
      "body": ["KNOCK_PED_OFF_VEHICLE(${1:Ped ped})"],
      "description": "KNOCK_PED_OFF_VEHICLE()"
    },
    "SET_PED_COORDS_NO_GANG": {
      "prefix": "SET_PED_COORDS_NO_GANG()",
      "body": [
        "SET_PED_COORDS_NO_GANG(${1:Ped ped}, ${2:float posX}, ${3:float posY}, ${4:float posZ})"
      ],
      "description": "SET_PED_COORDS_NO_GANG()"
    },
    "GET_PED_AS_GROUP_MEMBER": {
      "prefix": "GET_PED_AS_GROUP_MEMBER()",
      "body": [
        "GET_PED_AS_GROUP_MEMBER(${1:int groupID}, ${2:int memberNumber})"
      ],
      "description": "GET_PED_AS_GROUP_MEMBER()"
    },
    "GET_PED_AS_GROUP_LEADER": {
      "prefix": "GET_PED_AS_GROUP_LEADER()",
      "body": ["GET_PED_AS_GROUP_LEADER(${1:int groupID})"],
      "description": "GET_PED_AS_GROUP_LEADER()"
    },
    "SET_PED_KEEP_TASK": {
      "prefix": "SET_PED_KEEP_TASK()",
      "body": ["SET_PED_KEEP_TASK(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_KEEP_TASK()"
    },
    "SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED": {
      "prefix": "SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED()",
      "body": [
        "SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED()"
    },
    "IS_PED_SWIMMING": {
      "prefix": "IS_PED_SWIMMING()",
      "body": ["IS_PED_SWIMMING(${1:Ped ped})"],
      "description": "IS_PED_SWIMMING()"
    },
    "IS_PED_SWIMMING_UNDER_WATER": {
      "prefix": "IS_PED_SWIMMING_UNDER_WATER()",
      "body": ["IS_PED_SWIMMING_UNDER_WATER(${1:Ped ped})"],
      "description": "IS_PED_SWIMMING_UNDER_WATER()"
    },
    "SET_PED_COORDS_KEEP_VEHICLE": {
      "prefix": "SET_PED_COORDS_KEEP_VEHICLE()",
      "body": [
        "SET_PED_COORDS_KEEP_VEHICLE(${1:Ped ped}, ${2:float posX}, ${3:float posY}, ${4:float posZ})"
      ],
      "description": "SET_PED_COORDS_KEEP_VEHICLE()"
    },
    "SET_PED_DIES_IN_VEHICLE": {
      "prefix": "SET_PED_DIES_IN_VEHICLE()",
      "body": ["SET_PED_DIES_IN_VEHICLE(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_DIES_IN_VEHICLE()"
    },
    "SET_CREATE_RANDOM_COPS": {
      "prefix": "SET_CREATE_RANDOM_COPS()",
      "body": ["SET_CREATE_RANDOM_COPS(${1:BOOL toggle})"],
      "description": "SET_CREATE_RANDOM_COPS()"
    },
    "SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS": {
      "prefix": "SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS()",
      "body": ["SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS(${1:BOOL toggle})"],
      "description": "SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS()"
    },
    "SET_CREATE_RANDOM_COPS_ON_SCENARIOS": {
      "prefix": "SET_CREATE_RANDOM_COPS_ON_SCENARIOS()",
      "body": ["SET_CREATE_RANDOM_COPS_ON_SCENARIOS(${1:BOOL toggle})"],
      "description": "SET_CREATE_RANDOM_COPS_ON_SCENARIOS()"
    },
    "CAN_CREATE_RANDOM_COPS": {
      "prefix": "CAN_CREATE_RANDOM_COPS()",
      "body": ["CAN_CREATE_RANDOM_COPS()"],
      "description": "CAN_CREATE_RANDOM_COPS()"
    },
    "SET_PED_AS_ENEMY": {
      "prefix": "SET_PED_AS_ENEMY()",
      "body": ["SET_PED_AS_ENEMY(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_AS_ENEMY()"
    },
    "SET_PED_CAN_SMASH_GLASS": {
      "prefix": "SET_PED_CAN_SMASH_GLASS()",
      "body": [
        "SET_PED_CAN_SMASH_GLASS(${1:Ped ped}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "SET_PED_CAN_SMASH_GLASS()"
    },
    "IS_PED_IN_ANY_TRAIN": {
      "prefix": "IS_PED_IN_ANY_TRAIN()",
      "body": ["IS_PED_IN_ANY_TRAIN(${1:Ped ped})"],
      "description": "IS_PED_IN_ANY_TRAIN()"
    },
    "IS_PED_GETTING_INTO_A_VEHICLE": {
      "prefix": "IS_PED_GETTING_INTO_A_VEHICLE()",
      "body": ["IS_PED_GETTING_INTO_A_VEHICLE(${1:Ped ped})"],
      "description": "IS_PED_GETTING_INTO_A_VEHICLE()"
    },
    "IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE": {
      "prefix": "IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE()",
      "body": ["IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE(${1:Ped ped})"],
      "description": "IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE()"
    },
    "SET_ENABLE_HANDCUFFS": {
      "prefix": "SET_ENABLE_HANDCUFFS()",
      "body": ["SET_ENABLE_HANDCUFFS(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_ENABLE_HANDCUFFS()"
    },
    "SET_ENABLE_BOUND_ANKLES": {
      "prefix": "SET_ENABLE_BOUND_ANKLES()",
      "body": ["SET_ENABLE_BOUND_ANKLES(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_ENABLE_BOUND_ANKLES()"
    },
    "SET_ENABLE_SCUBA": {
      "prefix": "SET_ENABLE_SCUBA()",
      "body": ["SET_ENABLE_SCUBA(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_ENABLE_SCUBA()"
    },
    "SET_CAN_ATTACK_FRIENDLY": {
      "prefix": "SET_CAN_ATTACK_FRIENDLY()",
      "body": [
        "SET_CAN_ATTACK_FRIENDLY(${1:Ped ped}, ${2:BOOL toggle}, ${3:BOOL p2})"
      ],
      "description": "SET_CAN_ATTACK_FRIENDLY()"
    },
    "GET_PED_ALERTNESS": {
      "prefix": "GET_PED_ALERTNESS()",
      "body": ["GET_PED_ALERTNESS(${1:Ped ped})"],
      "description": "GET_PED_ALERTNESS()"
    },
    "SET_PED_ALERTNESS": {
      "prefix": "SET_PED_ALERTNESS()",
      "body": ["SET_PED_ALERTNESS(${1:Ped ped}, ${2:int value})"],
      "description": "SET_PED_ALERTNESS()"
    },
    "SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE": {
      "prefix": "SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE()",
      "body": [
        "SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE()"
    },
    "SET_PED_MOVEMENT_CLIPSET": {
      "prefix": "SET_PED_MOVEMENT_CLIPSET()",
      "body": [
        "SET_PED_MOVEMENT_CLIPSET(${1:Ped ped}, ${2:const char* clipSet}, ${3:float transitionSpeed})"
      ],
      "description": "SET_PED_MOVEMENT_CLIPSET()"
    },
    "RESET_PED_MOVEMENT_CLIPSET": {
      "prefix": "RESET_PED_MOVEMENT_CLIPSET()",
      "body": ["RESET_PED_MOVEMENT_CLIPSET(${1:Ped ped}, ${2:float p1})"],
      "description": "RESET_PED_MOVEMENT_CLIPSET()"
    },
    "SET_PED_STRAFE_CLIPSET": {
      "prefix": "SET_PED_STRAFE_CLIPSET()",
      "body": ["SET_PED_STRAFE_CLIPSET(${1:Ped ped}, ${2:const char* clipSet})"],
      "description": "SET_PED_STRAFE_CLIPSET()"
    },
    "RESET_PED_STRAFE_CLIPSET": {
      "prefix": "RESET_PED_STRAFE_CLIPSET()",
      "body": ["RESET_PED_STRAFE_CLIPSET(${1:Ped ped})"],
      "description": "RESET_PED_STRAFE_CLIPSET()"
    },
    "SET_PED_WEAPON_MOVEMENT_CLIPSET": {
      "prefix": "SET_PED_WEAPON_MOVEMENT_CLIPSET()",
      "body": [
        "SET_PED_WEAPON_MOVEMENT_CLIPSET(${1:Ped ped}, ${2:const char* clipSet})"
      ],
      "description": "SET_PED_WEAPON_MOVEMENT_CLIPSET()"
    },
    "RESET_PED_WEAPON_MOVEMENT_CLIPSET": {
      "prefix": "RESET_PED_WEAPON_MOVEMENT_CLIPSET()",
      "body": ["RESET_PED_WEAPON_MOVEMENT_CLIPSET(${1:Ped ped})"],
      "description": "RESET_PED_WEAPON_MOVEMENT_CLIPSET()"
    },
    "SET_PED_DRIVE_BY_CLIPSET_OVERRIDE": {
      "prefix": "SET_PED_DRIVE_BY_CLIPSET_OVERRIDE()",
      "body": [
        "SET_PED_DRIVE_BY_CLIPSET_OVERRIDE(${1:Ped ped}, ${2:const char* clipset})"
      ],
      "description": "SET_PED_DRIVE_BY_CLIPSET_OVERRIDE()"
    },
    "CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE": {
      "prefix": "CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE()",
      "body": ["CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE(${1:Ped ped})"],
      "description": "CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE()"
    },
    "SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE": {
      "prefix": "SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE()",
      "body": [
        "SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(${1:Ped ped}, ${2:const char* p1})"
      ],
      "description": "SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE()"
    },
    "CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE": {
      "prefix": "CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE()",
      "body": ["CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(${1:Ped ped})"],
      "description": "CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE()"
    },
    "CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE": {
      "prefix": "CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE()",
      "body": ["CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE(${1:Ped ped})"],
      "description": "CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE()"
    },
    "SET_PED_IN_VEHICLE_CONTEXT": {
      "prefix": "SET_PED_IN_VEHICLE_CONTEXT()",
      "body": ["SET_PED_IN_VEHICLE_CONTEXT(${1:Ped ped}, ${2:Hash context})"],
      "description": "SET_PED_IN_VEHICLE_CONTEXT()"
    },
    "RESET_PED_IN_VEHICLE_CONTEXT": {
      "prefix": "RESET_PED_IN_VEHICLE_CONTEXT()",
      "body": ["RESET_PED_IN_VEHICLE_CONTEXT(${1:Ped ped})"],
      "description": "RESET_PED_IN_VEHICLE_CONTEXT()"
    },
    "IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM": {
      "prefix": "IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM()",
      "body": [
        "IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM(${1:Ped ped}, ${2:const char* animDict}, ${3:const char* anim})"
      ],
      "description": "IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM()"
    },
    "SET_PED_ALTERNATE_WALK_ANIM": {
      "prefix": "SET_PED_ALTERNATE_WALK_ANIM()",
      "body": [
        "SET_PED_ALTERNATE_WALK_ANIM(${1:Ped ped}, ${2:const char* animDict}, ${3:const char* animName}, ${4:float p3}, ${5:BOOL p4})"
      ],
      "description": "SET_PED_ALTERNATE_WALK_ANIM()"
    },
    "CLEAR_PED_ALTERNATE_WALK_ANIM": {
      "prefix": "CLEAR_PED_ALTERNATE_WALK_ANIM()",
      "body": ["CLEAR_PED_ALTERNATE_WALK_ANIM(${1:Ped ped}, ${2:float p1})"],
      "description": "CLEAR_PED_ALTERNATE_WALK_ANIM()"
    },
    "SET_PED_ALTERNATE_MOVEMENT_ANIM": {
      "prefix": "SET_PED_ALTERNATE_MOVEMENT_ANIM()",
      "body": [
        "SET_PED_ALTERNATE_MOVEMENT_ANIM(${1:Ped ped}, ${2:int stance}, ${3:const char* animDictionary}, ${4:const char* animationName}, ${5:float p4}, ${6:BOOL p5})"
      ],
      "description": "SET_PED_ALTERNATE_MOVEMENT_ANIM()"
    },
    "CLEAR_PED_ALTERNATE_MOVEMENT_ANIM": {
      "prefix": "CLEAR_PED_ALTERNATE_MOVEMENT_ANIM()",
      "body": [
        "CLEAR_PED_ALTERNATE_MOVEMENT_ANIM(${1:Ped ped}, ${2:int stance}, ${3:float p2})"
      ],
      "description": "CLEAR_PED_ALTERNATE_MOVEMENT_ANIM()"
    },
    "SET_PED_GESTURE_GROUP": {
      "prefix": "SET_PED_GESTURE_GROUP()",
      "body": [
        "SET_PED_GESTURE_GROUP(${1:Ped ped}, ${2:const char* animGroupGesture})"
      ],
      "description": "SET_PED_GESTURE_GROUP()"
    },
    "GET_ANIM_INITIAL_OFFSET_POSITION": {
      "prefix": "GET_ANIM_INITIAL_OFFSET_POSITION()",
      "body": [
        "GET_ANIM_INITIAL_OFFSET_POSITION(${1:const char* animDict}, ${2:const char* animName}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float xRot}, ${7:float yRot}, ${8:float zRot}, ${9:float p8}, ${10:int p9})"
      ],
      "description": "GET_ANIM_INITIAL_OFFSET_POSITION()"
    },
    "GET_ANIM_INITIAL_OFFSET_ROTATION": {
      "prefix": "GET_ANIM_INITIAL_OFFSET_ROTATION()",
      "body": [
        "GET_ANIM_INITIAL_OFFSET_ROTATION(${1:const char* animDict}, ${2:const char* animName}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float xRot}, ${7:float yRot}, ${8:float zRot}, ${9:float p8}, ${10:int p9})"
      ],
      "description": "GET_ANIM_INITIAL_OFFSET_ROTATION()"
    },
    "GET_PED_DRAWABLE_VARIATION": {
      "prefix": "GET_PED_DRAWABLE_VARIATION()",
      "body": ["GET_PED_DRAWABLE_VARIATION(${1:Ped ped}, ${2:int componentId})"],
      "description": "GET_PED_DRAWABLE_VARIATION()"
    },
    "GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS": {
      "prefix": "GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS()",
      "body": [
        "GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(${1:Ped ped}, ${2:int componentId})"
      ],
      "description": "GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS()"
    },
    "GET_PED_TEXTURE_VARIATION": {
      "prefix": "GET_PED_TEXTURE_VARIATION()",
      "body": ["GET_PED_TEXTURE_VARIATION(${1:Ped ped}, ${2:int componentId})"],
      "description": "GET_PED_TEXTURE_VARIATION()"
    },
    "GET_NUMBER_OF_PED_TEXTURE_VARIATIONS": {
      "prefix": "GET_NUMBER_OF_PED_TEXTURE_VARIATIONS()",
      "body": [
        "GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(${1:Ped ped}, ${2:int componentId}, ${3:int drawableId})"
      ],
      "description": "GET_NUMBER_OF_PED_TEXTURE_VARIATIONS()"
    },
    "GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS": {
      "prefix": "GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS()",
      "body": [
        "GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(${1:Ped ped}, ${2:int propId})"
      ],
      "description": "GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS()"
    },
    "GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS": {
      "prefix": "GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS()",
      "body": [
        "GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(${1:Ped ped}, ${2:int propId}, ${3:int drawableId})"
      ],
      "description": "GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS()"
    },
    "GET_PED_PALETTE_VARIATION": {
      "prefix": "GET_PED_PALETTE_VARIATION()",
      "body": ["GET_PED_PALETTE_VARIATION(${1:Ped ped}, ${2:int componentId})"],
      "description": "GET_PED_PALETTE_VARIATION()"
    },
    "GET_MP_OUTFIT_DATA_FROM_METADATA": {
      "prefix": "GET_MP_OUTFIT_DATA_FROM_METADATA()",
      "body": ["GET_MP_OUTFIT_DATA_FROM_METADATA(${1:Any* p0}, ${2:Any* p1})"],
      "description": "GET_MP_OUTFIT_DATA_FROM_METADATA()"
    },
    "GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX": {
      "prefix": "GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX()",
      "body": ["GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX(${1:int p0})"],
      "description": "GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX()"
    },
    "GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX": {
      "prefix": "GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX()",
      "body": ["GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX(${1:int p0})"],
      "description": "GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX()"
    },
    "IS_PED_COMPONENT_VARIATION_VALID": {
      "prefix": "IS_PED_COMPONENT_VARIATION_VALID()",
      "body": [
        "IS_PED_COMPONENT_VARIATION_VALID(${1:Ped ped}, ${2:int componentId}, ${3:int drawableId}, ${4:int textureId})"
      ],
      "description": "IS_PED_COMPONENT_VARIATION_VALID()"
    },
    "SET_PED_COMPONENT_VARIATION": {
      "prefix": "SET_PED_COMPONENT_VARIATION()",
      "body": [
        "SET_PED_COMPONENT_VARIATION(${1:Ped ped}, ${2:int componentId}, ${3:int drawableId}, ${4:int textureId}, ${5:int paletteId})"
      ],
      "description": "SET_PED_COMPONENT_VARIATION()"
    },
    "SET_PED_RANDOM_COMPONENT_VARIATION": {
      "prefix": "SET_PED_RANDOM_COMPONENT_VARIATION()",
      "body": ["SET_PED_RANDOM_COMPONENT_VARIATION(${1:Ped ped}, ${2:int p1})"],
      "description": "SET_PED_RANDOM_COMPONENT_VARIATION()"
    },
    "SET_PED_RANDOM_PROPS": {
      "prefix": "SET_PED_RANDOM_PROPS()",
      "body": ["SET_PED_RANDOM_PROPS(${1:Ped ped})"],
      "description": "SET_PED_RANDOM_PROPS()"
    },
    "SET_PED_DEFAULT_COMPONENT_VARIATION": {
      "prefix": "SET_PED_DEFAULT_COMPONENT_VARIATION()",
      "body": ["SET_PED_DEFAULT_COMPONENT_VARIATION(${1:Ped ped})"],
      "description": "SET_PED_DEFAULT_COMPONENT_VARIATION()"
    },
    "SET_PED_BLEND_FROM_PARENTS": {
      "prefix": "SET_PED_BLEND_FROM_PARENTS()",
      "body": [
        "SET_PED_BLEND_FROM_PARENTS(${1:Ped ped}, ${2:Any p1}, ${3:Any p2}, ${4:float p3}, ${5:float p4})"
      ],
      "description": "SET_PED_BLEND_FROM_PARENTS()"
    },
    "SET_PED_HEAD_BLEND_DATA": {
      "prefix": "SET_PED_HEAD_BLEND_DATA()",
      "body": [
        "SET_PED_HEAD_BLEND_DATA(${1:Ped ped}, ${2:int shapeFirstID}, ${3:int shapeSecondID}, ${4:int shapeThirdID}, ${5:int skinFirstID}, ${6:int skinSecondID}, ${7:int skinThirdID}, ${8:float shapeMix}, ${9:float skinMix}, ${10:float thirdMix}, ${11:BOOL isParent})"
      ],
      "description": "SET_PED_HEAD_BLEND_DATA()"
    },
    "GET_PED_HEAD_BLEND_DATA": {
      "prefix": "GET_PED_HEAD_BLEND_DATA()",
      "body": ["GET_PED_HEAD_BLEND_DATA(${1:Ped ped}, ${2:Any* headBlendData})"],
      "description": "GET_PED_HEAD_BLEND_DATA()"
    },
    "UPDATE_PED_HEAD_BLEND_DATA": {
      "prefix": "UPDATE_PED_HEAD_BLEND_DATA()",
      "body": [
        "UPDATE_PED_HEAD_BLEND_DATA(${1:Ped ped}, ${2:float shapeMix}, ${3:float skinMix}, ${4:float thirdMix})"
      ],
      "description": "UPDATE_PED_HEAD_BLEND_DATA()"
    },
    "SET_HEAD_BLEND_EYE_COLOR": {
      "prefix": "SET_HEAD_BLEND_EYE_COLOR()",
      "body": ["SET_HEAD_BLEND_EYE_COLOR(${1:Ped ped}, ${2:int index})"],
      "description": "SET_HEAD_BLEND_EYE_COLOR()"
    },
    "GET_HEAD_BLEND_EYE_COLOR": {
      "prefix": "GET_HEAD_BLEND_EYE_COLOR()",
      "body": ["GET_HEAD_BLEND_EYE_COLOR(${1:Ped ped})"],
      "description": "GET_HEAD_BLEND_EYE_COLOR()"
    },
    "SET_PED_HEAD_OVERLAY": {
      "prefix": "SET_PED_HEAD_OVERLAY()",
      "body": [
        "SET_PED_HEAD_OVERLAY(${1:Ped ped}, ${2:int overlayID}, ${3:int index}, ${4:float opacity})"
      ],
      "description": "SET_PED_HEAD_OVERLAY()"
    },
    "GET_PED_HEAD_OVERLAY": {
      "prefix": "GET_PED_HEAD_OVERLAY()",
      "body": ["GET_PED_HEAD_OVERLAY(${1:Ped ped}, ${2:int overlayID})"],
      "description": "GET_PED_HEAD_OVERLAY()"
    },
    "GET_PED_HEAD_OVERLAY_NUM": {
      "prefix": "GET_PED_HEAD_OVERLAY_NUM()",
      "body": ["GET_PED_HEAD_OVERLAY_NUM(${1:int overlayID})"],
      "description": "GET_PED_HEAD_OVERLAY_NUM()"
    },
    "SET_PED_HEAD_OVERLAY_TINT": {
      "prefix": "SET_PED_HEAD_OVERLAY_TINT()",
      "body": [
        "SET_PED_HEAD_OVERLAY_TINT(${1:Ped ped}, ${2:int overlayID}, ${3:int colorType}, ${4:int colorID}, ${5:int secondColorID})"
      ],
      "description": "SET_PED_HEAD_OVERLAY_TINT()"
    },
    "SET_PED_HAIR_TINT": {
      "prefix": "SET_PED_HAIR_TINT()",
      "body": [
        "SET_PED_HAIR_TINT(${1:Ped ped}, ${2:int colorID}, ${3:int highlightColorID})"
      ],
      "description": "SET_PED_HAIR_TINT()"
    },
    "GET_NUM_PED_HAIR_TINTS": {
      "prefix": "GET_NUM_PED_HAIR_TINTS()",
      "body": ["GET_NUM_PED_HAIR_TINTS()"],
      "description": "GET_NUM_PED_HAIR_TINTS()"
    },
    "GET_NUM_PED_MAKEUP_TINTS": {
      "prefix": "GET_NUM_PED_MAKEUP_TINTS()",
      "body": ["GET_NUM_PED_MAKEUP_TINTS()"],
      "description": "GET_NUM_PED_MAKEUP_TINTS()"
    },
    "GET_PED_HAIR_TINT_COLOR": {
      "prefix": "GET_PED_HAIR_TINT_COLOR()",
      "body": [
        "GET_PED_HAIR_TINT_COLOR(${1:int hairColorIndex}, ${2:int* outR}, ${3:int* outG}, ${4:int* outB})"
      ],
      "description": "GET_PED_HAIR_TINT_COLOR()"
    },
    "GET_PED_MAKEUP_TINT_COLOR": {
      "prefix": "GET_PED_MAKEUP_TINT_COLOR()",
      "body": [
        "GET_PED_MAKEUP_TINT_COLOR(${1:int makeupColorIndex}, ${2:int* outR}, ${3:int* outG}, ${4:int* outB})"
      ],
      "description": "GET_PED_MAKEUP_TINT_COLOR()"
    },
    "IS_PED_HAIR_TINT_FOR_CREATOR": {
      "prefix": "IS_PED_HAIR_TINT_FOR_CREATOR()",
      "body": ["IS_PED_HAIR_TINT_FOR_CREATOR(${1:int colorId})"],
      "description": "IS_PED_HAIR_TINT_FOR_CREATOR()"
    },
    "GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR": {
      "prefix": "GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR()",
      "body": ["GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR(${1:int colorId})"],
      "description": "GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR()"
    },
    "IS_PED_LIPSTICK_TINT_FOR_CREATOR": {
      "prefix": "IS_PED_LIPSTICK_TINT_FOR_CREATOR()",
      "body": ["IS_PED_LIPSTICK_TINT_FOR_CREATOR(${1:int colorId})"],
      "description": "IS_PED_LIPSTICK_TINT_FOR_CREATOR()"
    },
    "IS_PED_BLUSH_TINT_FOR_CREATOR": {
      "prefix": "IS_PED_BLUSH_TINT_FOR_CREATOR()",
      "body": ["IS_PED_BLUSH_TINT_FOR_CREATOR(${1:int colorId})"],
      "description": "IS_PED_BLUSH_TINT_FOR_CREATOR()"
    },
    "IS_PED_HAIR_TINT_FOR_BARBER": {
      "prefix": "IS_PED_HAIR_TINT_FOR_BARBER()",
      "body": ["IS_PED_HAIR_TINT_FOR_BARBER(${1:int colorID})"],
      "description": "IS_PED_HAIR_TINT_FOR_BARBER()"
    },
    "GET_DEFAULT_SECONDARY_TINT_FOR_BARBER": {
      "prefix": "GET_DEFAULT_SECONDARY_TINT_FOR_BARBER()",
      "body": ["GET_DEFAULT_SECONDARY_TINT_FOR_BARBER(${1:int colorID})"],
      "description": "GET_DEFAULT_SECONDARY_TINT_FOR_BARBER()"
    },
    "IS_PED_LIPSTICK_TINT_FOR_BARBER": {
      "prefix": "IS_PED_LIPSTICK_TINT_FOR_BARBER()",
      "body": ["IS_PED_LIPSTICK_TINT_FOR_BARBER(${1:int colorID})"],
      "description": "IS_PED_LIPSTICK_TINT_FOR_BARBER()"
    },
    "IS_PED_BLUSH_TINT_FOR_BARBER": {
      "prefix": "IS_PED_BLUSH_TINT_FOR_BARBER()",
      "body": ["IS_PED_BLUSH_TINT_FOR_BARBER(${1:int colorID})"],
      "description": "IS_PED_BLUSH_TINT_FOR_BARBER()"
    },
    "IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER": {
      "prefix": "IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER()",
      "body": ["IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER(${1:int colorId})"],
      "description": "IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER()"
    },
    "GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE": {
      "prefix": "GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE()",
      "body": [
        "GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE(${1:Hash modelHash}, ${2:int drawableId}, ${3:int textureId})"
      ],
      "description": "GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE()"
    },
    "SET_PED_MICRO_MORPH": {
      "prefix": "SET_PED_MICRO_MORPH()",
      "body": [
        "SET_PED_MICRO_MORPH(${1:Ped ped}, ${2:int index}, ${3:float scale})"
      ],
      "description": "SET_PED_MICRO_MORPH()"
    },
    "HAS_PED_HEAD_BLEND_FINISHED": {
      "prefix": "HAS_PED_HEAD_BLEND_FINISHED()",
      "body": ["HAS_PED_HEAD_BLEND_FINISHED(${1:Ped ped})"],
      "description": "HAS_PED_HEAD_BLEND_FINISHED()"
    },
    "FINALIZE_HEAD_BLEND": {
      "prefix": "FINALIZE_HEAD_BLEND()",
      "body": ["FINALIZE_HEAD_BLEND(${1:Ped ped})"],
      "description": "FINALIZE_HEAD_BLEND()"
    },
    "SET_HEAD_BLEND_PALETTE_COLOR": {
      "prefix": "SET_HEAD_BLEND_PALETTE_COLOR()",
      "body": [
        "SET_HEAD_BLEND_PALETTE_COLOR(${1:Ped ped}, ${2:int r}, ${3:int g}, ${4:int b}, ${5:int id})"
      ],
      "description": "SET_HEAD_BLEND_PALETTE_COLOR()"
    },
    "DISABLE_HEAD_BLEND_PALETTE_COLOR": {
      "prefix": "DISABLE_HEAD_BLEND_PALETTE_COLOR()",
      "body": ["DISABLE_HEAD_BLEND_PALETTE_COLOR(${1:Ped ped})"],
      "description": "DISABLE_HEAD_BLEND_PALETTE_COLOR()"
    },
    "GET_PED_HEAD_BLEND_FIRST_INDEX": {
      "prefix": "GET_PED_HEAD_BLEND_FIRST_INDEX()",
      "body": ["GET_PED_HEAD_BLEND_FIRST_INDEX(${1:int type})"],
      "description": "GET_PED_HEAD_BLEND_FIRST_INDEX()"
    },
    "GET_PED_HEAD_BLEND_NUM_HEADS": {
      "prefix": "GET_PED_HEAD_BLEND_NUM_HEADS()",
      "body": ["GET_PED_HEAD_BLEND_NUM_HEADS(${1:int type})"],
      "description": "GET_PED_HEAD_BLEND_NUM_HEADS()"
    },
    "SET_PED_PRELOAD_VARIATION_DATA": {
      "prefix": "SET_PED_PRELOAD_VARIATION_DATA()",
      "body": [
        "SET_PED_PRELOAD_VARIATION_DATA(${1:Ped ped}, ${2:int slot}, ${3:int drawableId}, ${4:int textureId})"
      ],
      "description": "SET_PED_PRELOAD_VARIATION_DATA()"
    },
    "HAS_PED_PRELOAD_VARIATION_DATA_FINISHED": {
      "prefix": "HAS_PED_PRELOAD_VARIATION_DATA_FINISHED()",
      "body": ["HAS_PED_PRELOAD_VARIATION_DATA_FINISHED(${1:Ped ped})"],
      "description": "HAS_PED_PRELOAD_VARIATION_DATA_FINISHED()"
    },
    "RELEASE_PED_PRELOAD_VARIATION_DATA": {
      "prefix": "RELEASE_PED_PRELOAD_VARIATION_DATA()",
      "body": ["RELEASE_PED_PRELOAD_VARIATION_DATA(${1:Ped ped})"],
      "description": "RELEASE_PED_PRELOAD_VARIATION_DATA()"
    },
    "SET_PED_PRELOAD_PROP_DATA": {
      "prefix": "SET_PED_PRELOAD_PROP_DATA()",
      "body": [
        "SET_PED_PRELOAD_PROP_DATA(${1:Ped ped}, ${2:int componentId}, ${3:int drawableId}, ${4:int TextureId})"
      ],
      "description": "SET_PED_PRELOAD_PROP_DATA()"
    },
    "HAS_PED_PRELOAD_PROP_DATA_FINISHED": {
      "prefix": "HAS_PED_PRELOAD_PROP_DATA_FINISHED()",
      "body": ["HAS_PED_PRELOAD_PROP_DATA_FINISHED(${1:Ped ped})"],
      "description": "HAS_PED_PRELOAD_PROP_DATA_FINISHED()"
    },
    "RELEASE_PED_PRELOAD_PROP_DATA": {
      "prefix": "RELEASE_PED_PRELOAD_PROP_DATA()",
      "body": ["RELEASE_PED_PRELOAD_PROP_DATA(${1:Ped ped})"],
      "description": "RELEASE_PED_PRELOAD_PROP_DATA()"
    },
    "GET_PED_PROP_INDEX": {
      "prefix": "GET_PED_PROP_INDEX()",
      "body": [
        "GET_PED_PROP_INDEX(${1:Ped ped}, ${2:int componentId}, ${3:Any p2})"
      ],
      "description": "GET_PED_PROP_INDEX()"
    },
    "SET_PED_PROP_INDEX": {
      "prefix": "SET_PED_PROP_INDEX()",
      "body": [
        "SET_PED_PROP_INDEX(${1:Ped ped}, ${2:int componentId}, ${3:int drawableId}, ${4:int TextureId}, ${5:BOOL attach}, ${6:Any p5})"
      ],
      "description": "SET_PED_PROP_INDEX()"
    },
    "KNOCK_OFF_PED_PROP": {
      "prefix": "KNOCK_OFF_PED_PROP()",
      "body": [
        "KNOCK_OFF_PED_PROP(${1:Ped ped}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:BOOL p4})"
      ],
      "description": "KNOCK_OFF_PED_PROP()"
    },
    "CLEAR_PED_PROP": {
      "prefix": "CLEAR_PED_PROP()",
      "body": ["CLEAR_PED_PROP(${1:Ped ped}, ${2:int propId}, ${3:Any p2})"],
      "description": "CLEAR_PED_PROP()"
    },
    "CLEAR_ALL_PED_PROPS": {
      "prefix": "CLEAR_ALL_PED_PROPS()",
      "body": ["CLEAR_ALL_PED_PROPS(${1:Ped ped}, ${2:Any p1})"],
      "description": "CLEAR_ALL_PED_PROPS()"
    },
    "DROP_AMBIENT_PROP": {
      "prefix": "DROP_AMBIENT_PROP()",
      "body": ["DROP_AMBIENT_PROP(${1:Ped ped})"],
      "description": "DROP_AMBIENT_PROP()"
    },
    "GET_PED_PROP_TEXTURE_INDEX": {
      "prefix": "GET_PED_PROP_TEXTURE_INDEX()",
      "body": ["GET_PED_PROP_TEXTURE_INDEX(${1:Ped ped}, ${2:int componentId})"],
      "description": "GET_PED_PROP_TEXTURE_INDEX()"
    },
    "CLEAR_PED_PARACHUTE_PACK_VARIATION": {
      "prefix": "CLEAR_PED_PARACHUTE_PACK_VARIATION()",
      "body": ["CLEAR_PED_PARACHUTE_PACK_VARIATION(${1:Ped ped})"],
      "description": "CLEAR_PED_PARACHUTE_PACK_VARIATION()"
    },
    "SET_PED_SCUBA_GEAR_VARIATION": {
      "prefix": "SET_PED_SCUBA_GEAR_VARIATION()",
      "body": ["SET_PED_SCUBA_GEAR_VARIATION(${1:Ped ped})"],
      "description": "SET_PED_SCUBA_GEAR_VARIATION()"
    },
    "CLEAR_PED_SCUBA_GEAR_VARIATION": {
      "prefix": "CLEAR_PED_SCUBA_GEAR_VARIATION()",
      "body": ["CLEAR_PED_SCUBA_GEAR_VARIATION(${1:Ped ped})"],
      "description": "CLEAR_PED_SCUBA_GEAR_VARIATION()"
    },
    "IS_USING_PED_SCUBA_GEAR_VARIATION": {
      "prefix": "IS_USING_PED_SCUBA_GEAR_VARIATION()",
      "body": ["IS_USING_PED_SCUBA_GEAR_VARIATION(${1:Any p0})"],
      "description": "IS_USING_PED_SCUBA_GEAR_VARIATION()"
    },
    "SET_BLOCKING_OF_NON_TEMPORARY_EVENTS": {
      "prefix": "SET_BLOCKING_OF_NON_TEMPORARY_EVENTS()",
      "body": [
        "SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "SET_BLOCKING_OF_NON_TEMPORARY_EVENTS()"
    },
    "SET_PED_BOUNDS_ORIENTATION": {
      "prefix": "SET_PED_BOUNDS_ORIENTATION()",
      "body": [
        "SET_PED_BOUNDS_ORIENTATION(${1:Ped ped}, ${2:float p1}, ${3:float p2}, ${4:float x}, ${5:float y}, ${6:float z})"
      ],
      "description": "SET_PED_BOUNDS_ORIENTATION()"
    },
    "REGISTER_TARGET": {
      "prefix": "REGISTER_TARGET()",
      "body": ["REGISTER_TARGET(${1:Ped ped}, ${2:Ped target})"],
      "description": "REGISTER_TARGET()"
    },
    "REGISTER_HATED_TARGETS_AROUND_PED": {
      "prefix": "REGISTER_HATED_TARGETS_AROUND_PED()",
      "body": [
        "REGISTER_HATED_TARGETS_AROUND_PED(${1:Ped ped}, ${2:float radius})"
      ],
      "description": "REGISTER_HATED_TARGETS_AROUND_PED()"
    },
    "GET_RANDOM_PED_AT_COORD": {
      "prefix": "GET_RANDOM_PED_AT_COORD()",
      "body": [
        "GET_RANDOM_PED_AT_COORD(${1:float x}, ${2:float y}, ${3:float z}, ${4:float xRadius}, ${5:float yRadius}, ${6:float zRadius}, ${7:int pedType})"
      ],
      "description": "GET_RANDOM_PED_AT_COORD()"
    },
    "GET_CLOSEST_PED": {
      "prefix": "GET_CLOSEST_PED()",
      "body": [
        "GET_CLOSEST_PED(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:BOOL p4}, ${6:BOOL p5}, ${7:Ped* outPed}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:int pedType})"
      ],
      "description": "GET_CLOSEST_PED()"
    },
    "SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND": {
      "prefix": "SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND()",
      "body": [
        "SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND(${1:BOOL value})"
      ],
      "description": "SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND()"
    },
    "GET_CAN_PED_BE_GRABBED_BY_SCRIPT": {
      "prefix": "GET_CAN_PED_BE_GRABBED_BY_SCRIPT()",
      "body": [
        "GET_CAN_PED_BE_GRABBED_BY_SCRIPT(${1:Ped ped}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:BOOL p4}, ${6:BOOL p5}, ${7:BOOL p6}, ${8:BOOL p7}, ${9:Any p8})"
      ],
      "description": "GET_CAN_PED_BE_GRABBED_BY_SCRIPT()"
    },
    "SET_DRIVER_RACING_MODIFIER": {
      "prefix": "SET_DRIVER_RACING_MODIFIER()",
      "body": [
        "SET_DRIVER_RACING_MODIFIER(${1:Ped driver}, ${2:float modifier})"
      ],
      "description": "SET_DRIVER_RACING_MODIFIER()"
    },
    "SET_DRIVER_ABILITY": {
      "prefix": "SET_DRIVER_ABILITY()",
      "body": ["SET_DRIVER_ABILITY(${1:Ped driver}, ${2:float ability})"],
      "description": "SET_DRIVER_ABILITY()"
    },
    "SET_DRIVER_AGGRESSIVENESS": {
      "prefix": "SET_DRIVER_AGGRESSIVENESS()",
      "body": [
        "SET_DRIVER_AGGRESSIVENESS(${1:Ped driver}, ${2:float aggressiveness})"
      ],
      "description": "SET_DRIVER_AGGRESSIVENESS()"
    },
    "CAN_PED_RAGDOLL": {
      "prefix": "CAN_PED_RAGDOLL()",
      "body": ["CAN_PED_RAGDOLL(${1:Ped ped})"],
      "description": "CAN_PED_RAGDOLL()"
    },
    "SET_PED_TO_RAGDOLL": {
      "prefix": "SET_PED_TO_RAGDOLL()",
      "body": [
        "SET_PED_TO_RAGDOLL(${1:Ped ped}, ${2:int time1}, ${3:int time2}, ${4:int ragdollType}, ${5:BOOL p4}, ${6:BOOL p5}, ${7:BOOL p6})"
      ],
      "description": "SET_PED_TO_RAGDOLL()"
    },
    "SET_PED_TO_RAGDOLL_WITH_FALL": {
      "prefix": "SET_PED_TO_RAGDOLL_WITH_FALL()",
      "body": [
        "SET_PED_TO_RAGDOLL_WITH_FALL(${1:Ped ped}, ${2:int time}, ${3:int p2}, ${4:int ragdollType}, ${5:float x}, ${6:float y}, ${7:float z}, ${8:float velocity}, ${9:float p8}, ${10:float p9}, ${11:float p10}, ${12:float p11}, ${13:float p12}, ${14:float p13})"
      ],
      "description": "SET_PED_TO_RAGDOLL_WITH_FALL()"
    },
    "SET_PED_RAGDOLL_ON_COLLISION": {
      "prefix": "SET_PED_RAGDOLL_ON_COLLISION()",
      "body": ["SET_PED_RAGDOLL_ON_COLLISION(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_RAGDOLL_ON_COLLISION()"
    },
    "IS_PED_RAGDOLL": {
      "prefix": "IS_PED_RAGDOLL()",
      "body": ["IS_PED_RAGDOLL(${1:Ped ped})"],
      "description": "IS_PED_RAGDOLL()"
    },
    "IS_PED_RUNNING_RAGDOLL_TASK": {
      "prefix": "IS_PED_RUNNING_RAGDOLL_TASK()",
      "body": ["IS_PED_RUNNING_RAGDOLL_TASK(${1:Ped ped})"],
      "description": "IS_PED_RUNNING_RAGDOLL_TASK()"
    },
    "SET_PED_RAGDOLL_FORCE_FALL": {
      "prefix": "SET_PED_RAGDOLL_FORCE_FALL()",
      "body": ["SET_PED_RAGDOLL_FORCE_FALL(${1:Ped ped})"],
      "description": "SET_PED_RAGDOLL_FORCE_FALL()"
    },
    "RESET_PED_RAGDOLL_TIMER": {
      "prefix": "RESET_PED_RAGDOLL_TIMER()",
      "body": ["RESET_PED_RAGDOLL_TIMER(${1:Ped ped})"],
      "description": "RESET_PED_RAGDOLL_TIMER()"
    },
    "SET_PED_CAN_RAGDOLL": {
      "prefix": "SET_PED_CAN_RAGDOLL()",
      "body": ["SET_PED_CAN_RAGDOLL(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_CAN_RAGDOLL()"
    },
    "IS_PED_RUNNING_MELEE_TASK": {
      "prefix": "IS_PED_RUNNING_MELEE_TASK()",
      "body": ["IS_PED_RUNNING_MELEE_TASK(${1:Ped ped})"],
      "description": "IS_PED_RUNNING_MELEE_TASK()"
    },
    "IS_PED_RUNNING_MOBILE_PHONE_TASK": {
      "prefix": "IS_PED_RUNNING_MOBILE_PHONE_TASK()",
      "body": ["IS_PED_RUNNING_MOBILE_PHONE_TASK(${1:Ped ped})"],
      "description": "IS_PED_RUNNING_MOBILE_PHONE_TASK()"
    },
    "IS_MOBILE_PHONE_TO_PED_EAR": {
      "prefix": "IS_MOBILE_PHONE_TO_PED_EAR()",
      "body": ["IS_MOBILE_PHONE_TO_PED_EAR(${1:Ped ped})"],
      "description": "IS_MOBILE_PHONE_TO_PED_EAR()"
    },
    "SET_RAGDOLL_BLOCKING_FLAGS": {
      "prefix": "SET_RAGDOLL_BLOCKING_FLAGS()",
      "body": ["SET_RAGDOLL_BLOCKING_FLAGS(${1:Ped ped}, ${2:int blockingFlag})"],
      "description": "SET_RAGDOLL_BLOCKING_FLAGS()"
    },
    "CLEAR_RAGDOLL_BLOCKING_FLAGS": {
      "prefix": "CLEAR_RAGDOLL_BLOCKING_FLAGS()",
      "body": [
        "CLEAR_RAGDOLL_BLOCKING_FLAGS(${1:Ped ped}, ${2:int blockingFlag})"
      ],
      "description": "CLEAR_RAGDOLL_BLOCKING_FLAGS()"
    },
    "SET_PED_ANGLED_DEFENSIVE_AREA": {
      "prefix": "SET_PED_ANGLED_DEFENSIVE_AREA()",
      "body": [
        "SET_PED_ANGLED_DEFENSIVE_AREA(${1:Ped ped}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:BOOL p8}, ${10:BOOL p9})"
      ],
      "description": "SET_PED_ANGLED_DEFENSIVE_AREA()"
    },
    "SET_PED_SPHERE_DEFENSIVE_AREA": {
      "prefix": "SET_PED_SPHERE_DEFENSIVE_AREA()",
      "body": [
        "SET_PED_SPHERE_DEFENSIVE_AREA(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius}, ${6:BOOL p5}, ${7:BOOL p6})"
      ],
      "description": "SET_PED_SPHERE_DEFENSIVE_AREA()"
    },
    "SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED": {
      "prefix": "SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED()",
      "body": [
        "SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED(${1:Ped ped}, ${2:Ped target}, ${3:float xOffset}, ${4:float yOffset}, ${5:float zOffset}, ${6:float radius}, ${7:BOOL p6})"
      ],
      "description": "SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED()"
    },
    "SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE": {
      "prefix": "SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE()",
      "body": [
        "SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE(${1:Ped ped}, ${2:Vehicle target}, ${3:float xOffset}, ${4:float yOffset}, ${5:float zOffset}, ${6:float radius}, ${7:BOOL p6})"
      ],
      "description": "SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE()"
    },
    "SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED": {
      "prefix": "SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED()",
      "body": [
        "SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED(${1:Ped ped}, ${2:Ped attachPed}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:BOOL p9}, ${11:BOOL p10})"
      ],
      "description": "SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED()"
    },
    "SET_PED_DEFENSIVE_AREA_DIRECTION": {
      "prefix": "SET_PED_DEFENSIVE_AREA_DIRECTION()",
      "body": [
        "SET_PED_DEFENSIVE_AREA_DIRECTION(${1:Ped ped}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:BOOL p4})"
      ],
      "description": "SET_PED_DEFENSIVE_AREA_DIRECTION()"
    },
    "REMOVE_PED_DEFENSIVE_AREA": {
      "prefix": "REMOVE_PED_DEFENSIVE_AREA()",
      "body": ["REMOVE_PED_DEFENSIVE_AREA(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "REMOVE_PED_DEFENSIVE_AREA()"
    },
    "GET_PED_DEFENSIVE_AREA_POSITION": {
      "prefix": "GET_PED_DEFENSIVE_AREA_POSITION()",
      "body": ["GET_PED_DEFENSIVE_AREA_POSITION(${1:Ped ped}, ${2:BOOL p1})"],
      "description": "GET_PED_DEFENSIVE_AREA_POSITION()"
    },
    "IS_PED_DEFENSIVE_AREA_ACTIVE": {
      "prefix": "IS_PED_DEFENSIVE_AREA_ACTIVE()",
      "body": ["IS_PED_DEFENSIVE_AREA_ACTIVE(${1:Ped ped}, ${2:BOOL p1})"],
      "description": "IS_PED_DEFENSIVE_AREA_ACTIVE()"
    },
    "SET_PED_PREFERRED_COVER_SET": {
      "prefix": "SET_PED_PREFERRED_COVER_SET()",
      "body": ["SET_PED_PREFERRED_COVER_SET(${1:Ped ped}, ${2:Any itemSet})"],
      "description": "SET_PED_PREFERRED_COVER_SET()"
    },
    "REMOVE_PED_PREFERRED_COVER_SET": {
      "prefix": "REMOVE_PED_PREFERRED_COVER_SET()",
      "body": ["REMOVE_PED_PREFERRED_COVER_SET(${1:Ped ped})"],
      "description": "REMOVE_PED_PREFERRED_COVER_SET()"
    },
    "REVIVE_INJURED_PED": {
      "prefix": "REVIVE_INJURED_PED()",
      "body": ["REVIVE_INJURED_PED(${1:Ped ped})"],
      "description": "REVIVE_INJURED_PED()"
    },
    "RESURRECT_PED": {
      "prefix": "RESURRECT_PED()",
      "body": ["RESURRECT_PED(${1:Ped ped})"],
      "description": "RESURRECT_PED()"
    },
    "SET_PED_NAME_DEBUG": {
      "prefix": "SET_PED_NAME_DEBUG()",
      "body": ["SET_PED_NAME_DEBUG(${1:Ped ped}, ${2:const char* name})"],
      "description": "SET_PED_NAME_DEBUG()"
    },
    "GET_PED_EXTRACTED_DISPLACEMENT": {
      "prefix": "GET_PED_EXTRACTED_DISPLACEMENT()",
      "body": [
        "GET_PED_EXTRACTED_DISPLACEMENT(${1:Ped ped}, ${2:BOOL worldSpace})"
      ],
      "description": "GET_PED_EXTRACTED_DISPLACEMENT()"
    },
    "SET_PED_DIES_WHEN_INJURED": {
      "prefix": "SET_PED_DIES_WHEN_INJURED()",
      "body": ["SET_PED_DIES_WHEN_INJURED(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_DIES_WHEN_INJURED()"
    },
    "SET_PED_ENABLE_WEAPON_BLOCKING": {
      "prefix": "SET_PED_ENABLE_WEAPON_BLOCKING()",
      "body": ["SET_PED_ENABLE_WEAPON_BLOCKING(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_ENABLE_WEAPON_BLOCKING()"
    },
    "SPECIAL_FUNCTION_DO_NOT_USE": {
      "prefix": "SPECIAL_FUNCTION_DO_NOT_USE()",
      "body": ["SPECIAL_FUNCTION_DO_NOT_USE(${1:Ped ped}, ${2:BOOL p1})"],
      "description": "SPECIAL_FUNCTION_DO_NOT_USE()"
    },
    "RESET_PED_VISIBLE_DAMAGE": {
      "prefix": "RESET_PED_VISIBLE_DAMAGE()",
      "body": ["RESET_PED_VISIBLE_DAMAGE(${1:Ped ped})"],
      "description": "RESET_PED_VISIBLE_DAMAGE()"
    },
    "APPLY_PED_BLOOD_DAMAGE_BY_ZONE": {
      "prefix": "APPLY_PED_BLOOD_DAMAGE_BY_ZONE()",
      "body": [
        "APPLY_PED_BLOOD_DAMAGE_BY_ZONE(${1:Ped ped}, ${2:Any p1}, ${3:float p2}, ${4:float p3}, ${5:Any p4})"
      ],
      "description": "APPLY_PED_BLOOD_DAMAGE_BY_ZONE()"
    },
    "APPLY_PED_BLOOD": {
      "prefix": "APPLY_PED_BLOOD()",
      "body": [
        "APPLY_PED_BLOOD(${1:Ped ped}, ${2:int boneIndex}, ${3:float xRot}, ${4:float yRot}, ${5:float zRot}, ${6:const char* woundType})"
      ],
      "description": "APPLY_PED_BLOOD()"
    },
    "APPLY_PED_BLOOD_BY_ZONE": {
      "prefix": "APPLY_PED_BLOOD_BY_ZONE()",
      "body": [
        "APPLY_PED_BLOOD_BY_ZONE(${1:Ped ped}, ${2:int p1}, ${3:float p2}, ${4:float p3}, ${5:const char* p4})"
      ],
      "description": "APPLY_PED_BLOOD_BY_ZONE()"
    },
    "APPLY_PED_BLOOD_SPECIFIC": {
      "prefix": "APPLY_PED_BLOOD_SPECIFIC()",
      "body": [
        "APPLY_PED_BLOOD_SPECIFIC(${1:Ped ped}, ${2:int p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:int p6}, ${8:float p7}, ${9:const char* p8})"
      ],
      "description": "APPLY_PED_BLOOD_SPECIFIC()"
    },
    "APPLY_PED_DAMAGE_DECAL": {
      "prefix": "APPLY_PED_DAMAGE_DECAL()",
      "body": [
        "APPLY_PED_DAMAGE_DECAL(${1:Ped ped}, ${2:int damageZone}, ${3:float xOffset}, ${4:float yOffset}, ${5:float heading}, ${6:float scale}, ${7:float alpha}, ${8:int variation}, ${9:BOOL fadeIn}, ${10:const char* decalName})"
      ],
      "description": "APPLY_PED_DAMAGE_DECAL()"
    },
    "APPLY_PED_DAMAGE_PACK": {
      "prefix": "APPLY_PED_DAMAGE_PACK()",
      "body": [
        "APPLY_PED_DAMAGE_PACK(${1:Ped ped}, ${2:const char* damagePack}, ${3:float damage}, ${4:float mult})"
      ],
      "description": "APPLY_PED_DAMAGE_PACK()"
    },
    "CLEAR_PED_BLOOD_DAMAGE": {
      "prefix": "CLEAR_PED_BLOOD_DAMAGE()",
      "body": ["CLEAR_PED_BLOOD_DAMAGE(${1:Ped ped})"],
      "description": "CLEAR_PED_BLOOD_DAMAGE()"
    },
    "CLEAR_PED_BLOOD_DAMAGE_BY_ZONE": {
      "prefix": "CLEAR_PED_BLOOD_DAMAGE_BY_ZONE()",
      "body": ["CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(${1:Ped ped}, ${2:int p1})"],
      "description": "CLEAR_PED_BLOOD_DAMAGE_BY_ZONE()"
    },
    "HIDE_PED_BLOOD_DAMAGE_BY_ZONE": {
      "prefix": "HIDE_PED_BLOOD_DAMAGE_BY_ZONE()",
      "body": [
        "HIDE_PED_BLOOD_DAMAGE_BY_ZONE(${1:Ped ped}, ${2:Any p1}, ${3:BOOL p2})"
      ],
      "description": "HIDE_PED_BLOOD_DAMAGE_BY_ZONE()"
    },
    "CLEAR_PED_DAMAGE_DECAL_BY_ZONE": {
      "prefix": "CLEAR_PED_DAMAGE_DECAL_BY_ZONE()",
      "body": [
        "CLEAR_PED_DAMAGE_DECAL_BY_ZONE(${1:Ped ped}, ${2:int p1}, ${3:const char* p2})"
      ],
      "description": "CLEAR_PED_DAMAGE_DECAL_BY_ZONE()"
    },
    "GET_PED_DECORATIONS_STATE": {
      "prefix": "GET_PED_DECORATIONS_STATE()",
      "body": ["GET_PED_DECORATIONS_STATE(${1:Ped ped})"],
      "description": "GET_PED_DECORATIONS_STATE()"
    },
    "MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER": {
      "prefix": "MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER()",
      "body": [
        "MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER(${1:Ped ped}, ${2:BOOL p1})"
      ],
      "description": "MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER()"
    },
    "CLEAR_PED_WETNESS": {
      "prefix": "CLEAR_PED_WETNESS()",
      "body": ["CLEAR_PED_WETNESS(${1:Ped ped})"],
      "description": "CLEAR_PED_WETNESS()"
    },
    "SET_PED_WETNESS_HEIGHT": {
      "prefix": "SET_PED_WETNESS_HEIGHT()",
      "body": ["SET_PED_WETNESS_HEIGHT(${1:Ped ped}, ${2:float height})"],
      "description": "SET_PED_WETNESS_HEIGHT()"
    },
    "SET_PED_WETNESS_ENABLED_THIS_FRAME": {
      "prefix": "SET_PED_WETNESS_ENABLED_THIS_FRAME()",
      "body": ["SET_PED_WETNESS_ENABLED_THIS_FRAME(${1:Ped ped})"],
      "description": "SET_PED_WETNESS_ENABLED_THIS_FRAME()"
    },
    "SET_PED_WETNESS": {
      "prefix": "SET_PED_WETNESS()",
      "body": ["SET_PED_WETNESS(${1:Ped ped}, ${2:float wetLevel})"],
      "description": "SET_PED_WETNESS()"
    },
    "CLEAR_PED_ENV_DIRT": {
      "prefix": "CLEAR_PED_ENV_DIRT()",
      "body": ["CLEAR_PED_ENV_DIRT(${1:Ped ped})"],
      "description": "CLEAR_PED_ENV_DIRT()"
    },
    "SET_PED_SWEAT": {
      "prefix": "SET_PED_SWEAT()",
      "body": ["SET_PED_SWEAT(${1:Ped ped}, ${2:float sweat})"],
      "description": "SET_PED_SWEAT()"
    },
    "ADD_PED_DECORATION_FROM_HASHES": {
      "prefix": "ADD_PED_DECORATION_FROM_HASHES()",
      "body": [
        "ADD_PED_DECORATION_FROM_HASHES(${1:Ped ped}, ${2:Hash collection}, ${3:Hash overlay})"
      ],
      "description": "ADD_PED_DECORATION_FROM_HASHES()"
    },
    "ADD_PED_DECORATION_FROM_HASHES_IN_CORONA": {
      "prefix": "ADD_PED_DECORATION_FROM_HASHES_IN_CORONA()",
      "body": [
        "ADD_PED_DECORATION_FROM_HASHES_IN_CORONA(${1:Ped ped}, ${2:Hash collection}, ${3:Hash overlay})"
      ],
      "description": "ADD_PED_DECORATION_FROM_HASHES_IN_CORONA()"
    },
    "GET_PED_DECORATION_ZONE_FROM_HASHES": {
      "prefix": "GET_PED_DECORATION_ZONE_FROM_HASHES()",
      "body": [
        "GET_PED_DECORATION_ZONE_FROM_HASHES(${1:Hash collection}, ${2:Hash overlay})"
      ],
      "description": "GET_PED_DECORATION_ZONE_FROM_HASHES()"
    },
    "CLEAR_PED_DECORATIONS": {
      "prefix": "CLEAR_PED_DECORATIONS()",
      "body": ["CLEAR_PED_DECORATIONS(${1:Ped ped})"],
      "description": "CLEAR_PED_DECORATIONS()"
    },
    "CLEAR_PED_DECORATIONS_LEAVE_SCARS": {
      "prefix": "CLEAR_PED_DECORATIONS_LEAVE_SCARS()",
      "body": ["CLEAR_PED_DECORATIONS_LEAVE_SCARS(${1:Ped ped})"],
      "description": "CLEAR_PED_DECORATIONS_LEAVE_SCARS()"
    },
    "WAS_PED_SKELETON_UPDATED": {
      "prefix": "WAS_PED_SKELETON_UPDATED()",
      "body": ["WAS_PED_SKELETON_UPDATED(${1:Ped ped})"],
      "description": "WAS_PED_SKELETON_UPDATED()"
    },
    "GET_PED_BONE_COORDS": {
      "prefix": "GET_PED_BONE_COORDS()",
      "body": [
        "GET_PED_BONE_COORDS(${1:Ped ped}, ${2:int boneId}, ${3:float offsetX}, ${4:float offsetY}, ${5:float offsetZ})"
      ],
      "description": "GET_PED_BONE_COORDS()"
    },
    "CREATE_NM_MESSAGE": {
      "prefix": "CREATE_NM_MESSAGE()",
      "body": [
        "CREATE_NM_MESSAGE(${1:BOOL startImmediately}, ${2:int messageId})"
      ],
      "description": "CREATE_NM_MESSAGE()"
    },
    "GIVE_PED_NM_MESSAGE": {
      "prefix": "GIVE_PED_NM_MESSAGE()",
      "body": ["GIVE_PED_NM_MESSAGE(${1:Ped ped})"],
      "description": "GIVE_PED_NM_MESSAGE()"
    },
    "ADD_SCENARIO_BLOCKING_AREA": {
      "prefix": "ADD_SCENARIO_BLOCKING_AREA()",
      "body": [
        "ADD_SCENARIO_BLOCKING_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:BOOL p6}, ${8:BOOL p7}, ${9:BOOL p8}, ${10:BOOL p9}, ${11:Any p10})"
      ],
      "description": "ADD_SCENARIO_BLOCKING_AREA()"
    },
    "REMOVE_SCENARIO_BLOCKING_AREAS": {
      "prefix": "REMOVE_SCENARIO_BLOCKING_AREAS()",
      "body": ["REMOVE_SCENARIO_BLOCKING_AREAS()"],
      "description": "REMOVE_SCENARIO_BLOCKING_AREAS()"
    },
    "REMOVE_SCENARIO_BLOCKING_AREA": {
      "prefix": "REMOVE_SCENARIO_BLOCKING_AREA()",
      "body": ["REMOVE_SCENARIO_BLOCKING_AREA(${1:Any p0}, ${2:BOOL p1})"],
      "description": "REMOVE_SCENARIO_BLOCKING_AREA()"
    },
    "SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA": {
      "prefix": "SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA()",
      "body": [
        "SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA(${1:float x}, ${2:float y}, ${3:float z}, ${4:float range}, ${5:int p4})"
      ],
      "description": "SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA()"
    },
    "DOES_SCENARIO_BLOCKING_AREA_EXISTS": {
      "prefix": "DOES_SCENARIO_BLOCKING_AREA_EXISTS()",
      "body": [
        "DOES_SCENARIO_BLOCKING_AREA_EXISTS(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
      ],
      "description": "DOES_SCENARIO_BLOCKING_AREA_EXISTS()"
    },
    "IS_PED_USING_SCENARIO": {
      "prefix": "IS_PED_USING_SCENARIO()",
      "body": ["IS_PED_USING_SCENARIO(${1:Ped ped}, ${2:const char* scenario})"],
      "description": "IS_PED_USING_SCENARIO()"
    },
    "IS_PED_USING_ANY_SCENARIO": {
      "prefix": "IS_PED_USING_ANY_SCENARIO()",
      "body": ["IS_PED_USING_ANY_SCENARIO(${1:Ped ped})"],
      "description": "IS_PED_USING_ANY_SCENARIO()"
    },
    "SET_PED_PANIC_EXIT_SCENARIO": {
      "prefix": "SET_PED_PANIC_EXIT_SCENARIO()",
      "body": [
        "SET_PED_PANIC_EXIT_SCENARIO(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "SET_PED_PANIC_EXIT_SCENARIO()"
    },
    "TOGGLE_SCENARIO_PED_COWER_IN_PLACE": {
      "prefix": "TOGGLE_SCENARIO_PED_COWER_IN_PLACE()",
      "body": [
        "TOGGLE_SCENARIO_PED_COWER_IN_PLACE(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "TOGGLE_SCENARIO_PED_COWER_IN_PLACE()"
    },
    "TRIGGER_PED_SCENARIO_PANICEXITTOFLEE": {
      "prefix": "TRIGGER_PED_SCENARIO_PANICEXITTOFLEE()",
      "body": [
        "TRIGGER_PED_SCENARIO_PANICEXITTOFLEE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "TRIGGER_PED_SCENARIO_PANICEXITTOFLEE()"
    },
    "SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT": {
      "prefix": "SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT()",
      "body": [
        "SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT()"
    },
    "SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT": {
      "prefix": "SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT()",
      "body": ["SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT(${1:Ped ped})"],
      "description": "SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT()"
    },
    "SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT": {
      "prefix": "SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT()",
      "body": ["SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT(${1:Ped ped})"],
      "description": "SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT()"
    },
    "SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT": {
      "prefix": "SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT()",
      "body": [
        "SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT(${1:Ped ped}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT()"
    },
    "SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS": {
      "prefix": "SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS()",
      "body": [
        "SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS(${1:Ped ped}, ${2:BOOL p1})"
      ],
      "description": "SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS()"
    },
    "SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS": {
      "prefix": "SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS()",
      "body": [
        "SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS(${1:Any p0}, ${2:BOOL p1})"
      ],
      "description": "SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS()"
    },
    "SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME": {
      "prefix": "SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME()",
      "body": [
        "SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME(${1:Any p0}, ${2:BOOL p1})"
      ],
      "description": "SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME()"
    },
    "IS_PED_GESTURING": {
      "prefix": "IS_PED_GESTURING()",
      "body": ["IS_PED_GESTURING(${1:Any p0})"],
      "description": "IS_PED_GESTURING()"
    },
    "RESET_FACIAL_IDLE_ANIM": {
      "prefix": "RESET_FACIAL_IDLE_ANIM()",
      "body": ["RESET_FACIAL_IDLE_ANIM(${1:Ped ped})"],
      "description": "RESET_FACIAL_IDLE_ANIM()"
    },
    "PLAY_FACIAL_ANIM": {
      "prefix": "PLAY_FACIAL_ANIM()",
      "body": [
        "PLAY_FACIAL_ANIM(${1:Ped ped}, ${2:const char* animName}, ${3:const char* animDict})"
      ],
      "description": "PLAY_FACIAL_ANIM()"
    },
    "SET_FACIAL_CLIPSET": {
      "prefix": "SET_FACIAL_CLIPSET()",
      "body": ["SET_FACIAL_CLIPSET(${1:Ped ped}, ${2:const char* animDict})"],
      "description": "SET_FACIAL_CLIPSET()"
    },
    "SET_FACIAL_IDLE_ANIM_OVERRIDE": {
      "prefix": "SET_FACIAL_IDLE_ANIM_OVERRIDE()",
      "body": [
        "SET_FACIAL_IDLE_ANIM_OVERRIDE(${1:Ped ped}, ${2:const char* animName}, ${3:const char* animDict})"
      ],
      "description": "SET_FACIAL_IDLE_ANIM_OVERRIDE()"
    },
    "CLEAR_FACIAL_IDLE_ANIM_OVERRIDE": {
      "prefix": "CLEAR_FACIAL_IDLE_ANIM_OVERRIDE()",
      "body": ["CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(${1:Ped ped})"],
      "description": "CLEAR_FACIAL_IDLE_ANIM_OVERRIDE()"
    },
    "SET_PED_CAN_PLAY_GESTURE_ANIMS": {
      "prefix": "SET_PED_CAN_PLAY_GESTURE_ANIMS()",
      "body": ["SET_PED_CAN_PLAY_GESTURE_ANIMS(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_CAN_PLAY_GESTURE_ANIMS()"
    },
    "SET_PED_CAN_PLAY_VISEME_ANIMS": {
      "prefix": "SET_PED_CAN_PLAY_VISEME_ANIMS()",
      "body": [
        "SET_PED_CAN_PLAY_VISEME_ANIMS(${1:Ped ped}, ${2:BOOL toggle}, ${3:BOOL p2})"
      ],
      "description": "SET_PED_CAN_PLAY_VISEME_ANIMS()"
    },
    "SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS": {
      "prefix": "SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS()",
      "body": [
        "SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS(${1:Ped ped}, ${2:BOOL p1})"
      ],
      "description": "SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS()"
    },
    "SET_PED_CAN_PLAY_AMBIENT_ANIMS": {
      "prefix": "SET_PED_CAN_PLAY_AMBIENT_ANIMS()",
      "body": ["SET_PED_CAN_PLAY_AMBIENT_ANIMS(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_CAN_PLAY_AMBIENT_ANIMS()"
    },
    "SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS": {
      "prefix": "SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS()",
      "body": [
        "SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS()"
    },
    "TRIGGER_IDLE_ANIMATION_ON_PED": {
      "prefix": "TRIGGER_IDLE_ANIMATION_ON_PED()",
      "body": ["TRIGGER_IDLE_ANIMATION_ON_PED(${1:Ped ped})"],
      "description": "TRIGGER_IDLE_ANIMATION_ON_PED()"
    },
    "SET_PED_CAN_ARM_IK": {
      "prefix": "SET_PED_CAN_ARM_IK()",
      "body": ["SET_PED_CAN_ARM_IK(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_CAN_ARM_IK()"
    },
    "SET_PED_CAN_HEAD_IK": {
      "prefix": "SET_PED_CAN_HEAD_IK()",
      "body": ["SET_PED_CAN_HEAD_IK(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_CAN_HEAD_IK()"
    },
    "SET_PED_CAN_LEG_IK": {
      "prefix": "SET_PED_CAN_LEG_IK()",
      "body": ["SET_PED_CAN_LEG_IK(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_CAN_LEG_IK()"
    },
    "SET_PED_CAN_TORSO_IK": {
      "prefix": "SET_PED_CAN_TORSO_IK()",
      "body": ["SET_PED_CAN_TORSO_IK(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_CAN_TORSO_IK()"
    },
    "SET_PED_CAN_TORSO_REACT_IK": {
      "prefix": "SET_PED_CAN_TORSO_REACT_IK()",
      "body": ["SET_PED_CAN_TORSO_REACT_IK(${1:Ped ped}, ${2:BOOL p1})"],
      "description": "SET_PED_CAN_TORSO_REACT_IK()"
    },
    "SET_PED_CAN_TORSO_VEHICLE_IK": {
      "prefix": "SET_PED_CAN_TORSO_VEHICLE_IK()",
      "body": ["SET_PED_CAN_TORSO_VEHICLE_IK(${1:Ped ped}, ${2:BOOL p1})"],
      "description": "SET_PED_CAN_TORSO_VEHICLE_IK()"
    },
    "SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT": {
      "prefix": "SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT()",
      "body": [
        "SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT()"
    },
    "IS_PED_HEADTRACKING_PED": {
      "prefix": "IS_PED_HEADTRACKING_PED()",
      "body": ["IS_PED_HEADTRACKING_PED(${1:Ped ped1}, ${2:Ped ped2})"],
      "description": "IS_PED_HEADTRACKING_PED()"
    },
    "IS_PED_HEADTRACKING_ENTITY": {
      "prefix": "IS_PED_HEADTRACKING_ENTITY()",
      "body": ["IS_PED_HEADTRACKING_ENTITY(${1:Ped ped}, ${2:Entity entity})"],
      "description": "IS_PED_HEADTRACKING_ENTITY()"
    },
    "SET_PED_PRIMARY_LOOKAT": {
      "prefix": "SET_PED_PRIMARY_LOOKAT()",
      "body": ["SET_PED_PRIMARY_LOOKAT(${1:Ped ped}, ${2:Ped lookAt})"],
      "description": "SET_PED_PRIMARY_LOOKAT()"
    },
    "SET_PED_CLOTH_PIN_FRAMES": {
      "prefix": "SET_PED_CLOTH_PIN_FRAMES()",
      "body": ["SET_PED_CLOTH_PIN_FRAMES(${1:Any p0}, ${2:Any p1})"],
      "description": "SET_PED_CLOTH_PIN_FRAMES()"
    },
    "SET_PED_CLOTH_PACKAGE_INDEX": {
      "prefix": "SET_PED_CLOTH_PACKAGE_INDEX()",
      "body": ["SET_PED_CLOTH_PACKAGE_INDEX(${1:Any p0}, ${2:Any p1})"],
      "description": "SET_PED_CLOTH_PACKAGE_INDEX()"
    },
    "SET_PED_CLOTH_PRONE": {
      "prefix": "SET_PED_CLOTH_PRONE()",
      "body": ["SET_PED_CLOTH_PRONE(${1:Any p0}, ${2:BOOL p1})"],
      "description": "SET_PED_CLOTH_PRONE()"
    },
    "SET_PED_CONFIG_FLAG": {
      "prefix": "SET_PED_CONFIG_FLAG()",
      "body": [
        "SET_PED_CONFIG_FLAG(${1:Ped ped}, ${2:int flagId}, ${3:BOOL value})"
      ],
      "description": "SET_PED_CONFIG_FLAG()"
    },
    "SET_PED_RESET_FLAG": {
      "prefix": "SET_PED_RESET_FLAG()",
      "body": [
        "SET_PED_RESET_FLAG(${1:Ped ped}, ${2:int flagId}, ${3:BOOL doReset})"
      ],
      "description": "SET_PED_RESET_FLAG()"
    },
    "GET_PED_CONFIG_FLAG": {
      "prefix": "GET_PED_CONFIG_FLAG()",
      "body": [
        "GET_PED_CONFIG_FLAG(${1:Ped ped}, ${2:int flagId}, ${3:BOOL p2})"
      ],
      "description": "GET_PED_CONFIG_FLAG()"
    },
    "GET_PED_RESET_FLAG": {
      "prefix": "GET_PED_RESET_FLAG()",
      "body": ["GET_PED_RESET_FLAG(${1:Ped ped}, ${2:int flagId})"],
      "description": "GET_PED_RESET_FLAG()"
    },
    "SET_PED_GROUP_MEMBER_PASSENGER_INDEX": {
      "prefix": "SET_PED_GROUP_MEMBER_PASSENGER_INDEX()",
      "body": [
        "SET_PED_GROUP_MEMBER_PASSENGER_INDEX(${1:Ped ped}, ${2:int index})"
      ],
      "description": "SET_PED_GROUP_MEMBER_PASSENGER_INDEX()"
    },
    "SET_PED_CAN_EVASIVE_DIVE": {
      "prefix": "SET_PED_CAN_EVASIVE_DIVE()",
      "body": ["SET_PED_CAN_EVASIVE_DIVE(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_CAN_EVASIVE_DIVE()"
    },
    "IS_PED_EVASIVE_DIVING": {
      "prefix": "IS_PED_EVASIVE_DIVING()",
      "body": ["IS_PED_EVASIVE_DIVING(${1:Ped ped}, ${2:Entity* evadingEntity})"],
      "description": "IS_PED_EVASIVE_DIVING()"
    },
    "SET_PED_SHOOTS_AT_COORD": {
      "prefix": "SET_PED_SHOOTS_AT_COORD()",
      "body": [
        "SET_PED_SHOOTS_AT_COORD(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL toggle})"
      ],
      "description": "SET_PED_SHOOTS_AT_COORD()"
    },
    "SET_PED_MODEL_IS_SUPPRESSED": {
      "prefix": "SET_PED_MODEL_IS_SUPPRESSED()",
      "body": [
        "SET_PED_MODEL_IS_SUPPRESSED(${1:Hash modelHash}, ${2:BOOL toggle})"
      ],
      "description": "SET_PED_MODEL_IS_SUPPRESSED()"
    },
    "STOP_ANY_PED_MODEL_BEING_SUPPRESSED": {
      "prefix": "STOP_ANY_PED_MODEL_BEING_SUPPRESSED()",
      "body": ["STOP_ANY_PED_MODEL_BEING_SUPPRESSED()"],
      "description": "STOP_ANY_PED_MODEL_BEING_SUPPRESSED()"
    },
    "SET_PED_CAN_BE_TARGETED_WHEN_INJURED": {
      "prefix": "SET_PED_CAN_BE_TARGETED_WHEN_INJURED()",
      "body": [
        "SET_PED_CAN_BE_TARGETED_WHEN_INJURED(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "SET_PED_CAN_BE_TARGETED_WHEN_INJURED()"
    },
    "SET_PED_GENERATES_DEAD_BODY_EVENTS": {
      "prefix": "SET_PED_GENERATES_DEAD_BODY_EVENTS()",
      "body": [
        "SET_PED_GENERATES_DEAD_BODY_EVENTS(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "SET_PED_GENERATES_DEAD_BODY_EVENTS()"
    },
    "BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD": {
      "prefix": "BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD()",
      "body": [
        "BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD()"
    },
    "SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER": {
      "prefix": "SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER()",
      "body": [
        "SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER()"
    },
    "SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT": {
      "prefix": "SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT()",
      "body": [
        "SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT()"
    },
    "GIVE_PED_HELMET": {
      "prefix": "GIVE_PED_HELMET()",
      "body": [
        "GIVE_PED_HELMET(${1:Ped ped}, ${2:BOOL cannotRemove}, ${3:int helmetFlag}, ${4:int textureIndex})"
      ],
      "description": "GIVE_PED_HELMET()"
    },
    "REMOVE_PED_HELMET": {
      "prefix": "REMOVE_PED_HELMET()",
      "body": ["REMOVE_PED_HELMET(${1:Ped ped}, ${2:BOOL instantly})"],
      "description": "REMOVE_PED_HELMET()"
    },
    "IS_PED_TAKING_OFF_HELMET": {
      "prefix": "IS_PED_TAKING_OFF_HELMET()",
      "body": ["IS_PED_TAKING_OFF_HELMET(${1:Ped ped})"],
      "description": "IS_PED_TAKING_OFF_HELMET()"
    },
    "SET_PED_HELMET": {
      "prefix": "SET_PED_HELMET()",
      "body": ["SET_PED_HELMET(${1:Ped ped}, ${2:BOOL canWearHelmet})"],
      "description": "SET_PED_HELMET()"
    },
    "SET_PED_HELMET_FLAG": {
      "prefix": "SET_PED_HELMET_FLAG()",
      "body": ["SET_PED_HELMET_FLAG(${1:Ped ped}, ${2:int helmetFlag})"],
      "description": "SET_PED_HELMET_FLAG()"
    },
    "SET_PED_HELMET_PROP_INDEX": {
      "prefix": "SET_PED_HELMET_PROP_INDEX()",
      "body": [
        "SET_PED_HELMET_PROP_INDEX(${1:Ped ped}, ${2:int propIndex}, ${3:BOOL p2})"
      ],
      "description": "SET_PED_HELMET_PROP_INDEX()"
    },
    "SET_PED_HELMET_VISOR_PROP_INDICES": {
      "prefix": "SET_PED_HELMET_VISOR_PROP_INDICES()",
      "body": [
        "SET_PED_HELMET_VISOR_PROP_INDICES(${1:Ped ped}, ${2:BOOL p1}, ${3:int p2}, ${4:int p3})"
      ],
      "description": "SET_PED_HELMET_VISOR_PROP_INDICES()"
    },
    "IS_PED_HELMET_VISOR_UP": {
      "prefix": "IS_PED_HELMET_VISOR_UP()",
      "body": ["IS_PED_HELMET_VISOR_UP(${1:Ped ped})"],
      "description": "IS_PED_HELMET_VISOR_UP()"
    },
    "SET_PED_HELMET_TEXTURE_INDEX": {
      "prefix": "SET_PED_HELMET_TEXTURE_INDEX()",
      "body": [
        "SET_PED_HELMET_TEXTURE_INDEX(${1:Ped ped}, ${2:int textureIndex})"
      ],
      "description": "SET_PED_HELMET_TEXTURE_INDEX()"
    },
    "IS_PED_WEARING_HELMET": {
      "prefix": "IS_PED_WEARING_HELMET()",
      "body": ["IS_PED_WEARING_HELMET(${1:Ped ped})"],
      "description": "IS_PED_WEARING_HELMET()"
    },
    "CLEAR_PED_STORED_HAT_PROP": {
      "prefix": "CLEAR_PED_STORED_HAT_PROP()",
      "body": ["CLEAR_PED_STORED_HAT_PROP(${1:Ped ped})"],
      "description": "CLEAR_PED_STORED_HAT_PROP()"
    },
    "GET_PED_HELMET_STORED_HAT_PROP_INDEX": {
      "prefix": "GET_PED_HELMET_STORED_HAT_PROP_INDEX()",
      "body": ["GET_PED_HELMET_STORED_HAT_PROP_INDEX(${1:Ped ped})"],
      "description": "GET_PED_HELMET_STORED_HAT_PROP_INDEX()"
    },
    "GET_PED_HELMET_STORED_HAT_TEX_INDEX": {
      "prefix": "GET_PED_HELMET_STORED_HAT_TEX_INDEX()",
      "body": ["GET_PED_HELMET_STORED_HAT_TEX_INDEX(${1:Ped ped})"],
      "description": "GET_PED_HELMET_STORED_HAT_TEX_INDEX()"
    },
    "IS_CURRENT_HEAD_PROP_A_HELMET": {
      "prefix": "IS_CURRENT_HEAD_PROP_A_HELMET()",
      "body": ["IS_CURRENT_HEAD_PROP_A_HELMET(${1:Any p0})"],
      "description": "IS_CURRENT_HEAD_PROP_A_HELMET()"
    },
    "SET_PED_TO_LOAD_COVER": {
      "prefix": "SET_PED_TO_LOAD_COVER()",
      "body": ["SET_PED_TO_LOAD_COVER(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_TO_LOAD_COVER()"
    },
    "SET_PED_CAN_COWER_IN_COVER": {
      "prefix": "SET_PED_CAN_COWER_IN_COVER()",
      "body": ["SET_PED_CAN_COWER_IN_COVER(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_CAN_COWER_IN_COVER()"
    },
    "SET_PED_CAN_PEEK_IN_COVER": {
      "prefix": "SET_PED_CAN_PEEK_IN_COVER()",
      "body": ["SET_PED_CAN_PEEK_IN_COVER(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_CAN_PEEK_IN_COVER()"
    },
    "SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE": {
      "prefix": "SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE()",
      "body": [
        "SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE()"
    },
    "SET_PED_LEG_IK_MODE": {
      "prefix": "SET_PED_LEG_IK_MODE()",
      "body": ["SET_PED_LEG_IK_MODE(${1:Ped ped}, ${2:int mode})"],
      "description": "SET_PED_LEG_IK_MODE()"
    },
    "SET_PED_MOTION_BLUR": {
      "prefix": "SET_PED_MOTION_BLUR()",
      "body": ["SET_PED_MOTION_BLUR(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_MOTION_BLUR()"
    },
    "SET_PED_CAN_SWITCH_WEAPON": {
      "prefix": "SET_PED_CAN_SWITCH_WEAPON()",
      "body": ["SET_PED_CAN_SWITCH_WEAPON(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_CAN_SWITCH_WEAPON()"
    },
    "SET_PED_DIES_INSTANTLY_IN_WATER": {
      "prefix": "SET_PED_DIES_INSTANTLY_IN_WATER()",
      "body": ["SET_PED_DIES_INSTANTLY_IN_WATER(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_DIES_INSTANTLY_IN_WATER()"
    },
    "SET_LADDER_CLIMB_INPUT_STATE": {
      "prefix": "SET_LADDER_CLIMB_INPUT_STATE()",
      "body": ["SET_LADDER_CLIMB_INPUT_STATE(${1:Ped ped}, ${2:int p1})"],
      "description": "SET_LADDER_CLIMB_INPUT_STATE()"
    },
    "STOP_PED_WEAPON_FIRING_WHEN_DROPPED": {
      "prefix": "STOP_PED_WEAPON_FIRING_WHEN_DROPPED()",
      "body": ["STOP_PED_WEAPON_FIRING_WHEN_DROPPED(${1:Ped ped})"],
      "description": "STOP_PED_WEAPON_FIRING_WHEN_DROPPED()"
    },
    "SET_SCRIPTED_ANIM_SEAT_OFFSET": {
      "prefix": "SET_SCRIPTED_ANIM_SEAT_OFFSET()",
      "body": ["SET_SCRIPTED_ANIM_SEAT_OFFSET(${1:Ped ped}, ${2:float p1})"],
      "description": "SET_SCRIPTED_ANIM_SEAT_OFFSET()"
    },
    "SET_PED_COMBAT_MOVEMENT": {
      "prefix": "SET_PED_COMBAT_MOVEMENT()",
      "body": ["SET_PED_COMBAT_MOVEMENT(${1:Ped ped}, ${2:int combatMovement})"],
      "description": "SET_PED_COMBAT_MOVEMENT()"
    },
    "GET_PED_COMBAT_MOVEMENT": {
      "prefix": "GET_PED_COMBAT_MOVEMENT()",
      "body": ["GET_PED_COMBAT_MOVEMENT(${1:Ped ped})"],
      "description": "GET_PED_COMBAT_MOVEMENT()"
    },
    "SET_PED_COMBAT_ABILITY": {
      "prefix": "SET_PED_COMBAT_ABILITY()",
      "body": ["SET_PED_COMBAT_ABILITY(${1:Ped ped}, ${2:int abilityLevel})"],
      "description": "SET_PED_COMBAT_ABILITY()"
    },
    "SET_PED_COMBAT_RANGE": {
      "prefix": "SET_PED_COMBAT_RANGE()",
      "body": ["SET_PED_COMBAT_RANGE(${1:Ped ped}, ${2:int combatRange})"],
      "description": "SET_PED_COMBAT_RANGE()"
    },
    "GET_PED_COMBAT_RANGE": {
      "prefix": "GET_PED_COMBAT_RANGE()",
      "body": ["GET_PED_COMBAT_RANGE(${1:Ped ped})"],
      "description": "GET_PED_COMBAT_RANGE()"
    },
    "SET_PED_COMBAT_ATTRIBUTES": {
      "prefix": "SET_PED_COMBAT_ATTRIBUTES()",
      "body": [
        "SET_PED_COMBAT_ATTRIBUTES(${1:Ped ped}, ${2:int attributeId}, ${3:BOOL enabled})"
      ],
      "description": "SET_PED_COMBAT_ATTRIBUTES()"
    },
    "SET_PED_TARGET_LOSS_RESPONSE": {
      "prefix": "SET_PED_TARGET_LOSS_RESPONSE()",
      "body": [
        "SET_PED_TARGET_LOSS_RESPONSE(${1:Ped ped}, ${2:int responseType})"
      ],
      "description": "SET_PED_TARGET_LOSS_RESPONSE()"
    },
    "IS_PED_PERFORMING_MELEE_ACTION": {
      "prefix": "IS_PED_PERFORMING_MELEE_ACTION()",
      "body": ["IS_PED_PERFORMING_MELEE_ACTION(${1:Ped ped})"],
      "description": "IS_PED_PERFORMING_MELEE_ACTION()"
    },
    "IS_PED_PERFORMING_STEALTH_KILL": {
      "prefix": "IS_PED_PERFORMING_STEALTH_KILL()",
      "body": ["IS_PED_PERFORMING_STEALTH_KILL(${1:Ped ped})"],
      "description": "IS_PED_PERFORMING_STEALTH_KILL()"
    },
    "IS_PED_PERFORMING_A_COUNTER_ATTACK": {
      "prefix": "IS_PED_PERFORMING_A_COUNTER_ATTACK()",
      "body": ["IS_PED_PERFORMING_A_COUNTER_ATTACK(${1:Ped ped})"],
      "description": "IS_PED_PERFORMING_A_COUNTER_ATTACK()"
    },
    "IS_PED_BEING_STEALTH_KILLED": {
      "prefix": "IS_PED_BEING_STEALTH_KILLED()",
      "body": ["IS_PED_BEING_STEALTH_KILLED(${1:Ped ped})"],
      "description": "IS_PED_BEING_STEALTH_KILLED()"
    },
    "GET_MELEE_TARGET_FOR_PED": {
      "prefix": "GET_MELEE_TARGET_FOR_PED()",
      "body": ["GET_MELEE_TARGET_FOR_PED(${1:Ped ped})"],
      "description": "GET_MELEE_TARGET_FOR_PED()"
    },
    "WAS_PED_KILLED_BY_STEALTH": {
      "prefix": "WAS_PED_KILLED_BY_STEALTH()",
      "body": ["WAS_PED_KILLED_BY_STEALTH(${1:Ped ped})"],
      "description": "WAS_PED_KILLED_BY_STEALTH()"
    },
    "WAS_PED_KILLED_BY_TAKEDOWN": {
      "prefix": "WAS_PED_KILLED_BY_TAKEDOWN()",
      "body": ["WAS_PED_KILLED_BY_TAKEDOWN(${1:Ped ped})"],
      "description": "WAS_PED_KILLED_BY_TAKEDOWN()"
    },
    "WAS_PED_KNOCKED_OUT": {
      "prefix": "WAS_PED_KNOCKED_OUT()",
      "body": ["WAS_PED_KNOCKED_OUT(${1:Ped ped})"],
      "description": "WAS_PED_KNOCKED_OUT()"
    },
    "SET_PED_FLEE_ATTRIBUTES": {
      "prefix": "SET_PED_FLEE_ATTRIBUTES()",
      "body": [
        "SET_PED_FLEE_ATTRIBUTES(${1:Ped ped}, ${2:int attributeFlags}, ${3:BOOL enable})"
      ],
      "description": "SET_PED_FLEE_ATTRIBUTES()"
    },
    "SET_PED_COWER_HASH": {
      "prefix": "SET_PED_COWER_HASH()",
      "body": ["SET_PED_COWER_HASH(${1:Ped ped}, ${2:const char* p1})"],
      "description": "SET_PED_COWER_HASH()"
    },
    "SET_PED_STEERS_AROUND_DEAD_BODIES": {
      "prefix": "SET_PED_STEERS_AROUND_DEAD_BODIES()",
      "body": [
        "SET_PED_STEERS_AROUND_DEAD_BODIES(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "SET_PED_STEERS_AROUND_DEAD_BODIES()"
    },
    "SET_PED_STEERS_AROUND_PEDS": {
      "prefix": "SET_PED_STEERS_AROUND_PEDS()",
      "body": ["SET_PED_STEERS_AROUND_PEDS(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_STEERS_AROUND_PEDS()"
    },
    "SET_PED_STEERS_AROUND_OBJECTS": {
      "prefix": "SET_PED_STEERS_AROUND_OBJECTS()",
      "body": ["SET_PED_STEERS_AROUND_OBJECTS(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_STEERS_AROUND_OBJECTS()"
    },
    "SET_PED_STEERS_AROUND_VEHICLES": {
      "prefix": "SET_PED_STEERS_AROUND_VEHICLES()",
      "body": ["SET_PED_STEERS_AROUND_VEHICLES(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_STEERS_AROUND_VEHICLES()"
    },
    "SET_PED_IS_AVOIDED_BY_OTHERS": {
      "prefix": "SET_PED_IS_AVOIDED_BY_OTHERS()",
      "body": ["SET_PED_IS_AVOIDED_BY_OTHERS(${1:Any p0}, ${2:BOOL p1})"],
      "description": "SET_PED_IS_AVOIDED_BY_OTHERS()"
    },
    "SET_PED_INCREASED_AVOIDANCE_RADIUS": {
      "prefix": "SET_PED_INCREASED_AVOIDANCE_RADIUS()",
      "body": ["SET_PED_INCREASED_AVOIDANCE_RADIUS(${1:Ped ped})"],
      "description": "SET_PED_INCREASED_AVOIDANCE_RADIUS()"
    },
    "SET_PED_BLOCKS_PATHING_WHEN_DEAD": {
      "prefix": "SET_PED_BLOCKS_PATHING_WHEN_DEAD()",
      "body": [
        "SET_PED_BLOCKS_PATHING_WHEN_DEAD(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "SET_PED_BLOCKS_PATHING_WHEN_DEAD()"
    },
    "SET_PED_NO_TIME_DELAY_BEFORE_SHOT": {
      "prefix": "SET_PED_NO_TIME_DELAY_BEFORE_SHOT()",
      "body": ["SET_PED_NO_TIME_DELAY_BEFORE_SHOT(${1:Any p0})"],
      "description": "SET_PED_NO_TIME_DELAY_BEFORE_SHOT()"
    },
    "IS_ANY_PED_NEAR_POINT": {
      "prefix": "IS_ANY_PED_NEAR_POINT()",
      "body": [
        "IS_ANY_PED_NEAR_POINT(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius})"
      ],
      "description": "IS_ANY_PED_NEAR_POINT()"
    },
    "FORCE_PED_AI_AND_ANIMATION_UPDATE": {
      "prefix": "FORCE_PED_AI_AND_ANIMATION_UPDATE()",
      "body": [
        "FORCE_PED_AI_AND_ANIMATION_UPDATE(${1:Ped ped}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "FORCE_PED_AI_AND_ANIMATION_UPDATE()"
    },
    "IS_PED_HEADING_TOWARDS_POSITION": {
      "prefix": "IS_PED_HEADING_TOWARDS_POSITION()",
      "body": [
        "IS_PED_HEADING_TOWARDS_POSITION(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float p4})"
      ],
      "description": "IS_PED_HEADING_TOWARDS_POSITION()"
    },
    "REQUEST_PED_VISIBILITY_TRACKING": {
      "prefix": "REQUEST_PED_VISIBILITY_TRACKING()",
      "body": ["REQUEST_PED_VISIBILITY_TRACKING(${1:Ped ped})"],
      "description": "REQUEST_PED_VISIBILITY_TRACKING()"
    },
    "REQUEST_PED_VEHICLE_VISIBILITY_TRACKING": {
      "prefix": "REQUEST_PED_VEHICLE_VISIBILITY_TRACKING()",
      "body": [
        "REQUEST_PED_VEHICLE_VISIBILITY_TRACKING(${1:Ped ped}, ${2:BOOL p1})"
      ],
      "description": "REQUEST_PED_VEHICLE_VISIBILITY_TRACKING()"
    },
    "REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING": {
      "prefix": "REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING()",
      "body": [
        "REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING(${1:Ped ped}, ${2:BOOL p1})"
      ],
      "description": "REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING()"
    },
    "REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING": {
      "prefix": "REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING()",
      "body": [
        "REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING(${1:Ped ped}, ${2:BOOL p1})"
      ],
      "description": "REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING()"
    },
    "IS_TRACKED_PED_VISIBLE": {
      "prefix": "IS_TRACKED_PED_VISIBLE()",
      "body": ["IS_TRACKED_PED_VISIBLE(${1:Ped ped})"],
      "description": "IS_TRACKED_PED_VISIBLE()"
    },
    "GET_TRACKED_PED_PIXELCOUNT": {
      "prefix": "GET_TRACKED_PED_PIXELCOUNT()",
      "body": ["GET_TRACKED_PED_PIXELCOUNT(${1:Ped ped})"],
      "description": "GET_TRACKED_PED_PIXELCOUNT()"
    },
    "IS_PED_TRACKED": {
      "prefix": "IS_PED_TRACKED()",
      "body": ["IS_PED_TRACKED(${1:Ped ped})"],
      "description": "IS_PED_TRACKED()"
    },
    "HAS_PED_RECEIVED_EVENT": {
      "prefix": "HAS_PED_RECEIVED_EVENT()",
      "body": ["HAS_PED_RECEIVED_EVENT(${1:Ped ped}, ${2:int eventId})"],
      "description": "HAS_PED_RECEIVED_EVENT()"
    },
    "CAN_PED_SEE_HATED_PED": {
      "prefix": "CAN_PED_SEE_HATED_PED()",
      "body": ["CAN_PED_SEE_HATED_PED(${1:Ped ped1}, ${2:Ped ped2})"],
      "description": "CAN_PED_SEE_HATED_PED()"
    },
    "CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT": {
      "prefix": "CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT()",
      "body": [
        "CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT(${1:Ped ped}, ${2:int* p1})"
      ],
      "description": "CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT()"
    },
    "CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT": {
      "prefix": "CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT()",
      "body": [
        "CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT(${1:Ped ped}, ${2:int* p1})"
      ],
      "description": "CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT()"
    },
    "GET_PED_BONE_INDEX": {
      "prefix": "GET_PED_BONE_INDEX()",
      "body": ["GET_PED_BONE_INDEX(${1:Ped ped}, ${2:int boneId})"],
      "description": "GET_PED_BONE_INDEX()"
    },
    "GET_PED_RAGDOLL_BONE_INDEX": {
      "prefix": "GET_PED_RAGDOLL_BONE_INDEX()",
      "body": ["GET_PED_RAGDOLL_BONE_INDEX(${1:Ped ped}, ${2:int bone})"],
      "description": "GET_PED_RAGDOLL_BONE_INDEX()"
    },
    "SET_PED_ENVEFF_SCALE": {
      "prefix": "SET_PED_ENVEFF_SCALE()",
      "body": ["SET_PED_ENVEFF_SCALE(${1:Ped ped}, ${2:float value})"],
      "description": "SET_PED_ENVEFF_SCALE()"
    },
    "GET_PED_ENVEFF_SCALE": {
      "prefix": "GET_PED_ENVEFF_SCALE()",
      "body": ["GET_PED_ENVEFF_SCALE(${1:Ped ped})"],
      "description": "GET_PED_ENVEFF_SCALE()"
    },
    "SET_ENABLE_PED_ENVEFF_SCALE": {
      "prefix": "SET_ENABLE_PED_ENVEFF_SCALE()",
      "body": ["SET_ENABLE_PED_ENVEFF_SCALE(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_ENABLE_PED_ENVEFF_SCALE()"
    },
    "SET_PED_ENVEFF_CPV_ADD": {
      "prefix": "SET_PED_ENVEFF_CPV_ADD()",
      "body": ["SET_PED_ENVEFF_CPV_ADD(${1:Ped ped}, ${2:float p1})"],
      "description": "SET_PED_ENVEFF_CPV_ADD()"
    },
    "SET_PED_ENVEFF_COLOR_MODULATOR": {
      "prefix": "SET_PED_ENVEFF_COLOR_MODULATOR()",
      "body": [
        "SET_PED_ENVEFF_COLOR_MODULATOR(${1:Ped ped}, ${2:int p1}, ${3:int p2}, ${4:int p3})"
      ],
      "description": "SET_PED_ENVEFF_COLOR_MODULATOR()"
    },
    "SET_PED_EMISSIVE_SCALE": {
      "prefix": "SET_PED_EMISSIVE_SCALE()",
      "body": ["SET_PED_EMISSIVE_SCALE(${1:Ped ped}, ${2:float intensity})"],
      "description": "SET_PED_EMISSIVE_SCALE()"
    },
    "GET_PED_EMISSIVE_SCALE": {
      "prefix": "GET_PED_EMISSIVE_SCALE()",
      "body": ["GET_PED_EMISSIVE_SCALE(${1:Ped ped})"],
      "description": "GET_PED_EMISSIVE_SCALE()"
    },
    "IS_PED_SHADER_READY": {
      "prefix": "IS_PED_SHADER_READY()",
      "body": ["IS_PED_SHADER_READY(${1:Ped ped})"],
      "description": "IS_PED_SHADER_READY()"
    },
    "SET_PED_ENABLE_CREW_EMBLEM": {
      "prefix": "SET_PED_ENABLE_CREW_EMBLEM()",
      "body": ["SET_PED_ENABLE_CREW_EMBLEM(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_ENABLE_CREW_EMBLEM()"
    },
    "REQUEST_RAGDOLL_BOUNDS_UPDATE": {
      "prefix": "REQUEST_RAGDOLL_BOUNDS_UPDATE()",
      "body": ["REQUEST_RAGDOLL_BOUNDS_UPDATE(${1:Any p0}, ${2:Any p1})"],
      "description": "REQUEST_RAGDOLL_BOUNDS_UPDATE()"
    },
    "SET_PED_AO_BLOB_RENDERING": {
      "prefix": "SET_PED_AO_BLOB_RENDERING()",
      "body": ["SET_PED_AO_BLOB_RENDERING(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_AO_BLOB_RENDERING()"
    },
    "IS_PED_SHELTERED": {
      "prefix": "IS_PED_SHELTERED()",
      "body": ["IS_PED_SHELTERED(${1:Ped ped})"],
      "description": "IS_PED_SHELTERED()"
    },
    "CREATE_SYNCHRONIZED_SCENE": {
      "prefix": "CREATE_SYNCHRONIZED_SCENE()",
      "body": [
        "CREATE_SYNCHRONIZED_SCENE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float roll}, ${5:float pitch}, ${6:float yaw}, ${7:int p6})"
      ],
      "description": "CREATE_SYNCHRONIZED_SCENE()"
    },
    "CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT": {
      "prefix": "CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT()",
      "body": [
        "CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash object})"
      ],
      "description": "CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT()"
    },
    "IS_SYNCHRONIZED_SCENE_RUNNING": {
      "prefix": "IS_SYNCHRONIZED_SCENE_RUNNING()",
      "body": ["IS_SYNCHRONIZED_SCENE_RUNNING(${1:int sceneId})"],
      "description": "IS_SYNCHRONIZED_SCENE_RUNNING()"
    },
    "SET_SYNCHRONIZED_SCENE_ORIGIN": {
      "prefix": "SET_SYNCHRONIZED_SCENE_ORIGIN()",
      "body": [
        "SET_SYNCHRONIZED_SCENE_ORIGIN(${1:int sceneID}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float roll}, ${6:float pitch}, ${7:float yaw}, ${8:BOOL p7})"
      ],
      "description": "SET_SYNCHRONIZED_SCENE_ORIGIN()"
    },
    "SET_SYNCHRONIZED_SCENE_PHASE": {
      "prefix": "SET_SYNCHRONIZED_SCENE_PHASE()",
      "body": [
        "SET_SYNCHRONIZED_SCENE_PHASE(${1:int sceneID}, ${2:float phase})"
      ],
      "description": "SET_SYNCHRONIZED_SCENE_PHASE()"
    },
    "GET_SYNCHRONIZED_SCENE_PHASE": {
      "prefix": "GET_SYNCHRONIZED_SCENE_PHASE()",
      "body": ["GET_SYNCHRONIZED_SCENE_PHASE(${1:int sceneID})"],
      "description": "GET_SYNCHRONIZED_SCENE_PHASE()"
    },
    "SET_SYNCHRONIZED_SCENE_RATE": {
      "prefix": "SET_SYNCHRONIZED_SCENE_RATE()",
      "body": ["SET_SYNCHRONIZED_SCENE_RATE(${1:int sceneID}, ${2:float rate})"],
      "description": "SET_SYNCHRONIZED_SCENE_RATE()"
    },
    "GET_SYNCHRONIZED_SCENE_RATE": {
      "prefix": "GET_SYNCHRONIZED_SCENE_RATE()",
      "body": ["GET_SYNCHRONIZED_SCENE_RATE(${1:int sceneID})"],
      "description": "GET_SYNCHRONIZED_SCENE_RATE()"
    },
    "SET_SYNCHRONIZED_SCENE_LOOPED": {
      "prefix": "SET_SYNCHRONIZED_SCENE_LOOPED()",
      "body": [
        "SET_SYNCHRONIZED_SCENE_LOOPED(${1:int sceneID}, ${2:BOOL toggle})"
      ],
      "description": "SET_SYNCHRONIZED_SCENE_LOOPED()"
    },
    "IS_SYNCHRONIZED_SCENE_LOOPED": {
      "prefix": "IS_SYNCHRONIZED_SCENE_LOOPED()",
      "body": ["IS_SYNCHRONIZED_SCENE_LOOPED(${1:int sceneID})"],
      "description": "IS_SYNCHRONIZED_SCENE_LOOPED()"
    },
    "SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME": {
      "prefix": "SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME()",
      "body": [
        "SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(${1:int sceneID}, ${2:BOOL toggle})"
      ],
      "description": "SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME()"
    },
    "IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME": {
      "prefix": "IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME()",
      "body": ["IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(${1:int sceneID})"],
      "description": "IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME()"
    },
    "ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY": {
      "prefix": "ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY()",
      "body": [
        "ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY(${1:int sceneID}, ${2:Entity entity}, ${3:int boneIndex})"
      ],
      "description": "ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY()"
    },
    "DETACH_SYNCHRONIZED_SCENE": {
      "prefix": "DETACH_SYNCHRONIZED_SCENE()",
      "body": ["DETACH_SYNCHRONIZED_SCENE(${1:int sceneID})"],
      "description": "DETACH_SYNCHRONIZED_SCENE()"
    },
    "TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE": {
      "prefix": "TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE()",
      "body": ["TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE(${1:int scene})"],
      "description": "TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE()"
    },
    "FORCE_PED_MOTION_STATE": {
      "prefix": "FORCE_PED_MOTION_STATE()",
      "body": [
        "FORCE_PED_MOTION_STATE(${1:Ped ped}, ${2:Hash motionStateHash}, ${3:BOOL p2}, ${4:int p3}, ${5:BOOL p4})"
      ],
      "description": "FORCE_PED_MOTION_STATE()"
    },
    "GET_PED_CURRENT_MOVE_BLEND_RATIO": {
      "prefix": "GET_PED_CURRENT_MOVE_BLEND_RATIO()",
      "body": [
        "GET_PED_CURRENT_MOVE_BLEND_RATIO(${1:Ped ped}, ${2:float* speedX}, ${3:float* speedY})"
      ],
      "description": "GET_PED_CURRENT_MOVE_BLEND_RATIO()"
    },
    "SET_PED_MAX_MOVE_BLEND_RATIO": {
      "prefix": "SET_PED_MAX_MOVE_BLEND_RATIO()",
      "body": ["SET_PED_MAX_MOVE_BLEND_RATIO(${1:Ped ped}, ${2:float value})"],
      "description": "SET_PED_MAX_MOVE_BLEND_RATIO()"
    },
    "SET_PED_MIN_MOVE_BLEND_RATIO": {
      "prefix": "SET_PED_MIN_MOVE_BLEND_RATIO()",
      "body": ["SET_PED_MIN_MOVE_BLEND_RATIO(${1:Ped ped}, ${2:float value})"],
      "description": "SET_PED_MIN_MOVE_BLEND_RATIO()"
    },
    "SET_PED_MOVE_RATE_OVERRIDE": {
      "prefix": "SET_PED_MOVE_RATE_OVERRIDE()",
      "body": ["SET_PED_MOVE_RATE_OVERRIDE(${1:Ped ped}, ${2:float value})"],
      "description": "SET_PED_MOVE_RATE_OVERRIDE()"
    },
    "SET_PED_MOVE_RATE_IN_WATER_OVERRIDE": {
      "prefix": "SET_PED_MOVE_RATE_IN_WATER_OVERRIDE()",
      "body": [
        "SET_PED_MOVE_RATE_IN_WATER_OVERRIDE(${1:Ped ped}, ${2:float p1})"
      ],
      "description": "SET_PED_MOVE_RATE_IN_WATER_OVERRIDE()"
    },
    "PED_HAS_SEXINESS_FLAG_SET": {
      "prefix": "PED_HAS_SEXINESS_FLAG_SET()",
      "body": ["PED_HAS_SEXINESS_FLAG_SET(${1:Ped ped}, ${2:int sexinessFlag})"],
      "description": "PED_HAS_SEXINESS_FLAG_SET()"
    },
    "GET_PED_NEARBY_VEHICLES": {
      "prefix": "GET_PED_NEARBY_VEHICLES()",
      "body": ["GET_PED_NEARBY_VEHICLES(${1:Ped ped}, ${2:Any* sizeAndVehs})"],
      "description": "GET_PED_NEARBY_VEHICLES()"
    },
    "GET_PED_NEARBY_PEDS": {
      "prefix": "GET_PED_NEARBY_PEDS()",
      "body": [
        "GET_PED_NEARBY_PEDS(${1:Ped ped}, ${2:Any* sizeAndPeds}, ${3:int ignore})"
      ],
      "description": "GET_PED_NEARBY_PEDS()"
    },
    "HAVE_ALL_STREAMING_REQUESTS_COMPLETED": {
      "prefix": "HAVE_ALL_STREAMING_REQUESTS_COMPLETED()",
      "body": ["HAVE_ALL_STREAMING_REQUESTS_COMPLETED(${1:Ped ped})"],
      "description": "HAVE_ALL_STREAMING_REQUESTS_COMPLETED()"
    },
    "IS_PED_USING_ACTION_MODE": {
      "prefix": "IS_PED_USING_ACTION_MODE()",
      "body": ["IS_PED_USING_ACTION_MODE(${1:Ped ped})"],
      "description": "IS_PED_USING_ACTION_MODE()"
    },
    "SET_PED_USING_ACTION_MODE": {
      "prefix": "SET_PED_USING_ACTION_MODE()",
      "body": [
        "SET_PED_USING_ACTION_MODE(${1:Ped ped}, ${2:BOOL p1}, ${3:int p2}, ${4:const char* action})"
      ],
      "description": "SET_PED_USING_ACTION_MODE()"
    },
    "SET_MOVEMENT_MODE_OVERRIDE": {
      "prefix": "SET_MOVEMENT_MODE_OVERRIDE()",
      "body": ["SET_MOVEMENT_MODE_OVERRIDE(${1:Ped ped}, ${2:const char* name})"],
      "description": "SET_MOVEMENT_MODE_OVERRIDE()"
    },
    "SET_PED_CAPSULE": {
      "prefix": "SET_PED_CAPSULE()",
      "body": ["SET_PED_CAPSULE(${1:Ped ped}, ${2:float value})"],
      "description": "SET_PED_CAPSULE()"
    },
    "REGISTER_PEDHEADSHOT": {
      "prefix": "REGISTER_PEDHEADSHOT()",
      "body": ["REGISTER_PEDHEADSHOT(${1:Ped ped})"],
      "description": "REGISTER_PEDHEADSHOT()"
    },
    "REGISTER_PEDHEADSHOT_HIRES": {
      "prefix": "REGISTER_PEDHEADSHOT_HIRES()",
      "body": ["REGISTER_PEDHEADSHOT_HIRES(${1:Ped ped})"],
      "description": "REGISTER_PEDHEADSHOT_HIRES()"
    },
    "REGISTER_PEDHEADSHOT_TRANSPARENT": {
      "prefix": "REGISTER_PEDHEADSHOT_TRANSPARENT()",
      "body": ["REGISTER_PEDHEADSHOT_TRANSPARENT(${1:Ped ped})"],
      "description": "REGISTER_PEDHEADSHOT_TRANSPARENT()"
    },
    "UNREGISTER_PEDHEADSHOT": {
      "prefix": "UNREGISTER_PEDHEADSHOT()",
      "body": ["UNREGISTER_PEDHEADSHOT(${1:int id})"],
      "description": "UNREGISTER_PEDHEADSHOT()"
    },
    "IS_PEDHEADSHOT_VALID": {
      "prefix": "IS_PEDHEADSHOT_VALID()",
      "body": ["IS_PEDHEADSHOT_VALID(${1:int id})"],
      "description": "IS_PEDHEADSHOT_VALID()"
    },
    "IS_PEDHEADSHOT_READY": {
      "prefix": "IS_PEDHEADSHOT_READY()",
      "body": ["IS_PEDHEADSHOT_READY(${1:int id})"],
      "description": "IS_PEDHEADSHOT_READY()"
    },
    "REQUEST_PEDHEADSHOT_IMG_UPLOAD": {
      "prefix": "REQUEST_PEDHEADSHOT_IMG_UPLOAD()",
      "body": ["REQUEST_PEDHEADSHOT_IMG_UPLOAD(${1:int id})"],
      "description": "REQUEST_PEDHEADSHOT_IMG_UPLOAD()"
    },
    "RELEASE_PEDHEADSHOT_IMG_UPLOAD": {
      "prefix": "RELEASE_PEDHEADSHOT_IMG_UPLOAD()",
      "body": ["RELEASE_PEDHEADSHOT_IMG_UPLOAD(${1:int id})"],
      "description": "RELEASE_PEDHEADSHOT_IMG_UPLOAD()"
    },
    "IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE": {
      "prefix": "IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE()",
      "body": ["IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE()"],
      "description": "IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE()"
    },
    "HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED": {
      "prefix": "HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED()",
      "body": ["HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED()"],
      "description": "HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED()"
    },
    "HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED": {
      "prefix": "HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED()",
      "body": ["HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED()"],
      "description": "HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED()"
    },
    "SET_PED_HEATSCALE_OVERRIDE": {
      "prefix": "SET_PED_HEATSCALE_OVERRIDE()",
      "body": ["SET_PED_HEATSCALE_OVERRIDE(${1:Ped ped}, ${2:float heatScale})"],
      "description": "SET_PED_HEATSCALE_OVERRIDE()"
    },
    "DISABLE_PED_HEATSCALE_OVERRIDE": {
      "prefix": "DISABLE_PED_HEATSCALE_OVERRIDE()",
      "body": ["DISABLE_PED_HEATSCALE_OVERRIDE(${1:Ped ped})"],
      "description": "DISABLE_PED_HEATSCALE_OVERRIDE()"
    },
    "SPAWNPOINTS_START_SEARCH": {
      "prefix": "SPAWNPOINTS_START_SEARCH()",
      "body": [
        "SPAWNPOINTS_START_SEARCH(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:int interiorFlags}, ${7:float scale}, ${8:int duration})"
      ],
      "description": "SPAWNPOINTS_START_SEARCH()"
    },
    "SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA": {
      "prefix": "SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA()",
      "body": [
        "SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float width}, ${8:int interiorFlags}, ${9:float scale}, ${10:int duration})"
      ],
      "description": "SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA()"
    },
    "SPAWNPOINTS_CANCEL_SEARCH": {
      "prefix": "SPAWNPOINTS_CANCEL_SEARCH()",
      "body": ["SPAWNPOINTS_CANCEL_SEARCH()"],
      "description": "SPAWNPOINTS_CANCEL_SEARCH()"
    },
    "SPAWNPOINTS_IS_SEARCH_ACTIVE": {
      "prefix": "SPAWNPOINTS_IS_SEARCH_ACTIVE()",
      "body": ["SPAWNPOINTS_IS_SEARCH_ACTIVE()"],
      "description": "SPAWNPOINTS_IS_SEARCH_ACTIVE()"
    },
    "SPAWNPOINTS_IS_SEARCH_COMPLETE": {
      "prefix": "SPAWNPOINTS_IS_SEARCH_COMPLETE()",
      "body": ["SPAWNPOINTS_IS_SEARCH_COMPLETE()"],
      "description": "SPAWNPOINTS_IS_SEARCH_COMPLETE()"
    },
    "SPAWNPOINTS_IS_SEARCH_FAILED": {
      "prefix": "SPAWNPOINTS_IS_SEARCH_FAILED()",
      "body": ["SPAWNPOINTS_IS_SEARCH_FAILED()"],
      "description": "SPAWNPOINTS_IS_SEARCH_FAILED()"
    },
    "SPAWNPOINTS_GET_NUM_SEARCH_RESULTS": {
      "prefix": "SPAWNPOINTS_GET_NUM_SEARCH_RESULTS()",
      "body": ["SPAWNPOINTS_GET_NUM_SEARCH_RESULTS()"],
      "description": "SPAWNPOINTS_GET_NUM_SEARCH_RESULTS()"
    },
    "SPAWNPOINTS_GET_SEARCH_RESULT": {
      "prefix": "SPAWNPOINTS_GET_SEARCH_RESULT()",
      "body": [
        "SPAWNPOINTS_GET_SEARCH_RESULT(${1:int randomInt}, ${2:float* x}, ${3:float* y}, ${4:float* z})"
      ],
      "description": "SPAWNPOINTS_GET_SEARCH_RESULT()"
    },
    "SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS": {
      "prefix": "SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS()",
      "body": ["SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS(${1:int p0}, ${2:int* p1})"],
      "description": "SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS()"
    },
    "SET_IK_TARGET": {
      "prefix": "SET_IK_TARGET()",
      "body": [
        "SET_IK_TARGET(${1:Ped ped}, ${2:int ikIndex}, ${3:Entity entityLookAt}, ${4:int boneLookAt}, ${5:float offsetX}, ${6:float offsetY}, ${7:float offsetZ}, ${8:Any p7}, ${9:int blendInDuration}, ${10:int blendOutDuration})"
      ],
      "description": "SET_IK_TARGET()"
    },
    "FORCE_INSTANT_LEG_IK_SETUP": {
      "prefix": "FORCE_INSTANT_LEG_IK_SETUP()",
      "body": ["FORCE_INSTANT_LEG_IK_SETUP(${1:Ped ped})"],
      "description": "FORCE_INSTANT_LEG_IK_SETUP()"
    },
    "REQUEST_ACTION_MODE_ASSET": {
      "prefix": "REQUEST_ACTION_MODE_ASSET()",
      "body": ["REQUEST_ACTION_MODE_ASSET(${1:const char* asset})"],
      "description": "REQUEST_ACTION_MODE_ASSET()"
    },
    "HAS_ACTION_MODE_ASSET_LOADED": {
      "prefix": "HAS_ACTION_MODE_ASSET_LOADED()",
      "body": ["HAS_ACTION_MODE_ASSET_LOADED(${1:const char* asset})"],
      "description": "HAS_ACTION_MODE_ASSET_LOADED()"
    },
    "REMOVE_ACTION_MODE_ASSET": {
      "prefix": "REMOVE_ACTION_MODE_ASSET()",
      "body": ["REMOVE_ACTION_MODE_ASSET(${1:const char* asset})"],
      "description": "REMOVE_ACTION_MODE_ASSET()"
    },
    "REQUEST_STEALTH_MODE_ASSET": {
      "prefix": "REQUEST_STEALTH_MODE_ASSET()",
      "body": ["REQUEST_STEALTH_MODE_ASSET(${1:const char* asset})"],
      "description": "REQUEST_STEALTH_MODE_ASSET()"
    },
    "HAS_STEALTH_MODE_ASSET_LOADED": {
      "prefix": "HAS_STEALTH_MODE_ASSET_LOADED()",
      "body": ["HAS_STEALTH_MODE_ASSET_LOADED(${1:const char* asset})"],
      "description": "HAS_STEALTH_MODE_ASSET_LOADED()"
    },
    "REMOVE_STEALTH_MODE_ASSET": {
      "prefix": "REMOVE_STEALTH_MODE_ASSET()",
      "body": ["REMOVE_STEALTH_MODE_ASSET(${1:const char* asset})"],
      "description": "REMOVE_STEALTH_MODE_ASSET()"
    },
    "SET_PED_LOD_MULTIPLIER": {
      "prefix": "SET_PED_LOD_MULTIPLIER()",
      "body": ["SET_PED_LOD_MULTIPLIER(${1:Ped ped}, ${2:float multiplier})"],
      "description": "SET_PED_LOD_MULTIPLIER()"
    },
    "SET_PED_CAN_LOSE_PROPS_ON_DAMAGE": {
      "prefix": "SET_PED_CAN_LOSE_PROPS_ON_DAMAGE()",
      "body": [
        "SET_PED_CAN_LOSE_PROPS_ON_DAMAGE(${1:Ped ped}, ${2:BOOL toggle}, ${3:int p2})"
      ],
      "description": "SET_PED_CAN_LOSE_PROPS_ON_DAMAGE()"
    },
    "SET_FORCE_FOOTSTEP_UPDATE": {
      "prefix": "SET_FORCE_FOOTSTEP_UPDATE()",
      "body": ["SET_FORCE_FOOTSTEP_UPDATE(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_FORCE_FOOTSTEP_UPDATE()"
    },
    "SET_FORCE_STEP_TYPE": {
      "prefix": "SET_FORCE_STEP_TYPE()",
      "body": [
        "SET_FORCE_STEP_TYPE(${1:Ped ped}, ${2:BOOL p1}, ${3:int type}, ${4:int p3})"
      ],
      "description": "SET_FORCE_STEP_TYPE()"
    },
    "IS_ANY_HOSTILE_PED_NEAR_POINT": {
      "prefix": "IS_ANY_HOSTILE_PED_NEAR_POINT()",
      "body": [
        "IS_ANY_HOSTILE_PED_NEAR_POINT(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius})"
      ],
      "description": "IS_ANY_HOSTILE_PED_NEAR_POINT()"
    },
    "SET_PED_CAN_PLAY_IN_CAR_IDLES": {
      "prefix": "SET_PED_CAN_PLAY_IN_CAR_IDLES()",
      "body": ["SET_PED_CAN_PLAY_IN_CAR_IDLES(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_CAN_PLAY_IN_CAR_IDLES()"
    },
    "IS_TARGET_PED_IN_PERCEPTION_AREA": {
      "prefix": "IS_TARGET_PED_IN_PERCEPTION_AREA()",
      "body": [
        "IS_TARGET_PED_IN_PERCEPTION_AREA(${1:Ped ped}, ${2:Ped targetPed}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5})"
      ],
      "description": "IS_TARGET_PED_IN_PERCEPTION_AREA()"
    },
    "SET_POP_CONTROL_SPHERE_THIS_FRAME": {
      "prefix": "SET_POP_CONTROL_SPHERE_THIS_FRAME()",
      "body": [
        "SET_POP_CONTROL_SPHERE_THIS_FRAME(${1:float x}, ${2:float y}, ${3:float z}, ${4:float min}, ${5:float max})"
      ],
      "description": "SET_POP_CONTROL_SPHERE_THIS_FRAME()"
    },
    "FORCE_ZERO_MASS_IN_COLLISIONS": {
      "prefix": "FORCE_ZERO_MASS_IN_COLLISIONS()",
      "body": ["FORCE_ZERO_MASS_IN_COLLISIONS(${1:Ped ped})"],
      "description": "FORCE_ZERO_MASS_IN_COLLISIONS()"
    },
    "SET_DISABLE_HIGH_FALL_DEATH": {
      "prefix": "SET_DISABLE_HIGH_FALL_DEATH()",
      "body": ["SET_DISABLE_HIGH_FALL_DEATH(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_DISABLE_HIGH_FALL_DEATH()"
    },
    "SET_PED_PHONE_PALETTE_IDX": {
      "prefix": "SET_PED_PHONE_PALETTE_IDX()",
      "body": ["SET_PED_PHONE_PALETTE_IDX(${1:Any p0}, ${2:Any p1})"],
      "description": "SET_PED_PHONE_PALETTE_IDX()"
    },
    "SET_PED_STEER_BIAS": {
      "prefix": "SET_PED_STEER_BIAS()",
      "body": ["SET_PED_STEER_BIAS(${1:Ped ped}, ${2:float value})"],
      "description": "SET_PED_STEER_BIAS()"
    },
    "IS_PED_SWITCHING_WEAPON": {
      "prefix": "IS_PED_SWITCHING_WEAPON()",
      "body": ["IS_PED_SWITCHING_WEAPON(${1:Ped Ped})"],
      "description": "IS_PED_SWITCHING_WEAPON()"
    },
    "SET_PED_TREATED_AS_FRIENDLY": {
      "prefix": "SET_PED_TREATED_AS_FRIENDLY()",
      "body": [
        "SET_PED_TREATED_AS_FRIENDLY(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "SET_PED_TREATED_AS_FRIENDLY()"
    },
    "SET_DISABLE_PED_MAP_COLLISION": {
      "prefix": "SET_DISABLE_PED_MAP_COLLISION()",
      "body": ["SET_DISABLE_PED_MAP_COLLISION(${1:Ped ped})"],
      "description": "SET_DISABLE_PED_MAP_COLLISION()"
    },
    "ENABLE_MP_LIGHT": {
      "prefix": "ENABLE_MP_LIGHT()",
      "body": ["ENABLE_MP_LIGHT(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "ENABLE_MP_LIGHT()"
    },
    "GET_MP_LIGHT_ENABLED": {
      "prefix": "GET_MP_LIGHT_ENABLED()",
      "body": ["GET_MP_LIGHT_ENABLED(${1:Ped ped})"],
      "description": "GET_MP_LIGHT_ENABLED()"
    },
    "CLEAR_COVER_POINT_FOR_PED": {
      "prefix": "CLEAR_COVER_POINT_FOR_PED()",
      "body": ["CLEAR_COVER_POINT_FOR_PED(${1:Ped ped})"],
      "description": "CLEAR_COVER_POINT_FOR_PED()"
    },
    "SET_ALLOW_STUNT_JUMP_CAMERA": {
      "prefix": "SET_ALLOW_STUNT_JUMP_CAMERA()",
      "body": ["SET_ALLOW_STUNT_JUMP_CAMERA(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_ALLOW_STUNT_JUMP_CAMERA()"
    },
    "ADD_ROPE": {
      "prefix": "ADD_ROPE()",
      "body": [
        "ADD_ROPE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float rotX}, ${5:float rotY}, ${6:float rotZ}, ${7:float length}, ${8:int ropeType}, ${9:float maxLength}, ${10:float minLength}, ${11:float windingSpeed}, ${12:BOOL p11}, ${13:BOOL p12}, ${14:BOOL rigid}, ${15:float p14}, ${16:BOOL breakWhenShot}, ${17:Any* unkPtr})"
      ],
      "description": "ADD_ROPE()"
    },
    "DELETE_ROPE": {
      "prefix": "DELETE_ROPE()",
      "body": ["DELETE_ROPE(${1:int* ropeId})"],
      "description": "DELETE_ROPE()"
    },
    "DELETE_CHILD_ROPE": {
      "prefix": "DELETE_CHILD_ROPE()",
      "body": ["DELETE_CHILD_ROPE(${1:int ropeId})"],
      "description": "DELETE_CHILD_ROPE()"
    },
    "DOES_ROPE_EXIST": {
      "prefix": "DOES_ROPE_EXIST()",
      "body": ["DOES_ROPE_EXIST(${1:int* ropeId})"],
      "description": "DOES_ROPE_EXIST()"
    },
    "ROPE_DRAW_ENABLED": {
      "prefix": "ROPE_DRAW_ENABLED()",
      "body": ["ROPE_DRAW_ENABLED(${1:int* ropeId}, ${2:BOOL p1})"],
      "description": "ROPE_DRAW_ENABLED()"
    },
    "ROPE_DRAW_SHADOW_ENABLED": {
      "prefix": "ROPE_DRAW_SHADOW_ENABLED()",
      "body": ["ROPE_DRAW_SHADOW_ENABLED(${1:int* ropeId}, ${2:BOOL toggle})"],
      "description": "ROPE_DRAW_SHADOW_ENABLED()"
    },
    "LOAD_ROPE_DATA": {
      "prefix": "LOAD_ROPE_DATA()",
      "body": ["LOAD_ROPE_DATA(${1:int ropeId}, ${2:const char* rope_preset})"],
      "description": "LOAD_ROPE_DATA()"
    },
    "PIN_ROPE_VERTEX": {
      "prefix": "PIN_ROPE_VERTEX()",
      "body": [
        "PIN_ROPE_VERTEX(${1:int ropeId}, ${2:int vertex}, ${3:float x}, ${4:float y}, ${5:float z})"
      ],
      "description": "PIN_ROPE_VERTEX()"
    },
    "UNPIN_ROPE_VERTEX": {
      "prefix": "UNPIN_ROPE_VERTEX()",
      "body": ["UNPIN_ROPE_VERTEX(${1:int ropeId}, ${2:int vertex})"],
      "description": "UNPIN_ROPE_VERTEX()"
    },
    "GET_ROPE_VERTEX_COUNT": {
      "prefix": "GET_ROPE_VERTEX_COUNT()",
      "body": ["GET_ROPE_VERTEX_COUNT(${1:int ropeId})"],
      "description": "GET_ROPE_VERTEX_COUNT()"
    },
    "ATTACH_ENTITIES_TO_ROPE": {
      "prefix": "ATTACH_ENTITIES_TO_ROPE()",
      "body": [
        "ATTACH_ENTITIES_TO_ROPE(${1:int ropeId}, ${2:Entity ent1}, ${3:Entity ent2}, ${4:float ent1_x}, ${5:float ent1_y}, ${6:float ent1_z}, ${7:float ent2_x}, ${8:float ent2_y}, ${9:float ent2_z}, ${10:float length}, ${11:BOOL p10}, ${12:BOOL p11}, ${13:Any* p12}, ${14:Any* p13})"
      ],
      "description": "ATTACH_ENTITIES_TO_ROPE()"
    },
    "ATTACH_ROPE_TO_ENTITY": {
      "prefix": "ATTACH_ROPE_TO_ENTITY()",
      "body": [
        "ATTACH_ROPE_TO_ENTITY(${1:int ropeId}, ${2:Entity entity}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:BOOL p5})"
      ],
      "description": "ATTACH_ROPE_TO_ENTITY()"
    },
    "DETACH_ROPE_FROM_ENTITY": {
      "prefix": "DETACH_ROPE_FROM_ENTITY()",
      "body": ["DETACH_ROPE_FROM_ENTITY(${1:int ropeId}, ${2:Entity entity})"],
      "description": "DETACH_ROPE_FROM_ENTITY()"
    },
    "ROPE_SET_UPDATE_PINVERTS": {
      "prefix": "ROPE_SET_UPDATE_PINVERTS()",
      "body": ["ROPE_SET_UPDATE_PINVERTS(${1:int ropeId})"],
      "description": "ROPE_SET_UPDATE_PINVERTS()"
    },
    "ROPE_SET_UPDATE_ORDER": {
      "prefix": "ROPE_SET_UPDATE_ORDER()",
      "body": ["ROPE_SET_UPDATE_ORDER(${1:int ropeId}, ${2:Any p1})"],
      "description": "ROPE_SET_UPDATE_ORDER()"
    },
    "ROPE_SET_SMOOTH_REELIN": {
      "prefix": "ROPE_SET_SMOOTH_REELIN()",
      "body": ["ROPE_SET_SMOOTH_REELIN(${1:int ropeId}, ${2:BOOL p1})"],
      "description": "ROPE_SET_SMOOTH_REELIN()"
    },
    "IS_ROPE_ATTACHED_AT_BOTH_ENDS": {
      "prefix": "IS_ROPE_ATTACHED_AT_BOTH_ENDS()",
      "body": ["IS_ROPE_ATTACHED_AT_BOTH_ENDS(${1:int* ropeId})"],
      "description": "IS_ROPE_ATTACHED_AT_BOTH_ENDS()"
    },
    "GET_ROPE_LAST_VERTEX_COORD": {
      "prefix": "GET_ROPE_LAST_VERTEX_COORD()",
      "body": ["GET_ROPE_LAST_VERTEX_COORD(${1:int ropeId})"],
      "description": "GET_ROPE_LAST_VERTEX_COORD()"
    },
    "GET_ROPE_VERTEX_COORD": {
      "prefix": "GET_ROPE_VERTEX_COORD()",
      "body": ["GET_ROPE_VERTEX_COORD(${1:int ropeId}, ${2:int vertex})"],
      "description": "GET_ROPE_VERTEX_COORD()"
    },
    "START_ROPE_WINDING": {
      "prefix": "START_ROPE_WINDING()",
      "body": ["START_ROPE_WINDING(${1:int ropeId})"],
      "description": "START_ROPE_WINDING()"
    },
    "STOP_ROPE_WINDING": {
      "prefix": "STOP_ROPE_WINDING()",
      "body": ["STOP_ROPE_WINDING(${1:int ropeId})"],
      "description": "STOP_ROPE_WINDING()"
    },
    "START_ROPE_UNWINDING_FRONT": {
      "prefix": "START_ROPE_UNWINDING_FRONT()",
      "body": ["START_ROPE_UNWINDING_FRONT(${1:int ropeId})"],
      "description": "START_ROPE_UNWINDING_FRONT()"
    },
    "STOP_ROPE_UNWINDING_FRONT": {
      "prefix": "STOP_ROPE_UNWINDING_FRONT()",
      "body": ["STOP_ROPE_UNWINDING_FRONT(${1:int ropeId})"],
      "description": "STOP_ROPE_UNWINDING_FRONT()"
    },
    "ROPE_CONVERT_TO_SIMPLE": {
      "prefix": "ROPE_CONVERT_TO_SIMPLE()",
      "body": ["ROPE_CONVERT_TO_SIMPLE(${1:int ropeId})"],
      "description": "ROPE_CONVERT_TO_SIMPLE()"
    },
    "ROPE_LOAD_TEXTURES": {
      "prefix": "ROPE_LOAD_TEXTURES()",
      "body": ["ROPE_LOAD_TEXTURES()"],
      "description": "ROPE_LOAD_TEXTURES()"
    },
    "ROPE_ARE_TEXTURES_LOADED": {
      "prefix": "ROPE_ARE_TEXTURES_LOADED()",
      "body": ["ROPE_ARE_TEXTURES_LOADED()"],
      "description": "ROPE_ARE_TEXTURES_LOADED()"
    },
    "ROPE_UNLOAD_TEXTURES": {
      "prefix": "ROPE_UNLOAD_TEXTURES()",
      "body": ["ROPE_UNLOAD_TEXTURES()"],
      "description": "ROPE_UNLOAD_TEXTURES()"
    },
    "DOES_SCRIPT_OWN_ROPE": {
      "prefix": "DOES_SCRIPT_OWN_ROPE()",
      "body": ["DOES_SCRIPT_OWN_ROPE(${1:int ropeId})"],
      "description": "DOES_SCRIPT_OWN_ROPE()"
    },
    "ROPE_ATTACH_VIRTUAL_BOUND_GEOM": {
      "prefix": "ROPE_ATTACH_VIRTUAL_BOUND_GEOM()",
      "body": [
        "ROPE_ATTACH_VIRTUAL_BOUND_GEOM(${1:int ropeId}, ${2:int p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:float p9}, ${11:float p10}, ${12:float p11}, ${13:float p12}, ${14:float p13})"
      ],
      "description": "ROPE_ATTACH_VIRTUAL_BOUND_GEOM()"
    },
    "ROPE_CHANGE_SCRIPT_OWNER": {
      "prefix": "ROPE_CHANGE_SCRIPT_OWNER()",
      "body": [
        "ROPE_CHANGE_SCRIPT_OWNER(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "ROPE_CHANGE_SCRIPT_OWNER()"
    },
    "ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER": {
      "prefix": "ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER()",
      "body": [
        "ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER(${1:int ropeId}, ${2:int p1})"
      ],
      "description": "ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER()"
    },
    "ROPE_GET_DISTANCE_BETWEEN_ENDS": {
      "prefix": "ROPE_GET_DISTANCE_BETWEEN_ENDS()",
      "body": ["ROPE_GET_DISTANCE_BETWEEN_ENDS(${1:int ropeId})"],
      "description": "ROPE_GET_DISTANCE_BETWEEN_ENDS()"
    },
    "ROPE_FORCE_LENGTH": {
      "prefix": "ROPE_FORCE_LENGTH()",
      "body": ["ROPE_FORCE_LENGTH(${1:int ropeId}, ${2:float length})"],
      "description": "ROPE_FORCE_LENGTH()"
    },
    "ROPE_RESET_LENGTH": {
      "prefix": "ROPE_RESET_LENGTH()",
      "body": ["ROPE_RESET_LENGTH(${1:int ropeId}, ${2:float length})"],
      "description": "ROPE_RESET_LENGTH()"
    },
    "APPLY_IMPULSE_TO_CLOTH": {
      "prefix": "APPLY_IMPULSE_TO_CLOTH()",
      "body": [
        "APPLY_IMPULSE_TO_CLOTH(${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float vecX}, ${5:float vecY}, ${6:float vecZ}, ${7:float impulse})"
      ],
      "description": "APPLY_IMPULSE_TO_CLOTH()"
    },
    "SET_DAMPING": {
      "prefix": "SET_DAMPING()",
      "body": [
        "SET_DAMPING(${1:Entity entity}, ${2:int vertex}, ${3:float value})"
      ],
      "description": "SET_DAMPING()"
    },
    "ACTIVATE_PHYSICS": {
      "prefix": "ACTIVATE_PHYSICS()",
      "body": ["ACTIVATE_PHYSICS(${1:Entity entity})"],
      "description": "ACTIVATE_PHYSICS()"
    },
    "SET_CGOFFSET": {
      "prefix": "SET_CGOFFSET()",
      "body": [
        "SET_CGOFFSET(${1:Entity entity}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "SET_CGOFFSET()"
    },
    "GET_CGOFFSET": {
      "prefix": "GET_CGOFFSET()",
      "body": ["GET_CGOFFSET(${1:Entity entity})"],
      "description": "GET_CGOFFSET()"
    },
    "SET_CG_AT_BOUNDCENTER": {
      "prefix": "SET_CG_AT_BOUNDCENTER()",
      "body": ["SET_CG_AT_BOUNDCENTER(${1:Entity entity})"],
      "description": "SET_CG_AT_BOUNDCENTER()"
    },
    "BREAK_ENTITY_GLASS": {
      "prefix": "BREAK_ENTITY_GLASS()",
      "body": [
        "BREAK_ENTITY_GLASS(${1:Entity entity}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:Any p9}, ${11:BOOL p10})"
      ],
      "description": "BREAK_ENTITY_GLASS()"
    },
    "GET_IS_ENTITY_A_FRAG": {
      "prefix": "GET_IS_ENTITY_A_FRAG()",
      "body": ["GET_IS_ENTITY_A_FRAG(${1:Object object})"],
      "description": "GET_IS_ENTITY_A_FRAG()"
    },
    "SET_DISABLE_BREAKING": {
      "prefix": "SET_DISABLE_BREAKING()",
      "body": ["SET_DISABLE_BREAKING(${1:Object object}, ${2:BOOL toggle})"],
      "description": "SET_DISABLE_BREAKING()"
    },
    "RESET_DISABLE_BREAKING": {
      "prefix": "RESET_DISABLE_BREAKING()",
      "body": ["RESET_DISABLE_BREAKING(${1:Object object})"],
      "description": "RESET_DISABLE_BREAKING()"
    },
    "SET_DISABLE_FRAG_DAMAGE": {
      "prefix": "SET_DISABLE_FRAG_DAMAGE()",
      "body": ["SET_DISABLE_FRAG_DAMAGE(${1:Object object}, ${2:BOOL toggle})"],
      "description": "SET_DISABLE_FRAG_DAMAGE()"
    },
    "SET_USE_KINEMATIC_PHYSICS": {
      "prefix": "SET_USE_KINEMATIC_PHYSICS()",
      "body": ["SET_USE_KINEMATIC_PHYSICS(${1:Entity entity}, ${2:BOOL toggle})"],
      "description": "SET_USE_KINEMATIC_PHYSICS()"
    },
    "SET_IN_STUNT_MODE": {
      "prefix": "SET_IN_STUNT_MODE()",
      "body": ["SET_IN_STUNT_MODE(${1:BOOL p0})"],
      "description": "SET_IN_STUNT_MODE()"
    },
    "SET_IN_ARENA_MODE": {
      "prefix": "SET_IN_ARENA_MODE()",
      "body": ["SET_IN_ARENA_MODE(${1:BOOL toggle})"],
      "description": "SET_IN_ARENA_MODE()"
    },
    "GET_PLAYER_PED": {
      "prefix": "GET_PLAYER_PED()",
      "body": ["GET_PLAYER_PED(${1:Player player})"],
      "description": "GET_PLAYER_PED()"
    },
    "GET_PLAYER_PED_SCRIPT_INDEX": {
      "prefix": "GET_PLAYER_PED_SCRIPT_INDEX()",
      "body": ["GET_PLAYER_PED_SCRIPT_INDEX(${1:Player player})"],
      "description": "GET_PLAYER_PED_SCRIPT_INDEX()"
    },
    "SET_PLAYER_MODEL": {
      "prefix": "SET_PLAYER_MODEL()",
      "body": ["SET_PLAYER_MODEL(${1:Player player}, ${2:Hash model})"],
      "description": "SET_PLAYER_MODEL()"
    },
    "CHANGE_PLAYER_PED": {
      "prefix": "CHANGE_PLAYER_PED()",
      "body": [
        "CHANGE_PLAYER_PED(${1:Player player}, ${2:Ped ped}, ${3:BOOL p2}, ${4:BOOL resetDamage})"
      ],
      "description": "CHANGE_PLAYER_PED()"
    },
    "GET_PLAYER_RGB_COLOUR": {
      "prefix": "GET_PLAYER_RGB_COLOUR()",
      "body": [
        "GET_PLAYER_RGB_COLOUR(${1:Player player}, ${2:int* r}, ${3:int* g}, ${4:int* b})"
      ],
      "description": "GET_PLAYER_RGB_COLOUR()"
    },
    "GET_NUMBER_OF_PLAYERS": {
      "prefix": "GET_NUMBER_OF_PLAYERS()",
      "body": ["GET_NUMBER_OF_PLAYERS()"],
      "description": "GET_NUMBER_OF_PLAYERS()"
    },
    "GET_PLAYER_TEAM": {
      "prefix": "GET_PLAYER_TEAM()",
      "body": ["GET_PLAYER_TEAM(${1:Player player})"],
      "description": "GET_PLAYER_TEAM()"
    },
    "SET_PLAYER_TEAM": {
      "prefix": "SET_PLAYER_TEAM()",
      "body": ["SET_PLAYER_TEAM(${1:Player player}, ${2:int team})"],
      "description": "SET_PLAYER_TEAM()"
    },
    "GET_NUMBER_OF_PLAYERS_IN_TEAM": {
      "prefix": "GET_NUMBER_OF_PLAYERS_IN_TEAM()",
      "body": ["GET_NUMBER_OF_PLAYERS_IN_TEAM(${1:int team})"],
      "description": "GET_NUMBER_OF_PLAYERS_IN_TEAM()"
    },
    "GET_WANTED_LEVEL_RADIUS": {
      "prefix": "GET_WANTED_LEVEL_RADIUS()",
      "body": ["GET_WANTED_LEVEL_RADIUS(${1:Player player})"],
      "description": "GET_WANTED_LEVEL_RADIUS()"
    },
    "GET_PLAYER_WANTED_CENTRE_POSITION": {
      "prefix": "GET_PLAYER_WANTED_CENTRE_POSITION()",
      "body": ["GET_PLAYER_WANTED_CENTRE_POSITION(${1:Player player})"],
      "description": "GET_PLAYER_WANTED_CENTRE_POSITION()"
    },
    "SET_PLAYER_WANTED_CENTRE_POSITION": {
      "prefix": "SET_PLAYER_WANTED_CENTRE_POSITION()",
      "body": [
        "SET_PLAYER_WANTED_CENTRE_POSITION(${1:Player player}, ${2:Vector3* position}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "SET_PLAYER_WANTED_CENTRE_POSITION()"
    },
    "GET_WANTED_LEVEL_THRESHOLD": {
      "prefix": "GET_WANTED_LEVEL_THRESHOLD()",
      "body": ["GET_WANTED_LEVEL_THRESHOLD(${1:int wantedLevel})"],
      "description": "GET_WANTED_LEVEL_THRESHOLD()"
    },
    "SET_PLAYER_WANTED_LEVEL": {
      "prefix": "SET_PLAYER_WANTED_LEVEL()",
      "body": [
        "SET_PLAYER_WANTED_LEVEL(${1:Player player}, ${2:int wantedLevel}, ${3:BOOL disableNoMission})"
      ],
      "description": "SET_PLAYER_WANTED_LEVEL()"
    },
    "SET_PLAYER_WANTED_LEVEL_NO_DROP": {
      "prefix": "SET_PLAYER_WANTED_LEVEL_NO_DROP()",
      "body": [
        "SET_PLAYER_WANTED_LEVEL_NO_DROP(${1:Player player}, ${2:int wantedLevel}, ${3:BOOL p2})"
      ],
      "description": "SET_PLAYER_WANTED_LEVEL_NO_DROP()"
    },
    "SET_PLAYER_WANTED_LEVEL_NOW": {
      "prefix": "SET_PLAYER_WANTED_LEVEL_NOW()",
      "body": ["SET_PLAYER_WANTED_LEVEL_NOW(${1:Player player}, ${2:BOOL p1})"],
      "description": "SET_PLAYER_WANTED_LEVEL_NOW()"
    },
    "ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP": {
      "prefix": "ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP()",
      "body": ["ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP(${1:Player player})"],
      "description": "ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP()"
    },
    "ARE_PLAYER_STARS_GREYED_OUT": {
      "prefix": "ARE_PLAYER_STARS_GREYED_OUT()",
      "body": ["ARE_PLAYER_STARS_GREYED_OUT(${1:Player player})"],
      "description": "ARE_PLAYER_STARS_GREYED_OUT()"
    },
    "IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS": {
      "prefix": "IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS()",
      "body": ["IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS(${1:Player player})"],
      "description": "IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS()"
    },
    "SET_DISPATCH_COPS_FOR_PLAYER": {
      "prefix": "SET_DISPATCH_COPS_FOR_PLAYER()",
      "body": [
        "SET_DISPATCH_COPS_FOR_PLAYER(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "SET_DISPATCH_COPS_FOR_PLAYER()"
    },
    "IS_PLAYER_WANTED_LEVEL_GREATER": {
      "prefix": "IS_PLAYER_WANTED_LEVEL_GREATER()",
      "body": [
        "IS_PLAYER_WANTED_LEVEL_GREATER(${1:Player player}, ${2:int wantedLevel})"
      ],
      "description": "IS_PLAYER_WANTED_LEVEL_GREATER()"
    },
    "CLEAR_PLAYER_WANTED_LEVEL": {
      "prefix": "CLEAR_PLAYER_WANTED_LEVEL()",
      "body": ["CLEAR_PLAYER_WANTED_LEVEL(${1:Player player})"],
      "description": "CLEAR_PLAYER_WANTED_LEVEL()"
    },
    "IS_PLAYER_DEAD": {
      "prefix": "IS_PLAYER_DEAD()",
      "body": ["IS_PLAYER_DEAD(${1:Player player})"],
      "description": "IS_PLAYER_DEAD()"
    },
    "IS_PLAYER_PRESSING_HORN": {
      "prefix": "IS_PLAYER_PRESSING_HORN()",
      "body": ["IS_PLAYER_PRESSING_HORN(${1:Player player})"],
      "description": "IS_PLAYER_PRESSING_HORN()"
    },
    "SET_PLAYER_CONTROL": {
      "prefix": "SET_PLAYER_CONTROL()",
      "body": [
        "SET_PLAYER_CONTROL(${1:Player player}, ${2:BOOL bHasControl}, ${3:int flags})"
      ],
      "description": "SET_PLAYER_CONTROL()"
    },
    "GET_PLAYER_WANTED_LEVEL": {
      "prefix": "GET_PLAYER_WANTED_LEVEL()",
      "body": ["GET_PLAYER_WANTED_LEVEL(${1:Player player})"],
      "description": "GET_PLAYER_WANTED_LEVEL()"
    },
    "SET_MAX_WANTED_LEVEL": {
      "prefix": "SET_MAX_WANTED_LEVEL()",
      "body": ["SET_MAX_WANTED_LEVEL(${1:int maxWantedLevel})"],
      "description": "SET_MAX_WANTED_LEVEL()"
    },
    "SET_POLICE_RADAR_BLIPS": {
      "prefix": "SET_POLICE_RADAR_BLIPS()",
      "body": ["SET_POLICE_RADAR_BLIPS(${1:BOOL toggle})"],
      "description": "SET_POLICE_RADAR_BLIPS()"
    },
    "SET_POLICE_IGNORE_PLAYER": {
      "prefix": "SET_POLICE_IGNORE_PLAYER()",
      "body": ["SET_POLICE_IGNORE_PLAYER(${1:Player player}, ${2:BOOL toggle})"],
      "description": "SET_POLICE_IGNORE_PLAYER()"
    },
    "IS_PLAYER_PLAYING": {
      "prefix": "IS_PLAYER_PLAYING()",
      "body": ["IS_PLAYER_PLAYING(${1:Player player})"],
      "description": "IS_PLAYER_PLAYING()"
    },
    "SET_EVERYONE_IGNORE_PLAYER": {
      "prefix": "SET_EVERYONE_IGNORE_PLAYER()",
      "body": [
        "SET_EVERYONE_IGNORE_PLAYER(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "SET_EVERYONE_IGNORE_PLAYER()"
    },
    "SET_ALL_RANDOM_PEDS_FLEE": {
      "prefix": "SET_ALL_RANDOM_PEDS_FLEE()",
      "body": ["SET_ALL_RANDOM_PEDS_FLEE(${1:Player player}, ${2:BOOL toggle})"],
      "description": "SET_ALL_RANDOM_PEDS_FLEE()"
    },
    "SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME": {
      "prefix": "SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME()",
      "body": ["SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(${1:Player player})"],
      "description": "SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME()"
    },
    "SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE": {
      "prefix": "SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE()",
      "body": [
        "SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE()"
    },
    "SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME": {
      "prefix": "SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME()",
      "body": ["SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME(${1:Player player})"],
      "description": "SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME()"
    },
    "SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME": {
      "prefix": "SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME()",
      "body": [
        "SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME(${1:Player player})"
      ],
      "description": "SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME()"
    },
    "SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS": {
      "prefix": "SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS()",
      "body": [
        "SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS()"
    },
    "SET_WANTED_LEVEL_MULTIPLIER": {
      "prefix": "SET_WANTED_LEVEL_MULTIPLIER()",
      "body": ["SET_WANTED_LEVEL_MULTIPLIER(${1:float multiplier})"],
      "description": "SET_WANTED_LEVEL_MULTIPLIER()"
    },
    "SET_WANTED_LEVEL_DIFFICULTY": {
      "prefix": "SET_WANTED_LEVEL_DIFFICULTY()",
      "body": [
        "SET_WANTED_LEVEL_DIFFICULTY(${1:Player player}, ${2:float difficulty})"
      ],
      "description": "SET_WANTED_LEVEL_DIFFICULTY()"
    },
    "RESET_WANTED_LEVEL_DIFFICULTY": {
      "prefix": "RESET_WANTED_LEVEL_DIFFICULTY()",
      "body": ["RESET_WANTED_LEVEL_DIFFICULTY(${1:Player player})"],
      "description": "RESET_WANTED_LEVEL_DIFFICULTY()"
    },
    "GET_WANTED_LEVEL_TIME_TO_ESCAPE": {
      "prefix": "GET_WANTED_LEVEL_TIME_TO_ESCAPE()",
      "body": ["GET_WANTED_LEVEL_TIME_TO_ESCAPE()"],
      "description": "GET_WANTED_LEVEL_TIME_TO_ESCAPE()"
    },
    "SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME": {
      "prefix": "SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME()",
      "body": [
        "SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(${1:Player player}, ${2:int wantedLevel}, ${3:int lossTime})"
      ],
      "description": "SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME()"
    },
    "RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME": {
      "prefix": "RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME()",
      "body": ["RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(${1:Player player})"],
      "description": "RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME()"
    },
    "START_FIRING_AMNESTY": {
      "prefix": "START_FIRING_AMNESTY()",
      "body": ["START_FIRING_AMNESTY(${1:int duration})"],
      "description": "START_FIRING_AMNESTY()"
    },
    "REPORT_CRIME": {
      "prefix": "REPORT_CRIME()",
      "body": [
        "REPORT_CRIME(${1:Player player}, ${2:int crimeType}, ${3:int wantedLvlThresh})"
      ],
      "description": "REPORT_CRIME()"
    },
    "SUPPRESS_CRIME_THIS_FRAME": {
      "prefix": "SUPPRESS_CRIME_THIS_FRAME()",
      "body": [
        "SUPPRESS_CRIME_THIS_FRAME(${1:Player player}, ${2:int crimeType})"
      ],
      "description": "SUPPRESS_CRIME_THIS_FRAME()"
    },
    "UPDATE_WANTED_POSITION_THIS_FRAME": {
      "prefix": "UPDATE_WANTED_POSITION_THIS_FRAME()",
      "body": ["UPDATE_WANTED_POSITION_THIS_FRAME(${1:Player player})"],
      "description": "UPDATE_WANTED_POSITION_THIS_FRAME()"
    },
    "SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME": {
      "prefix": "SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME()",
      "body": [
        "SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME(${1:Player player})"
      ],
      "description": "SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME()"
    },
    "ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME": {
      "prefix": "ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME()",
      "body": [
        "ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME(${1:Player player}, ${2:Any p1})"
      ],
      "description": "ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME()"
    },
    "FORCE_START_HIDDEN_EVASION": {
      "prefix": "FORCE_START_HIDDEN_EVASION()",
      "body": ["FORCE_START_HIDDEN_EVASION(${1:Player player})"],
      "description": "FORCE_START_HIDDEN_EVASION()"
    },
    "SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME": {
      "prefix": "SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME()",
      "body": [
        "SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME(${1:Player player})"
      ],
      "description": "SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME()"
    },
    "REPORT_POLICE_SPOTTED_PLAYER": {
      "prefix": "REPORT_POLICE_SPOTTED_PLAYER()",
      "body": ["REPORT_POLICE_SPOTTED_PLAYER(${1:Player player})"],
      "description": "REPORT_POLICE_SPOTTED_PLAYER()"
    },
    "SET_LAW_RESPONSE_DELAY_OVERRIDE": {
      "prefix": "SET_LAW_RESPONSE_DELAY_OVERRIDE()",
      "body": ["SET_LAW_RESPONSE_DELAY_OVERRIDE(${1:float p0})"],
      "description": "SET_LAW_RESPONSE_DELAY_OVERRIDE()"
    },
    "RESET_LAW_RESPONSE_DELAY_OVERRIDE": {
      "prefix": "RESET_LAW_RESPONSE_DELAY_OVERRIDE()",
      "body": ["RESET_LAW_RESPONSE_DELAY_OVERRIDE()"],
      "description": "RESET_LAW_RESPONSE_DELAY_OVERRIDE()"
    },
    "CAN_PLAYER_START_MISSION": {
      "prefix": "CAN_PLAYER_START_MISSION()",
      "body": ["CAN_PLAYER_START_MISSION(${1:Player player})"],
      "description": "CAN_PLAYER_START_MISSION()"
    },
    "IS_PLAYER_READY_FOR_CUTSCENE": {
      "prefix": "IS_PLAYER_READY_FOR_CUTSCENE()",
      "body": ["IS_PLAYER_READY_FOR_CUTSCENE(${1:Player player})"],
      "description": "IS_PLAYER_READY_FOR_CUTSCENE()"
    },
    "IS_PLAYER_TARGETTING_ENTITY": {
      "prefix": "IS_PLAYER_TARGETTING_ENTITY()",
      "body": [
        "IS_PLAYER_TARGETTING_ENTITY(${1:Player player}, ${2:Entity entity})"
      ],
      "description": "IS_PLAYER_TARGETTING_ENTITY()"
    },
    "GET_PLAYER_TARGET_ENTITY": {
      "prefix": "GET_PLAYER_TARGET_ENTITY()",
      "body": [
        "GET_PLAYER_TARGET_ENTITY(${1:Player player}, ${2:Entity* entity})"
      ],
      "description": "GET_PLAYER_TARGET_ENTITY()"
    },
    "IS_PLAYER_FREE_AIMING": {
      "prefix": "IS_PLAYER_FREE_AIMING()",
      "body": ["IS_PLAYER_FREE_AIMING(${1:Player player})"],
      "description": "IS_PLAYER_FREE_AIMING()"
    },
    "IS_PLAYER_FREE_AIMING_AT_ENTITY": {
      "prefix": "IS_PLAYER_FREE_AIMING_AT_ENTITY()",
      "body": [
        "IS_PLAYER_FREE_AIMING_AT_ENTITY(${1:Player player}, ${2:Entity entity})"
      ],
      "description": "IS_PLAYER_FREE_AIMING_AT_ENTITY()"
    },
    "GET_ENTITY_PLAYER_IS_FREE_AIMING_AT": {
      "prefix": "GET_ENTITY_PLAYER_IS_FREE_AIMING_AT()",
      "body": [
        "GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(${1:Player player}, ${2:Entity* entity})"
      ],
      "description": "GET_ENTITY_PLAYER_IS_FREE_AIMING_AT()"
    },
    "SET_PLAYER_LOCKON_RANGE_OVERRIDE": {
      "prefix": "SET_PLAYER_LOCKON_RANGE_OVERRIDE()",
      "body": [
        "SET_PLAYER_LOCKON_RANGE_OVERRIDE(${1:Player player}, ${2:float range})"
      ],
      "description": "SET_PLAYER_LOCKON_RANGE_OVERRIDE()"
    },
    "SET_PLAYER_CAN_DO_DRIVE_BY": {
      "prefix": "SET_PLAYER_CAN_DO_DRIVE_BY()",
      "body": [
        "SET_PLAYER_CAN_DO_DRIVE_BY(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "SET_PLAYER_CAN_DO_DRIVE_BY()"
    },
    "SET_PLAYER_CAN_BE_HASSLED_BY_GANGS": {
      "prefix": "SET_PLAYER_CAN_BE_HASSLED_BY_GANGS()",
      "body": [
        "SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "SET_PLAYER_CAN_BE_HASSLED_BY_GANGS()"
    },
    "SET_PLAYER_CAN_USE_COVER": {
      "prefix": "SET_PLAYER_CAN_USE_COVER()",
      "body": ["SET_PLAYER_CAN_USE_COVER(${1:Player player}, ${2:BOOL toggle})"],
      "description": "SET_PLAYER_CAN_USE_COVER()"
    },
    "GET_MAX_WANTED_LEVEL": {
      "prefix": "GET_MAX_WANTED_LEVEL()",
      "body": ["GET_MAX_WANTED_LEVEL()"],
      "description": "GET_MAX_WANTED_LEVEL()"
    },
    "IS_PLAYER_TARGETTING_ANYTHING": {
      "prefix": "IS_PLAYER_TARGETTING_ANYTHING()",
      "body": ["IS_PLAYER_TARGETTING_ANYTHING(${1:Player player})"],
      "description": "IS_PLAYER_TARGETTING_ANYTHING()"
    },
    "SET_PLAYER_SPRINT": {
      "prefix": "SET_PLAYER_SPRINT()",
      "body": ["SET_PLAYER_SPRINT(${1:Player player}, ${2:BOOL toggle})"],
      "description": "SET_PLAYER_SPRINT()"
    },
    "RESET_PLAYER_STAMINA": {
      "prefix": "RESET_PLAYER_STAMINA()",
      "body": ["RESET_PLAYER_STAMINA(${1:Player player})"],
      "description": "RESET_PLAYER_STAMINA()"
    },
    "RESTORE_PLAYER_STAMINA": {
      "prefix": "RESTORE_PLAYER_STAMINA()",
      "body": ["RESTORE_PLAYER_STAMINA(${1:Player player}, ${2:float p1})"],
      "description": "RESTORE_PLAYER_STAMINA()"
    },
    "GET_PLAYER_SPRINT_STAMINA_REMAINING": {
      "prefix": "GET_PLAYER_SPRINT_STAMINA_REMAINING()",
      "body": ["GET_PLAYER_SPRINT_STAMINA_REMAINING(${1:Player player})"],
      "description": "GET_PLAYER_SPRINT_STAMINA_REMAINING()"
    },
    "GET_PLAYER_SPRINT_TIME_REMAINING": {
      "prefix": "GET_PLAYER_SPRINT_TIME_REMAINING()",
      "body": ["GET_PLAYER_SPRINT_TIME_REMAINING(${1:Player player})"],
      "description": "GET_PLAYER_SPRINT_TIME_REMAINING()"
    },
    "GET_PLAYER_UNDERWATER_TIME_REMAINING": {
      "prefix": "GET_PLAYER_UNDERWATER_TIME_REMAINING()",
      "body": ["GET_PLAYER_UNDERWATER_TIME_REMAINING(${1:Player player})"],
      "description": "GET_PLAYER_UNDERWATER_TIME_REMAINING()"
    },
    "SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING": {
      "prefix": "SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING()",
      "body": [
        "SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING(${1:Player player}, ${2:float time})"
      ],
      "description": "SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING()"
    },
    "GET_PLAYER_GROUP": {
      "prefix": "GET_PLAYER_GROUP()",
      "body": ["GET_PLAYER_GROUP(${1:Player player})"],
      "description": "GET_PLAYER_GROUP()"
    },
    "GET_PLAYER_MAX_ARMOUR": {
      "prefix": "GET_PLAYER_MAX_ARMOUR()",
      "body": ["GET_PLAYER_MAX_ARMOUR(${1:Player player})"],
      "description": "GET_PLAYER_MAX_ARMOUR()"
    },
    "IS_PLAYER_CONTROL_ON": {
      "prefix": "IS_PLAYER_CONTROL_ON()",
      "body": ["IS_PLAYER_CONTROL_ON(${1:Player player})"],
      "description": "IS_PLAYER_CONTROL_ON()"
    },
    "GET_ARE_CAMERA_CONTROLS_DISABLED": {
      "prefix": "GET_ARE_CAMERA_CONTROLS_DISABLED()",
      "body": ["GET_ARE_CAMERA_CONTROLS_DISABLED()"],
      "description": "GET_ARE_CAMERA_CONTROLS_DISABLED()"
    },
    "IS_PLAYER_SCRIPT_CONTROL_ON": {
      "prefix": "IS_PLAYER_SCRIPT_CONTROL_ON()",
      "body": ["IS_PLAYER_SCRIPT_CONTROL_ON(${1:Player player})"],
      "description": "IS_PLAYER_SCRIPT_CONTROL_ON()"
    },
    "IS_PLAYER_CLIMBING": {
      "prefix": "IS_PLAYER_CLIMBING()",
      "body": ["IS_PLAYER_CLIMBING(${1:Player player})"],
      "description": "IS_PLAYER_CLIMBING()"
    },
    "IS_PLAYER_BEING_ARRESTED": {
      "prefix": "IS_PLAYER_BEING_ARRESTED()",
      "body": [
        "IS_PLAYER_BEING_ARRESTED(${1:Player player}, ${2:BOOL atArresting})"
      ],
      "description": "IS_PLAYER_BEING_ARRESTED()"
    },
    "RESET_PLAYER_ARREST_STATE": {
      "prefix": "RESET_PLAYER_ARREST_STATE()",
      "body": ["RESET_PLAYER_ARREST_STATE(${1:Player player})"],
      "description": "RESET_PLAYER_ARREST_STATE()"
    },
    "GET_PLAYERS_LAST_VEHICLE": {
      "prefix": "GET_PLAYERS_LAST_VEHICLE()",
      "body": ["GET_PLAYERS_LAST_VEHICLE()"],
      "description": "GET_PLAYERS_LAST_VEHICLE()"
    },
    "GET_PLAYER_INDEX": {
      "prefix": "GET_PLAYER_INDEX()",
      "body": ["GET_PLAYER_INDEX()"],
      "description": "GET_PLAYER_INDEX()"
    },
    "INT_TO_PLAYERINDEX": {
      "prefix": "INT_TO_PLAYERINDEX()",
      "body": ["INT_TO_PLAYERINDEX(${1:int value})"],
      "description": "INT_TO_PLAYERINDEX()"
    },
    "INT_TO_PARTICIPANTINDEX": {
      "prefix": "INT_TO_PARTICIPANTINDEX()",
      "body": ["INT_TO_PARTICIPANTINDEX(${1:int value})"],
      "description": "INT_TO_PARTICIPANTINDEX()"
    },
    "GET_TIME_SINCE_PLAYER_HIT_VEHICLE": {
      "prefix": "GET_TIME_SINCE_PLAYER_HIT_VEHICLE()",
      "body": ["GET_TIME_SINCE_PLAYER_HIT_VEHICLE(${1:Player player})"],
      "description": "GET_TIME_SINCE_PLAYER_HIT_VEHICLE()"
    },
    "GET_TIME_SINCE_PLAYER_HIT_PED": {
      "prefix": "GET_TIME_SINCE_PLAYER_HIT_PED()",
      "body": ["GET_TIME_SINCE_PLAYER_HIT_PED(${1:Player player})"],
      "description": "GET_TIME_SINCE_PLAYER_HIT_PED()"
    },
    "GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT": {
      "prefix": "GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT()",
      "body": ["GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT(${1:Player player})"],
      "description": "GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT()"
    },
    "GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC": {
      "prefix": "GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC()",
      "body": ["GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC(${1:Player player})"],
      "description": "GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC()"
    },
    "IS_PLAYER_FREE_FOR_AMBIENT_TASK": {
      "prefix": "IS_PLAYER_FREE_FOR_AMBIENT_TASK()",
      "body": ["IS_PLAYER_FREE_FOR_AMBIENT_TASK(${1:Player player})"],
      "description": "IS_PLAYER_FREE_FOR_AMBIENT_TASK()"
    },
    "PLAYER_ID": {
      "prefix": "PLAYER_ID()",
      "body": ["PLAYER_ID()"],
      "description": "PLAYER_ID()"
    },
    "PLAYER_PED_ID": {
      "prefix": "PLAYER_PED_ID()",
      "body": ["PLAYER_PED_ID()"],
      "description": "PLAYER_PED_ID()"
    },
    "NETWORK_PLAYER_ID_TO_INT": {
      "prefix": "NETWORK_PLAYER_ID_TO_INT()",
      "body": ["NETWORK_PLAYER_ID_TO_INT()"],
      "description": "NETWORK_PLAYER_ID_TO_INT()"
    },
    "HAS_FORCE_CLEANUP_OCCURRED": {
      "prefix": "HAS_FORCE_CLEANUP_OCCURRED()",
      "body": ["HAS_FORCE_CLEANUP_OCCURRED(${1:int cleanupFlags})"],
      "description": "HAS_FORCE_CLEANUP_OCCURRED()"
    },
    "FORCE_CLEANUP": {
      "prefix": "FORCE_CLEANUP()",
      "body": ["FORCE_CLEANUP(${1:int cleanupFlags})"],
      "description": "FORCE_CLEANUP()"
    },
    "FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME": {
      "prefix": "FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME()",
      "body": [
        "FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(${1:const char* name}, ${2:int cleanupFlags})"
      ],
      "description": "FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME()"
    },
    "FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID": {
      "prefix": "FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID()",
      "body": [
        "FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(${1:int id}, ${2:int cleanupFlags})"
      ],
      "description": "FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID()"
    },
    "GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP": {
      "prefix": "GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP()",
      "body": ["GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP()"],
      "description": "GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP()"
    },
    "SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE": {
      "prefix": "SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE()",
      "body": [
        "SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(${1:Player player}, ${2:Vehicle vehicle})"
      ],
      "description": "SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE()"
    },
    "SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE": {
      "prefix": "SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE()",
      "body": ["SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(${1:Player player})"],
      "description": "SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE()"
    },
    "GIVE_ACHIEVEMENT_TO_PLAYER": {
      "prefix": "GIVE_ACHIEVEMENT_TO_PLAYER()",
      "body": ["GIVE_ACHIEVEMENT_TO_PLAYER(${1:int achievementId})"],
      "description": "GIVE_ACHIEVEMENT_TO_PLAYER()"
    },
    "SET_ACHIEVEMENT_PROGRESS": {
      "prefix": "SET_ACHIEVEMENT_PROGRESS()",
      "body": [
        "SET_ACHIEVEMENT_PROGRESS(${1:int achievementId}, ${2:int progress})"
      ],
      "description": "SET_ACHIEVEMENT_PROGRESS()"
    },
    "GET_ACHIEVEMENT_PROGRESS": {
      "prefix": "GET_ACHIEVEMENT_PROGRESS()",
      "body": ["GET_ACHIEVEMENT_PROGRESS(${1:int achievementId})"],
      "description": "GET_ACHIEVEMENT_PROGRESS()"
    },
    "HAS_ACHIEVEMENT_BEEN_PASSED": {
      "prefix": "HAS_ACHIEVEMENT_BEEN_PASSED()",
      "body": ["HAS_ACHIEVEMENT_BEEN_PASSED(${1:int achievementId})"],
      "description": "HAS_ACHIEVEMENT_BEEN_PASSED()"
    },
    "IS_PLAYER_ONLINE": {
      "prefix": "IS_PLAYER_ONLINE()",
      "body": ["IS_PLAYER_ONLINE()"],
      "description": "IS_PLAYER_ONLINE()"
    },
    "IS_PLAYER_LOGGING_IN_NP": {
      "prefix": "IS_PLAYER_LOGGING_IN_NP()",
      "body": ["IS_PLAYER_LOGGING_IN_NP()"],
      "description": "IS_PLAYER_LOGGING_IN_NP()"
    },
    "DISPLAY_SYSTEM_SIGNIN_UI": {
      "prefix": "DISPLAY_SYSTEM_SIGNIN_UI()",
      "body": ["DISPLAY_SYSTEM_SIGNIN_UI(${1:BOOL p0})"],
      "description": "DISPLAY_SYSTEM_SIGNIN_UI()"
    },
    "IS_SYSTEM_UI_BEING_DISPLAYED": {
      "prefix": "IS_SYSTEM_UI_BEING_DISPLAYED()",
      "body": ["IS_SYSTEM_UI_BEING_DISPLAYED()"],
      "description": "IS_SYSTEM_UI_BEING_DISPLAYED()"
    },
    "SET_PLAYER_INVINCIBLE": {
      "prefix": "SET_PLAYER_INVINCIBLE()",
      "body": ["SET_PLAYER_INVINCIBLE(${1:Player player}, ${2:BOOL toggle})"],
      "description": "SET_PLAYER_INVINCIBLE()"
    },
    "GET_PLAYER_INVINCIBLE": {
      "prefix": "GET_PLAYER_INVINCIBLE()",
      "body": ["GET_PLAYER_INVINCIBLE(${1:Player player})"],
      "description": "GET_PLAYER_INVINCIBLE()"
    },
    "GET_PLAYER_DEBUG_INVINCIBLE": {
      "prefix": "GET_PLAYER_DEBUG_INVINCIBLE()",
      "body": ["GET_PLAYER_DEBUG_INVINCIBLE(${1:Player player})"],
      "description": "GET_PLAYER_DEBUG_INVINCIBLE()"
    },
    "SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS": {
      "prefix": "SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS()",
      "body": [
        "SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS()"
    },
    "SET_PLAYER_CAN_COLLECT_DROPPED_MONEY": {
      "prefix": "SET_PLAYER_CAN_COLLECT_DROPPED_MONEY()",
      "body": [
        "SET_PLAYER_CAN_COLLECT_DROPPED_MONEY(${1:Player player}, ${2:BOOL p1})"
      ],
      "description": "SET_PLAYER_CAN_COLLECT_DROPPED_MONEY()"
    },
    "REMOVE_PLAYER_HELMET": {
      "prefix": "REMOVE_PLAYER_HELMET()",
      "body": ["REMOVE_PLAYER_HELMET(${1:Player player}, ${2:BOOL p2})"],
      "description": "REMOVE_PLAYER_HELMET()"
    },
    "GIVE_PLAYER_RAGDOLL_CONTROL": {
      "prefix": "GIVE_PLAYER_RAGDOLL_CONTROL()",
      "body": [
        "GIVE_PLAYER_RAGDOLL_CONTROL(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "GIVE_PLAYER_RAGDOLL_CONTROL()"
    },
    "SET_PLAYER_LOCKON": {
      "prefix": "SET_PLAYER_LOCKON()",
      "body": ["SET_PLAYER_LOCKON(${1:Player player}, ${2:BOOL toggle})"],
      "description": "SET_PLAYER_LOCKON()"
    },
    "SET_PLAYER_TARGETING_MODE": {
      "prefix": "SET_PLAYER_TARGETING_MODE()",
      "body": ["SET_PLAYER_TARGETING_MODE(${1:int targetMode})"],
      "description": "SET_PLAYER_TARGETING_MODE()"
    },
    "GET_PLAYER_TARGETING_MODE": {
      "prefix": "GET_PLAYER_TARGETING_MODE()",
      "body": ["GET_PLAYER_TARGETING_MODE()"],
      "description": "GET_PLAYER_TARGETING_MODE()"
    },
    "SET_PLAYER_TARGET_LEVEL": {
      "prefix": "SET_PLAYER_TARGET_LEVEL()",
      "body": ["SET_PLAYER_TARGET_LEVEL(${1:int targetLevel})"],
      "description": "SET_PLAYER_TARGET_LEVEL()"
    },
    "GET_IS_USING_FPS_THIRD_PERSON_COVER": {
      "prefix": "GET_IS_USING_FPS_THIRD_PERSON_COVER()",
      "body": ["GET_IS_USING_FPS_THIRD_PERSON_COVER()"],
      "description": "GET_IS_USING_FPS_THIRD_PERSON_COVER()"
    },
    "GET_IS_USING_HOOD_CAMERA": {
      "prefix": "GET_IS_USING_HOOD_CAMERA()",
      "body": ["GET_IS_USING_HOOD_CAMERA()"],
      "description": "GET_IS_USING_HOOD_CAMERA()"
    },
    "CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED": {
      "prefix": "CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED()",
      "body": ["CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(${1:Player player})"],
      "description": "CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED()"
    },
    "HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED": {
      "prefix": "HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED()",
      "body": ["HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(${1:Player player})"],
      "description": "HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED()"
    },
    "CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED": {
      "prefix": "CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED()",
      "body": [
        "CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(${1:Player player})"
      ],
      "description": "CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED()"
    },
    "HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED": {
      "prefix": "HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED()",
      "body": [
        "HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(${1:Player player})"
      ],
      "description": "HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED()"
    },
    "SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE": {
      "prefix": "SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE()",
      "body": [
        "SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(${1:Player player}, ${2:float multiplier})"
      ],
      "description": "SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE()"
    },
    "SET_SWIM_MULTIPLIER_FOR_PLAYER": {
      "prefix": "SET_SWIM_MULTIPLIER_FOR_PLAYER()",
      "body": [
        "SET_SWIM_MULTIPLIER_FOR_PLAYER(${1:Player player}, ${2:float multiplier})"
      ],
      "description": "SET_SWIM_MULTIPLIER_FOR_PLAYER()"
    },
    "SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER": {
      "prefix": "SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER()",
      "body": [
        "SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(${1:Player player}, ${2:float multiplier})"
      ],
      "description": "SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER()"
    },
    "GET_TIME_SINCE_LAST_ARREST": {
      "prefix": "GET_TIME_SINCE_LAST_ARREST()",
      "body": ["GET_TIME_SINCE_LAST_ARREST()"],
      "description": "GET_TIME_SINCE_LAST_ARREST()"
    },
    "GET_TIME_SINCE_LAST_DEATH": {
      "prefix": "GET_TIME_SINCE_LAST_DEATH()",
      "body": ["GET_TIME_SINCE_LAST_DEATH()"],
      "description": "GET_TIME_SINCE_LAST_DEATH()"
    },
    "ASSISTED_MOVEMENT_CLOSE_ROUTE": {
      "prefix": "ASSISTED_MOVEMENT_CLOSE_ROUTE()",
      "body": ["ASSISTED_MOVEMENT_CLOSE_ROUTE()"],
      "description": "ASSISTED_MOVEMENT_CLOSE_ROUTE()"
    },
    "ASSISTED_MOVEMENT_FLUSH_ROUTE": {
      "prefix": "ASSISTED_MOVEMENT_FLUSH_ROUTE()",
      "body": ["ASSISTED_MOVEMENT_FLUSH_ROUTE()"],
      "description": "ASSISTED_MOVEMENT_FLUSH_ROUTE()"
    },
    "SET_PLAYER_FORCED_AIM": {
      "prefix": "SET_PLAYER_FORCED_AIM()",
      "body": ["SET_PLAYER_FORCED_AIM(${1:Player player}, ${2:BOOL toggle})"],
      "description": "SET_PLAYER_FORCED_AIM()"
    },
    "SET_PLAYER_FORCED_ZOOM": {
      "prefix": "SET_PLAYER_FORCED_ZOOM()",
      "body": ["SET_PLAYER_FORCED_ZOOM(${1:Player player}, ${2:BOOL toggle})"],
      "description": "SET_PLAYER_FORCED_ZOOM()"
    },
    "SET_PLAYER_FORCE_SKIP_AIM_INTRO": {
      "prefix": "SET_PLAYER_FORCE_SKIP_AIM_INTRO()",
      "body": [
        "SET_PLAYER_FORCE_SKIP_AIM_INTRO(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "SET_PLAYER_FORCE_SKIP_AIM_INTRO()"
    },
    "DISABLE_PLAYER_FIRING": {
      "prefix": "DISABLE_PLAYER_FIRING()",
      "body": ["DISABLE_PLAYER_FIRING(${1:Player player}, ${2:BOOL toggle})"],
      "description": "DISABLE_PLAYER_FIRING()"
    },
    "DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN": {
      "prefix": "DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN()",
      "body": ["DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN()"],
      "description": "DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN()"
    },
    "SET_DISABLE_AMBIENT_MELEE_MOVE": {
      "prefix": "SET_DISABLE_AMBIENT_MELEE_MOVE()",
      "body": [
        "SET_DISABLE_AMBIENT_MELEE_MOVE(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "SET_DISABLE_AMBIENT_MELEE_MOVE()"
    },
    "SET_PLAYER_MAX_ARMOUR": {
      "prefix": "SET_PLAYER_MAX_ARMOUR()",
      "body": ["SET_PLAYER_MAX_ARMOUR(${1:Player player}, ${2:int value})"],
      "description": "SET_PLAYER_MAX_ARMOUR()"
    },
    "SPECIAL_ABILITY_ACTIVATE": {
      "prefix": "SPECIAL_ABILITY_ACTIVATE()",
      "body": ["SPECIAL_ABILITY_ACTIVATE(${1:Player player}, ${2:int p1})"],
      "description": "SPECIAL_ABILITY_ACTIVATE()"
    },
    "SET_SPECIAL_ABILITY_MP": {
      "prefix": "SET_SPECIAL_ABILITY_MP()",
      "body": [
        "SET_SPECIAL_ABILITY_MP(${1:Player player}, ${2:int p1}, ${3:Any p2})"
      ],
      "description": "SET_SPECIAL_ABILITY_MP()"
    },
    "SPECIAL_ABILITY_DEACTIVATE_MP": {
      "prefix": "SPECIAL_ABILITY_DEACTIVATE_MP()",
      "body": ["SPECIAL_ABILITY_DEACTIVATE_MP(${1:Player player}, ${2:int p1})"],
      "description": "SPECIAL_ABILITY_DEACTIVATE_MP()"
    },
    "SPECIAL_ABILITY_DEACTIVATE": {
      "prefix": "SPECIAL_ABILITY_DEACTIVATE()",
      "body": ["SPECIAL_ABILITY_DEACTIVATE(${1:Player player}, ${2:Any p1})"],
      "description": "SPECIAL_ABILITY_DEACTIVATE()"
    },
    "SPECIAL_ABILITY_DEACTIVATE_FAST": {
      "prefix": "SPECIAL_ABILITY_DEACTIVATE_FAST()",
      "body": [
        "SPECIAL_ABILITY_DEACTIVATE_FAST(${1:Player player}, ${2:Any p1})"
      ],
      "description": "SPECIAL_ABILITY_DEACTIVATE_FAST()"
    },
    "SPECIAL_ABILITY_RESET": {
      "prefix": "SPECIAL_ABILITY_RESET()",
      "body": ["SPECIAL_ABILITY_RESET(${1:Player player}, ${2:Any p1})"],
      "description": "SPECIAL_ABILITY_RESET()"
    },
    "SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED": {
      "prefix": "SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED()",
      "body": [
        "SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED(${1:Player player}, ${2:Any p1})"
      ],
      "description": "SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED()"
    },
    "SPECIAL_ABILITY_CHARGE_SMALL": {
      "prefix": "SPECIAL_ABILITY_CHARGE_SMALL()",
      "body": [
        "SPECIAL_ABILITY_CHARGE_SMALL(${1:Player player}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "SPECIAL_ABILITY_CHARGE_SMALL()"
    },
    "SPECIAL_ABILITY_CHARGE_MEDIUM": {
      "prefix": "SPECIAL_ABILITY_CHARGE_MEDIUM()",
      "body": [
        "SPECIAL_ABILITY_CHARGE_MEDIUM(${1:Player player}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "SPECIAL_ABILITY_CHARGE_MEDIUM()"
    },
    "SPECIAL_ABILITY_CHARGE_LARGE": {
      "prefix": "SPECIAL_ABILITY_CHARGE_LARGE()",
      "body": [
        "SPECIAL_ABILITY_CHARGE_LARGE(${1:Player player}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "SPECIAL_ABILITY_CHARGE_LARGE()"
    },
    "SPECIAL_ABILITY_CHARGE_CONTINUOUS": {
      "prefix": "SPECIAL_ABILITY_CHARGE_CONTINUOUS()",
      "body": [
        "SPECIAL_ABILITY_CHARGE_CONTINUOUS(${1:Player player}, ${2:Ped p1}, ${3:Any p2})"
      ],
      "description": "SPECIAL_ABILITY_CHARGE_CONTINUOUS()"
    },
    "SPECIAL_ABILITY_CHARGE_ABSOLUTE": {
      "prefix": "SPECIAL_ABILITY_CHARGE_ABSOLUTE()",
      "body": [
        "SPECIAL_ABILITY_CHARGE_ABSOLUTE(${1:Player player}, ${2:int p1}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "SPECIAL_ABILITY_CHARGE_ABSOLUTE()"
    },
    "SPECIAL_ABILITY_CHARGE_NORMALIZED": {
      "prefix": "SPECIAL_ABILITY_CHARGE_NORMALIZED()",
      "body": [
        "SPECIAL_ABILITY_CHARGE_NORMALIZED(${1:Player player}, ${2:float normalizedValue}, ${3:BOOL p2}, ${4:Any p3})"
      ],
      "description": "SPECIAL_ABILITY_CHARGE_NORMALIZED()"
    },
    "SPECIAL_ABILITY_FILL_METER": {
      "prefix": "SPECIAL_ABILITY_FILL_METER()",
      "body": [
        "SPECIAL_ABILITY_FILL_METER(${1:Player player}, ${2:BOOL p1}, ${3:Any p2})"
      ],
      "description": "SPECIAL_ABILITY_FILL_METER()"
    },
    "SPECIAL_ABILITY_DEPLETE_METER": {
      "prefix": "SPECIAL_ABILITY_DEPLETE_METER()",
      "body": [
        "SPECIAL_ABILITY_DEPLETE_METER(${1:Player player}, ${2:BOOL p1}, ${3:Any p2})"
      ],
      "description": "SPECIAL_ABILITY_DEPLETE_METER()"
    },
    "SPECIAL_ABILITY_LOCK": {
      "prefix": "SPECIAL_ABILITY_LOCK()",
      "body": ["SPECIAL_ABILITY_LOCK(${1:Hash playerModel}, ${2:Any p1})"],
      "description": "SPECIAL_ABILITY_LOCK()"
    },
    "SPECIAL_ABILITY_UNLOCK": {
      "prefix": "SPECIAL_ABILITY_UNLOCK()",
      "body": ["SPECIAL_ABILITY_UNLOCK(${1:Hash playerModel}, ${2:Any p1})"],
      "description": "SPECIAL_ABILITY_UNLOCK()"
    },
    "IS_SPECIAL_ABILITY_UNLOCKED": {
      "prefix": "IS_SPECIAL_ABILITY_UNLOCKED()",
      "body": ["IS_SPECIAL_ABILITY_UNLOCKED(${1:Hash playerModel})"],
      "description": "IS_SPECIAL_ABILITY_UNLOCKED()"
    },
    "IS_SPECIAL_ABILITY_ACTIVE": {
      "prefix": "IS_SPECIAL_ABILITY_ACTIVE()",
      "body": ["IS_SPECIAL_ABILITY_ACTIVE(${1:Player player}, ${2:Any p1})"],
      "description": "IS_SPECIAL_ABILITY_ACTIVE()"
    },
    "IS_SPECIAL_ABILITY_METER_FULL": {
      "prefix": "IS_SPECIAL_ABILITY_METER_FULL()",
      "body": ["IS_SPECIAL_ABILITY_METER_FULL(${1:Player player}, ${2:Any p1})"],
      "description": "IS_SPECIAL_ABILITY_METER_FULL()"
    },
    "ENABLE_SPECIAL_ABILITY": {
      "prefix": "ENABLE_SPECIAL_ABILITY()",
      "body": [
        "ENABLE_SPECIAL_ABILITY(${1:Player player}, ${2:BOOL toggle}, ${3:Any p2})"
      ],
      "description": "ENABLE_SPECIAL_ABILITY()"
    },
    "IS_SPECIAL_ABILITY_ENABLED": {
      "prefix": "IS_SPECIAL_ABILITY_ENABLED()",
      "body": ["IS_SPECIAL_ABILITY_ENABLED(${1:Player player}, ${2:Any p1})"],
      "description": "IS_SPECIAL_ABILITY_ENABLED()"
    },
    "SET_SPECIAL_ABILITY_MULTIPLIER": {
      "prefix": "SET_SPECIAL_ABILITY_MULTIPLIER()",
      "body": ["SET_SPECIAL_ABILITY_MULTIPLIER(${1:float multiplier})"],
      "description": "SET_SPECIAL_ABILITY_MULTIPLIER()"
    },
    "UPDATE_SPECIAL_ABILITY_FROM_STAT": {
      "prefix": "UPDATE_SPECIAL_ABILITY_FROM_STAT()",
      "body": [
        "UPDATE_SPECIAL_ABILITY_FROM_STAT(${1:Player player}, ${2:Any p1})"
      ],
      "description": "UPDATE_SPECIAL_ABILITY_FROM_STAT()"
    },
    "GET_IS_PLAYER_DRIVING_ON_HIGHWAY": {
      "prefix": "GET_IS_PLAYER_DRIVING_ON_HIGHWAY()",
      "body": ["GET_IS_PLAYER_DRIVING_ON_HIGHWAY(${1:Player player})"],
      "description": "GET_IS_PLAYER_DRIVING_ON_HIGHWAY()"
    },
    "GET_IS_PLAYER_DRIVING_WRECKLESS": {
      "prefix": "GET_IS_PLAYER_DRIVING_WRECKLESS()",
      "body": [
        "GET_IS_PLAYER_DRIVING_WRECKLESS(${1:Player player}, ${2:int p1})"
      ],
      "description": "GET_IS_PLAYER_DRIVING_WRECKLESS()"
    },
    "GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER": {
      "prefix": "GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER()",
      "body": [
        "GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER(${1:Player player}, ${2:float p1})"
      ],
      "description": "GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER()"
    },
    "START_PLAYER_TELEPORT": {
      "prefix": "START_PLAYER_TELEPORT()",
      "body": [
        "START_PLAYER_TELEPORT(${1:Player player}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float heading}, ${6:BOOL p5}, ${7:BOOL findCollisionLand}, ${8:BOOL p7})"
      ],
      "description": "START_PLAYER_TELEPORT()"
    },
    "UPDATE_PLAYER_TELEPORT": {
      "prefix": "UPDATE_PLAYER_TELEPORT()",
      "body": ["UPDATE_PLAYER_TELEPORT(${1:Player player})"],
      "description": "UPDATE_PLAYER_TELEPORT()"
    },
    "STOP_PLAYER_TELEPORT": {
      "prefix": "STOP_PLAYER_TELEPORT()",
      "body": ["STOP_PLAYER_TELEPORT()"],
      "description": "STOP_PLAYER_TELEPORT()"
    },
    "IS_PLAYER_TELEPORT_ACTIVE": {
      "prefix": "IS_PLAYER_TELEPORT_ACTIVE()",
      "body": ["IS_PLAYER_TELEPORT_ACTIVE()"],
      "description": "IS_PLAYER_TELEPORT_ACTIVE()"
    },
    "GET_PLAYER_CURRENT_STEALTH_NOISE": {
      "prefix": "GET_PLAYER_CURRENT_STEALTH_NOISE()",
      "body": ["GET_PLAYER_CURRENT_STEALTH_NOISE(${1:Player player})"],
      "description": "GET_PLAYER_CURRENT_STEALTH_NOISE()"
    },
    "SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER": {
      "prefix": "SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER()",
      "body": [
        "SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(${1:Player player}, ${2:float regenRate})"
      ],
      "description": "SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER()"
    },
    "GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT": {
      "prefix": "GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT()",
      "body": ["GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(${1:Player player})"],
      "description": "GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT()"
    },
    "SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT": {
      "prefix": "SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT()",
      "body": [
        "SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(${1:Player player}, ${2:float limit})"
      ],
      "description": "SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT()"
    },
    "DISABLE_PLAYER_HEALTH_RECHARGE": {
      "prefix": "DISABLE_PLAYER_HEALTH_RECHARGE()",
      "body": ["DISABLE_PLAYER_HEALTH_RECHARGE(${1:Player player})"],
      "description": "DISABLE_PLAYER_HEALTH_RECHARGE()"
    },
    "SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE": {
      "prefix": "SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE()",
      "body": [
        "SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE(${1:Player player}, ${2:float p1})"
      ],
      "description": "SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE()"
    },
    "SET_PLAYER_WEAPON_DAMAGE_MODIFIER": {
      "prefix": "SET_PLAYER_WEAPON_DAMAGE_MODIFIER()",
      "body": [
        "SET_PLAYER_WEAPON_DAMAGE_MODIFIER(${1:Player player}, ${2:float modifier})"
      ],
      "description": "SET_PLAYER_WEAPON_DAMAGE_MODIFIER()"
    },
    "SET_PLAYER_WEAPON_DEFENSE_MODIFIER": {
      "prefix": "SET_PLAYER_WEAPON_DEFENSE_MODIFIER()",
      "body": [
        "SET_PLAYER_WEAPON_DEFENSE_MODIFIER(${1:Player player}, ${2:float modifier})"
      ],
      "description": "SET_PLAYER_WEAPON_DEFENSE_MODIFIER()"
    },
    "SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER": {
      "prefix": "SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER()",
      "body": [
        "SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER(${1:Player player}, ${2:float modifier})"
      ],
      "description": "SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER()"
    },
    "SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER": {
      "prefix": "SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER()",
      "body": [
        "SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(${1:Player player}, ${2:float modifier}, ${3:BOOL p2})"
      ],
      "description": "SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER()"
    },
    "SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER": {
      "prefix": "SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER()",
      "body": [
        "SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER(${1:Player player}, ${2:float modifier})"
      ],
      "description": "SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER()"
    },
    "SET_PLAYER_VEHICLE_DAMAGE_MODIFIER": {
      "prefix": "SET_PLAYER_VEHICLE_DAMAGE_MODIFIER()",
      "body": [
        "SET_PLAYER_VEHICLE_DAMAGE_MODIFIER(${1:Player player}, ${2:float modifier})"
      ],
      "description": "SET_PLAYER_VEHICLE_DAMAGE_MODIFIER()"
    },
    "SET_PLAYER_VEHICLE_DEFENSE_MODIFIER": {
      "prefix": "SET_PLAYER_VEHICLE_DEFENSE_MODIFIER()",
      "body": [
        "SET_PLAYER_VEHICLE_DEFENSE_MODIFIER(${1:Player player}, ${2:float modifier})"
      ],
      "description": "SET_PLAYER_VEHICLE_DEFENSE_MODIFIER()"
    },
    "SET_PLAYER_MAX_EXPLOSIVE_DAMAGE": {
      "prefix": "SET_PLAYER_MAX_EXPLOSIVE_DAMAGE()",
      "body": [
        "SET_PLAYER_MAX_EXPLOSIVE_DAMAGE(${1:Player player}, ${2:float p1})"
      ],
      "description": "SET_PLAYER_MAX_EXPLOSIVE_DAMAGE()"
    },
    "SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER": {
      "prefix": "SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER()",
      "body": [
        "SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER(${1:Player player}, ${2:Any p1})"
      ],
      "description": "SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER()"
    },
    "SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER": {
      "prefix": "SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER()",
      "body": [
        "SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER(${1:Player player}, ${2:float p1})"
      ],
      "description": "SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER()"
    },
    "SET_PLAYER_PARACHUTE_TINT_INDEX": {
      "prefix": "SET_PLAYER_PARACHUTE_TINT_INDEX()",
      "body": [
        "SET_PLAYER_PARACHUTE_TINT_INDEX(${1:Player player}, ${2:int tintIndex})"
      ],
      "description": "SET_PLAYER_PARACHUTE_TINT_INDEX()"
    },
    "GET_PLAYER_PARACHUTE_TINT_INDEX": {
      "prefix": "GET_PLAYER_PARACHUTE_TINT_INDEX()",
      "body": [
        "GET_PLAYER_PARACHUTE_TINT_INDEX(${1:Player player}, ${2:int* tintIndex})"
      ],
      "description": "GET_PLAYER_PARACHUTE_TINT_INDEX()"
    },
    "SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX": {
      "prefix": "SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX()",
      "body": [
        "SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(${1:Player player}, ${2:int index})"
      ],
      "description": "SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX()"
    },
    "GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX": {
      "prefix": "GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX()",
      "body": [
        "GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(${1:Player player}, ${2:int* index})"
      ],
      "description": "GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX()"
    },
    "SET_PLAYER_PARACHUTE_PACK_TINT_INDEX": {
      "prefix": "SET_PLAYER_PARACHUTE_PACK_TINT_INDEX()",
      "body": [
        "SET_PLAYER_PARACHUTE_PACK_TINT_INDEX(${1:Player player}, ${2:int tintIndex})"
      ],
      "description": "SET_PLAYER_PARACHUTE_PACK_TINT_INDEX()"
    },
    "GET_PLAYER_PARACHUTE_PACK_TINT_INDEX": {
      "prefix": "GET_PLAYER_PARACHUTE_PACK_TINT_INDEX()",
      "body": [
        "GET_PLAYER_PARACHUTE_PACK_TINT_INDEX(${1:Player player}, ${2:int* tintIndex})"
      ],
      "description": "GET_PLAYER_PARACHUTE_PACK_TINT_INDEX()"
    },
    "SET_PLAYER_HAS_RESERVE_PARACHUTE": {
      "prefix": "SET_PLAYER_HAS_RESERVE_PARACHUTE()",
      "body": ["SET_PLAYER_HAS_RESERVE_PARACHUTE(${1:Player player})"],
      "description": "SET_PLAYER_HAS_RESERVE_PARACHUTE()"
    },
    "GET_PLAYER_HAS_RESERVE_PARACHUTE": {
      "prefix": "GET_PLAYER_HAS_RESERVE_PARACHUTE()",
      "body": ["GET_PLAYER_HAS_RESERVE_PARACHUTE(${1:Player player})"],
      "description": "GET_PLAYER_HAS_RESERVE_PARACHUTE()"
    },
    "SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL": {
      "prefix": "SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL()",
      "body": [
        "SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL(${1:Player player}, ${2:BOOL enabled})"
      ],
      "description": "SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL()"
    },
    "SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR": {
      "prefix": "SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR()",
      "body": [
        "SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(${1:Player player}, ${2:int r}, ${3:int g}, ${4:int b})"
      ],
      "description": "SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR()"
    },
    "GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR": {
      "prefix": "GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR()",
      "body": [
        "GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(${1:Player player}, ${2:int* r}, ${3:int* g}, ${4:int* b})"
      ],
      "description": "GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR()"
    },
    "SET_PLAYER_PHONE_PALETTE_IDX": {
      "prefix": "SET_PLAYER_PHONE_PALETTE_IDX()",
      "body": [
        "SET_PLAYER_PHONE_PALETTE_IDX(${1:Player player}, ${2:int flags})"
      ],
      "description": "SET_PLAYER_PHONE_PALETTE_IDX()"
    },
    "SET_PLAYER_NOISE_MULTIPLIER": {
      "prefix": "SET_PLAYER_NOISE_MULTIPLIER()",
      "body": [
        "SET_PLAYER_NOISE_MULTIPLIER(${1:Player player}, ${2:float multiplier})"
      ],
      "description": "SET_PLAYER_NOISE_MULTIPLIER()"
    },
    "SET_PLAYER_SNEAKING_NOISE_MULTIPLIER": {
      "prefix": "SET_PLAYER_SNEAKING_NOISE_MULTIPLIER()",
      "body": [
        "SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(${1:Player player}, ${2:float multiplier})"
      ],
      "description": "SET_PLAYER_SNEAKING_NOISE_MULTIPLIER()"
    },
    "CAN_PED_HEAR_PLAYER": {
      "prefix": "CAN_PED_HEAR_PLAYER()",
      "body": ["CAN_PED_HEAR_PLAYER(${1:Player player}, ${2:Ped ped})"],
      "description": "CAN_PED_HEAR_PLAYER()"
    },
    "SIMULATE_PLAYER_INPUT_GAIT": {
      "prefix": "SIMULATE_PLAYER_INPUT_GAIT()",
      "body": [
        "SIMULATE_PLAYER_INPUT_GAIT(${1:Player player}, ${2:float amount}, ${3:int gaitType}, ${4:float speed}, ${5:BOOL p4}, ${6:BOOL p5}, ${7:Any p6})"
      ],
      "description": "SIMULATE_PLAYER_INPUT_GAIT()"
    },
    "RESET_PLAYER_INPUT_GAIT": {
      "prefix": "RESET_PLAYER_INPUT_GAIT()",
      "body": ["RESET_PLAYER_INPUT_GAIT(${1:Player player})"],
      "description": "RESET_PLAYER_INPUT_GAIT()"
    },
    "SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE": {
      "prefix": "SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE()",
      "body": [
        "SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE()"
    },
    "SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE": {
      "prefix": "SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE()",
      "body": [
        "SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE()"
    },
    "SET_PLAYER_STEALTH_PERCEPTION_MODIFIER": {
      "prefix": "SET_PLAYER_STEALTH_PERCEPTION_MODIFIER()",
      "body": [
        "SET_PLAYER_STEALTH_PERCEPTION_MODIFIER(${1:Player player}, ${2:float value})"
      ],
      "description": "SET_PLAYER_STEALTH_PERCEPTION_MODIFIER()"
    },
    "IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE": {
      "prefix": "IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE()",
      "body": ["IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(${1:Player player})"],
      "description": "IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE()"
    },
    "INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE": {
      "prefix": "INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE()",
      "body": ["INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE(${1:Player player})"],
      "description": "INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE()"
    },
    "SET_PLAYER_SIMULATE_AIMING": {
      "prefix": "SET_PLAYER_SIMULATE_AIMING()",
      "body": [
        "SET_PLAYER_SIMULATE_AIMING(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "SET_PLAYER_SIMULATE_AIMING()"
    },
    "SET_PLAYER_CLOTH_PIN_FRAMES": {
      "prefix": "SET_PLAYER_CLOTH_PIN_FRAMES()",
      "body": ["SET_PLAYER_CLOTH_PIN_FRAMES(${1:Player player}, ${2:int p1})"],
      "description": "SET_PLAYER_CLOTH_PIN_FRAMES()"
    },
    "SET_PLAYER_CLOTH_PACKAGE_INDEX": {
      "prefix": "SET_PLAYER_CLOTH_PACKAGE_INDEX()",
      "body": ["SET_PLAYER_CLOTH_PACKAGE_INDEX(${1:int index})"],
      "description": "SET_PLAYER_CLOTH_PACKAGE_INDEX()"
    },
    "SET_PLAYER_CLOTH_LOCK_COUNTER": {
      "prefix": "SET_PLAYER_CLOTH_LOCK_COUNTER()",
      "body": ["SET_PLAYER_CLOTH_LOCK_COUNTER(${1:int value})"],
      "description": "SET_PLAYER_CLOTH_LOCK_COUNTER()"
    },
    "PLAYER_ATTACH_VIRTUAL_BOUND": {
      "prefix": "PLAYER_ATTACH_VIRTUAL_BOUND()",
      "body": [
        "PLAYER_ATTACH_VIRTUAL_BOUND(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7})"
      ],
      "description": "PLAYER_ATTACH_VIRTUAL_BOUND()"
    },
    "PLAYER_DETACH_VIRTUAL_BOUND": {
      "prefix": "PLAYER_DETACH_VIRTUAL_BOUND()",
      "body": ["PLAYER_DETACH_VIRTUAL_BOUND()"],
      "description": "PLAYER_DETACH_VIRTUAL_BOUND()"
    },
    "HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE": {
      "prefix": "HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE()",
      "body": ["HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(${1:Player player})"],
      "description": "HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE()"
    },
    "IS_PLAYER_BATTLE_AWARE": {
      "prefix": "IS_PLAYER_BATTLE_AWARE()",
      "body": ["IS_PLAYER_BATTLE_AWARE(${1:Player player})"],
      "description": "IS_PLAYER_BATTLE_AWARE()"
    },
    "GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY": {
      "prefix": "GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY()",
      "body": [
        "GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY(${1:Player player}, ${2:int p1}, ${3:BOOL p2})"
      ],
      "description": "GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY()"
    },
    "EXTEND_WORLD_BOUNDARY_FOR_PLAYER": {
      "prefix": "EXTEND_WORLD_BOUNDARY_FOR_PLAYER()",
      "body": [
        "EXTEND_WORLD_BOUNDARY_FOR_PLAYER(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "EXTEND_WORLD_BOUNDARY_FOR_PLAYER()"
    },
    "RESET_WORLD_BOUNDARY_FOR_PLAYER": {
      "prefix": "RESET_WORLD_BOUNDARY_FOR_PLAYER()",
      "body": ["RESET_WORLD_BOUNDARY_FOR_PLAYER()"],
      "description": "RESET_WORLD_BOUNDARY_FOR_PLAYER()"
    },
    "IS_PLAYER_RIDING_TRAIN": {
      "prefix": "IS_PLAYER_RIDING_TRAIN()",
      "body": ["IS_PLAYER_RIDING_TRAIN(${1:Player player})"],
      "description": "IS_PLAYER_RIDING_TRAIN()"
    },
    "HAS_PLAYER_LEFT_THE_WORLD": {
      "prefix": "HAS_PLAYER_LEFT_THE_WORLD()",
      "body": ["HAS_PLAYER_LEFT_THE_WORLD(${1:Player player})"],
      "description": "HAS_PLAYER_LEFT_THE_WORLD()"
    },
    "SET_PLAYER_LEAVE_PED_BEHIND": {
      "prefix": "SET_PLAYER_LEAVE_PED_BEHIND()",
      "body": [
        "SET_PLAYER_LEAVE_PED_BEHIND(${1:Player player}, ${2:BOOL toggle})"
      ],
      "description": "SET_PLAYER_LEAVE_PED_BEHIND()"
    },
    "SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE": {
      "prefix": "SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE()",
      "body": [
        "SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE(${1:Player player}, ${2:int p1}, ${3:Any p2}, ${4:Any p3}, ${5:BOOL p4})"
      ],
      "description": "SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE()"
    },
    "CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE": {
      "prefix": "CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE()",
      "body": ["CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE(${1:Player player})"],
      "description": "CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE()"
    },
    "SET_PLAYER_PARACHUTE_MODEL_OVERRIDE": {
      "prefix": "SET_PLAYER_PARACHUTE_MODEL_OVERRIDE()",
      "body": [
        "SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(${1:Player player}, ${2:Hash model})"
      ],
      "description": "SET_PLAYER_PARACHUTE_MODEL_OVERRIDE()"
    },
    "SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE": {
      "prefix": "SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE()",
      "body": [
        "SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(${1:Player player}, ${2:Hash model})"
      ],
      "description": "SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE()"
    },
    "GET_PLAYER_PARACHUTE_MODEL_OVERRIDE": {
      "prefix": "GET_PLAYER_PARACHUTE_MODEL_OVERRIDE()",
      "body": ["GET_PLAYER_PARACHUTE_MODEL_OVERRIDE(${1:Player player})"],
      "description": "GET_PLAYER_PARACHUTE_MODEL_OVERRIDE()"
    },
    "GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE": {
      "prefix": "GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE()",
      "body": ["GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(${1:Player player})"],
      "description": "GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE()"
    },
    "CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE": {
      "prefix": "CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE()",
      "body": ["CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE(${1:Player player})"],
      "description": "CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE()"
    },
    "CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE": {
      "prefix": "CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE()",
      "body": [
        "CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(${1:Player player})"
      ],
      "description": "CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE()"
    },
    "SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE": {
      "prefix": "SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE()",
      "body": [
        "SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(${1:Player player}, ${2:Hash model})"
      ],
      "description": "SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE()"
    },
    "CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE": {
      "prefix": "CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE()",
      "body": ["CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(${1:Player player})"],
      "description": "CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE()"
    },
    "DISABLE_PLAYER_VEHICLE_REWARDS": {
      "prefix": "DISABLE_PLAYER_VEHICLE_REWARDS()",
      "body": ["DISABLE_PLAYER_VEHICLE_REWARDS(${1:Player player})"],
      "description": "DISABLE_PLAYER_VEHICLE_REWARDS()"
    },
    "SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE": {
      "prefix": "SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE()",
      "body": ["SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE(${1:BOOL p0})"],
      "description": "SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE()"
    },
    "SET_PLAYER_BLUETOOTH_STATE": {
      "prefix": "SET_PLAYER_BLUETOOTH_STATE()",
      "body": ["SET_PLAYER_BLUETOOTH_STATE(${1:Player player}, ${2:BOOL state})"],
      "description": "SET_PLAYER_BLUETOOTH_STATE()"
    },
    "IS_PLAYER_BLUETOOTH_ENABLE": {
      "prefix": "IS_PLAYER_BLUETOOTH_ENABLE()",
      "body": ["IS_PLAYER_BLUETOOTH_ENABLE(${1:Player player})"],
      "description": "IS_PLAYER_BLUETOOTH_ENABLE()"
    },
    "DISABLE_CAMERA_VIEW_MODE_CYCLE": {
      "prefix": "DISABLE_CAMERA_VIEW_MODE_CYCLE()",
      "body": ["DISABLE_CAMERA_VIEW_MODE_CYCLE(${1:Player player})"],
      "description": "DISABLE_CAMERA_VIEW_MODE_CYCLE()"
    },
    "GET_PLAYER_FAKE_WANTED_LEVEL": {
      "prefix": "GET_PLAYER_FAKE_WANTED_LEVEL()",
      "body": ["GET_PLAYER_FAKE_WANTED_LEVEL(${1:Player player})"],
      "description": "GET_PLAYER_FAKE_WANTED_LEVEL()"
    },
    "SET_PLAYER_CAN_DAMAGE_PLAYER": {
      "prefix": "SET_PLAYER_CAN_DAMAGE_PLAYER()",
      "body": [
        "SET_PLAYER_CAN_DAMAGE_PLAYER(${1:Player player1}, ${2:Player player2}, ${3:BOOL toggle})"
      ],
      "description": "SET_PLAYER_CAN_DAMAGE_PLAYER()"
    },
    "SET_APPLY_WAYPOINT_OF_PLAYER": {
      "prefix": "SET_APPLY_WAYPOINT_OF_PLAYER()",
      "body": [
        "SET_APPLY_WAYPOINT_OF_PLAYER(${1:Player player}, ${2:int hudColor})"
      ],
      "description": "SET_APPLY_WAYPOINT_OF_PLAYER()"
    },
    "IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING": {
      "prefix": "IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING()",
      "body": ["IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING(${1:Any p0})"],
      "description": "IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING()"
    },
    "SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING": {
      "prefix": "SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING()",
      "body": ["SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING(${1:Any p0})"],
      "description": "SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING()"
    },
    "SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS": {
      "prefix": "SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS()",
      "body": [
        "SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS()"
    },
    "ADD_PLAYER_TARGETABLE_ENTITY": {
      "prefix": "ADD_PLAYER_TARGETABLE_ENTITY()",
      "body": [
        "ADD_PLAYER_TARGETABLE_ENTITY(${1:Player player}, ${2:Entity entity})"
      ],
      "description": "ADD_PLAYER_TARGETABLE_ENTITY()"
    },
    "REMOVE_PLAYER_TARGETABLE_ENTITY": {
      "prefix": "REMOVE_PLAYER_TARGETABLE_ENTITY()",
      "body": [
        "REMOVE_PLAYER_TARGETABLE_ENTITY(${1:Player player}, ${2:Entity entity})"
      ],
      "description": "REMOVE_PLAYER_TARGETABLE_ENTITY()"
    },
    "SET_PLAYER_PREVIOUS_VARIATION_DATA": {
      "prefix": "SET_PLAYER_PREVIOUS_VARIATION_DATA()",
      "body": [
        "SET_PLAYER_PREVIOUS_VARIATION_DATA(${1:Player player}, ${2:int p1}, ${3:int p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
      ],
      "description": "SET_PLAYER_PREVIOUS_VARIATION_DATA()"
    },
    "REMOVE_SCRIPT_FIRE_POSITION": {
      "prefix": "REMOVE_SCRIPT_FIRE_POSITION()",
      "body": ["REMOVE_SCRIPT_FIRE_POSITION()"],
      "description": "REMOVE_SCRIPT_FIRE_POSITION()"
    },
    "SET_SCRIPT_FIRE_POSITION": {
      "prefix": "SET_SCRIPT_FIRE_POSITION()",
      "body": [
        "SET_SCRIPT_FIRE_POSITION(${1:float coordX}, ${2:float coordY}, ${3:float coordZ})"
      ],
      "description": "SET_SCRIPT_FIRE_POSITION()"
    },
    "REPLAY_START_EVENT": {
      "prefix": "REPLAY_START_EVENT()",
      "body": ["REPLAY_START_EVENT(${1:int p0})"],
      "description": "REPLAY_START_EVENT()"
    },
    "REPLAY_STOP_EVENT": {
      "prefix": "REPLAY_STOP_EVENT()",
      "body": ["REPLAY_STOP_EVENT()"],
      "description": "REPLAY_STOP_EVENT()"
    },
    "REPLAY_CANCEL_EVENT": {
      "prefix": "REPLAY_CANCEL_EVENT()",
      "body": ["REPLAY_CANCEL_EVENT()"],
      "description": "REPLAY_CANCEL_EVENT()"
    },
    "REPLAY_RECORD_BACK_FOR_TIME": {
      "prefix": "REPLAY_RECORD_BACK_FOR_TIME()",
      "body": [
        "REPLAY_RECORD_BACK_FOR_TIME(${1:float p0}, ${2:float p1}, ${3:int p2})"
      ],
      "description": "REPLAY_RECORD_BACK_FOR_TIME()"
    },
    "REPLAY_CHECK_FOR_EVENT_THIS_FRAME": {
      "prefix": "REPLAY_CHECK_FOR_EVENT_THIS_FRAME()",
      "body": [
        "REPLAY_CHECK_FOR_EVENT_THIS_FRAME(${1:const char* missionNameLabel}, ${2:Any p1})"
      ],
      "description": "REPLAY_CHECK_FOR_EVENT_THIS_FRAME()"
    },
    "REPLAY_PREVENT_RECORDING_THIS_FRAME": {
      "prefix": "REPLAY_PREVENT_RECORDING_THIS_FRAME()",
      "body": ["REPLAY_PREVENT_RECORDING_THIS_FRAME()"],
      "description": "REPLAY_PREVENT_RECORDING_THIS_FRAME()"
    },
    "REPLAY_RESET_EVENT_INFO": {
      "prefix": "REPLAY_RESET_EVENT_INFO()",
      "body": ["REPLAY_RESET_EVENT_INFO()"],
      "description": "REPLAY_RESET_EVENT_INFO()"
    },
    "REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME": {
      "prefix": "REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME()",
      "body": ["REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME()"],
      "description": "REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME()"
    },
    "RECORD_GREATEST_MOMENT": {
      "prefix": "RECORD_GREATEST_MOMENT()",
      "body": ["RECORD_GREATEST_MOMENT(${1:int p0}, ${2:int p1}, ${3:int p2})"],
      "description": "RECORD_GREATEST_MOMENT()"
    },
    "START_REPLAY_RECORDING": {
      "prefix": "START_REPLAY_RECORDING()",
      "body": ["START_REPLAY_RECORDING(${1:int mode})"],
      "description": "START_REPLAY_RECORDING()"
    },
    "STOP_REPLAY_RECORDING": {
      "prefix": "STOP_REPLAY_RECORDING()",
      "body": ["STOP_REPLAY_RECORDING()"],
      "description": "STOP_REPLAY_RECORDING()"
    },
    "CANCEL_REPLAY_RECORDING": {
      "prefix": "CANCEL_REPLAY_RECORDING()",
      "body": ["CANCEL_REPLAY_RECORDING()"],
      "description": "CANCEL_REPLAY_RECORDING()"
    },
    "SAVE_REPLAY_RECORDING": {
      "prefix": "SAVE_REPLAY_RECORDING()",
      "body": ["SAVE_REPLAY_RECORDING()"],
      "description": "SAVE_REPLAY_RECORDING()"
    },
    "IS_REPLAY_RECORDING": {
      "prefix": "IS_REPLAY_RECORDING()",
      "body": ["IS_REPLAY_RECORDING()"],
      "description": "IS_REPLAY_RECORDING()"
    },
    "IS_REPLAY_INITIALIZED": {
      "prefix": "IS_REPLAY_INITIALIZED()",
      "body": ["IS_REPLAY_INITIALIZED()"],
      "description": "IS_REPLAY_INITIALIZED()"
    },
    "IS_REPLAY_AVAILABLE": {
      "prefix": "IS_REPLAY_AVAILABLE()",
      "body": ["IS_REPLAY_AVAILABLE()"],
      "description": "IS_REPLAY_AVAILABLE()"
    },
    "IS_REPLAY_RECORD_SPACE_AVAILABLE": {
      "prefix": "IS_REPLAY_RECORD_SPACE_AVAILABLE()",
      "body": ["IS_REPLAY_RECORD_SPACE_AVAILABLE(${1:BOOL p0})"],
      "description": "IS_REPLAY_RECORD_SPACE_AVAILABLE()"
    },
    "REGISTER_EFFECT_FOR_REPLAY_EDITOR": {
      "prefix": "REGISTER_EFFECT_FOR_REPLAY_EDITOR()",
      "body": [
        "REGISTER_EFFECT_FOR_REPLAY_EDITOR(${1:const char* p0}, ${2:BOOL p1})"
      ],
      "description": "REGISTER_EFFECT_FOR_REPLAY_EDITOR()"
    },
    "REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP": {
      "prefix": "REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP()",
      "body": ["REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP()"],
      "description": "REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP()"
    },
    "SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM": {
      "prefix": "SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM()",
      "body": ["SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM()"],
      "description": "SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM()"
    },
    "SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE": {
      "prefix": "SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE()",
      "body": ["SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE(${1:BOOL p0})"],
      "description": "SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE()"
    },
    "REPLAY_CONTROL_SHUTDOWN": {
      "prefix": "REPLAY_CONTROL_SHUTDOWN()",
      "body": ["REPLAY_CONTROL_SHUTDOWN()"],
      "description": "REPLAY_CONTROL_SHUTDOWN()"
    },
    "ACTIVATE_ROCKSTAR_EDITOR": {
      "prefix": "ACTIVATE_ROCKSTAR_EDITOR()",
      "body": ["ACTIVATE_ROCKSTAR_EDITOR(${1:int p0})"],
      "description": "ACTIVATE_ROCKSTAR_EDITOR()"
    },
    "SAVEMIGRATION_IS_MP_ENABLED": {
      "prefix": "SAVEMIGRATION_IS_MP_ENABLED()",
      "body": ["SAVEMIGRATION_IS_MP_ENABLED()"],
      "description": "SAVEMIGRATION_IS_MP_ENABLED()"
    },
    "SAVEMIGRATION_MP_REQUEST_ACCOUNTS": {
      "prefix": "SAVEMIGRATION_MP_REQUEST_ACCOUNTS()",
      "body": ["SAVEMIGRATION_MP_REQUEST_ACCOUNTS()"],
      "description": "SAVEMIGRATION_MP_REQUEST_ACCOUNTS()"
    },
    "SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS": {
      "prefix": "SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS()",
      "body": ["SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS()"],
      "description": "SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS()"
    },
    "SAVEMIGRATION_MP_NUM_ACCOUNTS": {
      "prefix": "SAVEMIGRATION_MP_NUM_ACCOUNTS()",
      "body": ["SAVEMIGRATION_MP_NUM_ACCOUNTS()"],
      "description": "SAVEMIGRATION_MP_NUM_ACCOUNTS()"
    },
    "SAVEMIGRATION_MP_GET_ACCOUNT": {
      "prefix": "SAVEMIGRATION_MP_GET_ACCOUNT()",
      "body": ["SAVEMIGRATION_MP_GET_ACCOUNT(${1:int p0}, ${2:Any* p1})"],
      "description": "SAVEMIGRATION_MP_GET_ACCOUNT()"
    },
    "SAVEMIGRATION_MP_REQUEST_STATUS": {
      "prefix": "SAVEMIGRATION_MP_REQUEST_STATUS()",
      "body": ["SAVEMIGRATION_MP_REQUEST_STATUS()"],
      "description": "SAVEMIGRATION_MP_REQUEST_STATUS()"
    },
    "SAVEMIGRATION_MP_GET_STATUS": {
      "prefix": "SAVEMIGRATION_MP_GET_STATUS()",
      "body": ["SAVEMIGRATION_MP_GET_STATUS()"],
      "description": "SAVEMIGRATION_MP_GET_STATUS()"
    },
    "REQUEST_SCRIPT": {
      "prefix": "REQUEST_SCRIPT()",
      "body": ["REQUEST_SCRIPT(${1:const char* scriptName})"],
      "description": "REQUEST_SCRIPT()"
    },
    "SET_SCRIPT_AS_NO_LONGER_NEEDED": {
      "prefix": "SET_SCRIPT_AS_NO_LONGER_NEEDED()",
      "body": ["SET_SCRIPT_AS_NO_LONGER_NEEDED(${1:const char* scriptName})"],
      "description": "SET_SCRIPT_AS_NO_LONGER_NEEDED()"
    },
    "HAS_SCRIPT_LOADED": {
      "prefix": "HAS_SCRIPT_LOADED()",
      "body": ["HAS_SCRIPT_LOADED(${1:const char* scriptName})"],
      "description": "HAS_SCRIPT_LOADED()"
    },
    "DOES_SCRIPT_EXIST": {
      "prefix": "DOES_SCRIPT_EXIST()",
      "body": ["DOES_SCRIPT_EXIST(${1:const char* scriptName})"],
      "description": "DOES_SCRIPT_EXIST()"
    },
    "REQUEST_SCRIPT_WITH_NAME_HASH": {
      "prefix": "REQUEST_SCRIPT_WITH_NAME_HASH()",
      "body": ["REQUEST_SCRIPT_WITH_NAME_HASH(${1:Hash scriptHash})"],
      "description": "REQUEST_SCRIPT_WITH_NAME_HASH()"
    },
    "SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED": {
      "prefix": "SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED()",
      "body": [
        "SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED(${1:Hash scriptHash})"
      ],
      "description": "SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED()"
    },
    "HAS_SCRIPT_WITH_NAME_HASH_LOADED": {
      "prefix": "HAS_SCRIPT_WITH_NAME_HASH_LOADED()",
      "body": ["HAS_SCRIPT_WITH_NAME_HASH_LOADED(${1:Hash scriptHash})"],
      "description": "HAS_SCRIPT_WITH_NAME_HASH_LOADED()"
    },
    "DOES_SCRIPT_WITH_NAME_HASH_EXIST": {
      "prefix": "DOES_SCRIPT_WITH_NAME_HASH_EXIST()",
      "body": ["DOES_SCRIPT_WITH_NAME_HASH_EXIST(${1:Hash scriptHash})"],
      "description": "DOES_SCRIPT_WITH_NAME_HASH_EXIST()"
    },
    "TERMINATE_THREAD": {
      "prefix": "TERMINATE_THREAD()",
      "body": ["TERMINATE_THREAD(${1:int threadId})"],
      "description": "TERMINATE_THREAD()"
    },
    "IS_THREAD_ACTIVE": {
      "prefix": "IS_THREAD_ACTIVE()",
      "body": ["IS_THREAD_ACTIVE(${1:int threadId})"],
      "description": "IS_THREAD_ACTIVE()"
    },
    "SCRIPT_THREAD_ITERATOR_RESET": {
      "prefix": "SCRIPT_THREAD_ITERATOR_RESET()",
      "body": ["SCRIPT_THREAD_ITERATOR_RESET()"],
      "description": "SCRIPT_THREAD_ITERATOR_RESET()"
    },
    "SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID": {
      "prefix": "SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID()",
      "body": ["SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID()"],
      "description": "SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID()"
    },
    "GET_ID_OF_THIS_THREAD": {
      "prefix": "GET_ID_OF_THIS_THREAD()",
      "body": ["GET_ID_OF_THIS_THREAD()"],
      "description": "GET_ID_OF_THIS_THREAD()"
    },
    "TERMINATE_THIS_THREAD": {
      "prefix": "TERMINATE_THIS_THREAD()",
      "body": ["TERMINATE_THIS_THREAD()"],
      "description": "TERMINATE_THIS_THREAD()"
    },
    "GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH": {
      "prefix": "GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH()",
      "body": [
        "GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH(${1:Hash scriptHash})"
      ],
      "description": "GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH()"
    },
    "GET_HASH_OF_THIS_SCRIPT_NAME": {
      "prefix": "GET_HASH_OF_THIS_SCRIPT_NAME()",
      "body": ["GET_HASH_OF_THIS_SCRIPT_NAME()"],
      "description": "GET_HASH_OF_THIS_SCRIPT_NAME()"
    },
    "GET_NUMBER_OF_EVENTS": {
      "prefix": "GET_NUMBER_OF_EVENTS()",
      "body": ["GET_NUMBER_OF_EVENTS(${1:int eventGroup})"],
      "description": "GET_NUMBER_OF_EVENTS()"
    },
    "GET_EVENT_EXISTS": {
      "prefix": "GET_EVENT_EXISTS()",
      "body": ["GET_EVENT_EXISTS(${1:int eventGroup}, ${2:int eventIndex})"],
      "description": "GET_EVENT_EXISTS()"
    },
    "GET_EVENT_AT_INDEX": {
      "prefix": "GET_EVENT_AT_INDEX()",
      "body": ["GET_EVENT_AT_INDEX(${1:int eventGroup}, ${2:int eventIndex})"],
      "description": "GET_EVENT_AT_INDEX()"
    },
    "GET_EVENT_DATA": {
      "prefix": "GET_EVENT_DATA()",
      "body": [
        "GET_EVENT_DATA(${1:int eventGroup}, ${2:int eventIndex}, ${3:Any* eventData}, ${4:int eventDataSize})"
      ],
      "description": "GET_EVENT_DATA()"
    },
    "TRIGGER_SCRIPT_EVENT": {
      "prefix": "TRIGGER_SCRIPT_EVENT()",
      "body": [
        "TRIGGER_SCRIPT_EVENT(${1:int eventGroup}, ${2:Any* eventData}, ${3:int eventDataSize}, ${4:int playerBits})"
      ],
      "description": "TRIGGER_SCRIPT_EVENT()"
    },
    "SHUTDOWN_LOADING_SCREEN": {
      "prefix": "SHUTDOWN_LOADING_SCREEN()",
      "body": ["SHUTDOWN_LOADING_SCREEN()"],
      "description": "SHUTDOWN_LOADING_SCREEN()"
    },
    "SET_NO_LOADING_SCREEN": {
      "prefix": "SET_NO_LOADING_SCREEN()",
      "body": ["SET_NO_LOADING_SCREEN(${1:BOOL toggle})"],
      "description": "SET_NO_LOADING_SCREEN()"
    },
    "GET_NO_LOADING_SCREEN": {
      "prefix": "GET_NO_LOADING_SCREEN()",
      "body": ["GET_NO_LOADING_SCREEN()"],
      "description": "GET_NO_LOADING_SCREEN()"
    },
    "COMMIT_TO_LOADINGSCREEN_SELCTION": {
      "prefix": "COMMIT_TO_LOADINGSCREEN_SELCTION()",
      "body": ["COMMIT_TO_LOADINGSCREEN_SELCTION()"],
      "description": "COMMIT_TO_LOADINGSCREEN_SELCTION()"
    },
    "BG_IS_EXITFLAG_SET": {
      "prefix": "BG_IS_EXITFLAG_SET()",
      "body": ["BG_IS_EXITFLAG_SET()"],
      "description": "BG_IS_EXITFLAG_SET()"
    },
    "BG_SET_EXITFLAG_RESPONSE": {
      "prefix": "BG_SET_EXITFLAG_RESPONSE()",
      "body": ["BG_SET_EXITFLAG_RESPONSE()"],
      "description": "BG_SET_EXITFLAG_RESPONSE()"
    },
    "BG_START_CONTEXT_HASH": {
      "prefix": "BG_START_CONTEXT_HASH()",
      "body": ["BG_START_CONTEXT_HASH(${1:Hash contextHash})"],
      "description": "BG_START_CONTEXT_HASH()"
    },
    "BG_END_CONTEXT_HASH": {
      "prefix": "BG_END_CONTEXT_HASH()",
      "body": ["BG_END_CONTEXT_HASH(${1:Hash contextHash})"],
      "description": "BG_END_CONTEXT_HASH()"
    },
    "BG_START_CONTEXT": {
      "prefix": "BG_START_CONTEXT()",
      "body": ["BG_START_CONTEXT(${1:const char* contextName})"],
      "description": "BG_START_CONTEXT()"
    },
    "BG_END_CONTEXT": {
      "prefix": "BG_END_CONTEXT()",
      "body": ["BG_END_CONTEXT(${1:const char* contextName})"],
      "description": "BG_END_CONTEXT()"
    },
    "BG_DOES_LAUNCH_PARAM_EXIST": {
      "prefix": "BG_DOES_LAUNCH_PARAM_EXIST()",
      "body": [
        "BG_DOES_LAUNCH_PARAM_EXIST(${1:int scriptIndex}, ${2:const char* p1})"
      ],
      "description": "BG_DOES_LAUNCH_PARAM_EXIST()"
    },
    "BG_GET_LAUNCH_PARAM_VALUE": {
      "prefix": "BG_GET_LAUNCH_PARAM_VALUE()",
      "body": [
        "BG_GET_LAUNCH_PARAM_VALUE(${1:int scriptIndex}, ${2:const char* p1})"
      ],
      "description": "BG_GET_LAUNCH_PARAM_VALUE()"
    },
    "BG_GET_SCRIPT_ID_FROM_NAME_HASH": {
      "prefix": "BG_GET_SCRIPT_ID_FROM_NAME_HASH()",
      "body": ["BG_GET_SCRIPT_ID_FROM_NAME_HASH(${1:Hash p0})"],
      "description": "BG_GET_SCRIPT_ID_FROM_NAME_HASH()"
    },
    "_SEND_TU_SCRIPT_EVENT_NEW": {
      "prefix": "_SEND_TU_SCRIPT_EVENT_NEW()",
      "body": [
        "_SEND_TU_SCRIPT_EVENT_NEW(${1:int eventGroup}, ${2:Any* eventData}, ${3:int eventDataSize}, ${4:int playerBits}, ${5:Hash eventType})"
      ],
      "description": "_SEND_TU_SCRIPT_EVENT_NEW()"
    },
    "REGISTER_SCRIPT_VARIABLE": {
      "prefix": "REGISTER_SCRIPT_VARIABLE()",
      "body": ["REGISTER_SCRIPT_VARIABLE(${1:Any* variable})"],
      "description": "REGISTER_SCRIPT_VARIABLE()"
    },
    "UNREGISTER_SCRIPT_VARIABLE": {
      "prefix": "UNREGISTER_SCRIPT_VARIABLE()",
      "body": ["UNREGISTER_SCRIPT_VARIABLE(${1:Any* variable})"],
      "description": "UNREGISTER_SCRIPT_VARIABLE()"
    },
    "FORCE_CHECK_SCRIPT_VARIABLES": {
      "prefix": "FORCE_CHECK_SCRIPT_VARIABLES()",
      "body": ["FORCE_CHECK_SCRIPT_VARIABLES()"],
      "description": "FORCE_CHECK_SCRIPT_VARIABLES()"
    },
    "START_SHAPE_TEST_LOS_PROBE": {
      "prefix": "START_SHAPE_TEST_LOS_PROBE()",
      "body": [
        "START_SHAPE_TEST_LOS_PROBE(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int flags}, ${8:Entity entity}, ${9:int p8})"
      ],
      "description": "START_SHAPE_TEST_LOS_PROBE()"
    },
    "START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE": {
      "prefix": "START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE()",
      "body": [
        "START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int flags}, ${8:Entity entity}, ${9:int p8})"
      ],
      "description": "START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE()"
    },
    "START_SHAPE_TEST_BOUNDING_BOX": {
      "prefix": "START_SHAPE_TEST_BOUNDING_BOX()",
      "body": [
        "START_SHAPE_TEST_BOUNDING_BOX(${1:Entity entity}, ${2:int flags1}, ${3:int flags2})"
      ],
      "description": "START_SHAPE_TEST_BOUNDING_BOX()"
    },
    "START_SHAPE_TEST_BOX": {
      "prefix": "START_SHAPE_TEST_BOX()",
      "body": [
        "START_SHAPE_TEST_BOX(${1:float x}, ${2:float y}, ${3:float z}, ${4:float dimX}, ${5:float dimY}, ${6:float dimZ}, ${7:float rotX}, ${8:float rotY}, ${9:float rotZ}, ${10:Any p9}, ${11:int flags}, ${12:Entity entity}, ${13:Any p12})"
      ],
      "description": "START_SHAPE_TEST_BOX()"
    },
    "START_SHAPE_TEST_BOUND": {
      "prefix": "START_SHAPE_TEST_BOUND()",
      "body": [
        "START_SHAPE_TEST_BOUND(${1:Entity entity}, ${2:int flags1}, ${3:int flags2})"
      ],
      "description": "START_SHAPE_TEST_BOUND()"
    },
    "START_SHAPE_TEST_CAPSULE": {
      "prefix": "START_SHAPE_TEST_CAPSULE()",
      "body": [
        "START_SHAPE_TEST_CAPSULE(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float radius}, ${8:int flags}, ${9:Entity entity}, ${10:int p9})"
      ],
      "description": "START_SHAPE_TEST_CAPSULE()"
    },
    "START_SHAPE_TEST_SWEPT_SPHERE": {
      "prefix": "START_SHAPE_TEST_SWEPT_SPHERE()",
      "body": [
        "START_SHAPE_TEST_SWEPT_SPHERE(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float radius}, ${8:int flags}, ${9:Entity entity}, ${10:Any p9})"
      ],
      "description": "START_SHAPE_TEST_SWEPT_SPHERE()"
    },
    "START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE": {
      "prefix": "START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE()",
      "body": [
        "START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE(${1:Vector3* pVec1}, ${2:Vector3* pVec2}, ${3:int flag}, ${4:Entity entity}, ${5:int flag2})"
      ],
      "description": "START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE()"
    },
    "GET_SHAPE_TEST_RESULT": {
      "prefix": "GET_SHAPE_TEST_RESULT()",
      "body": [
        "GET_SHAPE_TEST_RESULT(${1:int shapeTestHandle}, ${2:BOOL* hit}, ${3:Vector3* endCoords}, ${4:Vector3* surfaceNormal}, ${5:Entity* entityHit})"
      ],
      "description": "GET_SHAPE_TEST_RESULT()"
    },
    "GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL": {
      "prefix": "GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL()",
      "body": [
        "GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL(${1:int shapeTestHandle}, ${2:BOOL* hit}, ${3:Vector3* endCoords}, ${4:Vector3* surfaceNormal}, ${5:Hash* materialHash}, ${6:Entity* entityHit})"
      ],
      "description": "GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL()"
    },
    "RELEASE_SCRIPT_GUID_FROM_ENTITY": {
      "prefix": "RELEASE_SCRIPT_GUID_FROM_ENTITY()",
      "body": ["RELEASE_SCRIPT_GUID_FROM_ENTITY(${1:Entity entityHit})"],
      "description": "RELEASE_SCRIPT_GUID_FROM_ENTITY()"
    },
    "SC_INBOX_GET_TOTAL_NUM_MESSAGES": {
      "prefix": "SC_INBOX_GET_TOTAL_NUM_MESSAGES()",
      "body": ["SC_INBOX_GET_TOTAL_NUM_MESSAGES()"],
      "description": "SC_INBOX_GET_TOTAL_NUM_MESSAGES()"
    },
    "SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX": {
      "prefix": "SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX()",
      "body": ["SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX(${1:int msgIndex})"],
      "description": "SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX()"
    },
    "SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX": {
      "prefix": "SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX()",
      "body": ["SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX(${1:int msgIndex})"],
      "description": "SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX()"
    },
    "SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX": {
      "prefix": "SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX()",
      "body": ["SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX(${1:int msgIndex})"],
      "description": "SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX()"
    },
    "SC_INBOX_MESSAGE_GET_DATA_INT": {
      "prefix": "SC_INBOX_MESSAGE_GET_DATA_INT()",
      "body": [
        "SC_INBOX_MESSAGE_GET_DATA_INT(${1:int p0}, ${2:const char* context}, ${3:int* out})"
      ],
      "description": "SC_INBOX_MESSAGE_GET_DATA_INT()"
    },
    "SC_INBOX_MESSAGE_GET_DATA_BOOL": {
      "prefix": "SC_INBOX_MESSAGE_GET_DATA_BOOL()",
      "body": [
        "SC_INBOX_MESSAGE_GET_DATA_BOOL(${1:int p0}, ${2:const char* p1})"
      ],
      "description": "SC_INBOX_MESSAGE_GET_DATA_BOOL()"
    },
    "SC_INBOX_MESSAGE_GET_DATA_STRING": {
      "prefix": "SC_INBOX_MESSAGE_GET_DATA_STRING()",
      "body": [
        "SC_INBOX_MESSAGE_GET_DATA_STRING(${1:int p0}, ${2:const char* context}, ${3:char* out})"
      ],
      "description": "SC_INBOX_MESSAGE_GET_DATA_STRING()"
    },
    "SC_INBOX_MESSAGE_DO_APPLY": {
      "prefix": "SC_INBOX_MESSAGE_DO_APPLY()",
      "body": ["SC_INBOX_MESSAGE_DO_APPLY(${1:int p0})"],
      "description": "SC_INBOX_MESSAGE_DO_APPLY()"
    },
    "SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST": {
      "prefix": "SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST()",
      "body": [
        "SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST(${1:Any* gamerHandle})"
      ],
      "description": "SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST()"
    },
    "SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST": {
      "prefix": "SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST()",
      "body": ["SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST(${1:Any* data})"],
      "description": "SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST()"
    },
    "SC_INBOX_MESSAGE_GET_UGCDATA": {
      "prefix": "SC_INBOX_MESSAGE_GET_UGCDATA()",
      "body": ["SC_INBOX_MESSAGE_GET_UGCDATA(${1:int p0}, ${2:Any* p1})"],
      "description": "SC_INBOX_MESSAGE_GET_UGCDATA()"
    },
    "SC_INBOX_GET_BOUNTY_DATA_AT_INDEX": {
      "prefix": "SC_INBOX_GET_BOUNTY_DATA_AT_INDEX()",
      "body": [
        "SC_INBOX_GET_BOUNTY_DATA_AT_INDEX(${1:int index}, ${2:Any* outData})"
      ],
      "description": "SC_INBOX_GET_BOUNTY_DATA_AT_INDEX()"
    },
    "SC_EMAIL_RETRIEVE_EMAILS": {
      "prefix": "SC_EMAIL_RETRIEVE_EMAILS()",
      "body": ["SC_EMAIL_RETRIEVE_EMAILS(${1:int offset}, ${2:int limit})"],
      "description": "SC_EMAIL_RETRIEVE_EMAILS()"
    },
    "SC_EMAIL_GET_RETRIEVAL_STATUS": {
      "prefix": "SC_EMAIL_GET_RETRIEVAL_STATUS()",
      "body": ["SC_EMAIL_GET_RETRIEVAL_STATUS()"],
      "description": "SC_EMAIL_GET_RETRIEVAL_STATUS()"
    },
    "SC_EMAIL_GET_NUM_RETRIEVED_EMAILS": {
      "prefix": "SC_EMAIL_GET_NUM_RETRIEVED_EMAILS()",
      "body": ["SC_EMAIL_GET_NUM_RETRIEVED_EMAILS()"],
      "description": "SC_EMAIL_GET_NUM_RETRIEVED_EMAILS()"
    },
    "SC_EMAIL_GET_EMAIL_AT_INDEX": {
      "prefix": "SC_EMAIL_GET_EMAIL_AT_INDEX()",
      "body": ["SC_EMAIL_GET_EMAIL_AT_INDEX(${1:int p0}, ${2:Any* p1})"],
      "description": "SC_EMAIL_GET_EMAIL_AT_INDEX()"
    },
    "SC_EMAIL_DELETE_EMAILS": {
      "prefix": "SC_EMAIL_DELETE_EMAILS()",
      "body": ["SC_EMAIL_DELETE_EMAILS(${1:Any* p0}, ${2:Any p1})"],
      "description": "SC_EMAIL_DELETE_EMAILS()"
    },
    "SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST": {
      "prefix": "SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST()",
      "body": [
        "SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST(${1:Any* gamerHandle})"
      ],
      "description": "SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST()"
    },
    "SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST": {
      "prefix": "SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST()",
      "body": ["SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST()"],
      "description": "SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST()"
    },
    "SC_EMAIL_SEND_EMAIL": {
      "prefix": "SC_EMAIL_SEND_EMAIL()",
      "body": ["SC_EMAIL_SEND_EMAIL(${1:const char* p0})"],
      "description": "SC_EMAIL_SEND_EMAIL()"
    },
    "SC_EMAIL_SET_CURRENT_EMAIL_TAG": {
      "prefix": "SC_EMAIL_SET_CURRENT_EMAIL_TAG()",
      "body": ["SC_EMAIL_SET_CURRENT_EMAIL_TAG(${1:Any p0})"],
      "description": "SC_EMAIL_SET_CURRENT_EMAIL_TAG()"
    },
    "SC_CACHE_NEW_ROCKSTAR_MSGS": {
      "prefix": "SC_CACHE_NEW_ROCKSTAR_MSGS()",
      "body": ["SC_CACHE_NEW_ROCKSTAR_MSGS(${1:BOOL toggle})"],
      "description": "SC_CACHE_NEW_ROCKSTAR_MSGS()"
    },
    "SC_HAS_NEW_ROCKSTAR_MSG": {
      "prefix": "SC_HAS_NEW_ROCKSTAR_MSG()",
      "body": ["SC_HAS_NEW_ROCKSTAR_MSG()"],
      "description": "SC_HAS_NEW_ROCKSTAR_MSG()"
    },
    "SC_PRESENCE_ATTR_SET_INT": {
      "prefix": "SC_PRESENCE_ATTR_SET_INT()",
      "body": ["SC_PRESENCE_ATTR_SET_INT(${1:Hash attrHash}, ${2:int value})"],
      "description": "SC_PRESENCE_ATTR_SET_INT()"
    },
    "SC_PRESENCE_ATTR_SET_FLOAT": {
      "prefix": "SC_PRESENCE_ATTR_SET_FLOAT()",
      "body": [
        "SC_PRESENCE_ATTR_SET_FLOAT(${1:Hash attrHash}, ${2:float value})"
      ],
      "description": "SC_PRESENCE_ATTR_SET_FLOAT()"
    },
    "SC_PRESENCE_ATTR_SET_STRING": {
      "prefix": "SC_PRESENCE_ATTR_SET_STRING()",
      "body": [
        "SC_PRESENCE_ATTR_SET_STRING(${1:Hash attrHash}, ${2:const char* value})"
      ],
      "description": "SC_PRESENCE_ATTR_SET_STRING()"
    },
    "SC_PRESENCE_SET_ACTIVITY_RATING": {
      "prefix": "SC_PRESENCE_SET_ACTIVITY_RATING()",
      "body": ["SC_PRESENCE_SET_ACTIVITY_RATING(${1:Any p0}, ${2:float p1})"],
      "description": "SC_PRESENCE_SET_ACTIVITY_RATING()"
    },
    "SC_GAMERDATA_GET_INT": {
      "prefix": "SC_GAMERDATA_GET_INT()",
      "body": ["SC_GAMERDATA_GET_INT(${1:const char* name}, ${2:int* value})"],
      "description": "SC_GAMERDATA_GET_INT()"
    },
    "SC_GAMERDATA_GET_FLOAT": {
      "prefix": "SC_GAMERDATA_GET_FLOAT()",
      "body": [
        "SC_GAMERDATA_GET_FLOAT(${1:const char* name}, ${2:float* value})"
      ],
      "description": "SC_GAMERDATA_GET_FLOAT()"
    },
    "SC_GAMERDATA_GET_BOOL": {
      "prefix": "SC_GAMERDATA_GET_BOOL()",
      "body": ["SC_GAMERDATA_GET_BOOL(${1:const char* name})"],
      "description": "SC_GAMERDATA_GET_BOOL()"
    },
    "SC_GAMERDATA_GET_STRING": {
      "prefix": "SC_GAMERDATA_GET_STRING()",
      "body": [
        "SC_GAMERDATA_GET_STRING(${1:const char* name}, ${2:char* value})"
      ],
      "description": "SC_GAMERDATA_GET_STRING()"
    },
    "SC_GAMERDATA_GET_ACTIVE_XP_BONUS": {
      "prefix": "SC_GAMERDATA_GET_ACTIVE_XP_BONUS()",
      "body": ["SC_GAMERDATA_GET_ACTIVE_XP_BONUS(${1:float* value})"],
      "description": "SC_GAMERDATA_GET_ACTIVE_XP_BONUS()"
    },
    "SC_PROFANITY_CHECK_STRING": {
      "prefix": "SC_PROFANITY_CHECK_STRING()",
      "body": [
        "SC_PROFANITY_CHECK_STRING(${1:const char* string}, ${2:int* token})"
      ],
      "description": "SC_PROFANITY_CHECK_STRING()"
    },
    "SC_PROFANITY_CHECK_STRING_UGC": {
      "prefix": "SC_PROFANITY_CHECK_STRING_UGC()",
      "body": [
        "SC_PROFANITY_CHECK_STRING_UGC(${1:const char* string}, ${2:int* token})"
      ],
      "description": "SC_PROFANITY_CHECK_STRING_UGC()"
    },
    "SC_PROFANITY_GET_CHECK_IS_VALID": {
      "prefix": "SC_PROFANITY_GET_CHECK_IS_VALID()",
      "body": ["SC_PROFANITY_GET_CHECK_IS_VALID(${1:int token})"],
      "description": "SC_PROFANITY_GET_CHECK_IS_VALID()"
    },
    "SC_PROFANITY_GET_CHECK_IS_PENDING": {
      "prefix": "SC_PROFANITY_GET_CHECK_IS_PENDING()",
      "body": ["SC_PROFANITY_GET_CHECK_IS_PENDING(${1:int token})"],
      "description": "SC_PROFANITY_GET_CHECK_IS_PENDING()"
    },
    "SC_PROFANITY_GET_STRING_PASSED": {
      "prefix": "SC_PROFANITY_GET_STRING_PASSED()",
      "body": ["SC_PROFANITY_GET_STRING_PASSED(${1:int token})"],
      "description": "SC_PROFANITY_GET_STRING_PASSED()"
    },
    "SC_PROFANITY_GET_STRING_STATUS": {
      "prefix": "SC_PROFANITY_GET_STRING_STATUS()",
      "body": ["SC_PROFANITY_GET_STRING_STATUS(${1:int token})"],
      "description": "SC_PROFANITY_GET_STRING_STATUS()"
    },
    "SC_LICENSEPLATE_CHECK_STRING": {
      "prefix": "SC_LICENSEPLATE_CHECK_STRING()",
      "body": ["SC_LICENSEPLATE_CHECK_STRING(${1:const char* p0}, ${2:int* p1})"],
      "description": "SC_LICENSEPLATE_CHECK_STRING()"
    },
    "SC_LICENSEPLATE_GET_CHECK_IS_VALID": {
      "prefix": "SC_LICENSEPLATE_GET_CHECK_IS_VALID()",
      "body": ["SC_LICENSEPLATE_GET_CHECK_IS_VALID(${1:Any p0})"],
      "description": "SC_LICENSEPLATE_GET_CHECK_IS_VALID()"
    },
    "SC_LICENSEPLATE_GET_CHECK_IS_PENDING": {
      "prefix": "SC_LICENSEPLATE_GET_CHECK_IS_PENDING()",
      "body": ["SC_LICENSEPLATE_GET_CHECK_IS_PENDING(${1:Any p0})"],
      "description": "SC_LICENSEPLATE_GET_CHECK_IS_PENDING()"
    },
    "SC_LICENSEPLATE_GET_COUNT": {
      "prefix": "SC_LICENSEPLATE_GET_COUNT()",
      "body": ["SC_LICENSEPLATE_GET_COUNT(${1:int token})"],
      "description": "SC_LICENSEPLATE_GET_COUNT()"
    },
    "SC_LICENSEPLATE_SET_PLATE_DATA": {
      "prefix": "SC_LICENSEPLATE_SET_PLATE_DATA()",
      "body": [
        "SC_LICENSEPLATE_SET_PLATE_DATA(${1:const char* oldPlateText}, ${2:const char* newPlateText}, ${3:Any* plateData})"
      ],
      "description": "SC_LICENSEPLATE_SET_PLATE_DATA()"
    },
    "SC_LICENSEPLATE_ADD": {
      "prefix": "SC_LICENSEPLATE_ADD()",
      "body": [
        "SC_LICENSEPLATE_ADD(${1:const char* plateText}, ${2:Any* plateData}, ${3:int* token})"
      ],
      "description": "SC_LICENSEPLATE_ADD()"
    },
    "SC_LICENSEPLATE_GET_ADD_IS_PENDING": {
      "prefix": "SC_LICENSEPLATE_GET_ADD_IS_PENDING()",
      "body": ["SC_LICENSEPLATE_GET_ADD_IS_PENDING(${1:int token})"],
      "description": "SC_LICENSEPLATE_GET_ADD_IS_PENDING()"
    },
    "SC_LICENSEPLATE_GET_ADD_STATUS": {
      "prefix": "SC_LICENSEPLATE_GET_ADD_STATUS()",
      "body": ["SC_LICENSEPLATE_GET_ADD_STATUS(${1:int token})"],
      "description": "SC_LICENSEPLATE_GET_ADD_STATUS()"
    },
    "SC_LICENSEPLATE_ISVALID": {
      "prefix": "SC_LICENSEPLATE_ISVALID()",
      "body": [
        "SC_LICENSEPLATE_ISVALID(${1:const char* plateText}, ${2:int* token})"
      ],
      "description": "SC_LICENSEPLATE_ISVALID()"
    },
    "SC_LICENSEPLATE_GET_ISVALID_IS_PENDING": {
      "prefix": "SC_LICENSEPLATE_GET_ISVALID_IS_PENDING()",
      "body": ["SC_LICENSEPLATE_GET_ISVALID_IS_PENDING(${1:int token})"],
      "description": "SC_LICENSEPLATE_GET_ISVALID_IS_PENDING()"
    },
    "SC_LICENSEPLATE_GET_ISVALID_STATUS": {
      "prefix": "SC_LICENSEPLATE_GET_ISVALID_STATUS()",
      "body": ["SC_LICENSEPLATE_GET_ISVALID_STATUS(${1:int token})"],
      "description": "SC_LICENSEPLATE_GET_ISVALID_STATUS()"
    },
    "SC_COMMUNITY_EVENT_IS_ACTIVE": {
      "prefix": "SC_COMMUNITY_EVENT_IS_ACTIVE()",
      "body": ["SC_COMMUNITY_EVENT_IS_ACTIVE()"],
      "description": "SC_COMMUNITY_EVENT_IS_ACTIVE()"
    },
    "SC_COMMUNITY_EVENT_GET_EVENT_ID": {
      "prefix": "SC_COMMUNITY_EVENT_GET_EVENT_ID()",
      "body": ["SC_COMMUNITY_EVENT_GET_EVENT_ID()"],
      "description": "SC_COMMUNITY_EVENT_GET_EVENT_ID()"
    },
    "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT": {
      "prefix": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT()",
      "body": [
        "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT(${1:const char* p0}, ${2:int* p1})"
      ],
      "description": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT()"
    },
    "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT": {
      "prefix": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT()",
      "body": [
        "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT(${1:const char* p0}, ${2:float* p1})"
      ],
      "description": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT()"
    },
    "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING": {
      "prefix": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING()",
      "body": [
        "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING(${1:const char* p0}, ${2:char* p1})"
      ],
      "description": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING()"
    },
    "SC_COMMUNITY_EVENT_GET_DISPLAY_NAME": {
      "prefix": "SC_COMMUNITY_EVENT_GET_DISPLAY_NAME()",
      "body": ["SC_COMMUNITY_EVENT_GET_DISPLAY_NAME(${1:char* p0})"],
      "description": "SC_COMMUNITY_EVENT_GET_DISPLAY_NAME()"
    },
    "SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE": {
      "prefix": "SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE()",
      "body": ["SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE(${1:const char* p0})"],
      "description": "SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE()"
    },
    "SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE": {
      "prefix": "SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE()",
      "body": ["SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE(${1:const char* p0})"],
      "description": "SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE()"
    },
    "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE": {
      "prefix": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE()",
      "body": [
        "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE(${1:const char* p0}, ${2:int* p1}, ${3:const char* p2})"
      ],
      "description": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE()"
    },
    "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE": {
      "prefix": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE()",
      "body": [
        "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE(${1:const char* p0}, ${2:float* p1}, ${3:const char* p2})"
      ],
      "description": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE()"
    },
    "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE": {
      "prefix": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE()",
      "body": [
        "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE(${1:const char* p0}, ${2:char* p1}, ${3:const char* p2})"
      ],
      "description": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE()"
    },
    "SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE": {
      "prefix": "SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE()",
      "body": [
        "SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE(${1:char* p0}, ${2:const char* p1})"
      ],
      "description": "SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE()"
    },
    "SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID": {
      "prefix": "SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID()",
      "body": ["SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID(${1:int p0})"],
      "description": "SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID()"
    },
    "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID": {
      "prefix": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID()",
      "body": [
        "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID(${1:int p0}, ${2:const char* p1}, ${3:int* p2})"
      ],
      "description": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID()"
    },
    "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID": {
      "prefix": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID()",
      "body": [
        "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID(${1:int p0}, ${2:const char* p1}, ${3:float* p2})"
      ],
      "description": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID()"
    },
    "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID": {
      "prefix": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID()",
      "body": [
        "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID(${1:int p0}, ${2:const char* p1}, ${3:char* p2})"
      ],
      "description": "SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID()"
    },
    "SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID": {
      "prefix": "SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID()",
      "body": [
        "SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID(${1:int p0}, ${2:char* p1})"
      ],
      "description": "SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID()"
    },
    "SC_TRANSITION_NEWS_SHOW": {
      "prefix": "SC_TRANSITION_NEWS_SHOW()",
      "body": ["SC_TRANSITION_NEWS_SHOW(${1:Any p0})"],
      "description": "SC_TRANSITION_NEWS_SHOW()"
    },
    "SC_TRANSITION_NEWS_SHOW_TIMED": {
      "prefix": "SC_TRANSITION_NEWS_SHOW_TIMED()",
      "body": ["SC_TRANSITION_NEWS_SHOW_TIMED(${1:Any p0}, ${2:Any p1})"],
      "description": "SC_TRANSITION_NEWS_SHOW_TIMED()"
    },
    "SC_TRANSITION_NEWS_SHOW_NEXT_ITEM": {
      "prefix": "SC_TRANSITION_NEWS_SHOW_NEXT_ITEM()",
      "body": ["SC_TRANSITION_NEWS_SHOW_NEXT_ITEM()"],
      "description": "SC_TRANSITION_NEWS_SHOW_NEXT_ITEM()"
    },
    "SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU": {
      "prefix": "SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU()",
      "body": ["SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU()"],
      "description": "SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU()"
    },
    "SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU": {
      "prefix": "SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU()",
      "body": [
        "SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU(${1:const char* p0}, ${2:int* p1})"
      ],
      "description": "SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU()"
    },
    "SC_TRANSITION_NEWS_END": {
      "prefix": "SC_TRANSITION_NEWS_END()",
      "body": ["SC_TRANSITION_NEWS_END()"],
      "description": "SC_TRANSITION_NEWS_END()"
    },
    "SC_PAUSE_NEWS_INIT_STARTER_PACK": {
      "prefix": "SC_PAUSE_NEWS_INIT_STARTER_PACK()",
      "body": ["SC_PAUSE_NEWS_INIT_STARTER_PACK(${1:Any p0})"],
      "description": "SC_PAUSE_NEWS_INIT_STARTER_PACK()"
    },
    "SC_PAUSE_NEWS_GET_PENDING_STORY": {
      "prefix": "SC_PAUSE_NEWS_GET_PENDING_STORY()",
      "body": ["SC_PAUSE_NEWS_GET_PENDING_STORY(${1:Any p0})"],
      "description": "SC_PAUSE_NEWS_GET_PENDING_STORY()"
    },
    "SC_PAUSE_NEWS_SHUTDOWN": {
      "prefix": "SC_PAUSE_NEWS_SHUTDOWN()",
      "body": ["SC_PAUSE_NEWS_SHUTDOWN()"],
      "description": "SC_PAUSE_NEWS_SHUTDOWN()"
    },
    "SC_ACHIEVEMENT_INFO_STATUS": {
      "prefix": "SC_ACHIEVEMENT_INFO_STATUS()",
      "body": ["SC_ACHIEVEMENT_INFO_STATUS(${1:int* p0})"],
      "description": "SC_ACHIEVEMENT_INFO_STATUS()"
    },
    "SC_HAS_ACHIEVEMENT_BEEN_PASSED": {
      "prefix": "SC_HAS_ACHIEVEMENT_BEEN_PASSED()",
      "body": ["SC_HAS_ACHIEVEMENT_BEEN_PASSED(${1:int achievementId})"],
      "description": "SC_HAS_ACHIEVEMENT_BEEN_PASSED()"
    },
    "STAT_CLEAR_SLOT_FOR_RELOAD": {
      "prefix": "STAT_CLEAR_SLOT_FOR_RELOAD()",
      "body": ["STAT_CLEAR_SLOT_FOR_RELOAD(${1:int statSlot})"],
      "description": "STAT_CLEAR_SLOT_FOR_RELOAD()"
    },
    "STAT_LOAD": {
      "prefix": "STAT_LOAD()",
      "body": ["STAT_LOAD(${1:int statSlot})"],
      "description": "STAT_LOAD()"
    },
    "STAT_SAVE": {
      "prefix": "STAT_SAVE()",
      "body": ["STAT_SAVE(${1:int p0}, ${2:BOOL p1}, ${3:int p2}, ${4:BOOL p3})"],
      "description": "STAT_SAVE()"
    },
    "STAT_SET_OPEN_SAVETYPE_IN_JOB": {
      "prefix": "STAT_SET_OPEN_SAVETYPE_IN_JOB()",
      "body": ["STAT_SET_OPEN_SAVETYPE_IN_JOB(${1:int p0})"],
      "description": "STAT_SET_OPEN_SAVETYPE_IN_JOB()"
    },
    "STAT_LOAD_PENDING": {
      "prefix": "STAT_LOAD_PENDING()",
      "body": ["STAT_LOAD_PENDING(${1:int statSlot})"],
      "description": "STAT_LOAD_PENDING()"
    },
    "STAT_SAVE_PENDING": {
      "prefix": "STAT_SAVE_PENDING()",
      "body": ["STAT_SAVE_PENDING()"],
      "description": "STAT_SAVE_PENDING()"
    },
    "STAT_SAVE_PENDING_OR_REQUESTED": {
      "prefix": "STAT_SAVE_PENDING_OR_REQUESTED()",
      "body": ["STAT_SAVE_PENDING_OR_REQUESTED()"],
      "description": "STAT_SAVE_PENDING_OR_REQUESTED()"
    },
    "STAT_DELETE_SLOT": {
      "prefix": "STAT_DELETE_SLOT()",
      "body": ["STAT_DELETE_SLOT(${1:int p0})"],
      "description": "STAT_DELETE_SLOT()"
    },
    "STAT_SLOT_IS_LOADED": {
      "prefix": "STAT_SLOT_IS_LOADED()",
      "body": ["STAT_SLOT_IS_LOADED(${1:int statSlot})"],
      "description": "STAT_SLOT_IS_LOADED()"
    },
    "STAT_CLOUD_SLOT_LOAD_FAILED": {
      "prefix": "STAT_CLOUD_SLOT_LOAD_FAILED()",
      "body": ["STAT_CLOUD_SLOT_LOAD_FAILED(${1:int p0})"],
      "description": "STAT_CLOUD_SLOT_LOAD_FAILED()"
    },
    "STAT_CLOUD_SLOT_LOAD_FAILED_CODE": {
      "prefix": "STAT_CLOUD_SLOT_LOAD_FAILED_CODE()",
      "body": ["STAT_CLOUD_SLOT_LOAD_FAILED_CODE(${1:Any p0})"],
      "description": "STAT_CLOUD_SLOT_LOAD_FAILED_CODE()"
    },
    "STAT_SET_BLOCK_SAVES": {
      "prefix": "STAT_SET_BLOCK_SAVES()",
      "body": ["STAT_SET_BLOCK_SAVES(${1:BOOL toggle})"],
      "description": "STAT_SET_BLOCK_SAVES()"
    },
    "STAT_GET_BLOCK_SAVES": {
      "prefix": "STAT_GET_BLOCK_SAVES()",
      "body": ["STAT_GET_BLOCK_SAVES()"],
      "description": "STAT_GET_BLOCK_SAVES()"
    },
    "STAT_CLOUD_SLOT_SAVE_FAILED": {
      "prefix": "STAT_CLOUD_SLOT_SAVE_FAILED()",
      "body": ["STAT_CLOUD_SLOT_SAVE_FAILED(${1:Any p0})"],
      "description": "STAT_CLOUD_SLOT_SAVE_FAILED()"
    },
    "STAT_CLEAR_PENDING_SAVES": {
      "prefix": "STAT_CLEAR_PENDING_SAVES()",
      "body": ["STAT_CLEAR_PENDING_SAVES(${1:Any p0})"],
      "description": "STAT_CLEAR_PENDING_SAVES()"
    },
    "STAT_LOAD_DIRTY_READ_DETECTED": {
      "prefix": "STAT_LOAD_DIRTY_READ_DETECTED()",
      "body": ["STAT_LOAD_DIRTY_READ_DETECTED()"],
      "description": "STAT_LOAD_DIRTY_READ_DETECTED()"
    },
    "STAT_CLEAR_DIRTY_READ_DETECTED": {
      "prefix": "STAT_CLEAR_DIRTY_READ_DETECTED()",
      "body": ["STAT_CLEAR_DIRTY_READ_DETECTED()"],
      "description": "STAT_CLEAR_DIRTY_READ_DETECTED()"
    },
    "STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP": {
      "prefix": "STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP()",
      "body": ["STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP()"],
      "description": "STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP()"
    },
    "_GET_STAT_HASH_FOR_CHARACTER_STAT": {
      "prefix": "_GET_STAT_HASH_FOR_CHARACTER_STAT()",
      "body": [
        "_GET_STAT_HASH_FOR_CHARACTER_STAT(${1:int dataType}, ${2:int statIndex}, ${3:int charSlot})"
      ],
      "description": "_GET_STAT_HASH_FOR_CHARACTER_STAT()"
    },
    "STAT_SET_INT": {
      "prefix": "STAT_SET_INT()",
      "body": [
        "STAT_SET_INT(${1:Hash statName}, ${2:int value}, ${3:BOOL save})"
      ],
      "description": "STAT_SET_INT()"
    },
    "STAT_SET_FLOAT": {
      "prefix": "STAT_SET_FLOAT()",
      "body": [
        "STAT_SET_FLOAT(${1:Hash statName}, ${2:float value}, ${3:BOOL save})"
      ],
      "description": "STAT_SET_FLOAT()"
    },
    "STAT_SET_BOOL": {
      "prefix": "STAT_SET_BOOL()",
      "body": [
        "STAT_SET_BOOL(${1:Hash statName}, ${2:BOOL value}, ${3:BOOL save})"
      ],
      "description": "STAT_SET_BOOL()"
    },
    "STAT_SET_GXT_LABEL": {
      "prefix": "STAT_SET_GXT_LABEL()",
      "body": [
        "STAT_SET_GXT_LABEL(${1:Hash statName}, ${2:const char* value}, ${3:BOOL save})"
      ],
      "description": "STAT_SET_GXT_LABEL()"
    },
    "STAT_SET_DATE": {
      "prefix": "STAT_SET_DATE()",
      "body": [
        "STAT_SET_DATE(${1:Hash statName}, ${2:Any* value}, ${3:int numFields}, ${4:BOOL save})"
      ],
      "description": "STAT_SET_DATE()"
    },
    "STAT_SET_STRING": {
      "prefix": "STAT_SET_STRING()",
      "body": [
        "STAT_SET_STRING(${1:Hash statName}, ${2:const char* value}, ${3:BOOL save})"
      ],
      "description": "STAT_SET_STRING()"
    },
    "STAT_SET_POS": {
      "prefix": "STAT_SET_POS()",
      "body": [
        "STAT_SET_POS(${1:Hash statName}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL save})"
      ],
      "description": "STAT_SET_POS()"
    },
    "STAT_SET_MASKED_INT": {
      "prefix": "STAT_SET_MASKED_INT()",
      "body": [
        "STAT_SET_MASKED_INT(${1:Hash statName}, ${2:int p1}, ${3:int p2}, ${4:int p3}, ${5:BOOL save})"
      ],
      "description": "STAT_SET_MASKED_INT()"
    },
    "STAT_SET_USER_ID": {
      "prefix": "STAT_SET_USER_ID()",
      "body": [
        "STAT_SET_USER_ID(${1:Hash statName}, ${2:const char* value}, ${3:BOOL save})"
      ],
      "description": "STAT_SET_USER_ID()"
    },
    "STAT_SET_CURRENT_POSIX_TIME": {
      "prefix": "STAT_SET_CURRENT_POSIX_TIME()",
      "body": ["STAT_SET_CURRENT_POSIX_TIME(${1:Hash statName}, ${2:BOOL p1})"],
      "description": "STAT_SET_CURRENT_POSIX_TIME()"
    },
    "STAT_GET_INT": {
      "prefix": "STAT_GET_INT()",
      "body": [
        "STAT_GET_INT(${1:Hash statHash}, ${2:int* outValue}, ${3:int p2})"
      ],
      "description": "STAT_GET_INT()"
    },
    "STAT_GET_FLOAT": {
      "prefix": "STAT_GET_FLOAT()",
      "body": [
        "STAT_GET_FLOAT(${1:Hash statHash}, ${2:float* outValue}, ${3:Any p2})"
      ],
      "description": "STAT_GET_FLOAT()"
    },
    "STAT_GET_BOOL": {
      "prefix": "STAT_GET_BOOL()",
      "body": [
        "STAT_GET_BOOL(${1:Hash statHash}, ${2:BOOL* outValue}, ${3:Any p2})"
      ],
      "description": "STAT_GET_BOOL()"
    },
    "STAT_GET_DATE": {
      "prefix": "STAT_GET_DATE()",
      "body": [
        "STAT_GET_DATE(${1:Hash statHash}, ${2:Any* outValue}, ${3:int numFields}, ${4:Any p3})"
      ],
      "description": "STAT_GET_DATE()"
    },
    "STAT_GET_POS": {
      "prefix": "STAT_GET_POS()",
      "body": [
        "STAT_GET_POS(${1:Hash statName}, ${2:float* outX}, ${3:float* outY}, ${4:float* outZ}, ${5:Any p4})"
      ],
      "description": "STAT_GET_POS()"
    },
    "STAT_GET_MASKED_INT": {
      "prefix": "STAT_GET_MASKED_INT()",
      "body": [
        "STAT_GET_MASKED_INT(${1:Hash statHash}, ${2:int* outValue}, ${3:int p2}, ${4:int p3}, ${5:Any p4})"
      ],
      "description": "STAT_GET_MASKED_INT()"
    },
    "STAT_SET_LICENSE_PLATE": {
      "prefix": "STAT_SET_LICENSE_PLATE()",
      "body": [
        "STAT_SET_LICENSE_PLATE(${1:Hash statName}, ${2:const char* str})"
      ],
      "description": "STAT_SET_LICENSE_PLATE()"
    },
    "STAT_INCREMENT": {
      "prefix": "STAT_INCREMENT()",
      "body": ["STAT_INCREMENT(${1:Hash statName}, ${2:float value})"],
      "description": "STAT_INCREMENT()"
    },
    "STAT_COMMUNITY_START_SYNCH": {
      "prefix": "STAT_COMMUNITY_START_SYNCH()",
      "body": ["STAT_COMMUNITY_START_SYNCH()"],
      "description": "STAT_COMMUNITY_START_SYNCH()"
    },
    "STAT_COMMUNITY_SYNCH_IS_PENDING": {
      "prefix": "STAT_COMMUNITY_SYNCH_IS_PENDING()",
      "body": ["STAT_COMMUNITY_SYNCH_IS_PENDING()"],
      "description": "STAT_COMMUNITY_SYNCH_IS_PENDING()"
    },
    "STAT_COMMUNITY_GET_HISTORY": {
      "prefix": "STAT_COMMUNITY_GET_HISTORY()",
      "body": [
        "STAT_COMMUNITY_GET_HISTORY(${1:Hash statName}, ${2:int p1}, ${3:float* outValue})"
      ],
      "description": "STAT_COMMUNITY_GET_HISTORY()"
    },
    "STAT_RESET_ALL_ONLINE_CHARACTER_STATS": {
      "prefix": "STAT_RESET_ALL_ONLINE_CHARACTER_STATS()",
      "body": ["STAT_RESET_ALL_ONLINE_CHARACTER_STATS(${1:int p0})"],
      "description": "STAT_RESET_ALL_ONLINE_CHARACTER_STATS()"
    },
    "STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS": {
      "prefix": "STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS()",
      "body": ["STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS(${1:int p0})"],
      "description": "STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS()"
    },
    "STAT_GET_NUMBER_OF_DAYS": {
      "prefix": "STAT_GET_NUMBER_OF_DAYS()",
      "body": ["STAT_GET_NUMBER_OF_DAYS(${1:Hash statName})"],
      "description": "STAT_GET_NUMBER_OF_DAYS()"
    },
    "STAT_GET_NUMBER_OF_HOURS": {
      "prefix": "STAT_GET_NUMBER_OF_HOURS()",
      "body": ["STAT_GET_NUMBER_OF_HOURS(${1:Hash statName})"],
      "description": "STAT_GET_NUMBER_OF_HOURS()"
    },
    "STAT_GET_NUMBER_OF_MINUTES": {
      "prefix": "STAT_GET_NUMBER_OF_MINUTES()",
      "body": ["STAT_GET_NUMBER_OF_MINUTES(${1:Hash statName})"],
      "description": "STAT_GET_NUMBER_OF_MINUTES()"
    },
    "STAT_GET_NUMBER_OF_SECONDS": {
      "prefix": "STAT_GET_NUMBER_OF_SECONDS()",
      "body": ["STAT_GET_NUMBER_OF_SECONDS(${1:Hash statName})"],
      "description": "STAT_GET_NUMBER_OF_SECONDS()"
    },
    "STAT_SET_PROFILE_SETTING_VALUE": {
      "prefix": "STAT_SET_PROFILE_SETTING_VALUE()",
      "body": [
        "STAT_SET_PROFILE_SETTING_VALUE(${1:int profileSetting}, ${2:int value})"
      ],
      "description": "STAT_SET_PROFILE_SETTING_VALUE()"
    },
    "STATS_COMPLETED_CHARACTER_CREATION": {
      "prefix": "STATS_COMPLETED_CHARACTER_CREATION()",
      "body": ["STATS_COMPLETED_CHARACTER_CREATION(${1:Any p0})"],
      "description": "STATS_COMPLETED_CHARACTER_CREATION()"
    },
    "PACKED_STAT_GET_INT_STAT_INDEX": {
      "prefix": "PACKED_STAT_GET_INT_STAT_INDEX()",
      "body": ["PACKED_STAT_GET_INT_STAT_INDEX(${1:int p0})"],
      "description": "PACKED_STAT_GET_INT_STAT_INDEX()"
    },
    "GET_PACKED_INT_STAT_KEY": {
      "prefix": "GET_PACKED_INT_STAT_KEY()",
      "body": [
        "GET_PACKED_INT_STAT_KEY(${1:int index}, ${2:BOOL spStat}, ${3:BOOL charStat}, ${4:int character})"
      ],
      "description": "GET_PACKED_INT_STAT_KEY()"
    },
    "GET_PACKED_TU_INT_STAT_KEY": {
      "prefix": "GET_PACKED_TU_INT_STAT_KEY()",
      "body": [
        "GET_PACKED_TU_INT_STAT_KEY(${1:int index}, ${2:BOOL spStat}, ${3:BOOL charStat}, ${4:int character})"
      ],
      "description": "GET_PACKED_TU_INT_STAT_KEY()"
    },
    "GET_PACKED_NG_INT_STAT_KEY": {
      "prefix": "GET_PACKED_NG_INT_STAT_KEY()",
      "body": [
        "GET_PACKED_NG_INT_STAT_KEY(${1:int index}, ${2:BOOL spStat}, ${3:BOOL charStat}, ${4:int character}, ${5:const char* section})"
      ],
      "description": "GET_PACKED_NG_INT_STAT_KEY()"
    },
    "GET_PACKED_STAT_BOOL_CODE": {
      "prefix": "GET_PACKED_STAT_BOOL_CODE()",
      "body": [
        "GET_PACKED_STAT_BOOL_CODE(${1:int index}, ${2:int characterSlot})"
      ],
      "description": "GET_PACKED_STAT_BOOL_CODE()"
    },
    "GET_PACKED_STAT_INT_CODE": {
      "prefix": "GET_PACKED_STAT_INT_CODE()",
      "body": [
        "GET_PACKED_STAT_INT_CODE(${1:int index}, ${2:int characterSlot})"
      ],
      "description": "GET_PACKED_STAT_INT_CODE()"
    },
    "SET_PACKED_STAT_BOOL_CODE": {
      "prefix": "SET_PACKED_STAT_BOOL_CODE()",
      "body": [
        "SET_PACKED_STAT_BOOL_CODE(${1:int index}, ${2:BOOL value}, ${3:int characterSlot})"
      ],
      "description": "SET_PACKED_STAT_BOOL_CODE()"
    },
    "SET_PACKED_STAT_INT_CODE": {
      "prefix": "SET_PACKED_STAT_INT_CODE()",
      "body": [
        "SET_PACKED_STAT_INT_CODE(${1:int index}, ${2:int value}, ${3:int characterSlot})"
      ],
      "description": "SET_PACKED_STAT_INT_CODE()"
    },
    "PLAYSTATS_BACKGROUND_SCRIPT_ACTION": {
      "prefix": "PLAYSTATS_BACKGROUND_SCRIPT_ACTION()",
      "body": [
        "PLAYSTATS_BACKGROUND_SCRIPT_ACTION(${1:const char* action}, ${2:int value})"
      ],
      "description": "PLAYSTATS_BACKGROUND_SCRIPT_ACTION()"
    },
    "_PLAYSTATS_FLOW_LOW": {
      "prefix": "_PLAYSTATS_FLOW_LOW()",
      "body": [
        "_PLAYSTATS_FLOW_LOW(${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:const char* p3}, ${5:Any p4}, ${6:int amount})"
      ],
      "description": "_PLAYSTATS_FLOW_LOW()"
    },
    "_PLAYSTATS_FLOW_MEDIUM": {
      "prefix": "_PLAYSTATS_FLOW_MEDIUM()",
      "body": [
        "_PLAYSTATS_FLOW_MEDIUM(${1:float x}, ${2:float y}, ${3:float z}, ${4:const char* interiorAction}, ${5:int p4}, ${6:Hash p5})"
      ],
      "description": "_PLAYSTATS_FLOW_MEDIUM()"
    },
    "PLAYSTATS_NPC_INVITE": {
      "prefix": "PLAYSTATS_NPC_INVITE()",
      "body": ["PLAYSTATS_NPC_INVITE(${1:const char* p0})"],
      "description": "PLAYSTATS_NPC_INVITE()"
    },
    "PLAYSTATS_AWARD_XP": {
      "prefix": "PLAYSTATS_AWARD_XP()",
      "body": [
        "PLAYSTATS_AWARD_XP(${1:int amount}, ${2:Hash type}, ${3:Hash category})"
      ],
      "description": "PLAYSTATS_AWARD_XP()"
    },
    "PLAYSTATS_RANK_UP": {
      "prefix": "PLAYSTATS_RANK_UP()",
      "body": ["PLAYSTATS_RANK_UP(${1:int rank})"],
      "description": "PLAYSTATS_RANK_UP()"
    },
    "PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE": {
      "prefix": "PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE()",
      "body": ["PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE()"],
      "description": "PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE()"
    },
    "PLAYSTATS_ACTIVITY_DONE": {
      "prefix": "PLAYSTATS_ACTIVITY_DONE()",
      "body": [
        "PLAYSTATS_ACTIVITY_DONE(${1:int p0}, ${2:int activityId}, ${3:Any p2})"
      ],
      "description": "PLAYSTATS_ACTIVITY_DONE()"
    },
    "PLAYSTATS_LEAVE_JOB_CHAIN": {
      "prefix": "PLAYSTATS_LEAVE_JOB_CHAIN()",
      "body": [
        "PLAYSTATS_LEAVE_JOB_CHAIN(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "PLAYSTATS_LEAVE_JOB_CHAIN()"
    },
    "PLAYSTATS_MISSION_STARTED": {
      "prefix": "PLAYSTATS_MISSION_STARTED()",
      "body": [
        "PLAYSTATS_MISSION_STARTED(${1:const char* p0}, ${2:Any p1}, ${3:Any p2}, ${4:BOOL p3})"
      ],
      "description": "PLAYSTATS_MISSION_STARTED()"
    },
    "PLAYSTATS_MISSION_OVER": {
      "prefix": "PLAYSTATS_MISSION_OVER()",
      "body": [
        "PLAYSTATS_MISSION_OVER(${1:const char* p0}, ${2:Any p1}, ${3:Any p2}, ${4:BOOL p3}, ${5:BOOL p4}, ${6:BOOL p5})"
      ],
      "description": "PLAYSTATS_MISSION_OVER()"
    },
    "PLAYSTATS_MISSION_CHECKPOINT": {
      "prefix": "PLAYSTATS_MISSION_CHECKPOINT()",
      "body": [
        "PLAYSTATS_MISSION_CHECKPOINT(${1:const char* p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "PLAYSTATS_MISSION_CHECKPOINT()"
    },
    "PLAYSTATS_RANDOM_MISSION_DONE": {
      "prefix": "PLAYSTATS_RANDOM_MISSION_DONE()",
      "body": [
        "PLAYSTATS_RANDOM_MISSION_DONE(${1:const char* name}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "PLAYSTATS_RANDOM_MISSION_DONE()"
    },
    "PLAYSTATS_ROS_BET": {
      "prefix": "PLAYSTATS_ROS_BET()",
      "body": [
        "PLAYSTATS_ROS_BET(${1:int amount}, ${2:int act}, ${3:Player player}, ${4:float cm})"
      ],
      "description": "PLAYSTATS_ROS_BET()"
    },
    "PLAYSTATS_RACE_CHECKPOINT": {
      "prefix": "PLAYSTATS_RACE_CHECKPOINT()",
      "body": [
        "PLAYSTATS_RACE_CHECKPOINT(${1:Vehicle p0}, ${2:Any p1}, ${3:int p2}, ${4:int p3}, ${5:Any p4})"
      ],
      "description": "PLAYSTATS_RACE_CHECKPOINT()"
    },
    "PLAYSTATS_CREATE_MATCH_HISTORY_ID_2": {
      "prefix": "PLAYSTATS_CREATE_MATCH_HISTORY_ID_2()",
      "body": [
        "PLAYSTATS_CREATE_MATCH_HISTORY_ID_2(${1:int* playerAccountId}, ${2:int* posixTime})"
      ],
      "description": "PLAYSTATS_CREATE_MATCH_HISTORY_ID_2()"
    },
    "PLAYSTATS_MATCH_STARTED": {
      "prefix": "PLAYSTATS_MATCH_STARTED()",
      "body": ["PLAYSTATS_MATCH_STARTED(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"],
      "description": "PLAYSTATS_MATCH_STARTED()"
    },
    "PLAYSTATS_SHOP_ITEM": {
      "prefix": "PLAYSTATS_SHOP_ITEM()",
      "body": [
        "PLAYSTATS_SHOP_ITEM(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "PLAYSTATS_SHOP_ITEM()"
    },
    "PLAYSTATS_CRATE_DROP_MISSION_DONE": {
      "prefix": "PLAYSTATS_CRATE_DROP_MISSION_DONE()",
      "body": [
        "PLAYSTATS_CRATE_DROP_MISSION_DONE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7})"
      ],
      "description": "PLAYSTATS_CRATE_DROP_MISSION_DONE()"
    },
    "PLAYSTATS_CRATE_CREATED": {
      "prefix": "PLAYSTATS_CRATE_CREATED()",
      "body": [
        "PLAYSTATS_CRATE_CREATED(${1:float p0}, ${2:float p1}, ${3:float p2})"
      ],
      "description": "PLAYSTATS_CRATE_CREATED()"
    },
    "PLAYSTATS_HOLD_UP_MISSION_DONE": {
      "prefix": "PLAYSTATS_HOLD_UP_MISSION_DONE()",
      "body": [
        "PLAYSTATS_HOLD_UP_MISSION_DONE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "PLAYSTATS_HOLD_UP_MISSION_DONE()"
    },
    "PLAYSTATS_IMPORT_EXPORT_MISSION_DONE": {
      "prefix": "PLAYSTATS_IMPORT_EXPORT_MISSION_DONE()",
      "body": [
        "PLAYSTATS_IMPORT_EXPORT_MISSION_DONE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "PLAYSTATS_IMPORT_EXPORT_MISSION_DONE()"
    },
    "PLAYSTATS_RACE_TO_POINT_MISSION_DONE": {
      "prefix": "PLAYSTATS_RACE_TO_POINT_MISSION_DONE()",
      "body": [
        "PLAYSTATS_RACE_TO_POINT_MISSION_DONE(${1:int p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "PLAYSTATS_RACE_TO_POINT_MISSION_DONE()"
    },
    "PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE": {
      "prefix": "PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE()",
      "body": ["PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE(${1:Any p0})"],
      "description": "PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE()"
    },
    "PLAYSTATS_WEBSITE_VISITED": {
      "prefix": "PLAYSTATS_WEBSITE_VISITED()",
      "body": ["PLAYSTATS_WEBSITE_VISITED(${1:Hash scaleformHash}, ${2:int p1})"],
      "description": "PLAYSTATS_WEBSITE_VISITED()"
    },
    "PLAYSTATS_FRIEND_ACTIVITY": {
      "prefix": "PLAYSTATS_FRIEND_ACTIVITY()",
      "body": ["PLAYSTATS_FRIEND_ACTIVITY(${1:int p0}, ${2:BOOL p1})"],
      "description": "PLAYSTATS_FRIEND_ACTIVITY()"
    },
    "PLAYSTATS_ODDJOB_DONE": {
      "prefix": "PLAYSTATS_ODDJOB_DONE()",
      "body": [
        "PLAYSTATS_ODDJOB_DONE(${1:int totalTimeMs}, ${2:int p1}, ${3:BOOL p2})"
      ],
      "description": "PLAYSTATS_ODDJOB_DONE()"
    },
    "PLAYSTATS_PROP_CHANGE": {
      "prefix": "PLAYSTATS_PROP_CHANGE()",
      "body": [
        "PLAYSTATS_PROP_CHANGE(${1:Ped p0}, ${2:int p1}, ${3:int p2}, ${4:int p3})"
      ],
      "description": "PLAYSTATS_PROP_CHANGE()"
    },
    "PLAYSTATS_CLOTH_CHANGE": {
      "prefix": "PLAYSTATS_CLOTH_CHANGE()",
      "body": [
        "PLAYSTATS_CLOTH_CHANGE(${1:Ped p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "PLAYSTATS_CLOTH_CHANGE()"
    },
    "PLAYSTATS_WEAPON_MODE_CHANGE": {
      "prefix": "PLAYSTATS_WEAPON_MODE_CHANGE()",
      "body": [
        "PLAYSTATS_WEAPON_MODE_CHANGE(${1:Hash weaponHash}, ${2:Hash componentHashTo}, ${3:Hash componentHashFrom})"
      ],
      "description": "PLAYSTATS_WEAPON_MODE_CHANGE()"
    },
    "PLAYSTATS_CHEAT_APPLIED": {
      "prefix": "PLAYSTATS_CHEAT_APPLIED()",
      "body": ["PLAYSTATS_CHEAT_APPLIED(${1:const char* cheat})"],
      "description": "PLAYSTATS_CHEAT_APPLIED()"
    },
    "PLAYSTATS_JOB_ACTIVITY_END": {
      "prefix": "PLAYSTATS_JOB_ACTIVITY_END()",
      "body": [
        "PLAYSTATS_JOB_ACTIVITY_END(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})"
      ],
      "description": "PLAYSTATS_JOB_ACTIVITY_END()"
    },
    "PLAYSTATS_JOB_BEND": {
      "prefix": "PLAYSTATS_JOB_BEND()",
      "body": [
        "PLAYSTATS_JOB_BEND(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})"
      ],
      "description": "PLAYSTATS_JOB_BEND()"
    },
    "PLAYSTATS_JOB_LTS_END": {
      "prefix": "PLAYSTATS_JOB_LTS_END()",
      "body": [
        "PLAYSTATS_JOB_LTS_END(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})"
      ],
      "description": "PLAYSTATS_JOB_LTS_END()"
    },
    "PLAYSTATS_JOB_LTS_ROUND_END": {
      "prefix": "PLAYSTATS_JOB_LTS_ROUND_END()",
      "body": [
        "PLAYSTATS_JOB_LTS_ROUND_END(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2}, ${4:Any* p3})"
      ],
      "description": "PLAYSTATS_JOB_LTS_ROUND_END()"
    },
    "PLAYSTATS_QUICKFIX_TOOL": {
      "prefix": "PLAYSTATS_QUICKFIX_TOOL()",
      "body": [
        "PLAYSTATS_QUICKFIX_TOOL(${1:int element}, ${2:const char* item})"
      ],
      "description": "PLAYSTATS_QUICKFIX_TOOL()"
    },
    "PLAYSTATS_IDLE_KICK": {
      "prefix": "PLAYSTATS_IDLE_KICK()",
      "body": ["PLAYSTATS_IDLE_KICK(${1:int msStoodIdle})"],
      "description": "PLAYSTATS_IDLE_KICK()"
    },
    "PLAYSTATS_SET_JOIN_TYPE": {
      "prefix": "PLAYSTATS_SET_JOIN_TYPE()",
      "body": ["PLAYSTATS_SET_JOIN_TYPE(${1:int joinType})"],
      "description": "PLAYSTATS_SET_JOIN_TYPE()"
    },
    "PLAYSTATS_HEIST_SAVE_CHEAT": {
      "prefix": "PLAYSTATS_HEIST_SAVE_CHEAT()",
      "body": ["PLAYSTATS_HEIST_SAVE_CHEAT(${1:Hash hash}, ${2:int p1})"],
      "description": "PLAYSTATS_HEIST_SAVE_CHEAT()"
    },
    "PLAYSTATS_APPEND_DIRECTOR_METRIC": {
      "prefix": "PLAYSTATS_APPEND_DIRECTOR_METRIC()",
      "body": ["PLAYSTATS_APPEND_DIRECTOR_METRIC(${1:Any* p0})"],
      "description": "PLAYSTATS_APPEND_DIRECTOR_METRIC()"
    },
    "PLAYSTATS_AWARD_BAD_SPORT": {
      "prefix": "PLAYSTATS_AWARD_BAD_SPORT()",
      "body": ["PLAYSTATS_AWARD_BAD_SPORT(${1:int id})"],
      "description": "PLAYSTATS_AWARD_BAD_SPORT()"
    },
    "PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT": {
      "prefix": "PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT()",
      "body": ["PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT(${1:Hash modelHash})"],
      "description": "PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT()"
    },
    "_PLAYSTATS_SHOPMENU_NAV": {
      "prefix": "_PLAYSTATS_SHOPMENU_NAV()",
      "body": [
        "_PLAYSTATS_SHOPMENU_NAV(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "_PLAYSTATS_SHOPMENU_NAV()"
    },
    "PLAYSTATS_FM_EVENT_CHALLENGES": {
      "prefix": "PLAYSTATS_FM_EVENT_CHALLENGES()",
      "body": ["PLAYSTATS_FM_EVENT_CHALLENGES(${1:Any p0})"],
      "description": "PLAYSTATS_FM_EVENT_CHALLENGES()"
    },
    "PLAYSTATS_FM_EVENT_VEHICLETARGET": {
      "prefix": "PLAYSTATS_FM_EVENT_VEHICLETARGET()",
      "body": ["PLAYSTATS_FM_EVENT_VEHICLETARGET(${1:Any p0})"],
      "description": "PLAYSTATS_FM_EVENT_VEHICLETARGET()"
    },
    "PLAYSTATS_FM_EVENT_URBANWARFARE": {
      "prefix": "PLAYSTATS_FM_EVENT_URBANWARFARE()",
      "body": ["PLAYSTATS_FM_EVENT_URBANWARFARE(${1:Any p0})"],
      "description": "PLAYSTATS_FM_EVENT_URBANWARFARE()"
    },
    "PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION": {
      "prefix": "PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION()",
      "body": ["PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION(${1:Any p0})"],
      "description": "PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION()"
    },
    "PLAYSTATS_FM_EVENT_ATOB": {
      "prefix": "PLAYSTATS_FM_EVENT_ATOB()",
      "body": ["PLAYSTATS_FM_EVENT_ATOB(${1:Any p0})"],
      "description": "PLAYSTATS_FM_EVENT_ATOB()"
    },
    "PLAYSTATS_FM_EVENT_PENNEDIN": {
      "prefix": "PLAYSTATS_FM_EVENT_PENNEDIN()",
      "body": ["PLAYSTATS_FM_EVENT_PENNEDIN(${1:Any p0})"],
      "description": "PLAYSTATS_FM_EVENT_PENNEDIN()"
    },
    "PLAYSTATS_FM_EVENT_PASSTHEPARCEL": {
      "prefix": "PLAYSTATS_FM_EVENT_PASSTHEPARCEL()",
      "body": ["PLAYSTATS_FM_EVENT_PASSTHEPARCEL(${1:Any p0})"],
      "description": "PLAYSTATS_FM_EVENT_PASSTHEPARCEL()"
    },
    "PLAYSTATS_FM_EVENT_HOTPROPERTY": {
      "prefix": "PLAYSTATS_FM_EVENT_HOTPROPERTY()",
      "body": ["PLAYSTATS_FM_EVENT_HOTPROPERTY(${1:Any p0})"],
      "description": "PLAYSTATS_FM_EVENT_HOTPROPERTY()"
    },
    "PLAYSTATS_FM_EVENT_DEADDROP": {
      "prefix": "PLAYSTATS_FM_EVENT_DEADDROP()",
      "body": ["PLAYSTATS_FM_EVENT_DEADDROP(${1:Any p0})"],
      "description": "PLAYSTATS_FM_EVENT_DEADDROP()"
    },
    "PLAYSTATS_FM_EVENT_KINGOFTHECASTLE": {
      "prefix": "PLAYSTATS_FM_EVENT_KINGOFTHECASTLE()",
      "body": ["PLAYSTATS_FM_EVENT_KINGOFTHECASTLE(${1:Any p0})"],
      "description": "PLAYSTATS_FM_EVENT_KINGOFTHECASTLE()"
    },
    "PLAYSTATS_FM_EVENT_CRIMINALDAMAGE": {
      "prefix": "PLAYSTATS_FM_EVENT_CRIMINALDAMAGE()",
      "body": ["PLAYSTATS_FM_EVENT_CRIMINALDAMAGE(${1:Any p0})"],
      "description": "PLAYSTATS_FM_EVENT_CRIMINALDAMAGE()"
    },
    "PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE": {
      "prefix": "PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE()",
      "body": ["PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE(${1:Any p0})"],
      "description": "PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE()"
    },
    "PLAYSTATS_FM_EVENT_HUNTBEAST": {
      "prefix": "PLAYSTATS_FM_EVENT_HUNTBEAST()",
      "body": ["PLAYSTATS_FM_EVENT_HUNTBEAST(${1:Any p0})"],
      "description": "PLAYSTATS_FM_EVENT_HUNTBEAST()"
    },
    "PLAYSTATS_PIMENU_HIDE_OPTIONS": {
      "prefix": "PLAYSTATS_PIMENU_HIDE_OPTIONS()",
      "body": ["PLAYSTATS_PIMENU_HIDE_OPTIONS(${1:Any* data})"],
      "description": "PLAYSTATS_PIMENU_HIDE_OPTIONS()"
    },
    "LEADERBOARDS_GET_NUMBER_OF_COLUMNS": {
      "prefix": "LEADERBOARDS_GET_NUMBER_OF_COLUMNS()",
      "body": ["LEADERBOARDS_GET_NUMBER_OF_COLUMNS(${1:int p0}, ${2:Any p1})"],
      "description": "LEADERBOARDS_GET_NUMBER_OF_COLUMNS()"
    },
    "LEADERBOARDS_GET_COLUMN_ID": {
      "prefix": "LEADERBOARDS_GET_COLUMN_ID()",
      "body": [
        "LEADERBOARDS_GET_COLUMN_ID(${1:int p0}, ${2:int p1}, ${3:int p2})"
      ],
      "description": "LEADERBOARDS_GET_COLUMN_ID()"
    },
    "LEADERBOARDS_GET_COLUMN_TYPE": {
      "prefix": "LEADERBOARDS_GET_COLUMN_TYPE()",
      "body": [
        "LEADERBOARDS_GET_COLUMN_TYPE(${1:int p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "LEADERBOARDS_GET_COLUMN_TYPE()"
    },
    "LEADERBOARDS_READ_CLEAR_ALL": {
      "prefix": "LEADERBOARDS_READ_CLEAR_ALL()",
      "body": ["LEADERBOARDS_READ_CLEAR_ALL()"],
      "description": "LEADERBOARDS_READ_CLEAR_ALL()"
    },
    "LEADERBOARDS_READ_CLEAR": {
      "prefix": "LEADERBOARDS_READ_CLEAR()",
      "body": ["LEADERBOARDS_READ_CLEAR(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"],
      "description": "LEADERBOARDS_READ_CLEAR()"
    },
    "LEADERBOARDS_READ_PENDING": {
      "prefix": "LEADERBOARDS_READ_PENDING()",
      "body": [
        "LEADERBOARDS_READ_PENDING(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "LEADERBOARDS_READ_PENDING()"
    },
    "LEADERBOARDS_READ_ANY_PENDING": {
      "prefix": "LEADERBOARDS_READ_ANY_PENDING()",
      "body": ["LEADERBOARDS_READ_ANY_PENDING()"],
      "description": "LEADERBOARDS_READ_ANY_PENDING()"
    },
    "LEADERBOARDS_READ_SUCCESSFUL": {
      "prefix": "LEADERBOARDS_READ_SUCCESSFUL()",
      "body": [
        "LEADERBOARDS_READ_SUCCESSFUL(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "LEADERBOARDS_READ_SUCCESSFUL()"
    },
    "LEADERBOARDS2_READ_FRIENDS_BY_ROW": {
      "prefix": "LEADERBOARDS2_READ_FRIENDS_BY_ROW()",
      "body": [
        "LEADERBOARDS2_READ_FRIENDS_BY_ROW(${1:Any* p0}, ${2:Any* p1}, ${3:Any p2}, ${4:BOOL p3}, ${5:Any p4}, ${6:Any p5})"
      ],
      "description": "LEADERBOARDS2_READ_FRIENDS_BY_ROW()"
    },
    "LEADERBOARDS2_READ_BY_HANDLE": {
      "prefix": "LEADERBOARDS2_READ_BY_HANDLE()",
      "body": ["LEADERBOARDS2_READ_BY_HANDLE(${1:Any* p0}, ${2:Any* p1})"],
      "description": "LEADERBOARDS2_READ_BY_HANDLE()"
    },
    "LEADERBOARDS2_READ_BY_RANK": {
      "prefix": "LEADERBOARDS2_READ_BY_RANK()",
      "body": [
        "LEADERBOARDS2_READ_BY_RANK(${1:Any* p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "LEADERBOARDS2_READ_BY_RANK()"
    },
    "LEADERBOARDS2_READ_BY_RADIUS": {
      "prefix": "LEADERBOARDS2_READ_BY_RADIUS()",
      "body": [
        "LEADERBOARDS2_READ_BY_RADIUS(${1:Any* p0}, ${2:Any p1}, ${3:Any* p2})"
      ],
      "description": "LEADERBOARDS2_READ_BY_RADIUS()"
    },
    "LEADERBOARDS2_READ_BY_SCORE_INT": {
      "prefix": "LEADERBOARDS2_READ_BY_SCORE_INT()",
      "body": [
        "LEADERBOARDS2_READ_BY_SCORE_INT(${1:Any* p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "LEADERBOARDS2_READ_BY_SCORE_INT()"
    },
    "LEADERBOARDS2_READ_BY_SCORE_FLOAT": {
      "prefix": "LEADERBOARDS2_READ_BY_SCORE_FLOAT()",
      "body": [
        "LEADERBOARDS2_READ_BY_SCORE_FLOAT(${1:Any* p0}, ${2:float p1}, ${3:Any p2})"
      ],
      "description": "LEADERBOARDS2_READ_BY_SCORE_FLOAT()"
    },
    "LEADERBOARDS2_READ_RANK_PREDICTION": {
      "prefix": "LEADERBOARDS2_READ_RANK_PREDICTION()",
      "body": [
        "LEADERBOARDS2_READ_RANK_PREDICTION(${1:Any* p0}, ${2:Any* p1}, ${3:Any* p2})"
      ],
      "description": "LEADERBOARDS2_READ_RANK_PREDICTION()"
    },
    "LEADERBOARDS2_READ_BY_PLAFORM": {
      "prefix": "LEADERBOARDS2_READ_BY_PLAFORM()",
      "body": [
        "LEADERBOARDS2_READ_BY_PLAFORM(${1:Any* p0}, ${2:const char* gamerHandleCsv}, ${3:const char* platformName})"
      ],
      "description": "LEADERBOARDS2_READ_BY_PLAFORM()"
    },
    "LEADERBOARDS2_READ_GET_ROW_DATA_START": {
      "prefix": "LEADERBOARDS2_READ_GET_ROW_DATA_START()",
      "body": ["LEADERBOARDS2_READ_GET_ROW_DATA_START(${1:Any* p0})"],
      "description": "LEADERBOARDS2_READ_GET_ROW_DATA_START()"
    },
    "LEADERBOARDS2_READ_GET_ROW_DATA_END": {
      "prefix": "LEADERBOARDS2_READ_GET_ROW_DATA_END()",
      "body": ["LEADERBOARDS2_READ_GET_ROW_DATA_END()"],
      "description": "LEADERBOARDS2_READ_GET_ROW_DATA_END()"
    },
    "LEADERBOARDS2_READ_GET_ROW_DATA_INFO": {
      "prefix": "LEADERBOARDS2_READ_GET_ROW_DATA_INFO()",
      "body": ["LEADERBOARDS2_READ_GET_ROW_DATA_INFO(${1:Any p0}, ${2:Any* p1})"],
      "description": "LEADERBOARDS2_READ_GET_ROW_DATA_INFO()"
    },
    "LEADERBOARDS2_READ_GET_ROW_DATA_INT": {
      "prefix": "LEADERBOARDS2_READ_GET_ROW_DATA_INT()",
      "body": ["LEADERBOARDS2_READ_GET_ROW_DATA_INT(${1:Any p0}, ${2:Any p1})"],
      "description": "LEADERBOARDS2_READ_GET_ROW_DATA_INT()"
    },
    "LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT": {
      "prefix": "LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT()",
      "body": ["LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT(${1:Any p0}, ${2:Any p1})"],
      "description": "LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT()"
    },
    "LEADERBOARDS2_WRITE_DATA": {
      "prefix": "LEADERBOARDS2_WRITE_DATA()",
      "body": ["LEADERBOARDS2_WRITE_DATA(${1:Any* p0})"],
      "description": "LEADERBOARDS2_WRITE_DATA()"
    },
    "LEADERBOARDS_WRITE_ADD_COLUMN": {
      "prefix": "LEADERBOARDS_WRITE_ADD_COLUMN()",
      "body": [
        "LEADERBOARDS_WRITE_ADD_COLUMN(${1:Any p0}, ${2:Any p1}, ${3:float p2})"
      ],
      "description": "LEADERBOARDS_WRITE_ADD_COLUMN()"
    },
    "LEADERBOARDS_WRITE_ADD_COLUMN_LONG": {
      "prefix": "LEADERBOARDS_WRITE_ADD_COLUMN_LONG()",
      "body": [
        "LEADERBOARDS_WRITE_ADD_COLUMN_LONG(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "LEADERBOARDS_WRITE_ADD_COLUMN_LONG()"
    },
    "LEADERBOARDS_CACHE_DATA_ROW": {
      "prefix": "LEADERBOARDS_CACHE_DATA_ROW()",
      "body": ["LEADERBOARDS_CACHE_DATA_ROW(${1:Any* p0})"],
      "description": "LEADERBOARDS_CACHE_DATA_ROW()"
    },
    "LEADERBOARDS_CLEAR_CACHE_DATA": {
      "prefix": "LEADERBOARDS_CLEAR_CACHE_DATA()",
      "body": ["LEADERBOARDS_CLEAR_CACHE_DATA()"],
      "description": "LEADERBOARDS_CLEAR_CACHE_DATA()"
    },
    "LEADERBOARDS_CLEAR_CACHE_DATA_ID": {
      "prefix": "LEADERBOARDS_CLEAR_CACHE_DATA_ID()",
      "body": ["LEADERBOARDS_CLEAR_CACHE_DATA_ID(${1:Any p0})"],
      "description": "LEADERBOARDS_CLEAR_CACHE_DATA_ID()"
    },
    "LEADERBOARDS_GET_CACHE_EXISTS": {
      "prefix": "LEADERBOARDS_GET_CACHE_EXISTS()",
      "body": ["LEADERBOARDS_GET_CACHE_EXISTS(${1:Any p0})"],
      "description": "LEADERBOARDS_GET_CACHE_EXISTS()"
    },
    "LEADERBOARDS_GET_CACHE_TIME": {
      "prefix": "LEADERBOARDS_GET_CACHE_TIME()",
      "body": ["LEADERBOARDS_GET_CACHE_TIME(${1:Any p0})"],
      "description": "LEADERBOARDS_GET_CACHE_TIME()"
    },
    "LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS": {
      "prefix": "LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS()",
      "body": ["LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS(${1:Any p0})"],
      "description": "LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS()"
    },
    "LEADERBOARDS_GET_CACHE_DATA_ROW": {
      "prefix": "LEADERBOARDS_GET_CACHE_DATA_ROW()",
      "body": [
        "LEADERBOARDS_GET_CACHE_DATA_ROW(${1:Any p0}, ${2:Any p1}, ${3:Any* p2})"
      ],
      "description": "LEADERBOARDS_GET_CACHE_DATA_ROW()"
    },
    "PRESENCE_EVENT_UPDATESTAT_INT": {
      "prefix": "PRESENCE_EVENT_UPDATESTAT_INT()",
      "body": [
        "PRESENCE_EVENT_UPDATESTAT_INT(${1:Hash statHash}, ${2:int value}, ${3:int p2})"
      ],
      "description": "PRESENCE_EVENT_UPDATESTAT_INT()"
    },
    "PRESENCE_EVENT_UPDATESTAT_FLOAT": {
      "prefix": "PRESENCE_EVENT_UPDATESTAT_FLOAT()",
      "body": [
        "PRESENCE_EVENT_UPDATESTAT_FLOAT(${1:Hash statHash}, ${2:float value}, ${3:int p2})"
      ],
      "description": "PRESENCE_EVENT_UPDATESTAT_FLOAT()"
    },
    "PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING": {
      "prefix": "PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING()",
      "body": [
        "PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING(${1:Hash statHash}, ${2:int value}, ${3:int p2}, ${4:const char* string})"
      ],
      "description": "PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING()"
    },
    "GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES": {
      "prefix": "GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES()",
      "body": ["GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES()"],
      "description": "GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES()"
    },
    "SET_HAS_POSTED_ALL_VEHICLES_DRIVEN": {
      "prefix": "SET_HAS_POSTED_ALL_VEHICLES_DRIVEN()",
      "body": ["SET_HAS_POSTED_ALL_VEHICLES_DRIVEN()"],
      "description": "SET_HAS_POSTED_ALL_VEHICLES_DRIVEN()"
    },
    "SET_PROFILE_SETTING_PROLOGUE_COMPLETE": {
      "prefix": "SET_PROFILE_SETTING_PROLOGUE_COMPLETE()",
      "body": ["SET_PROFILE_SETTING_PROLOGUE_COMPLETE()"],
      "description": "SET_PROFILE_SETTING_PROLOGUE_COMPLETE()"
    },
    "SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE": {
      "prefix": "SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE()",
      "body": ["SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE()"],
      "description": "SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE()"
    },
    "SET_PROFILE_SETTING_CREATOR_RACES_DONE": {
      "prefix": "SET_PROFILE_SETTING_CREATOR_RACES_DONE()",
      "body": ["SET_PROFILE_SETTING_CREATOR_RACES_DONE(${1:int value})"],
      "description": "SET_PROFILE_SETTING_CREATOR_RACES_DONE()"
    },
    "SET_PROFILE_SETTING_CREATOR_DM_DONE": {
      "prefix": "SET_PROFILE_SETTING_CREATOR_DM_DONE()",
      "body": ["SET_PROFILE_SETTING_CREATOR_DM_DONE(${1:int value})"],
      "description": "SET_PROFILE_SETTING_CREATOR_DM_DONE()"
    },
    "SET_PROFILE_SETTING_CREATOR_CTF_DONE": {
      "prefix": "SET_PROFILE_SETTING_CREATOR_CTF_DONE()",
      "body": ["SET_PROFILE_SETTING_CREATOR_CTF_DONE(${1:int value})"],
      "description": "SET_PROFILE_SETTING_CREATOR_CTF_DONE()"
    },
    "SET_JOB_ACTIVITY_ID_STARTED": {
      "prefix": "SET_JOB_ACTIVITY_ID_STARTED()",
      "body": [
        "SET_JOB_ACTIVITY_ID_STARTED(${1:Any p0}, ${2:int characterSlot})"
      ],
      "description": "SET_JOB_ACTIVITY_ID_STARTED()"
    },
    "SET_FREEMODE_PROLOGUE_DONE": {
      "prefix": "SET_FREEMODE_PROLOGUE_DONE()",
      "body": ["SET_FREEMODE_PROLOGUE_DONE(${1:Any p0}, ${2:int characterSlot})"],
      "description": "SET_FREEMODE_PROLOGUE_DONE()"
    },
    "SET_FREEMODE_STRAND_PROGRESSION_STATUS": {
      "prefix": "SET_FREEMODE_STRAND_PROGRESSION_STATUS()",
      "body": [
        "SET_FREEMODE_STRAND_PROGRESSION_STATUS(${1:int profileSetting}, ${2:int settingValue})"
      ],
      "description": "SET_FREEMODE_STRAND_PROGRESSION_STATUS()"
    },
    "STAT_NETWORK_INCREMENT_ON_SUICIDE": {
      "prefix": "STAT_NETWORK_INCREMENT_ON_SUICIDE()",
      "body": ["STAT_NETWORK_INCREMENT_ON_SUICIDE(${1:Any p0}, ${2:float p1})"],
      "description": "STAT_NETWORK_INCREMENT_ON_SUICIDE()"
    },
    "STAT_SET_CHEAT_IS_ACTIVE": {
      "prefix": "STAT_SET_CHEAT_IS_ACTIVE()",
      "body": ["STAT_SET_CHEAT_IS_ACTIVE()"],
      "description": "STAT_SET_CHEAT_IS_ACTIVE()"
    },
    "LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE": {
      "prefix": "LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE()",
      "body": [
        "LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE(${1:Any* p0}, ${2:Any* p1})"
      ],
      "description": "LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE()"
    },
    "FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE": {
      "prefix": "FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE()",
      "body": ["FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE()"],
      "description": "FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE()"
    },
    "STAT_MIGRATE_CLEAR_FOR_RESTART": {
      "prefix": "STAT_MIGRATE_CLEAR_FOR_RESTART()",
      "body": ["STAT_MIGRATE_CLEAR_FOR_RESTART()"],
      "description": "STAT_MIGRATE_CLEAR_FOR_RESTART()"
    },
    "STAT_MIGRATE_SAVEGAME_START": {
      "prefix": "STAT_MIGRATE_SAVEGAME_START()",
      "body": ["STAT_MIGRATE_SAVEGAME_START(${1:const char* platformName})"],
      "description": "STAT_MIGRATE_SAVEGAME_START()"
    },
    "STAT_MIGRATE_SAVEGAME_GET_STATUS": {
      "prefix": "STAT_MIGRATE_SAVEGAME_GET_STATUS()",
      "body": ["STAT_MIGRATE_SAVEGAME_GET_STATUS()"],
      "description": "STAT_MIGRATE_SAVEGAME_GET_STATUS()"
    },
    "STAT_MIGRATE_CHECK_ALREADY_DONE": {
      "prefix": "STAT_MIGRATE_CHECK_ALREADY_DONE()",
      "body": ["STAT_MIGRATE_CHECK_ALREADY_DONE()"],
      "description": "STAT_MIGRATE_CHECK_ALREADY_DONE()"
    },
    "STAT_MIGRATE_CHECK_START": {
      "prefix": "STAT_MIGRATE_CHECK_START()",
      "body": ["STAT_MIGRATE_CHECK_START()"],
      "description": "STAT_MIGRATE_CHECK_START()"
    },
    "STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE": {
      "prefix": "STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE()",
      "body": ["STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE(${1:int p0})"],
      "description": "STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE()"
    },
    "STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS": {
      "prefix": "STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS()",
      "body": [
        "STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS(${1:int p0}, ${2:Any* p1})"
      ],
      "description": "STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS()"
    },
    "STAT_GET_SAVE_MIGRATION_STATUS": {
      "prefix": "STAT_GET_SAVE_MIGRATION_STATUS()",
      "body": ["STAT_GET_SAVE_MIGRATION_STATUS(${1:Any* data})"],
      "description": "STAT_GET_SAVE_MIGRATION_STATUS()"
    },
    "STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION": {
      "prefix": "STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION()",
      "body": ["STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION()"],
      "description": "STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION()"
    },
    "STAT_GET_CANCEL_SAVE_MIGRATION_STATUS": {
      "prefix": "STAT_GET_CANCEL_SAVE_MIGRATION_STATUS()",
      "body": ["STAT_GET_CANCEL_SAVE_MIGRATION_STATUS()"],
      "description": "STAT_GET_CANCEL_SAVE_MIGRATION_STATUS()"
    },
    "STAT_SAVE_MIGRATION_CONSUME_CONTENT": {
      "prefix": "STAT_SAVE_MIGRATION_CONSUME_CONTENT()",
      "body": [
        "STAT_SAVE_MIGRATION_CONSUME_CONTENT(${1:Hash contentId}, ${2:const char* srcPlatform}, ${3:const char* srcGamerHandle})"
      ],
      "description": "STAT_SAVE_MIGRATION_CONSUME_CONTENT()"
    },
    "STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS": {
      "prefix": "STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS()",
      "body": ["STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS(${1:int* p0})"],
      "description": "STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS()"
    },
    "STAT_ENABLE_STATS_TRACKING": {
      "prefix": "STAT_ENABLE_STATS_TRACKING()",
      "body": ["STAT_ENABLE_STATS_TRACKING()"],
      "description": "STAT_ENABLE_STATS_TRACKING()"
    },
    "STAT_DISABLE_STATS_TRACKING": {
      "prefix": "STAT_DISABLE_STATS_TRACKING()",
      "body": ["STAT_DISABLE_STATS_TRACKING()"],
      "description": "STAT_DISABLE_STATS_TRACKING()"
    },
    "STAT_IS_STATS_TRACKING_ENABLED": {
      "prefix": "STAT_IS_STATS_TRACKING_ENABLED()",
      "body": ["STAT_IS_STATS_TRACKING_ENABLED()"],
      "description": "STAT_IS_STATS_TRACKING_ENABLED()"
    },
    "STAT_START_RECORD_STAT": {
      "prefix": "STAT_START_RECORD_STAT()",
      "body": ["STAT_START_RECORD_STAT(${1:int statType}, ${2:int valueType})"],
      "description": "STAT_START_RECORD_STAT()"
    },
    "STAT_STOP_RECORD_STAT": {
      "prefix": "STAT_STOP_RECORD_STAT()",
      "body": ["STAT_STOP_RECORD_STAT()"],
      "description": "STAT_STOP_RECORD_STAT()"
    },
    "STAT_GET_RECORDED_VALUE": {
      "prefix": "STAT_GET_RECORDED_VALUE()",
      "body": ["STAT_GET_RECORDED_VALUE(${1:float* value})"],
      "description": "STAT_GET_RECORDED_VALUE()"
    },
    "STAT_IS_RECORDING_STAT": {
      "prefix": "STAT_IS_RECORDING_STAT()",
      "body": ["STAT_IS_RECORDING_STAT()"],
      "description": "STAT_IS_RECORDING_STAT()"
    },
    "STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE": {
      "prefix": "STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE()",
      "body": ["STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE()"],
      "description": "STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE()"
    },
    "STAT_GET_CURRENT_REAR_WHEEL_DISTANCE": {
      "prefix": "STAT_GET_CURRENT_REAR_WHEEL_DISTANCE()",
      "body": ["STAT_GET_CURRENT_REAR_WHEEL_DISTANCE()"],
      "description": "STAT_GET_CURRENT_REAR_WHEEL_DISTANCE()"
    },
    "STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE": {
      "prefix": "STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE()",
      "body": ["STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE()"],
      "description": "STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE()"
    },
    "STAT_GET_CURRENT_JUMP_DISTANCE": {
      "prefix": "STAT_GET_CURRENT_JUMP_DISTANCE()",
      "body": ["STAT_GET_CURRENT_JUMP_DISTANCE()"],
      "description": "STAT_GET_CURRENT_JUMP_DISTANCE()"
    },
    "STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE": {
      "prefix": "STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE()",
      "body": ["STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE()"],
      "description": "STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE()"
    },
    "STAT_GET_CURRENT_SPEED": {
      "prefix": "STAT_GET_CURRENT_SPEED()",
      "body": ["STAT_GET_CURRENT_SPEED()"],
      "description": "STAT_GET_CURRENT_SPEED()"
    },
    "STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE": {
      "prefix": "STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE()",
      "body": ["STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE()"],
      "description": "STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE()"
    },
    "STAT_GET_CURRENT_SKYDIVING_DISTANCE": {
      "prefix": "STAT_GET_CURRENT_SKYDIVING_DISTANCE()",
      "body": ["STAT_GET_CURRENT_SKYDIVING_DISTANCE()"],
      "description": "STAT_GET_CURRENT_SKYDIVING_DISTANCE()"
    },
    "STAT_GET_CHALLENGE_FLYING_DIST": {
      "prefix": "STAT_GET_CHALLENGE_FLYING_DIST()",
      "body": ["STAT_GET_CHALLENGE_FLYING_DIST()"],
      "description": "STAT_GET_CHALLENGE_FLYING_DIST()"
    },
    "STAT_GET_FLYING_ALTITUDE": {
      "prefix": "STAT_GET_FLYING_ALTITUDE()",
      "body": ["STAT_GET_FLYING_ALTITUDE(${1:float* outValue})"],
      "description": "STAT_GET_FLYING_ALTITUDE()"
    },
    "STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN": {
      "prefix": "STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN()",
      "body": ["STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN()"],
      "description": "STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN()"
    },
    "STAT_GET_VEHICLE_BAIL_DISTANCE": {
      "prefix": "STAT_GET_VEHICLE_BAIL_DISTANCE()",
      "body": ["STAT_GET_VEHICLE_BAIL_DISTANCE()"],
      "description": "STAT_GET_VEHICLE_BAIL_DISTANCE()"
    },
    "STAT_ROLLBACK_SAVE_MIGRATION": {
      "prefix": "STAT_ROLLBACK_SAVE_MIGRATION()",
      "body": ["STAT_ROLLBACK_SAVE_MIGRATION()"],
      "description": "STAT_ROLLBACK_SAVE_MIGRATION()"
    },
    "SET_HAS_SPECIALEDITION_CONTENT": {
      "prefix": "SET_HAS_SPECIALEDITION_CONTENT()",
      "body": ["SET_HAS_SPECIALEDITION_CONTENT(${1:int value})"],
      "description": "SET_HAS_SPECIALEDITION_CONTENT()"
    },
    "SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING": {
      "prefix": "SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING()",
      "body": [
        "SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING(${1:int transactionId})"
      ],
      "description": "SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING()"
    },
    "GET_BOSS_GOON_UUID": {
      "prefix": "GET_BOSS_GOON_UUID()",
      "body": [
        "GET_BOSS_GOON_UUID(${1:int characterSlot}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "GET_BOSS_GOON_UUID()"
    },
    "PLAYSTATS_BW_BOSSONBOSSDEATHMATCH": {
      "prefix": "PLAYSTATS_BW_BOSSONBOSSDEATHMATCH()",
      "body": ["PLAYSTATS_BW_BOSSONBOSSDEATHMATCH(${1:Any p0})"],
      "description": "PLAYSTATS_BW_BOSSONBOSSDEATHMATCH()"
    },
    "PLAYSTATS_BW_YATCHATTACK": {
      "prefix": "PLAYSTATS_BW_YATCHATTACK()",
      "body": ["PLAYSTATS_BW_YATCHATTACK(${1:Any p0})"],
      "description": "PLAYSTATS_BW_YATCHATTACK()"
    },
    "PLAYSTATS_BW_HUNT_THE_BOSS": {
      "prefix": "PLAYSTATS_BW_HUNT_THE_BOSS()",
      "body": ["PLAYSTATS_BW_HUNT_THE_BOSS(${1:Any p0})"],
      "description": "PLAYSTATS_BW_HUNT_THE_BOSS()"
    },
    "PLAYSTATS_BW_SIGHTSEER": {
      "prefix": "PLAYSTATS_BW_SIGHTSEER()",
      "body": ["PLAYSTATS_BW_SIGHTSEER(${1:Any p0})"],
      "description": "PLAYSTATS_BW_SIGHTSEER()"
    },
    "PLAYSTATS_BW_ASSAULT": {
      "prefix": "PLAYSTATS_BW_ASSAULT()",
      "body": ["PLAYSTATS_BW_ASSAULT(${1:Any p0})"],
      "description": "PLAYSTATS_BW_ASSAULT()"
    },
    "PLAYSTATS_BW_BELLY_OF_THE_BEAST": {
      "prefix": "PLAYSTATS_BW_BELLY_OF_THE_BEAST()",
      "body": ["PLAYSTATS_BW_BELLY_OF_THE_BEAST(${1:Any p0})"],
      "description": "PLAYSTATS_BW_BELLY_OF_THE_BEAST()"
    },
    "PLAYSTATS_BW_HEAD_HUNTER": {
      "prefix": "PLAYSTATS_BW_HEAD_HUNTER()",
      "body": ["PLAYSTATS_BW_HEAD_HUNTER(${1:Any p0})"],
      "description": "PLAYSTATS_BW_HEAD_HUNTER()"
    },
    "PLAYSTATS_BW_FRAGILE_GOODS": {
      "prefix": "PLAYSTATS_BW_FRAGILE_GOODS()",
      "body": ["PLAYSTATS_BW_FRAGILE_GOODS(${1:Any p0})"],
      "description": "PLAYSTATS_BW_FRAGILE_GOODS()"
    },
    "PLAYSTATS_BW_AIR_FREIGHT": {
      "prefix": "PLAYSTATS_BW_AIR_FREIGHT()",
      "body": ["PLAYSTATS_BW_AIR_FREIGHT(${1:Any p0})"],
      "description": "PLAYSTATS_BW_AIR_FREIGHT()"
    },
    "PLAYSTATS_BC_CAR_JACKING": {
      "prefix": "PLAYSTATS_BC_CAR_JACKING()",
      "body": ["PLAYSTATS_BC_CAR_JACKING(${1:Any p0})"],
      "description": "PLAYSTATS_BC_CAR_JACKING()"
    },
    "PLAYSTATS_BC_SMASH_AND_GRAB": {
      "prefix": "PLAYSTATS_BC_SMASH_AND_GRAB()",
      "body": ["PLAYSTATS_BC_SMASH_AND_GRAB(${1:Any p0})"],
      "description": "PLAYSTATS_BC_SMASH_AND_GRAB()"
    },
    "PLAYSTATS_BC_PROTECTION_RACKET": {
      "prefix": "PLAYSTATS_BC_PROTECTION_RACKET()",
      "body": ["PLAYSTATS_BC_PROTECTION_RACKET(${1:Any p0})"],
      "description": "PLAYSTATS_BC_PROTECTION_RACKET()"
    },
    "PLAYSTATS_BC_MOST_WANTED": {
      "prefix": "PLAYSTATS_BC_MOST_WANTED()",
      "body": ["PLAYSTATS_BC_MOST_WANTED(${1:Any p0})"],
      "description": "PLAYSTATS_BC_MOST_WANTED()"
    },
    "PLAYSTATS_BC_FINDERS_KEEPERS": {
      "prefix": "PLAYSTATS_BC_FINDERS_KEEPERS()",
      "body": ["PLAYSTATS_BC_FINDERS_KEEPERS(${1:Any p0})"],
      "description": "PLAYSTATS_BC_FINDERS_KEEPERS()"
    },
    "PLAYSTATS_BC_POINT_TO_POINT": {
      "prefix": "PLAYSTATS_BC_POINT_TO_POINT()",
      "body": ["PLAYSTATS_BC_POINT_TO_POINT(${1:Any p0})"],
      "description": "PLAYSTATS_BC_POINT_TO_POINT()"
    },
    "PLAYSTATS_BC_CASHING": {
      "prefix": "PLAYSTATS_BC_CASHING()",
      "body": ["PLAYSTATS_BC_CASHING(${1:Any p0})"],
      "description": "PLAYSTATS_BC_CASHING()"
    },
    "PLAYSTATS_BC_SALVAGE": {
      "prefix": "PLAYSTATS_BC_SALVAGE()",
      "body": ["PLAYSTATS_BC_SALVAGE(${1:Any p0})"],
      "description": "PLAYSTATS_BC_SALVAGE()"
    },
    "PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT": {
      "prefix": "PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT()",
      "body": ["PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT(${1:int amount})"],
      "description": "PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT()"
    },
    "PLAYSTATS_BUY_CONTRABAND_MISSION": {
      "prefix": "PLAYSTATS_BUY_CONTRABAND_MISSION()",
      "body": ["PLAYSTATS_BUY_CONTRABAND_MISSION(${1:Any* data})"],
      "description": "PLAYSTATS_BUY_CONTRABAND_MISSION()"
    },
    "PLAYSTATS_SELL_CONTRABAND_MISSION": {
      "prefix": "PLAYSTATS_SELL_CONTRABAND_MISSION()",
      "body": ["PLAYSTATS_SELL_CONTRABAND_MISSION(${1:Any* data})"],
      "description": "PLAYSTATS_SELL_CONTRABAND_MISSION()"
    },
    "PLAYSTATS_DEFEND_CONTRABAND_MISSION": {
      "prefix": "PLAYSTATS_DEFEND_CONTRABAND_MISSION()",
      "body": ["PLAYSTATS_DEFEND_CONTRABAND_MISSION(${1:Any* data})"],
      "description": "PLAYSTATS_DEFEND_CONTRABAND_MISSION()"
    },
    "PLAYSTATS_RECOVER_CONTRABAND_MISSION": {
      "prefix": "PLAYSTATS_RECOVER_CONTRABAND_MISSION()",
      "body": ["PLAYSTATS_RECOVER_CONTRABAND_MISSION(${1:Any* data})"],
      "description": "PLAYSTATS_RECOVER_CONTRABAND_MISSION()"
    },
    "PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT": {
      "prefix": "PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT()",
      "body": ["PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT(${1:Any p0})"],
      "description": "PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT()"
    },
    "START_BEING_BOSS": {
      "prefix": "START_BEING_BOSS()",
      "body": ["START_BEING_BOSS(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"],
      "description": "START_BEING_BOSS()"
    },
    "START_BEING_GOON": {
      "prefix": "START_BEING_GOON()",
      "body": ["START_BEING_GOON(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"],
      "description": "START_BEING_GOON()"
    },
    "END_BEING_BOSS": {
      "prefix": "END_BEING_BOSS()",
      "body": ["END_BEING_BOSS(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"],
      "description": "END_BEING_BOSS()"
    },
    "END_BEING_GOON": {
      "prefix": "END_BEING_GOON()",
      "body": [
        "END_BEING_GOON(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "END_BEING_GOON()"
    },
    "HIRED_LIMO": {
      "prefix": "HIRED_LIMO()",
      "body": ["HIRED_LIMO(${1:Any p0}, ${2:Any p1})"],
      "description": "HIRED_LIMO()"
    },
    "ORDER_BOSS_VEHICLE": {
      "prefix": "ORDER_BOSS_VEHICLE()",
      "body": [
        "ORDER_BOSS_VEHICLE(${1:Any p0}, ${2:Any p1}, ${3:Hash vehicleHash})"
      ],
      "description": "ORDER_BOSS_VEHICLE()"
    },
    "CHANGE_UNIFORM": {
      "prefix": "CHANGE_UNIFORM()",
      "body": ["CHANGE_UNIFORM(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"],
      "description": "CHANGE_UNIFORM()"
    },
    "CHANGE_GOON_LOOKING_FOR_WORK": {
      "prefix": "CHANGE_GOON_LOOKING_FOR_WORK()",
      "body": ["CHANGE_GOON_LOOKING_FOR_WORK(${1:Any p0})"],
      "description": "CHANGE_GOON_LOOKING_FOR_WORK()"
    },
    "SEND_METRIC_GHOSTING_TO_PLAYER": {
      "prefix": "SEND_METRIC_GHOSTING_TO_PLAYER()",
      "body": ["SEND_METRIC_GHOSTING_TO_PLAYER(${1:Any p0})"],
      "description": "SEND_METRIC_GHOSTING_TO_PLAYER()"
    },
    "SEND_METRIC_VIP_POACH": {
      "prefix": "SEND_METRIC_VIP_POACH()",
      "body": ["SEND_METRIC_VIP_POACH(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"],
      "description": "SEND_METRIC_VIP_POACH()"
    },
    "SEND_METRIC_PUNISH_BODYGUARD": {
      "prefix": "SEND_METRIC_PUNISH_BODYGUARD()",
      "body": ["SEND_METRIC_PUNISH_BODYGUARD(${1:Any p0})"],
      "description": "SEND_METRIC_PUNISH_BODYGUARD()"
    },
    "PLAYSTATS_START_TRACKING_STUNTS": {
      "prefix": "PLAYSTATS_START_TRACKING_STUNTS()",
      "body": ["PLAYSTATS_START_TRACKING_STUNTS()"],
      "description": "PLAYSTATS_START_TRACKING_STUNTS()"
    },
    "PLAYSTATS_STOP_TRACKING_STUNTS": {
      "prefix": "PLAYSTATS_STOP_TRACKING_STUNTS()",
      "body": ["PLAYSTATS_STOP_TRACKING_STUNTS()"],
      "description": "PLAYSTATS_STOP_TRACKING_STUNTS()"
    },
    "PLAYSTATS_MISSION_ENDED": {
      "prefix": "PLAYSTATS_MISSION_ENDED()",
      "body": ["PLAYSTATS_MISSION_ENDED(${1:Any p0})"],
      "description": "PLAYSTATS_MISSION_ENDED()"
    },
    "PLAYSTATS_IMPEXP_MISSION_ENDED": {
      "prefix": "PLAYSTATS_IMPEXP_MISSION_ENDED()",
      "body": ["PLAYSTATS_IMPEXP_MISSION_ENDED(${1:Any p0})"],
      "description": "PLAYSTATS_IMPEXP_MISSION_ENDED()"
    },
    "PLAYSTATS_CHANGE_MC_ROLE": {
      "prefix": "PLAYSTATS_CHANGE_MC_ROLE()",
      "body": [
        "PLAYSTATS_CHANGE_MC_ROLE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:int role}, ${6:int p5}, ${7:Any p6})"
      ],
      "description": "PLAYSTATS_CHANGE_MC_ROLE()"
    },
    "PLAYSTATS_CHANGE_MC_OUTFIT": {
      "prefix": "PLAYSTATS_CHANGE_MC_OUTFIT()",
      "body": [
        "PLAYSTATS_CHANGE_MC_OUTFIT(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "PLAYSTATS_CHANGE_MC_OUTFIT()"
    },
    "PLAYSTATS_SWITCH_MC_EMBLEM": {
      "prefix": "PLAYSTATS_SWITCH_MC_EMBLEM()",
      "body": [
        "PLAYSTATS_SWITCH_MC_EMBLEM(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "PLAYSTATS_SWITCH_MC_EMBLEM()"
    },
    "PLAYSTATS_MC_REQUEST_BIKE": {
      "prefix": "PLAYSTATS_MC_REQUEST_BIKE()",
      "body": [
        "PLAYSTATS_MC_REQUEST_BIKE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "PLAYSTATS_MC_REQUEST_BIKE()"
    },
    "PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER": {
      "prefix": "PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER()",
      "body": [
        "PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER()"
    },
    "PLAYSTATS_ABANDONED_MC": {
      "prefix": "PLAYSTATS_ABANDONED_MC()",
      "body": [
        "PLAYSTATS_ABANDONED_MC(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "PLAYSTATS_ABANDONED_MC()"
    },
    "PLAYSTATS_EARNED_MC_POINTS": {
      "prefix": "PLAYSTATS_EARNED_MC_POINTS()",
      "body": [
        "PLAYSTATS_EARNED_MC_POINTS(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
      ],
      "description": "PLAYSTATS_EARNED_MC_POINTS()"
    },
    "PLAYSTATS_MC_FORMATION_ENDS": {
      "prefix": "PLAYSTATS_MC_FORMATION_ENDS()",
      "body": [
        "PLAYSTATS_MC_FORMATION_ENDS(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
      ],
      "description": "PLAYSTATS_MC_FORMATION_ENDS()"
    },
    "PLAYSTATS_MC_CLUBHOUSE_ACTIVITY": {
      "prefix": "PLAYSTATS_MC_CLUBHOUSE_ACTIVITY()",
      "body": [
        "PLAYSTATS_MC_CLUBHOUSE_ACTIVITY(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7})"
      ],
      "description": "PLAYSTATS_MC_CLUBHOUSE_ACTIVITY()"
    },
    "PLAYSTATS_RIVAL_BEHAVIOR": {
      "prefix": "PLAYSTATS_RIVAL_BEHAVIOR()",
      "body": [
        "PLAYSTATS_RIVAL_BEHAVIOR(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:Any p9})"
      ],
      "description": "PLAYSTATS_RIVAL_BEHAVIOR()"
    },
    "PLAYSTATS_COPY_RANK_INTO_NEW_SLOT": {
      "prefix": "PLAYSTATS_COPY_RANK_INTO_NEW_SLOT()",
      "body": [
        "PLAYSTATS_COPY_RANK_INTO_NEW_SLOT(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
      ],
      "description": "PLAYSTATS_COPY_RANK_INTO_NEW_SLOT()"
    },
    "PLAYSTATS_DUPE_DETECTED": {
      "prefix": "PLAYSTATS_DUPE_DETECTED()",
      "body": ["PLAYSTATS_DUPE_DETECTED(${1:Any* data})"],
      "description": "PLAYSTATS_DUPE_DETECTED()"
    },
    "PLAYSTATS_BAN_ALERT": {
      "prefix": "PLAYSTATS_BAN_ALERT()",
      "body": ["PLAYSTATS_BAN_ALERT(${1:int p0})"],
      "description": "PLAYSTATS_BAN_ALERT()"
    },
    "PLAYSTATS_GUNRUNNING_MISSION_ENDED": {
      "prefix": "PLAYSTATS_GUNRUNNING_MISSION_ENDED()",
      "body": ["PLAYSTATS_GUNRUNNING_MISSION_ENDED(${1:Any* data})"],
      "description": "PLAYSTATS_GUNRUNNING_MISSION_ENDED()"
    },
    "PLAYSTATS_GUNRUNNING_RND": {
      "prefix": "PLAYSTATS_GUNRUNNING_RND()",
      "body": ["PLAYSTATS_GUNRUNNING_RND(${1:Any p0})"],
      "description": "PLAYSTATS_GUNRUNNING_RND()"
    },
    "PLAYSTATS_BUSINESS_BATTLE_ENDED": {
      "prefix": "PLAYSTATS_BUSINESS_BATTLE_ENDED()",
      "body": ["PLAYSTATS_BUSINESS_BATTLE_ENDED(${1:Any p0})"],
      "description": "PLAYSTATS_BUSINESS_BATTLE_ENDED()"
    },
    "PLAYSTATS_WAREHOUSE_MISSION_ENDED": {
      "prefix": "PLAYSTATS_WAREHOUSE_MISSION_ENDED()",
      "body": ["PLAYSTATS_WAREHOUSE_MISSION_ENDED(${1:Any p0})"],
      "description": "PLAYSTATS_WAREHOUSE_MISSION_ENDED()"
    },
    "PLAYSTATS_NIGHTCLUB_MISSION_ENDED": {
      "prefix": "PLAYSTATS_NIGHTCLUB_MISSION_ENDED()",
      "body": ["PLAYSTATS_NIGHTCLUB_MISSION_ENDED(${1:Any p0})"],
      "description": "PLAYSTATS_NIGHTCLUB_MISSION_ENDED()"
    },
    "PLAYSTATS_DJ_USAGE": {
      "prefix": "PLAYSTATS_DJ_USAGE()",
      "body": ["PLAYSTATS_DJ_USAGE(${1:Any p0}, ${2:Any p1})"],
      "description": "PLAYSTATS_DJ_USAGE()"
    },
    "PLAYSTATS_MINIGAME_USAGE": {
      "prefix": "PLAYSTATS_MINIGAME_USAGE()",
      "body": ["PLAYSTATS_MINIGAME_USAGE(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"],
      "description": "PLAYSTATS_MINIGAME_USAGE()"
    },
    "PLAYSTATS_STONE_HATCHET_ENDED": {
      "prefix": "PLAYSTATS_STONE_HATCHET_ENDED()",
      "body": ["PLAYSTATS_STONE_HATCHET_ENDED(${1:Any* data})"],
      "description": "PLAYSTATS_STONE_HATCHET_ENDED()"
    },
    "PLAYSTATS_SMUGGLER_MISSION_ENDED": {
      "prefix": "PLAYSTATS_SMUGGLER_MISSION_ENDED()",
      "body": ["PLAYSTATS_SMUGGLER_MISSION_ENDED(${1:Any* data})"],
      "description": "PLAYSTATS_SMUGGLER_MISSION_ENDED()"
    },
    "PLAYSTATS_FM_HEIST_PREP_ENDED": {
      "prefix": "PLAYSTATS_FM_HEIST_PREP_ENDED()",
      "body": ["PLAYSTATS_FM_HEIST_PREP_ENDED(${1:Any* data})"],
      "description": "PLAYSTATS_FM_HEIST_PREP_ENDED()"
    },
    "PLAYSTATS_INSTANCED_HEIST_ENDED": {
      "prefix": "PLAYSTATS_INSTANCED_HEIST_ENDED()",
      "body": [
        "PLAYSTATS_INSTANCED_HEIST_ENDED(${1:Any* data}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "PLAYSTATS_INSTANCED_HEIST_ENDED()"
    },
    "PLAYSTATS_DAR_CHECKPOINT": {
      "prefix": "PLAYSTATS_DAR_CHECKPOINT()",
      "body": ["PLAYSTATS_DAR_CHECKPOINT(${1:Any* data})"],
      "description": "PLAYSTATS_DAR_CHECKPOINT()"
    },
    "PLAYSTATS_ENTER_SESSION_PACK": {
      "prefix": "PLAYSTATS_ENTER_SESSION_PACK()",
      "body": ["PLAYSTATS_ENTER_SESSION_PACK(${1:Any* data})"],
      "description": "PLAYSTATS_ENTER_SESSION_PACK()"
    },
    "PLAYSTATS_DRONE_USAGE": {
      "prefix": "PLAYSTATS_DRONE_USAGE()",
      "body": ["PLAYSTATS_DRONE_USAGE(${1:int p0}, ${2:int p1}, ${3:int p2})"],
      "description": "PLAYSTATS_DRONE_USAGE()"
    },
    "PLAYSTATS_SPIN_WHEEL": {
      "prefix": "PLAYSTATS_SPIN_WHEEL()",
      "body": [
        "PLAYSTATS_SPIN_WHEEL(${1:int p0}, ${2:int p1}, ${3:int p2}, ${4:int p3})"
      ],
      "description": "PLAYSTATS_SPIN_WHEEL()"
    },
    "PLAYSTATS_ARENA_WARS_SPECTATOR": {
      "prefix": "PLAYSTATS_ARENA_WARS_SPECTATOR()",
      "body": [
        "PLAYSTATS_ARENA_WARS_SPECTATOR(${1:int p0}, ${2:int p1}, ${3:int p2}, ${4:int p3}, ${5:int p4})"
      ],
      "description": "PLAYSTATS_ARENA_WARS_SPECTATOR()"
    },
    "PLAYSTATS_ARENA_WARS_ENDED": {
      "prefix": "PLAYSTATS_ARENA_WARS_ENDED()",
      "body": ["PLAYSTATS_ARENA_WARS_ENDED(${1:Any* data})"],
      "description": "PLAYSTATS_ARENA_WARS_ENDED()"
    },
    "PLAYSTATS_SWITCH_PASSIVE_MODE": {
      "prefix": "PLAYSTATS_SWITCH_PASSIVE_MODE()",
      "body": [
        "PLAYSTATS_SWITCH_PASSIVE_MODE(${1:BOOL p0}, ${2:int p1}, ${3:int p2}, ${4:int p3})"
      ],
      "description": "PLAYSTATS_SWITCH_PASSIVE_MODE()"
    },
    "PLAYSTATS_COLLECTIBLE_PICKED_UP": {
      "prefix": "PLAYSTATS_COLLECTIBLE_PICKED_UP()",
      "body": [
        "PLAYSTATS_COLLECTIBLE_PICKED_UP(${1:int p0}, ${2:Hash objectHash}, ${3:Any p2}, ${4:Any p3}, ${5:int moneyAmount}, ${6:int rpAmount}, ${7:int chipsAmount}, ${8:Any p7}, ${9:int p8}, ${10:Any p9}, ${11:Any p10})"
      ],
      "description": "PLAYSTATS_COLLECTIBLE_PICKED_UP()"
    },
    "PLAYSTATS_CASINO_STORY_MISSION_ENDED": {
      "prefix": "PLAYSTATS_CASINO_STORY_MISSION_ENDED()",
      "body": ["PLAYSTATS_CASINO_STORY_MISSION_ENDED(${1:Any p0}, ${2:Any p1})"],
      "description": "PLAYSTATS_CASINO_STORY_MISSION_ENDED()"
    },
    "PLAYSTATS_CASINO_CHIP": {
      "prefix": "PLAYSTATS_CASINO_CHIP()",
      "body": ["PLAYSTATS_CASINO_CHIP(${1:Any p0})"],
      "description": "PLAYSTATS_CASINO_CHIP()"
    },
    "PLAYSTATS_CASINO_ROULETTE": {
      "prefix": "PLAYSTATS_CASINO_ROULETTE()",
      "body": ["PLAYSTATS_CASINO_ROULETTE(${1:Any p0})"],
      "description": "PLAYSTATS_CASINO_ROULETTE()"
    },
    "PLAYSTATS_CASINO_BLACKJACK": {
      "prefix": "PLAYSTATS_CASINO_BLACKJACK()",
      "body": ["PLAYSTATS_CASINO_BLACKJACK(${1:Any p0})"],
      "description": "PLAYSTATS_CASINO_BLACKJACK()"
    },
    "PLAYSTATS_CASINO_THREE_CARD_POKER": {
      "prefix": "PLAYSTATS_CASINO_THREE_CARD_POKER()",
      "body": ["PLAYSTATS_CASINO_THREE_CARD_POKER(${1:Any p0})"],
      "description": "PLAYSTATS_CASINO_THREE_CARD_POKER()"
    },
    "PLAYSTATS_CASINO_SLOT_MACHINE": {
      "prefix": "PLAYSTATS_CASINO_SLOT_MACHINE()",
      "body": ["PLAYSTATS_CASINO_SLOT_MACHINE(${1:Any p0})"],
      "description": "PLAYSTATS_CASINO_SLOT_MACHINE()"
    },
    "PLAYSTATS_CASINO_INSIDE_TRACK": {
      "prefix": "PLAYSTATS_CASINO_INSIDE_TRACK()",
      "body": ["PLAYSTATS_CASINO_INSIDE_TRACK(${1:Any p0})"],
      "description": "PLAYSTATS_CASINO_INSIDE_TRACK()"
    },
    "PLAYSTATS_CASINO_LUCKY_SEVEN": {
      "prefix": "PLAYSTATS_CASINO_LUCKY_SEVEN()",
      "body": ["PLAYSTATS_CASINO_LUCKY_SEVEN(${1:Any p0})"],
      "description": "PLAYSTATS_CASINO_LUCKY_SEVEN()"
    },
    "PLAYSTATS_CASINO_ROULETTE_LIGHT": {
      "prefix": "PLAYSTATS_CASINO_ROULETTE_LIGHT()",
      "body": ["PLAYSTATS_CASINO_ROULETTE_LIGHT(${1:Any p0})"],
      "description": "PLAYSTATS_CASINO_ROULETTE_LIGHT()"
    },
    "PLAYSTATS_CASINO_BLACKJACK_LIGHT": {
      "prefix": "PLAYSTATS_CASINO_BLACKJACK_LIGHT()",
      "body": ["PLAYSTATS_CASINO_BLACKJACK_LIGHT(${1:Any p0})"],
      "description": "PLAYSTATS_CASINO_BLACKJACK_LIGHT()"
    },
    "PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT": {
      "prefix": "PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT()",
      "body": ["PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT(${1:Any p0})"],
      "description": "PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT()"
    },
    "PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT": {
      "prefix": "PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT()",
      "body": ["PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT(${1:Any p0})"],
      "description": "PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT()"
    },
    "PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT": {
      "prefix": "PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT()",
      "body": ["PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT(${1:Any p0})"],
      "description": "PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT()"
    },
    "PLAYSTATS_ARCADE_GAME": {
      "prefix": "PLAYSTATS_ARCADE_GAME()",
      "body": [
        "PLAYSTATS_ARCADE_GAME(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6})"
      ],
      "description": "PLAYSTATS_ARCADE_GAME()"
    },
    "PLAYSTATS_ARCADE_LOVE_MATCH": {
      "prefix": "PLAYSTATS_ARCADE_LOVE_MATCH()",
      "body": ["PLAYSTATS_ARCADE_LOVE_MATCH(${1:Any p0}, ${2:Any p1})"],
      "description": "PLAYSTATS_ARCADE_LOVE_MATCH()"
    },
    "PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED": {
      "prefix": "PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED()",
      "body": ["PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED(${1:Any* data})"],
      "description": "PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED()"
    },
    "PLAYSTATS_HEIST3_DRONE": {
      "prefix": "PLAYSTATS_HEIST3_DRONE()",
      "body": ["PLAYSTATS_HEIST3_DRONE(${1:Any p0})"],
      "description": "PLAYSTATS_HEIST3_DRONE()"
    },
    "PLAYSTATS_HEIST3_HACK": {
      "prefix": "PLAYSTATS_HEIST3_HACK()",
      "body": [
        "PLAYSTATS_HEIST3_HACK(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
      ],
      "description": "PLAYSTATS_HEIST3_HACK()"
    },
    "PLAYSTATS_NPC_PHONE": {
      "prefix": "PLAYSTATS_NPC_PHONE()",
      "body": ["PLAYSTATS_NPC_PHONE(${1:Any* p0})"],
      "description": "PLAYSTATS_NPC_PHONE()"
    },
    "PLAYSTATS_ARCADE_CABINET": {
      "prefix": "PLAYSTATS_ARCADE_CABINET()",
      "body": ["PLAYSTATS_ARCADE_CABINET(${1:Any p0})"],
      "description": "PLAYSTATS_ARCADE_CABINET()"
    },
    "PLAYSTATS_HEIST3_FINALE": {
      "prefix": "PLAYSTATS_HEIST3_FINALE()",
      "body": ["PLAYSTATS_HEIST3_FINALE(${1:Any p0})"],
      "description": "PLAYSTATS_HEIST3_FINALE()"
    },
    "PLAYSTATS_HEIST3_PREP": {
      "prefix": "PLAYSTATS_HEIST3_PREP()",
      "body": ["PLAYSTATS_HEIST3_PREP(${1:Any p0})"],
      "description": "PLAYSTATS_HEIST3_PREP()"
    },
    "PLAYSTATS_MASTER_CONTROL": {
      "prefix": "PLAYSTATS_MASTER_CONTROL()",
      "body": [
        "PLAYSTATS_MASTER_CONTROL(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "PLAYSTATS_MASTER_CONTROL()"
    },
    "PLAYSTATS_QUIT_MODE": {
      "prefix": "PLAYSTATS_QUIT_MODE()",
      "body": [
        "PLAYSTATS_QUIT_MODE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "PLAYSTATS_QUIT_MODE()"
    },
    "PLAYSTATS_MISSION_VOTE": {
      "prefix": "PLAYSTATS_MISSION_VOTE()",
      "body": ["PLAYSTATS_MISSION_VOTE(${1:Any p0})"],
      "description": "PLAYSTATS_MISSION_VOTE()"
    },
    "PLAYSTATS_NJVS_VOTE": {
      "prefix": "PLAYSTATS_NJVS_VOTE()",
      "body": ["PLAYSTATS_NJVS_VOTE(${1:Any p0})"],
      "description": "PLAYSTATS_NJVS_VOTE()"
    },
    "PLAYSTATS_KILL_YOURSELF": {
      "prefix": "PLAYSTATS_KILL_YOURSELF()",
      "body": ["PLAYSTATS_KILL_YOURSELF()"],
      "description": "PLAYSTATS_KILL_YOURSELF()"
    },
    "PLAYSTATS_FM_MISSION_END": {
      "prefix": "PLAYSTATS_FM_MISSION_END()",
      "body": [
        "PLAYSTATS_FM_MISSION_END(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "PLAYSTATS_FM_MISSION_END()"
    },
    "PLAYSTATS_HEIST4_PREP": {
      "prefix": "PLAYSTATS_HEIST4_PREP()",
      "body": ["PLAYSTATS_HEIST4_PREP(${1:Any p0})"],
      "description": "PLAYSTATS_HEIST4_PREP()"
    },
    "PLAYSTATS_HEIST4_FINALE": {
      "prefix": "PLAYSTATS_HEIST4_FINALE()",
      "body": ["PLAYSTATS_HEIST4_FINALE(${1:Any p0})"],
      "description": "PLAYSTATS_HEIST4_FINALE()"
    },
    "PLAYSTATS_HEIST4_HACK": {
      "prefix": "PLAYSTATS_HEIST4_HACK()",
      "body": [
        "PLAYSTATS_HEIST4_HACK(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "PLAYSTATS_HEIST4_HACK()"
    },
    "PLAYSTATS_SUB_WEAP": {
      "prefix": "PLAYSTATS_SUB_WEAP()",
      "body": [
        "PLAYSTATS_SUB_WEAP(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "PLAYSTATS_SUB_WEAP()"
    },
    "PLAYSTATS_FAST_TRVL": {
      "prefix": "PLAYSTATS_FAST_TRVL()",
      "body": [
        "PLAYSTATS_FAST_TRVL(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8}, ${10:Any p9}, ${11:Any p10})"
      ],
      "description": "PLAYSTATS_FAST_TRVL()"
    },
    "PLAYSTATS_HUB_ENTRY": {
      "prefix": "PLAYSTATS_HUB_ENTRY()",
      "body": ["PLAYSTATS_HUB_ENTRY(${1:Any p0})"],
      "description": "PLAYSTATS_HUB_ENTRY()"
    },
    "PLAYSTATS_DJ_MISSION_ENDED": {
      "prefix": "PLAYSTATS_DJ_MISSION_ENDED()",
      "body": ["PLAYSTATS_DJ_MISSION_ENDED(${1:Any p0})"],
      "description": "PLAYSTATS_DJ_MISSION_ENDED()"
    },
    "PLAYSTATS_ROBBERY_PREP": {
      "prefix": "PLAYSTATS_ROBBERY_PREP()",
      "body": ["PLAYSTATS_ROBBERY_PREP(${1:Any p0})"],
      "description": "PLAYSTATS_ROBBERY_PREP()"
    },
    "PLAYSTATS_ROBBERY_FINALE": {
      "prefix": "PLAYSTATS_ROBBERY_FINALE()",
      "body": ["PLAYSTATS_ROBBERY_FINALE(${1:Any p0})"],
      "description": "PLAYSTATS_ROBBERY_FINALE()"
    },
    "PLAYSTATS_EXTRA_EVENT": {
      "prefix": "PLAYSTATS_EXTRA_EVENT()",
      "body": ["PLAYSTATS_EXTRA_EVENT(${1:Any p0})"],
      "description": "PLAYSTATS_EXTRA_EVENT()"
    },
    "PLAYSTATS_CARCLUB_POINTS": {
      "prefix": "PLAYSTATS_CARCLUB_POINTS()",
      "body": ["PLAYSTATS_CARCLUB_POINTS(${1:Any p0})"],
      "description": "PLAYSTATS_CARCLUB_POINTS()"
    },
    "PLAYSTATS_CARCLUB_CHALLENGE": {
      "prefix": "PLAYSTATS_CARCLUB_CHALLENGE()",
      "body": [
        "PLAYSTATS_CARCLUB_CHALLENGE(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "PLAYSTATS_CARCLUB_CHALLENGE()"
    },
    "PLAYSTATS_CARCLUB_PRIZE": {
      "prefix": "PLAYSTATS_CARCLUB_PRIZE()",
      "body": ["PLAYSTATS_CARCLUB_PRIZE(${1:int p0}, ${2:Hash vehicleModel})"],
      "description": "PLAYSTATS_CARCLUB_PRIZE()"
    },
    "PLAYSTATS_AWARD_NAV": {
      "prefix": "PLAYSTATS_AWARD_NAV()",
      "body": [
        "PLAYSTATS_AWARD_NAV(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "PLAYSTATS_AWARD_NAV()"
    },
    "PLAYSTATS_INST_MISSION_END": {
      "prefix": "PLAYSTATS_INST_MISSION_END()",
      "body": ["PLAYSTATS_INST_MISSION_END(${1:Any p0})"],
      "description": "PLAYSTATS_INST_MISSION_END()"
    },
    "PLAYSTATS_HUB_EXIT": {
      "prefix": "PLAYSTATS_HUB_EXIT()",
      "body": ["PLAYSTATS_HUB_EXIT(${1:Any p0})"],
      "description": "PLAYSTATS_HUB_EXIT()"
    },
    "PLAYSTATS_VEH_DEL": {
      "prefix": "PLAYSTATS_VEH_DEL()",
      "body": [
        "PLAYSTATS_VEH_DEL(${1:int bossId1}, ${2:int bossId2}, ${3:int bossType}, ${4:int vehicleID}, ${5:int reason})"
      ],
      "description": "PLAYSTATS_VEH_DEL()"
    },
    "PLAYSTATS_INVENTORY": {
      "prefix": "PLAYSTATS_INVENTORY()",
      "body": ["PLAYSTATS_INVENTORY(${1:Any p0})"],
      "description": "PLAYSTATS_INVENTORY()"
    },
    "_PLAYSTATS_ACID_MISSION_END": {
      "prefix": "_PLAYSTATS_ACID_MISSION_END()",
      "body": ["_PLAYSTATS_ACID_MISSION_END(${1:Any p0})"],
      "description": "_PLAYSTATS_ACID_MISSION_END()"
    },
    "_PLAYSTATS_ACID_RND": {
      "prefix": "_PLAYSTATS_ACID_RND()",
      "body": ["_PLAYSTATS_ACID_RND(${1:Any p0})"],
      "description": "_PLAYSTATS_ACID_RND()"
    },
    "_PLAYSTATS_IDLE": {
      "prefix": "_PLAYSTATS_IDLE()",
      "body": ["_PLAYSTATS_IDLE(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"],
      "description": "_PLAYSTATS_IDLE()"
    },
    "_PLAYSTATS_PLAYER_STYLE": {
      "prefix": "_PLAYSTATS_PLAYER_STYLE()",
      "body": ["_PLAYSTATS_PLAYER_STYLE(${1:Any p0})"],
      "description": "_PLAYSTATS_PLAYER_STYLE()"
    },
    "_PLAYSTATS_RANDOM_EVENT": {
      "prefix": "_PLAYSTATS_RANDOM_EVENT()",
      "body": ["_PLAYSTATS_RANDOM_EVENT(${1:Any p0})"],
      "description": "_PLAYSTATS_RANDOM_EVENT()"
    },
    "_PLAYSTATS_ALERT": {
      "prefix": "_PLAYSTATS_ALERT()",
      "body": ["_PLAYSTATS_ALERT(${1:Any* data})"],
      "description": "_PLAYSTATS_ALERT()"
    },
    "_PLAYSTATS_ATTRITION_STAGE_END": {
      "prefix": "_PLAYSTATS_ATTRITION_STAGE_END()",
      "body": ["_PLAYSTATS_ATTRITION_STAGE_END(${1:Any p0})"],
      "description": "_PLAYSTATS_ATTRITION_STAGE_END()"
    },
    "_PLAYSTATS_SHOWROOM_NAV": {
      "prefix": "_PLAYSTATS_SHOWROOM_NAV()",
      "body": [
        "_PLAYSTATS_SHOWROOM_NAV(${1:Any p0}, ${2:Any p1}, ${3:Hash entity})"
      ],
      "description": "_PLAYSTATS_SHOWROOM_NAV()"
    },
    "_PLAYSTATS_SHOWROOM_OVERVIEW": {
      "prefix": "_PLAYSTATS_SHOWROOM_OVERVIEW()",
      "body": ["_PLAYSTATS_SHOWROOM_OVERVIEW(${1:Any* data})"],
      "description": "_PLAYSTATS_SHOWROOM_OVERVIEW()"
    },
    "LOAD_ALL_OBJECTS_NOW": {
      "prefix": "LOAD_ALL_OBJECTS_NOW()",
      "body": ["LOAD_ALL_OBJECTS_NOW()"],
      "description": "LOAD_ALL_OBJECTS_NOW()"
    },
    "LOAD_SCENE": {
      "prefix": "LOAD_SCENE()",
      "body": ["LOAD_SCENE(${1:float x}, ${2:float y}, ${3:float z})"],
      "description": "LOAD_SCENE()"
    },
    "NETWORK_UPDATE_LOAD_SCENE": {
      "prefix": "NETWORK_UPDATE_LOAD_SCENE()",
      "body": ["NETWORK_UPDATE_LOAD_SCENE()"],
      "description": "NETWORK_UPDATE_LOAD_SCENE()"
    },
    "IS_NETWORK_LOADING_SCENE": {
      "prefix": "IS_NETWORK_LOADING_SCENE()",
      "body": ["IS_NETWORK_LOADING_SCENE()"],
      "description": "IS_NETWORK_LOADING_SCENE()"
    },
    "SET_INTERIOR_ACTIVE": {
      "prefix": "SET_INTERIOR_ACTIVE()",
      "body": ["SET_INTERIOR_ACTIVE(${1:int interiorID}, ${2:BOOL toggle})"],
      "description": "SET_INTERIOR_ACTIVE()"
    },
    "REQUEST_MODEL": {
      "prefix": "REQUEST_MODEL()",
      "body": ["REQUEST_MODEL(${1:Hash model})"],
      "description": "REQUEST_MODEL()"
    },
    "REQUEST_MENU_PED_MODEL": {
      "prefix": "REQUEST_MENU_PED_MODEL()",
      "body": ["REQUEST_MENU_PED_MODEL(${1:Hash model})"],
      "description": "REQUEST_MENU_PED_MODEL()"
    },
    "HAS_MODEL_LOADED": {
      "prefix": "HAS_MODEL_LOADED()",
      "body": ["HAS_MODEL_LOADED(${1:Hash model})"],
      "description": "HAS_MODEL_LOADED()"
    },
    "REQUEST_MODELS_IN_ROOM": {
      "prefix": "REQUEST_MODELS_IN_ROOM()",
      "body": [
        "REQUEST_MODELS_IN_ROOM(${1:Interior interior}, ${2:const char* roomName})"
      ],
      "description": "REQUEST_MODELS_IN_ROOM()"
    },
    "SET_MODEL_AS_NO_LONGER_NEEDED": {
      "prefix": "SET_MODEL_AS_NO_LONGER_NEEDED()",
      "body": ["SET_MODEL_AS_NO_LONGER_NEEDED(${1:Hash model})"],
      "description": "SET_MODEL_AS_NO_LONGER_NEEDED()"
    },
    "IS_MODEL_IN_CDIMAGE": {
      "prefix": "IS_MODEL_IN_CDIMAGE()",
      "body": ["IS_MODEL_IN_CDIMAGE(${1:Hash model})"],
      "description": "IS_MODEL_IN_CDIMAGE()"
    },
    "IS_MODEL_VALID": {
      "prefix": "IS_MODEL_VALID()",
      "body": ["IS_MODEL_VALID(${1:Hash model})"],
      "description": "IS_MODEL_VALID()"
    },
    "IS_MODEL_A_PED": {
      "prefix": "IS_MODEL_A_PED()",
      "body": ["IS_MODEL_A_PED(${1:Hash model})"],
      "description": "IS_MODEL_A_PED()"
    },
    "IS_MODEL_A_VEHICLE": {
      "prefix": "IS_MODEL_A_VEHICLE()",
      "body": ["IS_MODEL_A_VEHICLE(${1:Hash model})"],
      "description": "IS_MODEL_A_VEHICLE()"
    },
    "REQUEST_COLLISION_AT_COORD": {
      "prefix": "REQUEST_COLLISION_AT_COORD()",
      "body": [
        "REQUEST_COLLISION_AT_COORD(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "REQUEST_COLLISION_AT_COORD()"
    },
    "REQUEST_COLLISION_FOR_MODEL": {
      "prefix": "REQUEST_COLLISION_FOR_MODEL()",
      "body": ["REQUEST_COLLISION_FOR_MODEL(${1:Hash model})"],
      "description": "REQUEST_COLLISION_FOR_MODEL()"
    },
    "HAS_COLLISION_FOR_MODEL_LOADED": {
      "prefix": "HAS_COLLISION_FOR_MODEL_LOADED()",
      "body": ["HAS_COLLISION_FOR_MODEL_LOADED(${1:Hash model})"],
      "description": "HAS_COLLISION_FOR_MODEL_LOADED()"
    },
    "REQUEST_ADDITIONAL_COLLISION_AT_COORD": {
      "prefix": "REQUEST_ADDITIONAL_COLLISION_AT_COORD()",
      "body": [
        "REQUEST_ADDITIONAL_COLLISION_AT_COORD(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "REQUEST_ADDITIONAL_COLLISION_AT_COORD()"
    },
    "DOES_ANIM_DICT_EXIST": {
      "prefix": "DOES_ANIM_DICT_EXIST()",
      "body": ["DOES_ANIM_DICT_EXIST(${1:const char* animDict})"],
      "description": "DOES_ANIM_DICT_EXIST()"
    },
    "REQUEST_ANIM_DICT": {
      "prefix": "REQUEST_ANIM_DICT()",
      "body": ["REQUEST_ANIM_DICT(${1:const char* animDict})"],
      "description": "REQUEST_ANIM_DICT()"
    },
    "HAS_ANIM_DICT_LOADED": {
      "prefix": "HAS_ANIM_DICT_LOADED()",
      "body": ["HAS_ANIM_DICT_LOADED(${1:const char* animDict})"],
      "description": "HAS_ANIM_DICT_LOADED()"
    },
    "REMOVE_ANIM_DICT": {
      "prefix": "REMOVE_ANIM_DICT()",
      "body": ["REMOVE_ANIM_DICT(${1:const char* animDict})"],
      "description": "REMOVE_ANIM_DICT()"
    },
    "REQUEST_ANIM_SET": {
      "prefix": "REQUEST_ANIM_SET()",
      "body": ["REQUEST_ANIM_SET(${1:const char* animSet})"],
      "description": "REQUEST_ANIM_SET()"
    },
    "HAS_ANIM_SET_LOADED": {
      "prefix": "HAS_ANIM_SET_LOADED()",
      "body": ["HAS_ANIM_SET_LOADED(${1:const char* animSet})"],
      "description": "HAS_ANIM_SET_LOADED()"
    },
    "REMOVE_ANIM_SET": {
      "prefix": "REMOVE_ANIM_SET()",
      "body": ["REMOVE_ANIM_SET(${1:const char* animSet})"],
      "description": "REMOVE_ANIM_SET()"
    },
    "REQUEST_CLIP_SET": {
      "prefix": "REQUEST_CLIP_SET()",
      "body": ["REQUEST_CLIP_SET(${1:const char* clipSet})"],
      "description": "REQUEST_CLIP_SET()"
    },
    "HAS_CLIP_SET_LOADED": {
      "prefix": "HAS_CLIP_SET_LOADED()",
      "body": ["HAS_CLIP_SET_LOADED(${1:const char* clipSet})"],
      "description": "HAS_CLIP_SET_LOADED()"
    },
    "REMOVE_CLIP_SET": {
      "prefix": "REMOVE_CLIP_SET()",
      "body": ["REMOVE_CLIP_SET(${1:const char* clipSet})"],
      "description": "REMOVE_CLIP_SET()"
    },
    "REQUEST_IPL": {
      "prefix": "REQUEST_IPL()",
      "body": ["REQUEST_IPL(${1:const char* iplName})"],
      "description": "REQUEST_IPL()"
    },
    "REMOVE_IPL": {
      "prefix": "REMOVE_IPL()",
      "body": ["REMOVE_IPL(${1:const char* iplName})"],
      "description": "REMOVE_IPL()"
    },
    "IS_IPL_ACTIVE": {
      "prefix": "IS_IPL_ACTIVE()",
      "body": ["IS_IPL_ACTIVE(${1:const char* iplName})"],
      "description": "IS_IPL_ACTIVE()"
    },
    "SET_STREAMING": {
      "prefix": "SET_STREAMING()",
      "body": ["SET_STREAMING(${1:BOOL toggle})"],
      "description": "SET_STREAMING()"
    },
    "LOAD_GLOBAL_WATER_FILE": {
      "prefix": "LOAD_GLOBAL_WATER_FILE()",
      "body": ["LOAD_GLOBAL_WATER_FILE(${1:int waterType})"],
      "description": "LOAD_GLOBAL_WATER_FILE()"
    },
    "GET_GLOBAL_WATER_FILE": {
      "prefix": "GET_GLOBAL_WATER_FILE()",
      "body": ["GET_GLOBAL_WATER_FILE()"],
      "description": "GET_GLOBAL_WATER_FILE()"
    },
    "SET_GAME_PAUSES_FOR_STREAMING": {
      "prefix": "SET_GAME_PAUSES_FOR_STREAMING()",
      "body": ["SET_GAME_PAUSES_FOR_STREAMING(${1:BOOL toggle})"],
      "description": "SET_GAME_PAUSES_FOR_STREAMING()"
    },
    "SET_REDUCE_PED_MODEL_BUDGET": {
      "prefix": "SET_REDUCE_PED_MODEL_BUDGET()",
      "body": ["SET_REDUCE_PED_MODEL_BUDGET(${1:BOOL toggle})"],
      "description": "SET_REDUCE_PED_MODEL_BUDGET()"
    },
    "SET_REDUCE_VEHICLE_MODEL_BUDGET": {
      "prefix": "SET_REDUCE_VEHICLE_MODEL_BUDGET()",
      "body": ["SET_REDUCE_VEHICLE_MODEL_BUDGET(${1:BOOL toggle})"],
      "description": "SET_REDUCE_VEHICLE_MODEL_BUDGET()"
    },
    "SET_DITCH_POLICE_MODELS": {
      "prefix": "SET_DITCH_POLICE_MODELS()",
      "body": ["SET_DITCH_POLICE_MODELS(${1:BOOL toggle})"],
      "description": "SET_DITCH_POLICE_MODELS()"
    },
    "GET_NUMBER_OF_STREAMING_REQUESTS": {
      "prefix": "GET_NUMBER_OF_STREAMING_REQUESTS()",
      "body": ["GET_NUMBER_OF_STREAMING_REQUESTS()"],
      "description": "GET_NUMBER_OF_STREAMING_REQUESTS()"
    },
    "REQUEST_PTFX_ASSET": {
      "prefix": "REQUEST_PTFX_ASSET()",
      "body": ["REQUEST_PTFX_ASSET()"],
      "description": "REQUEST_PTFX_ASSET()"
    },
    "HAS_PTFX_ASSET_LOADED": {
      "prefix": "HAS_PTFX_ASSET_LOADED()",
      "body": ["HAS_PTFX_ASSET_LOADED()"],
      "description": "HAS_PTFX_ASSET_LOADED()"
    },
    "REMOVE_PTFX_ASSET": {
      "prefix": "REMOVE_PTFX_ASSET()",
      "body": ["REMOVE_PTFX_ASSET()"],
      "description": "REMOVE_PTFX_ASSET()"
    },
    "REQUEST_NAMED_PTFX_ASSET": {
      "prefix": "REQUEST_NAMED_PTFX_ASSET()",
      "body": ["REQUEST_NAMED_PTFX_ASSET(${1:const char* fxName})"],
      "description": "REQUEST_NAMED_PTFX_ASSET()"
    },
    "HAS_NAMED_PTFX_ASSET_LOADED": {
      "prefix": "HAS_NAMED_PTFX_ASSET_LOADED()",
      "body": ["HAS_NAMED_PTFX_ASSET_LOADED(${1:const char* fxName})"],
      "description": "HAS_NAMED_PTFX_ASSET_LOADED()"
    },
    "REMOVE_NAMED_PTFX_ASSET": {
      "prefix": "REMOVE_NAMED_PTFX_ASSET()",
      "body": ["REMOVE_NAMED_PTFX_ASSET(${1:const char* fxName})"],
      "description": "REMOVE_NAMED_PTFX_ASSET()"
    },
    "SET_VEHICLE_POPULATION_BUDGET": {
      "prefix": "SET_VEHICLE_POPULATION_BUDGET()",
      "body": ["SET_VEHICLE_POPULATION_BUDGET(${1:int p0})"],
      "description": "SET_VEHICLE_POPULATION_BUDGET()"
    },
    "SET_PED_POPULATION_BUDGET": {
      "prefix": "SET_PED_POPULATION_BUDGET()",
      "body": ["SET_PED_POPULATION_BUDGET(${1:int p0})"],
      "description": "SET_PED_POPULATION_BUDGET()"
    },
    "CLEAR_FOCUS": {
      "prefix": "CLEAR_FOCUS()",
      "body": ["CLEAR_FOCUS()"],
      "description": "CLEAR_FOCUS()"
    },
    "SET_FOCUS_POS_AND_VEL": {
      "prefix": "SET_FOCUS_POS_AND_VEL()",
      "body": [
        "SET_FOCUS_POS_AND_VEL(${1:float x}, ${2:float y}, ${3:float z}, ${4:float offsetX}, ${5:float offsetY}, ${6:float offsetZ})"
      ],
      "description": "SET_FOCUS_POS_AND_VEL()"
    },
    "SET_FOCUS_ENTITY": {
      "prefix": "SET_FOCUS_ENTITY()",
      "body": ["SET_FOCUS_ENTITY(${1:Entity entity})"],
      "description": "SET_FOCUS_ENTITY()"
    },
    "IS_ENTITY_FOCUS": {
      "prefix": "IS_ENTITY_FOCUS()",
      "body": ["IS_ENTITY_FOCUS(${1:Entity entity})"],
      "description": "IS_ENTITY_FOCUS()"
    },
    "SET_RESTORE_FOCUS_ENTITY": {
      "prefix": "SET_RESTORE_FOCUS_ENTITY()",
      "body": ["SET_RESTORE_FOCUS_ENTITY(${1:Entity p0})"],
      "description": "SET_RESTORE_FOCUS_ENTITY()"
    },
    "SET_MAPDATACULLBOX_ENABLED": {
      "prefix": "SET_MAPDATACULLBOX_ENABLED()",
      "body": [
        "SET_MAPDATACULLBOX_ENABLED(${1:const char* name}, ${2:BOOL toggle})"
      ],
      "description": "SET_MAPDATACULLBOX_ENABLED()"
    },
    "SET_ALL_MAPDATA_CULLED": {
      "prefix": "SET_ALL_MAPDATA_CULLED()",
      "body": ["SET_ALL_MAPDATA_CULLED(${1:Any p0})"],
      "description": "SET_ALL_MAPDATA_CULLED()"
    },
    "STREAMVOL_CREATE_SPHERE": {
      "prefix": "STREAMVOL_CREATE_SPHERE()",
      "body": [
        "STREAMVOL_CREATE_SPHERE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float rad}, ${5:Any p4}, ${6:Any p5})"
      ],
      "description": "STREAMVOL_CREATE_SPHERE()"
    },
    "STREAMVOL_CREATE_FRUSTUM": {
      "prefix": "STREAMVOL_CREATE_FRUSTUM()",
      "body": [
        "STREAMVOL_CREATE_FRUSTUM(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:Any p7}, ${9:Any p8})"
      ],
      "description": "STREAMVOL_CREATE_FRUSTUM()"
    },
    "STREAMVOL_CREATE_LINE": {
      "prefix": "STREAMVOL_CREATE_LINE()",
      "body": [
        "STREAMVOL_CREATE_LINE(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:Any p6})"
      ],
      "description": "STREAMVOL_CREATE_LINE()"
    },
    "STREAMVOL_DELETE": {
      "prefix": "STREAMVOL_DELETE()",
      "body": ["STREAMVOL_DELETE(${1:Any unused})"],
      "description": "STREAMVOL_DELETE()"
    },
    "STREAMVOL_HAS_LOADED": {
      "prefix": "STREAMVOL_HAS_LOADED()",
      "body": ["STREAMVOL_HAS_LOADED(${1:Any unused})"],
      "description": "STREAMVOL_HAS_LOADED()"
    },
    "STREAMVOL_IS_VALID": {
      "prefix": "STREAMVOL_IS_VALID()",
      "body": ["STREAMVOL_IS_VALID(${1:Any unused})"],
      "description": "STREAMVOL_IS_VALID()"
    },
    "IS_STREAMVOL_ACTIVE": {
      "prefix": "IS_STREAMVOL_ACTIVE()",
      "body": ["IS_STREAMVOL_ACTIVE()"],
      "description": "IS_STREAMVOL_ACTIVE()"
    },
    "NEW_LOAD_SCENE_START": {
      "prefix": "NEW_LOAD_SCENE_START()",
      "body": [
        "NEW_LOAD_SCENE_START(${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float offsetX}, ${5:float offsetY}, ${6:float offsetZ}, ${7:float radius}, ${8:int p7})"
      ],
      "description": "NEW_LOAD_SCENE_START()"
    },
    "NEW_LOAD_SCENE_START_SPHERE": {
      "prefix": "NEW_LOAD_SCENE_START_SPHERE()",
      "body": [
        "NEW_LOAD_SCENE_START_SPHERE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Any p4})"
      ],
      "description": "NEW_LOAD_SCENE_START_SPHERE()"
    },
    "NEW_LOAD_SCENE_STOP": {
      "prefix": "NEW_LOAD_SCENE_STOP()",
      "body": ["NEW_LOAD_SCENE_STOP()"],
      "description": "NEW_LOAD_SCENE_STOP()"
    },
    "IS_NEW_LOAD_SCENE_ACTIVE": {
      "prefix": "IS_NEW_LOAD_SCENE_ACTIVE()",
      "body": ["IS_NEW_LOAD_SCENE_ACTIVE()"],
      "description": "IS_NEW_LOAD_SCENE_ACTIVE()"
    },
    "IS_NEW_LOAD_SCENE_LOADED": {
      "prefix": "IS_NEW_LOAD_SCENE_LOADED()",
      "body": ["IS_NEW_LOAD_SCENE_LOADED()"],
      "description": "IS_NEW_LOAD_SCENE_LOADED()"
    },
    "IS_SAFE_TO_START_PLAYER_SWITCH": {
      "prefix": "IS_SAFE_TO_START_PLAYER_SWITCH()",
      "body": ["IS_SAFE_TO_START_PLAYER_SWITCH()"],
      "description": "IS_SAFE_TO_START_PLAYER_SWITCH()"
    },
    "START_PLAYER_SWITCH": {
      "prefix": "START_PLAYER_SWITCH()",
      "body": [
        "START_PLAYER_SWITCH(${1:Ped from}, ${2:Ped to}, ${3:int flags}, ${4:int switchType})"
      ],
      "description": "START_PLAYER_SWITCH()"
    },
    "STOP_PLAYER_SWITCH": {
      "prefix": "STOP_PLAYER_SWITCH()",
      "body": ["STOP_PLAYER_SWITCH()"],
      "description": "STOP_PLAYER_SWITCH()"
    },
    "IS_PLAYER_SWITCH_IN_PROGRESS": {
      "prefix": "IS_PLAYER_SWITCH_IN_PROGRESS()",
      "body": ["IS_PLAYER_SWITCH_IN_PROGRESS()"],
      "description": "IS_PLAYER_SWITCH_IN_PROGRESS()"
    },
    "GET_PLAYER_SWITCH_TYPE": {
      "prefix": "GET_PLAYER_SWITCH_TYPE()",
      "body": ["GET_PLAYER_SWITCH_TYPE()"],
      "description": "GET_PLAYER_SWITCH_TYPE()"
    },
    "GET_IDEAL_PLAYER_SWITCH_TYPE": {
      "prefix": "GET_IDEAL_PLAYER_SWITCH_TYPE()",
      "body": [
        "GET_IDEAL_PLAYER_SWITCH_TYPE(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2})"
      ],
      "description": "GET_IDEAL_PLAYER_SWITCH_TYPE()"
    },
    "GET_PLAYER_SWITCH_STATE": {
      "prefix": "GET_PLAYER_SWITCH_STATE()",
      "body": ["GET_PLAYER_SWITCH_STATE()"],
      "description": "GET_PLAYER_SWITCH_STATE()"
    },
    "GET_PLAYER_SHORT_SWITCH_STATE": {
      "prefix": "GET_PLAYER_SHORT_SWITCH_STATE()",
      "body": ["GET_PLAYER_SHORT_SWITCH_STATE()"],
      "description": "GET_PLAYER_SHORT_SWITCH_STATE()"
    },
    "SET_PLAYER_SHORT_SWITCH_STYLE": {
      "prefix": "SET_PLAYER_SHORT_SWITCH_STYLE()",
      "body": ["SET_PLAYER_SHORT_SWITCH_STYLE(${1:int p0})"],
      "description": "SET_PLAYER_SHORT_SWITCH_STYLE()"
    },
    "GET_PLAYER_SWITCH_JUMP_CUT_INDEX": {
      "prefix": "GET_PLAYER_SWITCH_JUMP_CUT_INDEX()",
      "body": ["GET_PLAYER_SWITCH_JUMP_CUT_INDEX()"],
      "description": "GET_PLAYER_SWITCH_JUMP_CUT_INDEX()"
    },
    "SET_PLAYER_SWITCH_OUTRO": {
      "prefix": "SET_PLAYER_SWITCH_OUTRO()",
      "body": [
        "SET_PLAYER_SWITCH_OUTRO(${1:float cameraCoordX}, ${2:float cameraCoordY}, ${3:float cameraCoordZ}, ${4:float camRotationX}, ${5:float camRotationY}, ${6:float camRotationZ}, ${7:float camFov}, ${8:float camFarClip}, ${9:int rotationOrder})"
      ],
      "description": "SET_PLAYER_SWITCH_OUTRO()"
    },
    "SET_PLAYER_SWITCH_ESTABLISHING_SHOT": {
      "prefix": "SET_PLAYER_SWITCH_ESTABLISHING_SHOT()",
      "body": ["SET_PLAYER_SWITCH_ESTABLISHING_SHOT(${1:const char* name})"],
      "description": "SET_PLAYER_SWITCH_ESTABLISHING_SHOT()"
    },
    "ALLOW_PLAYER_SWITCH_PAN": {
      "prefix": "ALLOW_PLAYER_SWITCH_PAN()",
      "body": ["ALLOW_PLAYER_SWITCH_PAN()"],
      "description": "ALLOW_PLAYER_SWITCH_PAN()"
    },
    "ALLOW_PLAYER_SWITCH_OUTRO": {
      "prefix": "ALLOW_PLAYER_SWITCH_OUTRO()",
      "body": ["ALLOW_PLAYER_SWITCH_OUTRO()"],
      "description": "ALLOW_PLAYER_SWITCH_OUTRO()"
    },
    "ALLOW_PLAYER_SWITCH_ASCENT": {
      "prefix": "ALLOW_PLAYER_SWITCH_ASCENT()",
      "body": ["ALLOW_PLAYER_SWITCH_ASCENT()"],
      "description": "ALLOW_PLAYER_SWITCH_ASCENT()"
    },
    "ALLOW_PLAYER_SWITCH_DESCENT": {
      "prefix": "ALLOW_PLAYER_SWITCH_DESCENT()",
      "body": ["ALLOW_PLAYER_SWITCH_DESCENT()"],
      "description": "ALLOW_PLAYER_SWITCH_DESCENT()"
    },
    "IS_SWITCH_READY_FOR_DESCENT": {
      "prefix": "IS_SWITCH_READY_FOR_DESCENT()",
      "body": ["IS_SWITCH_READY_FOR_DESCENT()"],
      "description": "IS_SWITCH_READY_FOR_DESCENT()"
    },
    "ENABLE_SWITCH_PAUSE_BEFORE_DESCENT": {
      "prefix": "ENABLE_SWITCH_PAUSE_BEFORE_DESCENT()",
      "body": ["ENABLE_SWITCH_PAUSE_BEFORE_DESCENT()"],
      "description": "ENABLE_SWITCH_PAUSE_BEFORE_DESCENT()"
    },
    "DISABLE_SWITCH_OUTRO_FX": {
      "prefix": "DISABLE_SWITCH_OUTRO_FX()",
      "body": ["DISABLE_SWITCH_OUTRO_FX()"],
      "description": "DISABLE_SWITCH_OUTRO_FX()"
    },
    "SWITCH_TO_MULTI_FIRSTPART": {
      "prefix": "SWITCH_TO_MULTI_FIRSTPART()",
      "body": [
        "SWITCH_TO_MULTI_FIRSTPART(${1:Ped ped}, ${2:int flags}, ${3:int switchType})"
      ],
      "description": "SWITCH_TO_MULTI_FIRSTPART()"
    },
    "SWITCH_TO_MULTI_SECONDPART": {
      "prefix": "SWITCH_TO_MULTI_SECONDPART()",
      "body": ["SWITCH_TO_MULTI_SECONDPART(${1:Ped ped})"],
      "description": "SWITCH_TO_MULTI_SECONDPART()"
    },
    "IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED": {
      "prefix": "IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED()",
      "body": ["IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED()"],
      "description": "IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED()"
    },
    "GET_PLAYER_SWITCH_INTERP_OUT_DURATION": {
      "prefix": "GET_PLAYER_SWITCH_INTERP_OUT_DURATION()",
      "body": ["GET_PLAYER_SWITCH_INTERP_OUT_DURATION()"],
      "description": "GET_PLAYER_SWITCH_INTERP_OUT_DURATION()"
    },
    "GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME": {
      "prefix": "GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME()",
      "body": ["GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME()"],
      "description": "GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME()"
    },
    "IS_SWITCH_SKIPPING_DESCENT": {
      "prefix": "IS_SWITCH_SKIPPING_DESCENT()",
      "body": ["IS_SWITCH_SKIPPING_DESCENT()"],
      "description": "IS_SWITCH_SKIPPING_DESCENT()"
    },
    "SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME": {
      "prefix": "SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME()",
      "body": ["SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME()"],
      "description": "SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME()"
    },
    "GET_LODSCALE": {
      "prefix": "GET_LODSCALE()",
      "body": ["GET_LODSCALE()"],
      "description": "GET_LODSCALE()"
    },
    "OVERRIDE_LODSCALE_THIS_FRAME": {
      "prefix": "OVERRIDE_LODSCALE_THIS_FRAME()",
      "body": ["OVERRIDE_LODSCALE_THIS_FRAME(${1:float scaling})"],
      "description": "OVERRIDE_LODSCALE_THIS_FRAME()"
    },
    "REMAP_LODSCALE_RANGE_THIS_FRAME": {
      "prefix": "REMAP_LODSCALE_RANGE_THIS_FRAME()",
      "body": [
        "REMAP_LODSCALE_RANGE_THIS_FRAME(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3})"
      ],
      "description": "REMAP_LODSCALE_RANGE_THIS_FRAME()"
    },
    "SUPPRESS_HD_MAP_STREAMING_THIS_FRAME": {
      "prefix": "SUPPRESS_HD_MAP_STREAMING_THIS_FRAME()",
      "body": ["SUPPRESS_HD_MAP_STREAMING_THIS_FRAME()"],
      "description": "SUPPRESS_HD_MAP_STREAMING_THIS_FRAME()"
    },
    "SET_RENDER_HD_ONLY": {
      "prefix": "SET_RENDER_HD_ONLY()",
      "body": ["SET_RENDER_HD_ONLY(${1:BOOL toggle})"],
      "description": "SET_RENDER_HD_ONLY()"
    },
    "FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME": {
      "prefix": "FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME()",
      "body": ["FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME()"],
      "description": "FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME()"
    },
    "IPL_GROUP_SWAP_START": {
      "prefix": "IPL_GROUP_SWAP_START()",
      "body": [
        "IPL_GROUP_SWAP_START(${1:const char* iplName1}, ${2:const char* iplName2})"
      ],
      "description": "IPL_GROUP_SWAP_START()"
    },
    "IPL_GROUP_SWAP_CANCEL": {
      "prefix": "IPL_GROUP_SWAP_CANCEL()",
      "body": ["IPL_GROUP_SWAP_CANCEL()"],
      "description": "IPL_GROUP_SWAP_CANCEL()"
    },
    "IPL_GROUP_SWAP_IS_READY": {
      "prefix": "IPL_GROUP_SWAP_IS_READY()",
      "body": ["IPL_GROUP_SWAP_IS_READY()"],
      "description": "IPL_GROUP_SWAP_IS_READY()"
    },
    "IPL_GROUP_SWAP_FINISH": {
      "prefix": "IPL_GROUP_SWAP_FINISH()",
      "body": ["IPL_GROUP_SWAP_FINISH()"],
      "description": "IPL_GROUP_SWAP_FINISH()"
    },
    "IPL_GROUP_SWAP_IS_ACTIVE": {
      "prefix": "IPL_GROUP_SWAP_IS_ACTIVE()",
      "body": ["IPL_GROUP_SWAP_IS_ACTIVE()"],
      "description": "IPL_GROUP_SWAP_IS_ACTIVE()"
    },
    "PREFETCH_SRL": {
      "prefix": "PREFETCH_SRL()",
      "body": ["PREFETCH_SRL(${1:const char* srl})"],
      "description": "PREFETCH_SRL()"
    },
    "IS_SRL_LOADED": {
      "prefix": "IS_SRL_LOADED()",
      "body": ["IS_SRL_LOADED()"],
      "description": "IS_SRL_LOADED()"
    },
    "BEGIN_SRL": {
      "prefix": "BEGIN_SRL()",
      "body": ["BEGIN_SRL()"],
      "description": "BEGIN_SRL()"
    },
    "END_SRL": {
      "prefix": "END_SRL()",
      "body": ["END_SRL()"],
      "description": "END_SRL()"
    },
    "SET_SRL_TIME": {
      "prefix": "SET_SRL_TIME()",
      "body": ["SET_SRL_TIME(${1:float p0})"],
      "description": "SET_SRL_TIME()"
    },
    "SET_SRL_POST_CUTSCENE_CAMERA": {
      "prefix": "SET_SRL_POST_CUTSCENE_CAMERA()",
      "body": [
        "SET_SRL_POST_CUTSCENE_CAMERA(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
      ],
      "description": "SET_SRL_POST_CUTSCENE_CAMERA()"
    },
    "SET_SRL_READAHEAD_TIMES": {
      "prefix": "SET_SRL_READAHEAD_TIMES()",
      "body": [
        "SET_SRL_READAHEAD_TIMES(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "SET_SRL_READAHEAD_TIMES()"
    },
    "SET_SRL_LONG_JUMP_MODE": {
      "prefix": "SET_SRL_LONG_JUMP_MODE()",
      "body": ["SET_SRL_LONG_JUMP_MODE(${1:BOOL p0})"],
      "description": "SET_SRL_LONG_JUMP_MODE()"
    },
    "SET_SRL_FORCE_PRESTREAM": {
      "prefix": "SET_SRL_FORCE_PRESTREAM()",
      "body": ["SET_SRL_FORCE_PRESTREAM(${1:Any p0})"],
      "description": "SET_SRL_FORCE_PRESTREAM()"
    },
    "SET_HD_AREA": {
      "prefix": "SET_HD_AREA()",
      "body": [
        "SET_HD_AREA(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius})"
      ],
      "description": "SET_HD_AREA()"
    },
    "CLEAR_HD_AREA": {
      "prefix": "CLEAR_HD_AREA()",
      "body": ["CLEAR_HD_AREA()"],
      "description": "CLEAR_HD_AREA()"
    },
    "INIT_CREATOR_BUDGET": {
      "prefix": "INIT_CREATOR_BUDGET()",
      "body": ["INIT_CREATOR_BUDGET()"],
      "description": "INIT_CREATOR_BUDGET()"
    },
    "SHUTDOWN_CREATOR_BUDGET": {
      "prefix": "SHUTDOWN_CREATOR_BUDGET()",
      "body": ["SHUTDOWN_CREATOR_BUDGET()"],
      "description": "SHUTDOWN_CREATOR_BUDGET()"
    },
    "ADD_MODEL_TO_CREATOR_BUDGET": {
      "prefix": "ADD_MODEL_TO_CREATOR_BUDGET()",
      "body": ["ADD_MODEL_TO_CREATOR_BUDGET(${1:Hash modelHash})"],
      "description": "ADD_MODEL_TO_CREATOR_BUDGET()"
    },
    "REMOVE_MODEL_FROM_CREATOR_BUDGET": {
      "prefix": "REMOVE_MODEL_FROM_CREATOR_BUDGET()",
      "body": ["REMOVE_MODEL_FROM_CREATOR_BUDGET(${1:Hash modelHash})"],
      "description": "REMOVE_MODEL_FROM_CREATOR_BUDGET()"
    },
    "GET_USED_CREATOR_BUDGET": {
      "prefix": "GET_USED_CREATOR_BUDGET()",
      "body": ["GET_USED_CREATOR_BUDGET()"],
      "description": "GET_USED_CREATOR_BUDGET()"
    },
    "SET_ISLAND_ENABLED": {
      "prefix": "SET_ISLAND_ENABLED()",
      "body": ["SET_ISLAND_ENABLED(${1:const char* name}, ${2:BOOL toggle})"],
      "description": "SET_ISLAND_ENABLED()"
    },
    "TASK_PAUSE": {
      "prefix": "TASK_PAUSE()",
      "body": ["TASK_PAUSE(${1:Ped ped}, ${2:int ms})"],
      "description": "TASK_PAUSE()"
    },
    "TASK_STAND_STILL": {
      "prefix": "TASK_STAND_STILL()",
      "body": ["TASK_STAND_STILL(${1:Ped ped}, ${2:int time})"],
      "description": "TASK_STAND_STILL()"
    },
    "TASK_JUMP": {
      "prefix": "TASK_JUMP()",
      "body": [
        "TASK_JUMP(${1:Ped ped}, ${2:BOOL usePlayerLaunchForce}, ${3:BOOL doSuperJump}, ${4:BOOL useFullSuperJumpForce})"
      ],
      "description": "TASK_JUMP()"
    },
    "TASK_COWER": {
      "prefix": "TASK_COWER()",
      "body": ["TASK_COWER(${1:Ped ped}, ${2:int duration})"],
      "description": "TASK_COWER()"
    },
    "TASK_HANDS_UP": {
      "prefix": "TASK_HANDS_UP()",
      "body": [
        "TASK_HANDS_UP(${1:Ped ped}, ${2:int duration}, ${3:Ped facingPed}, ${4:int timeToFacePed}, ${5:int flags})"
      ],
      "description": "TASK_HANDS_UP()"
    },
    "UPDATE_TASK_HANDS_UP_DURATION": {
      "prefix": "UPDATE_TASK_HANDS_UP_DURATION()",
      "body": ["UPDATE_TASK_HANDS_UP_DURATION(${1:Ped ped}, ${2:int duration})"],
      "description": "UPDATE_TASK_HANDS_UP_DURATION()"
    },
    "TASK_OPEN_VEHICLE_DOOR": {
      "prefix": "TASK_OPEN_VEHICLE_DOOR()",
      "body": [
        "TASK_OPEN_VEHICLE_DOOR(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:int timeOut}, ${4:int seat}, ${5:float speed})"
      ],
      "description": "TASK_OPEN_VEHICLE_DOOR()"
    },
    "TASK_ENTER_VEHICLE": {
      "prefix": "TASK_ENTER_VEHICLE()",
      "body": [
        "TASK_ENTER_VEHICLE(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:int timeout}, ${4:int seat}, ${5:float speed}, ${6:int flag}, ${7:const char* overrideEntryClipsetName}, ${8:Any p7})"
      ],
      "description": "TASK_ENTER_VEHICLE()"
    },
    "TASK_LEAVE_VEHICLE": {
      "prefix": "TASK_LEAVE_VEHICLE()",
      "body": [
        "TASK_LEAVE_VEHICLE(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:int flags})"
      ],
      "description": "TASK_LEAVE_VEHICLE()"
    },
    "TASK_GET_OFF_BOAT": {
      "prefix": "TASK_GET_OFF_BOAT()",
      "body": ["TASK_GET_OFF_BOAT(${1:Ped ped}, ${2:Vehicle boat})"],
      "description": "TASK_GET_OFF_BOAT()"
    },
    "TASK_SKY_DIVE": {
      "prefix": "TASK_SKY_DIVE()",
      "body": ["TASK_SKY_DIVE(${1:Ped ped}, ${2:BOOL instant})"],
      "description": "TASK_SKY_DIVE()"
    },
    "TASK_PARACHUTE": {
      "prefix": "TASK_PARACHUTE()",
      "body": [
        "TASK_PARACHUTE(${1:Ped ped}, ${2:BOOL giveParachuteItem}, ${3:BOOL instant})"
      ],
      "description": "TASK_PARACHUTE()"
    },
    "TASK_PARACHUTE_TO_TARGET": {
      "prefix": "TASK_PARACHUTE_TO_TARGET()",
      "body": [
        "TASK_PARACHUTE_TO_TARGET(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "TASK_PARACHUTE_TO_TARGET()"
    },
    "SET_PARACHUTE_TASK_TARGET": {
      "prefix": "SET_PARACHUTE_TASK_TARGET()",
      "body": [
        "SET_PARACHUTE_TASK_TARGET(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "SET_PARACHUTE_TASK_TARGET()"
    },
    "SET_PARACHUTE_TASK_THRUST": {
      "prefix": "SET_PARACHUTE_TASK_THRUST()",
      "body": ["SET_PARACHUTE_TASK_THRUST(${1:Ped ped}, ${2:float thrust})"],
      "description": "SET_PARACHUTE_TASK_THRUST()"
    },
    "TASK_RAPPEL_FROM_HELI": {
      "prefix": "TASK_RAPPEL_FROM_HELI()",
      "body": [
        "TASK_RAPPEL_FROM_HELI(${1:Ped ped}, ${2:float minHeightAboveGround})"
      ],
      "description": "TASK_RAPPEL_FROM_HELI()"
    },
    "TASK_VEHICLE_DRIVE_TO_COORD": {
      "prefix": "TASK_VEHICLE_DRIVE_TO_COORD()",
      "body": [
        "TASK_VEHICLE_DRIVE_TO_COORD(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float speed}, ${7:Any p6}, ${8:Hash vehicleModel}, ${9:int drivingMode}, ${10:float stopRange}, ${11:float straightLineDistance})"
      ],
      "description": "TASK_VEHICLE_DRIVE_TO_COORD()"
    },
    "TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE": {
      "prefix": "TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE()",
      "body": [
        "TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float speed}, ${7:int driveMode}, ${8:float stopRange})"
      ],
      "description": "TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE()"
    },
    "TASK_VEHICLE_DRIVE_WANDER": {
      "prefix": "TASK_VEHICLE_DRIVE_WANDER()",
      "body": [
        "TASK_VEHICLE_DRIVE_WANDER(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:float speed}, ${4:int drivingStyle})"
      ],
      "description": "TASK_VEHICLE_DRIVE_WANDER()"
    },
    "TASK_FOLLOW_TO_OFFSET_OF_ENTITY": {
      "prefix": "TASK_FOLLOW_TO_OFFSET_OF_ENTITY()",
      "body": [
        "TASK_FOLLOW_TO_OFFSET_OF_ENTITY(${1:Ped ped}, ${2:Entity entity}, ${3:float offsetX}, ${4:float offsetY}, ${5:float offsetZ}, ${6:float movementSpeed}, ${7:int timeout}, ${8:float stoppingRange}, ${9:BOOL persistFollowing})"
      ],
      "description": "TASK_FOLLOW_TO_OFFSET_OF_ENTITY()"
    },
    "TASK_GO_STRAIGHT_TO_COORD": {
      "prefix": "TASK_GO_STRAIGHT_TO_COORD()",
      "body": [
        "TASK_GO_STRAIGHT_TO_COORD(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float speed}, ${6:int timeout}, ${7:float targetHeading}, ${8:float distanceToSlide})"
      ],
      "description": "TASK_GO_STRAIGHT_TO_COORD()"
    },
    "TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY": {
      "prefix": "TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY()",
      "body": [
        "TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(${1:Ped ped}, ${2:Entity entity}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float moveBlendRatio}, ${7:int time})"
      ],
      "description": "TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY()"
    },
    "TASK_ACHIEVE_HEADING": {
      "prefix": "TASK_ACHIEVE_HEADING()",
      "body": [
        "TASK_ACHIEVE_HEADING(${1:Ped ped}, ${2:float heading}, ${3:int timeout})"
      ],
      "description": "TASK_ACHIEVE_HEADING()"
    },
    "TASK_FLUSH_ROUTE": {
      "prefix": "TASK_FLUSH_ROUTE()",
      "body": ["TASK_FLUSH_ROUTE()"],
      "description": "TASK_FLUSH_ROUTE()"
    },
    "TASK_EXTEND_ROUTE": {
      "prefix": "TASK_EXTEND_ROUTE()",
      "body": ["TASK_EXTEND_ROUTE(${1:float x}, ${2:float y}, ${3:float z})"],
      "description": "TASK_EXTEND_ROUTE()"
    },
    "TASK_FOLLOW_POINT_ROUTE": {
      "prefix": "TASK_FOLLOW_POINT_ROUTE()",
      "body": [
        "TASK_FOLLOW_POINT_ROUTE(${1:Ped ped}, ${2:float speed}, ${3:int mode})"
      ],
      "description": "TASK_FOLLOW_POINT_ROUTE()"
    },
    "TASK_GO_TO_ENTITY": {
      "prefix": "TASK_GO_TO_ENTITY()",
      "body": [
        "TASK_GO_TO_ENTITY(${1:Entity entity}, ${2:Entity target}, ${3:int duration}, ${4:float distance}, ${5:float moveBlendRatio}, ${6:float slowDownDistance}, ${7:int flags})"
      ],
      "description": "TASK_GO_TO_ENTITY()"
    },
    "TASK_SMART_FLEE_COORD": {
      "prefix": "TASK_SMART_FLEE_COORD()",
      "body": [
        "TASK_SMART_FLEE_COORD(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float distance}, ${6:int time}, ${7:BOOL preferPavements}, ${8:BOOL quitIfOutOfRange})"
      ],
      "description": "TASK_SMART_FLEE_COORD()"
    },
    "TASK_SMART_FLEE_PED": {
      "prefix": "TASK_SMART_FLEE_PED()",
      "body": [
        "TASK_SMART_FLEE_PED(${1:Ped ped}, ${2:Ped fleeTarget}, ${3:float safeDistance}, ${4:int fleeTime}, ${5:BOOL preferPavements}, ${6:BOOL updateToNearestHatedPed})"
      ],
      "description": "TASK_SMART_FLEE_PED()"
    },
    "TASK_REACT_AND_FLEE_PED": {
      "prefix": "TASK_REACT_AND_FLEE_PED()",
      "body": ["TASK_REACT_AND_FLEE_PED(${1:Ped ped}, ${2:Ped fleeTarget})"],
      "description": "TASK_REACT_AND_FLEE_PED()"
    },
    "TASK_SHOCKING_EVENT_REACT": {
      "prefix": "TASK_SHOCKING_EVENT_REACT()",
      "body": ["TASK_SHOCKING_EVENT_REACT(${1:Ped ped}, ${2:int eventHandle})"],
      "description": "TASK_SHOCKING_EVENT_REACT()"
    },
    "TASK_WANDER_IN_AREA": {
      "prefix": "TASK_WANDER_IN_AREA()",
      "body": [
        "TASK_WANDER_IN_AREA(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius}, ${6:float minimalLength}, ${7:float timeBetweenWalks})"
      ],
      "description": "TASK_WANDER_IN_AREA()"
    },
    "TASK_WANDER_STANDARD": {
      "prefix": "TASK_WANDER_STANDARD()",
      "body": [
        "TASK_WANDER_STANDARD(${1:Ped ped}, ${2:float heading}, ${3:int flags})"
      ],
      "description": "TASK_WANDER_STANDARD()"
    },
    "TASK_WANDER_SPECIFIC": {
      "prefix": "TASK_WANDER_SPECIFIC()",
      "body": [
        "TASK_WANDER_SPECIFIC(${1:Ped ped}, ${2:const char* conditionalAnimGroupStr}, ${3:const char* conditionalAnimStr}, ${4:float heading})"
      ],
      "description": "TASK_WANDER_SPECIFIC()"
    },
    "TASK_VEHICLE_PARK": {
      "prefix": "TASK_VEHICLE_PARK()",
      "body": [
        "TASK_VEHICLE_PARK(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float heading}, ${7:int mode}, ${8:float radius}, ${9:BOOL keepEngineOn})"
      ],
      "description": "TASK_VEHICLE_PARK()"
    },
    "TASK_STEALTH_KILL": {
      "prefix": "TASK_STEALTH_KILL()",
      "body": [
        "TASK_STEALTH_KILL(${1:Ped killer}, ${2:Ped target}, ${3:Hash stealthKillActionResultHash}, ${4:float desiredMoveBlendRatio}, ${5:int stealthFlags})"
      ],
      "description": "TASK_STEALTH_KILL()"
    },
    "TASK_PLANT_BOMB": {
      "prefix": "TASK_PLANT_BOMB()",
      "body": [
        "TASK_PLANT_BOMB(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float heading})"
      ],
      "description": "TASK_PLANT_BOMB()"
    },
    "TASK_FOLLOW_NAV_MESH_TO_COORD": {
      "prefix": "TASK_FOLLOW_NAV_MESH_TO_COORD()",
      "body": [
        "TASK_FOLLOW_NAV_MESH_TO_COORD(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float moveBlendRatio}, ${6:int time}, ${7:float targetRadius}, ${8:int flags}, ${9:float targetHeading})"
      ],
      "description": "TASK_FOLLOW_NAV_MESH_TO_COORD()"
    },
    "TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED": {
      "prefix": "TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED()",
      "body": [
        "TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float moveBlendRatio}, ${6:int time}, ${7:float targetRadius}, ${8:int flags}, ${9:float slideToCoordHeading}, ${10:float maxSlopeNavigable}, ${11:float clampMaxSearchDistance}, ${12:float targetHeading})"
      ],
      "description": "TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED()"
    },
    "SET_PED_PATH_CAN_USE_CLIMBOVERS": {
      "prefix": "SET_PED_PATH_CAN_USE_CLIMBOVERS()",
      "body": ["SET_PED_PATH_CAN_USE_CLIMBOVERS(${1:Ped ped}, ${2:BOOL Toggle})"],
      "description": "SET_PED_PATH_CAN_USE_CLIMBOVERS()"
    },
    "SET_PED_PATH_CAN_USE_LADDERS": {
      "prefix": "SET_PED_PATH_CAN_USE_LADDERS()",
      "body": ["SET_PED_PATH_CAN_USE_LADDERS(${1:Ped ped}, ${2:BOOL Toggle})"],
      "description": "SET_PED_PATH_CAN_USE_LADDERS()"
    },
    "SET_PED_PATH_CAN_DROP_FROM_HEIGHT": {
      "prefix": "SET_PED_PATH_CAN_DROP_FROM_HEIGHT()",
      "body": [
        "SET_PED_PATH_CAN_DROP_FROM_HEIGHT(${1:Ped ped}, ${2:BOOL Toggle})"
      ],
      "description": "SET_PED_PATH_CAN_DROP_FROM_HEIGHT()"
    },
    "SET_PED_PATH_CLIMB_COST_MODIFIER": {
      "prefix": "SET_PED_PATH_CLIMB_COST_MODIFIER()",
      "body": [
        "SET_PED_PATH_CLIMB_COST_MODIFIER(${1:Ped ped}, ${2:float modifier})"
      ],
      "description": "SET_PED_PATH_CLIMB_COST_MODIFIER()"
    },
    "SET_PED_PATH_MAY_ENTER_WATER": {
      "prefix": "SET_PED_PATH_MAY_ENTER_WATER()",
      "body": [
        "SET_PED_PATH_MAY_ENTER_WATER(${1:Ped ped}, ${2:BOOL mayEnterWater})"
      ],
      "description": "SET_PED_PATH_MAY_ENTER_WATER()"
    },
    "SET_PED_PATH_PREFER_TO_AVOID_WATER": {
      "prefix": "SET_PED_PATH_PREFER_TO_AVOID_WATER()",
      "body": [
        "SET_PED_PATH_PREFER_TO_AVOID_WATER(${1:Ped ped}, ${2:BOOL avoidWater})"
      ],
      "description": "SET_PED_PATH_PREFER_TO_AVOID_WATER()"
    },
    "SET_PED_PATH_AVOID_FIRE": {
      "prefix": "SET_PED_PATH_AVOID_FIRE()",
      "body": ["SET_PED_PATH_AVOID_FIRE(${1:Ped ped}, ${2:BOOL avoidFire})"],
      "description": "SET_PED_PATH_AVOID_FIRE()"
    },
    "SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT": {
      "prefix": "SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT()",
      "body": ["SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT(${1:float height})"],
      "description": "SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT()"
    },
    "GET_NAVMESH_ROUTE_DISTANCE_REMAINING": {
      "prefix": "GET_NAVMESH_ROUTE_DISTANCE_REMAINING()",
      "body": [
        "GET_NAVMESH_ROUTE_DISTANCE_REMAINING(${1:Ped ped}, ${2:float* distanceRemaining}, ${3:BOOL* isPathReady})"
      ],
      "description": "GET_NAVMESH_ROUTE_DISTANCE_REMAINING()"
    },
    "GET_NAVMESH_ROUTE_RESULT": {
      "prefix": "GET_NAVMESH_ROUTE_RESULT()",
      "body": ["GET_NAVMESH_ROUTE_RESULT(${1:Ped ped})"],
      "description": "GET_NAVMESH_ROUTE_RESULT()"
    },
    "IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD": {
      "prefix": "IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD()",
      "body": ["IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD(${1:Ped ped})"],
      "description": "IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD()"
    },
    "TASK_GO_TO_COORD_ANY_MEANS": {
      "prefix": "TASK_GO_TO_COORD_ANY_MEANS()",
      "body": [
        "TASK_GO_TO_COORD_ANY_MEANS(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float moveBlendRatio}, ${6:Vehicle vehicle}, ${7:BOOL useLongRangeVehiclePathing}, ${8:int drivingFlags}, ${9:float maxRangeToShootTargets})"
      ],
      "description": "TASK_GO_TO_COORD_ANY_MEANS()"
    },
    "TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS": {
      "prefix": "TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS()",
      "body": [
        "TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float moveBlendRatio}, ${6:Vehicle vehicle}, ${7:BOOL useLongRangeVehiclePathing}, ${8:int drivingFlags}, ${9:float maxRangeToShootTargets}, ${10:float extraVehToTargetDistToPreferVehicle}, ${11:float driveStraightLineDistance}, ${12:int extraFlags}, ${13:float warpTimerMS})"
      ],
      "description": "TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS()"
    },
    "TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED": {
      "prefix": "TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED()",
      "body": [
        "TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float moveBlendRatio}, ${6:Vehicle vehicle}, ${7:BOOL useLongRangeVehiclePathing}, ${8:int drivingFlags}, ${9:float maxRangeToShootTargets}, ${10:float extraVehToTargetDistToPreferVehicle}, ${11:float driveStraightLineDistance}, ${12:int extraFlags}, ${13:float cruiseSpeed}, ${14:float targetArriveDist})"
      ],
      "description": "TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED()"
    },
    "TASK_PLAY_ANIM": {
      "prefix": "TASK_PLAY_ANIM()",
      "body": [
        "TASK_PLAY_ANIM(${1:Ped ped}, ${2:const char* animDictionary}, ${3:const char* animationName}, ${4:float blendInSpeed}, ${5:float blendOutSpeed}, ${6:int duration}, ${7:int flag}, ${8:float playbackRate}, ${9:BOOL lockX}, ${10:BOOL lockY}, ${11:BOOL lockZ})"
      ],
      "description": "TASK_PLAY_ANIM()"
    },
    "TASK_PLAY_ANIM_ADVANCED": {
      "prefix": "TASK_PLAY_ANIM_ADVANCED()",
      "body": [
        "TASK_PLAY_ANIM_ADVANCED(${1:Ped ped}, ${2:const char* animDict}, ${3:const char* animName}, ${4:float posX}, ${5:float posY}, ${6:float posZ}, ${7:float rotX}, ${8:float rotY}, ${9:float rotZ}, ${10:float animEnterSpeed}, ${11:float animExitSpeed}, ${12:int duration}, ${13:Any flag}, ${14:float animTime}, ${15:int rotOrder}, ${16:int ikFlags})"
      ],
      "description": "TASK_PLAY_ANIM_ADVANCED()"
    },
    "STOP_ANIM_TASK": {
      "prefix": "STOP_ANIM_TASK()",
      "body": [
        "STOP_ANIM_TASK(${1:Entity entity}, ${2:const char* animDictionary}, ${3:const char* animationName}, ${4:float blendDelta})"
      ],
      "description": "STOP_ANIM_TASK()"
    },
    "TASK_SCRIPTED_ANIMATION": {
      "prefix": "TASK_SCRIPTED_ANIMATION()",
      "body": [
        "TASK_SCRIPTED_ANIMATION(${1:Ped ped}, ${2:int* priorityLowData}, ${3:int* priorityMidData}, ${4:int* priorityHighData}, ${5:float blendInDelta}, ${6:float blendOutDelta})"
      ],
      "description": "TASK_SCRIPTED_ANIMATION()"
    },
    "PLAY_ENTITY_SCRIPTED_ANIM": {
      "prefix": "PLAY_ENTITY_SCRIPTED_ANIM()",
      "body": [
        "PLAY_ENTITY_SCRIPTED_ANIM(${1:Entity entity}, ${2:int* priorityLowData}, ${3:int* priorityMidData}, ${4:int* priorityHighData}, ${5:float blendInDelta}, ${6:float blendOutDelta})"
      ],
      "description": "PLAY_ENTITY_SCRIPTED_ANIM()"
    },
    "STOP_ANIM_PLAYBACK": {
      "prefix": "STOP_ANIM_PLAYBACK()",
      "body": [
        "STOP_ANIM_PLAYBACK(${1:Entity entity}, ${2:int priority}, ${3:BOOL secondary})"
      ],
      "description": "STOP_ANIM_PLAYBACK()"
    },
    "SET_ANIM_WEIGHT": {
      "prefix": "SET_ANIM_WEIGHT()",
      "body": [
        "SET_ANIM_WEIGHT(${1:Entity entity}, ${2:float weight}, ${3:int priority}, ${4:int index}, ${5:BOOL secondary})"
      ],
      "description": "SET_ANIM_WEIGHT()"
    },
    "SET_ANIM_PHASE": {
      "prefix": "SET_ANIM_PHASE()",
      "body": [
        "SET_ANIM_PHASE(${1:Entity entity}, ${2:float phase}, ${3:int priority}, ${4:BOOL secondary})"
      ],
      "description": "SET_ANIM_PHASE()"
    },
    "SET_ANIM_RATE": {
      "prefix": "SET_ANIM_RATE()",
      "body": [
        "SET_ANIM_RATE(${1:Entity entity}, ${2:float rate}, ${3:int priority}, ${4:BOOL secondary})"
      ],
      "description": "SET_ANIM_RATE()"
    },
    "SET_ANIM_LOOPED": {
      "prefix": "SET_ANIM_LOOPED()",
      "body": [
        "SET_ANIM_LOOPED(${1:Entity entity}, ${2:BOOL looped}, ${3:int priority}, ${4:BOOL secondary})"
      ],
      "description": "SET_ANIM_LOOPED()"
    },
    "TASK_PLAY_PHONE_GESTURE_ANIMATION": {
      "prefix": "TASK_PLAY_PHONE_GESTURE_ANIMATION()",
      "body": [
        "TASK_PLAY_PHONE_GESTURE_ANIMATION(${1:Ped ped}, ${2:const char* animDict}, ${3:const char* animation}, ${4:const char* boneMaskType}, ${5:float blendInDuration}, ${6:float blendOutDuration}, ${7:BOOL isLooping}, ${8:BOOL holdLastFrame})"
      ],
      "description": "TASK_PLAY_PHONE_GESTURE_ANIMATION()"
    },
    "TASK_STOP_PHONE_GESTURE_ANIMATION": {
      "prefix": "TASK_STOP_PHONE_GESTURE_ANIMATION()",
      "body": [
        "TASK_STOP_PHONE_GESTURE_ANIMATION(${1:Ped ped}, ${2:float blendOutOverride})"
      ],
      "description": "TASK_STOP_PHONE_GESTURE_ANIMATION()"
    },
    "IS_PLAYING_PHONE_GESTURE_ANIM": {
      "prefix": "IS_PLAYING_PHONE_GESTURE_ANIM()",
      "body": ["IS_PLAYING_PHONE_GESTURE_ANIM(${1:Ped ped})"],
      "description": "IS_PLAYING_PHONE_GESTURE_ANIM()"
    },
    "GET_PHONE_GESTURE_ANIM_CURRENT_TIME": {
      "prefix": "GET_PHONE_GESTURE_ANIM_CURRENT_TIME()",
      "body": ["GET_PHONE_GESTURE_ANIM_CURRENT_TIME(${1:Ped ped})"],
      "description": "GET_PHONE_GESTURE_ANIM_CURRENT_TIME()"
    },
    "GET_PHONE_GESTURE_ANIM_TOTAL_TIME": {
      "prefix": "GET_PHONE_GESTURE_ANIM_TOTAL_TIME()",
      "body": ["GET_PHONE_GESTURE_ANIM_TOTAL_TIME(${1:Ped ped})"],
      "description": "GET_PHONE_GESTURE_ANIM_TOTAL_TIME()"
    },
    "TASK_VEHICLE_PLAY_ANIM": {
      "prefix": "TASK_VEHICLE_PLAY_ANIM()",
      "body": [
        "TASK_VEHICLE_PLAY_ANIM(${1:Vehicle vehicle}, ${2:const char* animationSet}, ${3:const char* animationName})"
      ],
      "description": "TASK_VEHICLE_PLAY_ANIM()"
    },
    "TASK_LOOK_AT_COORD": {
      "prefix": "TASK_LOOK_AT_COORD()",
      "body": [
        "TASK_LOOK_AT_COORD(${1:Entity entity}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int duration}, ${6:int flags}, ${7:int priority})"
      ],
      "description": "TASK_LOOK_AT_COORD()"
    },
    "TASK_LOOK_AT_ENTITY": {
      "prefix": "TASK_LOOK_AT_ENTITY()",
      "body": [
        "TASK_LOOK_AT_ENTITY(${1:Ped ped}, ${2:Entity lookAt}, ${3:int duration}, ${4:int flags}, ${5:int priority})"
      ],
      "description": "TASK_LOOK_AT_ENTITY()"
    },
    "TASK_CLEAR_LOOK_AT": {
      "prefix": "TASK_CLEAR_LOOK_AT()",
      "body": ["TASK_CLEAR_LOOK_AT(${1:Ped ped})"],
      "description": "TASK_CLEAR_LOOK_AT()"
    },
    "OPEN_SEQUENCE_TASK": {
      "prefix": "OPEN_SEQUENCE_TASK()",
      "body": ["OPEN_SEQUENCE_TASK(${1:int* taskSequenceId})"],
      "description": "OPEN_SEQUENCE_TASK()"
    },
    "CLOSE_SEQUENCE_TASK": {
      "prefix": "CLOSE_SEQUENCE_TASK()",
      "body": ["CLOSE_SEQUENCE_TASK(${1:int taskSequenceId})"],
      "description": "CLOSE_SEQUENCE_TASK()"
    },
    "TASK_PERFORM_SEQUENCE": {
      "prefix": "TASK_PERFORM_SEQUENCE()",
      "body": ["TASK_PERFORM_SEQUENCE(${1:Ped ped}, ${2:int taskSequenceId})"],
      "description": "TASK_PERFORM_SEQUENCE()"
    },
    "TASK_PERFORM_SEQUENCE_LOCALLY": {
      "prefix": "TASK_PERFORM_SEQUENCE_LOCALLY()",
      "body": [
        "TASK_PERFORM_SEQUENCE_LOCALLY(${1:Ped ped}, ${2:int taskSequenceId})"
      ],
      "description": "TASK_PERFORM_SEQUENCE_LOCALLY()"
    },
    "CLEAR_SEQUENCE_TASK": {
      "prefix": "CLEAR_SEQUENCE_TASK()",
      "body": ["CLEAR_SEQUENCE_TASK(${1:int* taskSequenceId})"],
      "description": "CLEAR_SEQUENCE_TASK()"
    },
    "SET_SEQUENCE_TO_REPEAT": {
      "prefix": "SET_SEQUENCE_TO_REPEAT()",
      "body": [
        "SET_SEQUENCE_TO_REPEAT(${1:int taskSequenceId}, ${2:BOOL repeat})"
      ],
      "description": "SET_SEQUENCE_TO_REPEAT()"
    },
    "GET_SEQUENCE_PROGRESS": {
      "prefix": "GET_SEQUENCE_PROGRESS()",
      "body": ["GET_SEQUENCE_PROGRESS(${1:Ped ped})"],
      "description": "GET_SEQUENCE_PROGRESS()"
    },
    "GET_IS_TASK_ACTIVE": {
      "prefix": "GET_IS_TASK_ACTIVE()",
      "body": ["GET_IS_TASK_ACTIVE(${1:Ped ped}, ${2:int taskIndex})"],
      "description": "GET_IS_TASK_ACTIVE()"
    },
    "GET_SCRIPT_TASK_STATUS": {
      "prefix": "GET_SCRIPT_TASK_STATUS()",
      "body": ["GET_SCRIPT_TASK_STATUS(${1:Ped ped}, ${2:Hash taskHash})"],
      "description": "GET_SCRIPT_TASK_STATUS()"
    },
    "GET_ACTIVE_VEHICLE_MISSION_TYPE": {
      "prefix": "GET_ACTIVE_VEHICLE_MISSION_TYPE()",
      "body": ["GET_ACTIVE_VEHICLE_MISSION_TYPE(${1:Vehicle vehicle})"],
      "description": "GET_ACTIVE_VEHICLE_MISSION_TYPE()"
    },
    "TASK_LEAVE_ANY_VEHICLE": {
      "prefix": "TASK_LEAVE_ANY_VEHICLE()",
      "body": [
        "TASK_LEAVE_ANY_VEHICLE(${1:Ped ped}, ${2:int delayTime}, ${3:int flags})"
      ],
      "description": "TASK_LEAVE_ANY_VEHICLE()"
    },
    "TASK_AIM_GUN_SCRIPTED": {
      "prefix": "TASK_AIM_GUN_SCRIPTED()",
      "body": [
        "TASK_AIM_GUN_SCRIPTED(${1:Ped ped}, ${2:Hash scriptTask}, ${3:BOOL disableBlockingClip}, ${4:BOOL instantBlendToAim})"
      ],
      "description": "TASK_AIM_GUN_SCRIPTED()"
    },
    "TASK_AIM_GUN_SCRIPTED_WITH_TARGET": {
      "prefix": "TASK_AIM_GUN_SCRIPTED_WITH_TARGET()",
      "body": [
        "TASK_AIM_GUN_SCRIPTED_WITH_TARGET(${1:Ped ped}, ${2:Ped target}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:int gunTaskType}, ${7:BOOL disableBlockingClip}, ${8:BOOL forceAim})"
      ],
      "description": "TASK_AIM_GUN_SCRIPTED_WITH_TARGET()"
    },
    "UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET": {
      "prefix": "UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET()",
      "body": [
        "UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET(${1:Ped ped}, ${2:Ped target}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:BOOL disableBlockingClip})"
      ],
      "description": "UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET()"
    },
    "TASK_AIM_GUN_AT_ENTITY": {
      "prefix": "TASK_AIM_GUN_AT_ENTITY()",
      "body": [
        "TASK_AIM_GUN_AT_ENTITY(${1:Ped ped}, ${2:Entity entity}, ${3:int duration}, ${4:BOOL instantBlendToAim})"
      ],
      "description": "TASK_AIM_GUN_AT_ENTITY()"
    },
    "TASK_TURN_PED_TO_FACE_ENTITY": {
      "prefix": "TASK_TURN_PED_TO_FACE_ENTITY()",
      "body": [
        "TASK_TURN_PED_TO_FACE_ENTITY(${1:Ped ped}, ${2:Entity entity}, ${3:int duration})"
      ],
      "description": "TASK_TURN_PED_TO_FACE_ENTITY()"
    },
    "TASK_AIM_GUN_AT_COORD": {
      "prefix": "TASK_AIM_GUN_AT_COORD()",
      "body": [
        "TASK_AIM_GUN_AT_COORD(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int time}, ${6:BOOL instantBlendToAim}, ${7:BOOL playAnimIntro})"
      ],
      "description": "TASK_AIM_GUN_AT_COORD()"
    },
    "TASK_SHOOT_AT_COORD": {
      "prefix": "TASK_SHOOT_AT_COORD()",
      "body": [
        "TASK_SHOOT_AT_COORD(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int duration}, ${6:Hash firingPattern})"
      ],
      "description": "TASK_SHOOT_AT_COORD()"
    },
    "TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT": {
      "prefix": "TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT()",
      "body": [
        "TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:BOOL useAlternateShuffle})"
      ],
      "description": "TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT()"
    },
    "CLEAR_PED_TASKS": {
      "prefix": "CLEAR_PED_TASKS()",
      "body": ["CLEAR_PED_TASKS(${1:Ped ped})"],
      "description": "CLEAR_PED_TASKS()"
    },
    "CLEAR_PED_SECONDARY_TASK": {
      "prefix": "CLEAR_PED_SECONDARY_TASK()",
      "body": ["CLEAR_PED_SECONDARY_TASK(${1:Ped ped})"],
      "description": "CLEAR_PED_SECONDARY_TASK()"
    },
    "TASK_EVERYONE_LEAVE_VEHICLE": {
      "prefix": "TASK_EVERYONE_LEAVE_VEHICLE()",
      "body": ["TASK_EVERYONE_LEAVE_VEHICLE(${1:Vehicle vehicle})"],
      "description": "TASK_EVERYONE_LEAVE_VEHICLE()"
    },
    "TASK_GOTO_ENTITY_OFFSET": {
      "prefix": "TASK_GOTO_ENTITY_OFFSET()",
      "body": [
        "TASK_GOTO_ENTITY_OFFSET(${1:Ped ped}, ${2:Entity entity}, ${3:int time}, ${4:float seekRadius}, ${5:float seekAngleDeg}, ${6:float moveBlendRatio}, ${7:int gotoEntityOffsetFlags})"
      ],
      "description": "TASK_GOTO_ENTITY_OFFSET()"
    },
    "TASK_GOTO_ENTITY_OFFSET_XY": {
      "prefix": "TASK_GOTO_ENTITY_OFFSET_XY()",
      "body": [
        "TASK_GOTO_ENTITY_OFFSET_XY(${1:Ped ped}, ${2:Entity entity}, ${3:int duration}, ${4:float targetRadius}, ${5:float offsetX}, ${6:float offsetY}, ${7:float moveBlendRatio}, ${8:int gotoEntityOffsetFlags})"
      ],
      "description": "TASK_GOTO_ENTITY_OFFSET_XY()"
    },
    "TASK_TURN_PED_TO_FACE_COORD": {
      "prefix": "TASK_TURN_PED_TO_FACE_COORD()",
      "body": [
        "TASK_TURN_PED_TO_FACE_COORD(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int duration})"
      ],
      "description": "TASK_TURN_PED_TO_FACE_COORD()"
    },
    "TASK_VEHICLE_TEMP_ACTION": {
      "prefix": "TASK_VEHICLE_TEMP_ACTION()",
      "body": [
        "TASK_VEHICLE_TEMP_ACTION(${1:Ped driver}, ${2:Vehicle vehicle}, ${3:int action}, ${4:int time})"
      ],
      "description": "TASK_VEHICLE_TEMP_ACTION()"
    },
    "TASK_VEHICLE_MISSION": {
      "prefix": "TASK_VEHICLE_MISSION()",
      "body": [
        "TASK_VEHICLE_MISSION(${1:Ped driver}, ${2:Vehicle vehicle}, ${3:Vehicle vehicleTarget}, ${4:int missionType}, ${5:float cruiseSpeed}, ${6:int drivingStyle}, ${7:float targetReached}, ${8:float straightLineDistance}, ${9:BOOL DriveAgainstTraffic})"
      ],
      "description": "TASK_VEHICLE_MISSION()"
    },
    "TASK_VEHICLE_MISSION_PED_TARGET": {
      "prefix": "TASK_VEHICLE_MISSION_PED_TARGET()",
      "body": [
        "TASK_VEHICLE_MISSION_PED_TARGET(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:Ped pedTarget}, ${4:int missionType}, ${5:float maxSpeed}, ${6:int drivingStyle}, ${7:float minDistance}, ${8:float straightLineDistance}, ${9:BOOL DriveAgainstTraffic})"
      ],
      "description": "TASK_VEHICLE_MISSION_PED_TARGET()"
    },
    "TASK_VEHICLE_MISSION_COORS_TARGET": {
      "prefix": "TASK_VEHICLE_MISSION_COORS_TARGET()",
      "body": [
        "TASK_VEHICLE_MISSION_COORS_TARGET(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:int mission}, ${7:float cruiseSpeed}, ${8:int drivingStyle}, ${9:float targetReached}, ${10:float straightLineDistance}, ${11:BOOL DriveAgainstTraffic})"
      ],
      "description": "TASK_VEHICLE_MISSION_COORS_TARGET()"
    },
    "TASK_VEHICLE_ESCORT": {
      "prefix": "TASK_VEHICLE_ESCORT()",
      "body": [
        "TASK_VEHICLE_ESCORT(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:Vehicle targetVehicle}, ${4:int mode}, ${5:float speed}, ${6:int drivingStyle}, ${7:float minDistance}, ${8:int minHeightAboveTerrain}, ${9:float noRoadsDistance})"
      ],
      "description": "TASK_VEHICLE_ESCORT()"
    },
    "TASK_VEHICLE_FOLLOW": {
      "prefix": "TASK_VEHICLE_FOLLOW()",
      "body": [
        "TASK_VEHICLE_FOLLOW(${1:Ped driver}, ${2:Vehicle vehicle}, ${3:Entity targetEntity}, ${4:float speed}, ${5:int drivingStyle}, ${6:int minDistance})"
      ],
      "description": "TASK_VEHICLE_FOLLOW()"
    },
    "TASK_VEHICLE_CHASE": {
      "prefix": "TASK_VEHICLE_CHASE()",
      "body": ["TASK_VEHICLE_CHASE(${1:Ped driver}, ${2:Entity targetEnt})"],
      "description": "TASK_VEHICLE_CHASE()"
    },
    "TASK_VEHICLE_HELI_PROTECT": {
      "prefix": "TASK_VEHICLE_HELI_PROTECT()",
      "body": [
        "TASK_VEHICLE_HELI_PROTECT(${1:Ped pilot}, ${2:Vehicle vehicle}, ${3:Entity entityToFollow}, ${4:float targetSpeed}, ${5:int drivingFlags}, ${6:float radius}, ${7:int altitude}, ${8:int heliFlags})"
      ],
      "description": "TASK_VEHICLE_HELI_PROTECT()"
    },
    "SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG": {
      "prefix": "SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG()",
      "body": [
        "SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG(${1:Ped ped}, ${2:int flag}, ${3:BOOL set})"
      ],
      "description": "SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG()"
    },
    "SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE": {
      "prefix": "SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE()",
      "body": [
        "SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE(${1:Ped ped}, ${2:float distance})"
      ],
      "description": "SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE()"
    },
    "TASK_HELI_CHASE": {
      "prefix": "TASK_HELI_CHASE()",
      "body": [
        "TASK_HELI_CHASE(${1:Ped pilot}, ${2:Entity entityToFollow}, ${3:float x}, ${4:float y}, ${5:float z})"
      ],
      "description": "TASK_HELI_CHASE()"
    },
    "TASK_PLANE_CHASE": {
      "prefix": "TASK_PLANE_CHASE()",
      "body": [
        "TASK_PLANE_CHASE(${1:Ped pilot}, ${2:Entity entityToFollow}, ${3:float x}, ${4:float y}, ${5:float z})"
      ],
      "description": "TASK_PLANE_CHASE()"
    },
    "TASK_PLANE_LAND": {
      "prefix": "TASK_PLANE_LAND()",
      "body": [
        "TASK_PLANE_LAND(${1:Ped pilot}, ${2:Vehicle plane}, ${3:float runwayStartX}, ${4:float runwayStartY}, ${5:float runwayStartZ}, ${6:float runwayEndX}, ${7:float runwayEndY}, ${8:float runwayEndZ})"
      ],
      "description": "TASK_PLANE_LAND()"
    },
    "CLEAR_DEFAULT_PRIMARY_TASK": {
      "prefix": "CLEAR_DEFAULT_PRIMARY_TASK()",
      "body": ["CLEAR_DEFAULT_PRIMARY_TASK(${1:Ped ped})"],
      "description": "CLEAR_DEFAULT_PRIMARY_TASK()"
    },
    "CLEAR_PRIMARY_VEHICLE_TASK": {
      "prefix": "CLEAR_PRIMARY_VEHICLE_TASK()",
      "body": ["CLEAR_PRIMARY_VEHICLE_TASK(${1:Vehicle vehicle})"],
      "description": "CLEAR_PRIMARY_VEHICLE_TASK()"
    },
    "CLEAR_VEHICLE_CRASH_TASK": {
      "prefix": "CLEAR_VEHICLE_CRASH_TASK()",
      "body": ["CLEAR_VEHICLE_CRASH_TASK(${1:Vehicle vehicle})"],
      "description": "CLEAR_VEHICLE_CRASH_TASK()"
    },
    "TASK_PLANE_GOTO_PRECISE_VTOL": {
      "prefix": "TASK_PLANE_GOTO_PRECISE_VTOL()",
      "body": [
        "TASK_PLANE_GOTO_PRECISE_VTOL(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:int flightHeight}, ${7:int minHeightAboveTerrain}, ${8:BOOL useDesiredOrientation}, ${9:float desiredOrientation}, ${10:BOOL autopilot})"
      ],
      "description": "TASK_PLANE_GOTO_PRECISE_VTOL()"
    },
    "TASK_SUBMARINE_GOTO_AND_STOP": {
      "prefix": "TASK_SUBMARINE_GOTO_AND_STOP()",
      "body": [
        "TASK_SUBMARINE_GOTO_AND_STOP(${1:Ped ped}, ${2:Vehicle submarine}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:BOOL autopilot})"
      ],
      "description": "TASK_SUBMARINE_GOTO_AND_STOP()"
    },
    "TASK_HELI_MISSION": {
      "prefix": "TASK_HELI_MISSION()",
      "body": [
        "TASK_HELI_MISSION(${1:Ped pilot}, ${2:Vehicle aircraft}, ${3:Vehicle targetVehicle}, ${4:Ped targetPed}, ${5:float destinationX}, ${6:float destinationY}, ${7:float destinationZ}, ${8:int missionFlag}, ${9:float maxSpeed}, ${10:float radius}, ${11:float targetHeading}, ${12:int maxHeight}, ${13:int minHeight}, ${14:float slowDownDistance}, ${15:int behaviorFlags})"
      ],
      "description": "TASK_HELI_MISSION()"
    },
    "TASK_HELI_ESCORT_HELI": {
      "prefix": "TASK_HELI_ESCORT_HELI()",
      "body": [
        "TASK_HELI_ESCORT_HELI(${1:Ped pilot}, ${2:Vehicle heli1}, ${3:Vehicle heli2}, ${4:float offsetX}, ${5:float offsetY}, ${6:float offsetZ})"
      ],
      "description": "TASK_HELI_ESCORT_HELI()"
    },
    "TASK_PLANE_MISSION": {
      "prefix": "TASK_PLANE_MISSION()",
      "body": [
        "TASK_PLANE_MISSION(${1:Ped pilot}, ${2:Vehicle aircraft}, ${3:Vehicle targetVehicle}, ${4:Ped targetPed}, ${5:float destinationX}, ${6:float destinationY}, ${7:float destinationZ}, ${8:int missionFlag}, ${9:float angularDrag}, ${10:float targetReached}, ${11:float targetHeading}, ${12:float maxZ}, ${13:float minZ}, ${14:BOOL precise})"
      ],
      "description": "TASK_PLANE_MISSION()"
    },
    "TASK_PLANE_TAXI": {
      "prefix": "TASK_PLANE_TAXI()",
      "body": [
        "TASK_PLANE_TAXI(${1:Ped pilot}, ${2:Vehicle aircraft}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float cruiseSpeed}, ${7:float targetReached})"
      ],
      "description": "TASK_PLANE_TAXI()"
    },
    "TASK_BOAT_MISSION": {
      "prefix": "TASK_BOAT_MISSION()",
      "body": [
        "TASK_BOAT_MISSION(${1:Ped pedDriver}, ${2:Vehicle vehicle}, ${3:Vehicle targetVehicle}, ${4:Ped targetPed}, ${5:float x}, ${6:float y}, ${7:float z}, ${8:int mission}, ${9:float maxSpeed}, ${10:int drivingStyle}, ${11:float targetReached}, ${12:Any boatFlags})"
      ],
      "description": "TASK_BOAT_MISSION()"
    },
    "TASK_DRIVE_BY": {
      "prefix": "TASK_DRIVE_BY()",
      "body": [
        "TASK_DRIVE_BY(${1:Ped driverPed}, ${2:Ped targetPed}, ${3:Vehicle targetVehicle}, ${4:float targetX}, ${5:float targetY}, ${6:float targetZ}, ${7:float distanceToShoot}, ${8:int pedAccuracy}, ${9:BOOL pushUnderneathDrivingTaskIfDriving}, ${10:Hash firingPattern})"
      ],
      "description": "TASK_DRIVE_BY()"
    },
    "SET_DRIVEBY_TASK_TARGET": {
      "prefix": "SET_DRIVEBY_TASK_TARGET()",
      "body": [
        "SET_DRIVEBY_TASK_TARGET(${1:Ped shootingPed}, ${2:Ped targetPed}, ${3:Vehicle targetVehicle}, ${4:float x}, ${5:float y}, ${6:float z})"
      ],
      "description": "SET_DRIVEBY_TASK_TARGET()"
    },
    "CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK": {
      "prefix": "CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK()",
      "body": ["CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(${1:Ped ped})"],
      "description": "CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK()"
    },
    "IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK": {
      "prefix": "IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK()",
      "body": ["IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(${1:Ped ped})"],
      "description": "IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK()"
    },
    "CONTROL_MOUNTED_WEAPON": {
      "prefix": "CONTROL_MOUNTED_WEAPON()",
      "body": ["CONTROL_MOUNTED_WEAPON(${1:Ped ped})"],
      "description": "CONTROL_MOUNTED_WEAPON()"
    },
    "SET_MOUNTED_WEAPON_TARGET": {
      "prefix": "SET_MOUNTED_WEAPON_TARGET()",
      "body": [
        "SET_MOUNTED_WEAPON_TARGET(${1:Ped shootingPed}, ${2:Ped targetPed}, ${3:Vehicle targetVehicle}, ${4:float x}, ${5:float y}, ${6:float z}, ${7:int taskMode}, ${8:BOOL ignoreTargetVehDeadCheck})"
      ],
      "description": "SET_MOUNTED_WEAPON_TARGET()"
    },
    "IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK": {
      "prefix": "IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK()",
      "body": ["IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(${1:Ped ped})"],
      "description": "IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK()"
    },
    "TASK_USE_MOBILE_PHONE": {
      "prefix": "TASK_USE_MOBILE_PHONE()",
      "body": [
        "TASK_USE_MOBILE_PHONE(${1:Ped ped}, ${2:BOOL usePhone}, ${3:int desiredPhoneMode})"
      ],
      "description": "TASK_USE_MOBILE_PHONE()"
    },
    "TASK_USE_MOBILE_PHONE_TIMED": {
      "prefix": "TASK_USE_MOBILE_PHONE_TIMED()",
      "body": ["TASK_USE_MOBILE_PHONE_TIMED(${1:Ped ped}, ${2:int duration})"],
      "description": "TASK_USE_MOBILE_PHONE_TIMED()"
    },
    "TASK_CHAT_TO_PED": {
      "prefix": "TASK_CHAT_TO_PED()",
      "body": [
        "TASK_CHAT_TO_PED(${1:Ped ped}, ${2:Ped target}, ${3:int flags}, ${4:float goToLocationX}, ${5:float goToLocationY}, ${6:float goToLocationZ}, ${7:float headingDegs}, ${8:float idleTime})"
      ],
      "description": "TASK_CHAT_TO_PED()"
    },
    "TASK_WARP_PED_INTO_VEHICLE": {
      "prefix": "TASK_WARP_PED_INTO_VEHICLE()",
      "body": [
        "TASK_WARP_PED_INTO_VEHICLE(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:int seat})"
      ],
      "description": "TASK_WARP_PED_INTO_VEHICLE()"
    },
    "TASK_SHOOT_AT_ENTITY": {
      "prefix": "TASK_SHOOT_AT_ENTITY()",
      "body": [
        "TASK_SHOOT_AT_ENTITY(${1:Entity entity}, ${2:Entity target}, ${3:int duration}, ${4:Hash firingPattern})"
      ],
      "description": "TASK_SHOOT_AT_ENTITY()"
    },
    "TASK_CLIMB": {
      "prefix": "TASK_CLIMB()",
      "body": ["TASK_CLIMB(${1:Ped ped}, ${2:BOOL usePlayerLaunchForce})"],
      "description": "TASK_CLIMB()"
    },
    "TASK_CLIMB_LADDER": {
      "prefix": "TASK_CLIMB_LADDER()",
      "body": ["TASK_CLIMB_LADDER(${1:Ped ped}, ${2:BOOL fast})"],
      "description": "TASK_CLIMB_LADDER()"
    },
    "TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE": {
      "prefix": "TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE()",
      "body": [
        "TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE(${1:Ped ped}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2}, ${8:float minZ}, ${9:int ropeHandle}, ${10:const char* clipSet}, ${11:Any p10}, ${12:Any p11})"
      ],
      "description": "TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE()"
    },
    "GET_TASK_RAPPEL_DOWN_WALL_STATE": {
      "prefix": "GET_TASK_RAPPEL_DOWN_WALL_STATE()",
      "body": ["GET_TASK_RAPPEL_DOWN_WALL_STATE(${1:Ped ped})"],
      "description": "GET_TASK_RAPPEL_DOWN_WALL_STATE()"
    },
    "CLEAR_PED_TASKS_IMMEDIATELY": {
      "prefix": "CLEAR_PED_TASKS_IMMEDIATELY()",
      "body": ["CLEAR_PED_TASKS_IMMEDIATELY(${1:Ped ped})"],
      "description": "CLEAR_PED_TASKS_IMMEDIATELY()"
    },
    "TASK_PERFORM_SEQUENCE_FROM_PROGRESS": {
      "prefix": "TASK_PERFORM_SEQUENCE_FROM_PROGRESS()",
      "body": [
        "TASK_PERFORM_SEQUENCE_FROM_PROGRESS(${1:Ped ped}, ${2:int taskIndex}, ${3:int progress1}, ${4:int progress2})"
      ],
      "description": "TASK_PERFORM_SEQUENCE_FROM_PROGRESS()"
    },
    "SET_NEXT_DESIRED_MOVE_STATE": {
      "prefix": "SET_NEXT_DESIRED_MOVE_STATE()",
      "body": ["SET_NEXT_DESIRED_MOVE_STATE(${1:float nextMoveState})"],
      "description": "SET_NEXT_DESIRED_MOVE_STATE()"
    },
    "SET_PED_DESIRED_MOVE_BLEND_RATIO": {
      "prefix": "SET_PED_DESIRED_MOVE_BLEND_RATIO()",
      "body": [
        "SET_PED_DESIRED_MOVE_BLEND_RATIO(${1:Ped ped}, ${2:float newMoveBlendRatio})"
      ],
      "description": "SET_PED_DESIRED_MOVE_BLEND_RATIO()"
    },
    "GET_PED_DESIRED_MOVE_BLEND_RATIO": {
      "prefix": "GET_PED_DESIRED_MOVE_BLEND_RATIO()",
      "body": ["GET_PED_DESIRED_MOVE_BLEND_RATIO(${1:Ped ped})"],
      "description": "GET_PED_DESIRED_MOVE_BLEND_RATIO()"
    },
    "TASK_GOTO_ENTITY_AIMING": {
      "prefix": "TASK_GOTO_ENTITY_AIMING()",
      "body": [
        "TASK_GOTO_ENTITY_AIMING(${1:Ped ped}, ${2:Entity target}, ${3:float distanceToStopAt}, ${4:float StartAimingDist})"
      ],
      "description": "TASK_GOTO_ENTITY_AIMING()"
    },
    "TASK_SET_DECISION_MAKER": {
      "prefix": "TASK_SET_DECISION_MAKER()",
      "body": [
        "TASK_SET_DECISION_MAKER(${1:Ped ped}, ${2:Hash decisionMakerId})"
      ],
      "description": "TASK_SET_DECISION_MAKER()"
    },
    "TASK_SET_SPHERE_DEFENSIVE_AREA": {
      "prefix": "TASK_SET_SPHERE_DEFENSIVE_AREA()",
      "body": [
        "TASK_SET_SPHERE_DEFENSIVE_AREA(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius})"
      ],
      "description": "TASK_SET_SPHERE_DEFENSIVE_AREA()"
    },
    "TASK_CLEAR_DEFENSIVE_AREA": {
      "prefix": "TASK_CLEAR_DEFENSIVE_AREA()",
      "body": ["TASK_CLEAR_DEFENSIVE_AREA(${1:Ped ped})"],
      "description": "TASK_CLEAR_DEFENSIVE_AREA()"
    },
    "TASK_PED_SLIDE_TO_COORD": {
      "prefix": "TASK_PED_SLIDE_TO_COORD()",
      "body": [
        "TASK_PED_SLIDE_TO_COORD(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float heading}, ${6:float speed})"
      ],
      "description": "TASK_PED_SLIDE_TO_COORD()"
    },
    "TASK_PED_SLIDE_TO_COORD_HDG_RATE": {
      "prefix": "TASK_PED_SLIDE_TO_COORD_HDG_RATE()",
      "body": [
        "TASK_PED_SLIDE_TO_COORD_HDG_RATE(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float heading}, ${6:float speed}, ${7:float headingChangeRate})"
      ],
      "description": "TASK_PED_SLIDE_TO_COORD_HDG_RATE()"
    },
    "ADD_COVER_POINT": {
      "prefix": "ADD_COVER_POINT()",
      "body": [
        "ADD_COVER_POINT(${1:float x}, ${2:float y}, ${3:float z}, ${4:float direction}, ${5:int usage}, ${6:int height}, ${7:int arc}, ${8:BOOL isPriority})"
      ],
      "description": "ADD_COVER_POINT()"
    },
    "REMOVE_COVER_POINT": {
      "prefix": "REMOVE_COVER_POINT()",
      "body": ["REMOVE_COVER_POINT(${1:ScrHandle coverpoint})"],
      "description": "REMOVE_COVER_POINT()"
    },
    "DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS": {
      "prefix": "DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS()",
      "body": [
        "DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS()"
    },
    "GET_SCRIPTED_COVER_POINT_COORDS": {
      "prefix": "GET_SCRIPTED_COVER_POINT_COORDS()",
      "body": ["GET_SCRIPTED_COVER_POINT_COORDS(${1:ScrHandle coverpoint})"],
      "description": "GET_SCRIPTED_COVER_POINT_COORDS()"
    },
    "ADD_SCRIPTED_COVER_AREA": {
      "prefix": "ADD_SCRIPTED_COVER_AREA()",
      "body": [
        "ADD_SCRIPTED_COVER_AREA(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius})"
      ],
      "description": "ADD_SCRIPTED_COVER_AREA()"
    },
    "TASK_COMBAT_PED": {
      "prefix": "TASK_COMBAT_PED()",
      "body": [
        "TASK_COMBAT_PED(${1:Ped ped}, ${2:Ped targetPed}, ${3:int combatFlags}, ${4:int threatResponseFlags})"
      ],
      "description": "TASK_COMBAT_PED()"
    },
    "TASK_COMBAT_PED_TIMED": {
      "prefix": "TASK_COMBAT_PED_TIMED()",
      "body": [
        "TASK_COMBAT_PED_TIMED(${1:Ped ped}, ${2:Ped target}, ${3:int time}, ${4:int flags})"
      ],
      "description": "TASK_COMBAT_PED_TIMED()"
    },
    "TASK_SEEK_COVER_FROM_POS": {
      "prefix": "TASK_SEEK_COVER_FROM_POS()",
      "body": [
        "TASK_SEEK_COVER_FROM_POS(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int duration}, ${6:BOOL allowPeekingAndFiring})"
      ],
      "description": "TASK_SEEK_COVER_FROM_POS()"
    },
    "TASK_SEEK_COVER_FROM_PED": {
      "prefix": "TASK_SEEK_COVER_FROM_PED()",
      "body": [
        "TASK_SEEK_COVER_FROM_PED(${1:Ped ped}, ${2:Ped target}, ${3:int duration}, ${4:BOOL allowPeekingAndFiring})"
      ],
      "description": "TASK_SEEK_COVER_FROM_PED()"
    },
    "TASK_SEEK_COVER_TO_COVER_POINT": {
      "prefix": "TASK_SEEK_COVER_TO_COVER_POINT()",
      "body": [
        "TASK_SEEK_COVER_TO_COVER_POINT(${1:Ped ped}, ${2:ScrHandle coverpoint}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:int time}, ${7:BOOL allowPeekingAndFiring})"
      ],
      "description": "TASK_SEEK_COVER_TO_COVER_POINT()"
    },
    "TASK_SEEK_COVER_TO_COORDS": {
      "prefix": "TASK_SEEK_COVER_TO_COORDS()",
      "body": [
        "TASK_SEEK_COVER_TO_COORDS(${1:Ped ped}, ${2:float x1}, ${3:float y1}, ${4:float z1}, ${5:float x2}, ${6:float y2}, ${7:float z2}, ${8:int timeout}, ${9:BOOL shortRoute})"
      ],
      "description": "TASK_SEEK_COVER_TO_COORDS()"
    },
    "TASK_PUT_PED_DIRECTLY_INTO_COVER": {
      "prefix": "TASK_PUT_PED_DIRECTLY_INTO_COVER()",
      "body": [
        "TASK_PUT_PED_DIRECTLY_INTO_COVER(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int time}, ${6:BOOL allowPeekingAndFiring}, ${7:float blendInDuration}, ${8:BOOL forceInitialFacingDirection}, ${9:BOOL forceFaceLeft}, ${10:int identifier}, ${11:BOOL doEntry})"
      ],
      "description": "TASK_PUT_PED_DIRECTLY_INTO_COVER()"
    },
    "TASK_WARP_PED_DIRECTLY_INTO_COVER": {
      "prefix": "TASK_WARP_PED_DIRECTLY_INTO_COVER()",
      "body": [
        "TASK_WARP_PED_DIRECTLY_INTO_COVER(${1:Ped ped}, ${2:int time}, ${3:BOOL allowPeekingAndFiring}, ${4:BOOL forceInitialFacingDirection}, ${5:BOOL forceFaceLeft}, ${6:int identifier})"
      ],
      "description": "TASK_WARP_PED_DIRECTLY_INTO_COVER()"
    },
    "TASK_EXIT_COVER": {
      "prefix": "TASK_EXIT_COVER()",
      "body": [
        "TASK_EXIT_COVER(${1:Ped ped}, ${2:int exitType}, ${3:float x}, ${4:float y}, ${5:float z})"
      ],
      "description": "TASK_EXIT_COVER()"
    },
    "TASK_PUT_PED_DIRECTLY_INTO_MELEE": {
      "prefix": "TASK_PUT_PED_DIRECTLY_INTO_MELEE()",
      "body": [
        "TASK_PUT_PED_DIRECTLY_INTO_MELEE(${1:Ped ped}, ${2:Ped meleeTarget}, ${3:float blendInDuration}, ${4:float timeInMelee}, ${5:float strafePhaseSync}, ${6:int aiCombatFlags})"
      ],
      "description": "TASK_PUT_PED_DIRECTLY_INTO_MELEE()"
    },
    "TASK_TOGGLE_DUCK": {
      "prefix": "TASK_TOGGLE_DUCK()",
      "body": ["TASK_TOGGLE_DUCK(${1:Ped ped}, ${2:int toggleType})"],
      "description": "TASK_TOGGLE_DUCK()"
    },
    "TASK_GUARD_CURRENT_POSITION": {
      "prefix": "TASK_GUARD_CURRENT_POSITION()",
      "body": [
        "TASK_GUARD_CURRENT_POSITION(${1:Ped ped}, ${2:float maxPatrolProximity}, ${3:float defensiveAreaRadius}, ${4:BOOL setDefensiveArea})"
      ],
      "description": "TASK_GUARD_CURRENT_POSITION()"
    },
    "TASK_GUARD_ASSIGNED_DEFENSIVE_AREA": {
      "prefix": "TASK_GUARD_ASSIGNED_DEFENSIVE_AREA()",
      "body": [
        "TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float heading}, ${6:float maxPatrolProximity}, ${7:int timer})"
      ],
      "description": "TASK_GUARD_ASSIGNED_DEFENSIVE_AREA()"
    },
    "TASK_GUARD_SPHERE_DEFENSIVE_AREA": {
      "prefix": "TASK_GUARD_SPHERE_DEFENSIVE_AREA()",
      "body": [
        "TASK_GUARD_SPHERE_DEFENSIVE_AREA(${1:Ped ped}, ${2:float defendPositionX}, ${3:float defendPositionY}, ${4:float defendPositionZ}, ${5:float heading}, ${6:float maxPatrolProximity}, ${7:int time}, ${8:float x}, ${9:float y}, ${10:float z}, ${11:float defensiveAreaRadius})"
      ],
      "description": "TASK_GUARD_SPHERE_DEFENSIVE_AREA()"
    },
    "TASK_STAND_GUARD": {
      "prefix": "TASK_STAND_GUARD()",
      "body": [
        "TASK_STAND_GUARD(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float heading}, ${6:const char* scenarioName})"
      ],
      "description": "TASK_STAND_GUARD()"
    },
    "SET_DRIVE_TASK_CRUISE_SPEED": {
      "prefix": "SET_DRIVE_TASK_CRUISE_SPEED()",
      "body": [
        "SET_DRIVE_TASK_CRUISE_SPEED(${1:Ped driver}, ${2:float cruiseSpeed})"
      ],
      "description": "SET_DRIVE_TASK_CRUISE_SPEED()"
    },
    "SET_DRIVE_TASK_MAX_CRUISE_SPEED": {
      "prefix": "SET_DRIVE_TASK_MAX_CRUISE_SPEED()",
      "body": ["SET_DRIVE_TASK_MAX_CRUISE_SPEED(${1:Ped ped}, ${2:float speed})"],
      "description": "SET_DRIVE_TASK_MAX_CRUISE_SPEED()"
    },
    "SET_DRIVE_TASK_DRIVING_STYLE": {
      "prefix": "SET_DRIVE_TASK_DRIVING_STYLE()",
      "body": [
        "SET_DRIVE_TASK_DRIVING_STYLE(${1:Ped ped}, ${2:int drivingStyle})"
      ],
      "description": "SET_DRIVE_TASK_DRIVING_STYLE()"
    },
    "ADD_COVER_BLOCKING_AREA": {
      "prefix": "ADD_COVER_BLOCKING_AREA()",
      "body": [
        "ADD_COVER_BLOCKING_AREA(${1:float startX}, ${2:float startY}, ${3:float startZ}, ${4:float endX}, ${5:float endY}, ${6:float endZ}, ${7:BOOL blockObjects}, ${8:BOOL blockVehicles}, ${9:BOOL blockMap}, ${10:BOOL blockPlayer})"
      ],
      "description": "ADD_COVER_BLOCKING_AREA()"
    },
    "REMOVE_ALL_COVER_BLOCKING_AREAS": {
      "prefix": "REMOVE_ALL_COVER_BLOCKING_AREAS()",
      "body": ["REMOVE_ALL_COVER_BLOCKING_AREAS()"],
      "description": "REMOVE_ALL_COVER_BLOCKING_AREAS()"
    },
    "REMOVE_COVER_BLOCKING_AREAS_AT_POSITION": {
      "prefix": "REMOVE_COVER_BLOCKING_AREAS_AT_POSITION()",
      "body": [
        "REMOVE_COVER_BLOCKING_AREAS_AT_POSITION(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "REMOVE_COVER_BLOCKING_AREAS_AT_POSITION()"
    },
    "REMOVE_SPECIFIC_COVER_BLOCKING_AREAS": {
      "prefix": "REMOVE_SPECIFIC_COVER_BLOCKING_AREAS()",
      "body": [
        "REMOVE_SPECIFIC_COVER_BLOCKING_AREAS(${1:float startX}, ${2:float startY}, ${3:float startZ}, ${4:float endX}, ${5:float endY}, ${6:float endZ}, ${7:BOOL blockObjects}, ${8:BOOL blockVehicles}, ${9:BOOL blockMap}, ${10:BOOL blockPlayer})"
      ],
      "description": "REMOVE_SPECIFIC_COVER_BLOCKING_AREAS()"
    },
    "TASK_START_SCENARIO_IN_PLACE": {
      "prefix": "TASK_START_SCENARIO_IN_PLACE()",
      "body": [
        "TASK_START_SCENARIO_IN_PLACE(${1:Ped ped}, ${2:const char* scenarioName}, ${3:int unkDelay}, ${4:BOOL playEnterAnim})"
      ],
      "description": "TASK_START_SCENARIO_IN_PLACE()"
    },
    "TASK_START_SCENARIO_AT_POSITION": {
      "prefix": "TASK_START_SCENARIO_AT_POSITION()",
      "body": [
        "TASK_START_SCENARIO_AT_POSITION(${1:Ped ped}, ${2:const char* scenarioName}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float heading}, ${7:int duration}, ${8:BOOL sittingScenario}, ${9:BOOL teleport})"
      ],
      "description": "TASK_START_SCENARIO_AT_POSITION()"
    },
    "TASK_USE_NEAREST_SCENARIO_TO_COORD": {
      "prefix": "TASK_USE_NEAREST_SCENARIO_TO_COORD()",
      "body": [
        "TASK_USE_NEAREST_SCENARIO_TO_COORD(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float distance}, ${6:int duration})"
      ],
      "description": "TASK_USE_NEAREST_SCENARIO_TO_COORD()"
    },
    "TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP": {
      "prefix": "TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP()",
      "body": [
        "TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius}, ${6:int timeToLeave})"
      ],
      "description": "TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP()"
    },
    "TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD": {
      "prefix": "TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD()",
      "body": [
        "TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float maxRange}, ${6:int timeToLeave})"
      ],
      "description": "TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD()"
    },
    "TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP": {
      "prefix": "TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP()",
      "body": [
        "TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius}, ${6:int timeToLeave})"
      ],
      "description": "TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP()"
    },
    "DOES_SCENARIO_EXIST_IN_AREA": {
      "prefix": "DOES_SCENARIO_EXIST_IN_AREA()",
      "body": [
        "DOES_SCENARIO_EXIST_IN_AREA(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:BOOL mustBeFree})"
      ],
      "description": "DOES_SCENARIO_EXIST_IN_AREA()"
    },
    "DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA": {
      "prefix": "DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA()",
      "body": [
        "DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA(${1:float x}, ${2:float y}, ${3:float z}, ${4:const char* scenarioName}, ${5:float radius}, ${6:BOOL mustBeFree})"
      ],
      "description": "DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA()"
    },
    "IS_SCENARIO_OCCUPIED": {
      "prefix": "IS_SCENARIO_OCCUPIED()",
      "body": [
        "IS_SCENARIO_OCCUPIED(${1:float x}, ${2:float y}, ${3:float z}, ${4:float maxRange}, ${5:BOOL onlyUsersActuallyAtScenario})"
      ],
      "description": "IS_SCENARIO_OCCUPIED()"
    },
    "PED_HAS_USE_SCENARIO_TASK": {
      "prefix": "PED_HAS_USE_SCENARIO_TASK()",
      "body": ["PED_HAS_USE_SCENARIO_TASK(${1:Ped ped})"],
      "description": "PED_HAS_USE_SCENARIO_TASK()"
    },
    "PLAY_ANIM_ON_RUNNING_SCENARIO": {
      "prefix": "PLAY_ANIM_ON_RUNNING_SCENARIO()",
      "body": [
        "PLAY_ANIM_ON_RUNNING_SCENARIO(${1:Ped ped}, ${2:const char* animDict}, ${3:const char* animName})"
      ],
      "description": "PLAY_ANIM_ON_RUNNING_SCENARIO()"
    },
    "DOES_SCENARIO_GROUP_EXIST": {
      "prefix": "DOES_SCENARIO_GROUP_EXIST()",
      "body": ["DOES_SCENARIO_GROUP_EXIST(${1:const char* scenarioGroup})"],
      "description": "DOES_SCENARIO_GROUP_EXIST()"
    },
    "IS_SCENARIO_GROUP_ENABLED": {
      "prefix": "IS_SCENARIO_GROUP_ENABLED()",
      "body": ["IS_SCENARIO_GROUP_ENABLED(${1:const char* scenarioGroup})"],
      "description": "IS_SCENARIO_GROUP_ENABLED()"
    },
    "SET_SCENARIO_GROUP_ENABLED": {
      "prefix": "SET_SCENARIO_GROUP_ENABLED()",
      "body": [
        "SET_SCENARIO_GROUP_ENABLED(${1:const char* scenarioGroup}, ${2:BOOL enabled})"
      ],
      "description": "SET_SCENARIO_GROUP_ENABLED()"
    },
    "RESET_SCENARIO_GROUPS_ENABLED": {
      "prefix": "RESET_SCENARIO_GROUPS_ENABLED()",
      "body": ["RESET_SCENARIO_GROUPS_ENABLED()"],
      "description": "RESET_SCENARIO_GROUPS_ENABLED()"
    },
    "SET_EXCLUSIVE_SCENARIO_GROUP": {
      "prefix": "SET_EXCLUSIVE_SCENARIO_GROUP()",
      "body": ["SET_EXCLUSIVE_SCENARIO_GROUP(${1:const char* scenarioGroup})"],
      "description": "SET_EXCLUSIVE_SCENARIO_GROUP()"
    },
    "RESET_EXCLUSIVE_SCENARIO_GROUP": {
      "prefix": "RESET_EXCLUSIVE_SCENARIO_GROUP()",
      "body": ["RESET_EXCLUSIVE_SCENARIO_GROUP()"],
      "description": "RESET_EXCLUSIVE_SCENARIO_GROUP()"
    },
    "IS_SCENARIO_TYPE_ENABLED": {
      "prefix": "IS_SCENARIO_TYPE_ENABLED()",
      "body": ["IS_SCENARIO_TYPE_ENABLED(${1:const char* scenarioType})"],
      "description": "IS_SCENARIO_TYPE_ENABLED()"
    },
    "SET_SCENARIO_TYPE_ENABLED": {
      "prefix": "SET_SCENARIO_TYPE_ENABLED()",
      "body": [
        "SET_SCENARIO_TYPE_ENABLED(${1:const char* scenarioType}, ${2:BOOL toggle})"
      ],
      "description": "SET_SCENARIO_TYPE_ENABLED()"
    },
    "RESET_SCENARIO_TYPES_ENABLED": {
      "prefix": "RESET_SCENARIO_TYPES_ENABLED()",
      "body": ["RESET_SCENARIO_TYPES_ENABLED()"],
      "description": "RESET_SCENARIO_TYPES_ENABLED()"
    },
    "IS_PED_ACTIVE_IN_SCENARIO": {
      "prefix": "IS_PED_ACTIVE_IN_SCENARIO()",
      "body": ["IS_PED_ACTIVE_IN_SCENARIO(${1:Ped ped})"],
      "description": "IS_PED_ACTIVE_IN_SCENARIO()"
    },
    "IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO": {
      "prefix": "IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO()",
      "body": ["IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO(${1:Ped ped})"],
      "description": "IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO()"
    },
    "SET_PED_CAN_PLAY_AMBIENT_IDLES": {
      "prefix": "SET_PED_CAN_PLAY_AMBIENT_IDLES()",
      "body": [
        "SET_PED_CAN_PLAY_AMBIENT_IDLES(${1:Ped ped}, ${2:BOOL blockIdleClips}, ${3:BOOL removeIdleClipIfPlaying})"
      ],
      "description": "SET_PED_CAN_PLAY_AMBIENT_IDLES()"
    },
    "TASK_COMBAT_HATED_TARGETS_IN_AREA": {
      "prefix": "TASK_COMBAT_HATED_TARGETS_IN_AREA()",
      "body": [
        "TASK_COMBAT_HATED_TARGETS_IN_AREA(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float radius}, ${6:int combatFlags})"
      ],
      "description": "TASK_COMBAT_HATED_TARGETS_IN_AREA()"
    },
    "TASK_COMBAT_HATED_TARGETS_AROUND_PED": {
      "prefix": "TASK_COMBAT_HATED_TARGETS_AROUND_PED()",
      "body": [
        "TASK_COMBAT_HATED_TARGETS_AROUND_PED(${1:Ped ped}, ${2:float radius}, ${3:int combatFlags})"
      ],
      "description": "TASK_COMBAT_HATED_TARGETS_AROUND_PED()"
    },
    "TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED": {
      "prefix": "TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED()",
      "body": [
        "TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(${1:Ped ped}, ${2:float radius}, ${3:int time}, ${4:int combatFlags})"
      ],
      "description": "TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED()"
    },
    "TASK_THROW_PROJECTILE": {
      "prefix": "TASK_THROW_PROJECTILE()",
      "body": [
        "TASK_THROW_PROJECTILE(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int ignoreCollisionEntityIndex}, ${6:BOOL createInvincibleProjectile})"
      ],
      "description": "TASK_THROW_PROJECTILE()"
    },
    "TASK_SWAP_WEAPON": {
      "prefix": "TASK_SWAP_WEAPON()",
      "body": ["TASK_SWAP_WEAPON(${1:Ped ped}, ${2:BOOL drawWeapon})"],
      "description": "TASK_SWAP_WEAPON()"
    },
    "TASK_RELOAD_WEAPON": {
      "prefix": "TASK_RELOAD_WEAPON()",
      "body": ["TASK_RELOAD_WEAPON(${1:Ped ped}, ${2:BOOL drawWeapon})"],
      "description": "TASK_RELOAD_WEAPON()"
    },
    "IS_PED_GETTING_UP": {
      "prefix": "IS_PED_GETTING_UP()",
      "body": ["IS_PED_GETTING_UP(${1:Ped ped})"],
      "description": "IS_PED_GETTING_UP()"
    },
    "TASK_WRITHE": {
      "prefix": "TASK_WRITHE()",
      "body": [
        "TASK_WRITHE(${1:Ped ped}, ${2:Ped target}, ${3:int minFireLoops}, ${4:int startState}, ${5:BOOL forceShootOnGround}, ${6:int shootFromGroundTimer})"
      ],
      "description": "TASK_WRITHE()"
    },
    "IS_PED_IN_WRITHE": {
      "prefix": "IS_PED_IN_WRITHE()",
      "body": ["IS_PED_IN_WRITHE(${1:Ped ped})"],
      "description": "IS_PED_IN_WRITHE()"
    },
    "OPEN_PATROL_ROUTE": {
      "prefix": "OPEN_PATROL_ROUTE()",
      "body": ["OPEN_PATROL_ROUTE(${1:const char* patrolRoute})"],
      "description": "OPEN_PATROL_ROUTE()"
    },
    "CLOSE_PATROL_ROUTE": {
      "prefix": "CLOSE_PATROL_ROUTE()",
      "body": ["CLOSE_PATROL_ROUTE()"],
      "description": "CLOSE_PATROL_ROUTE()"
    },
    "ADD_PATROL_ROUTE_NODE": {
      "prefix": "ADD_PATROL_ROUTE_NODE()",
      "body": [
        "ADD_PATROL_ROUTE_NODE(${1:int nodeId}, ${2:const char* nodeType}, ${3:float posX}, ${4:float posY}, ${5:float posZ}, ${6:float headingX}, ${7:float headingY}, ${8:float headingZ}, ${9:int duration})"
      ],
      "description": "ADD_PATROL_ROUTE_NODE()"
    },
    "ADD_PATROL_ROUTE_LINK": {
      "prefix": "ADD_PATROL_ROUTE_LINK()",
      "body": ["ADD_PATROL_ROUTE_LINK(${1:int nodeId1}, ${2:int nodeId2})"],
      "description": "ADD_PATROL_ROUTE_LINK()"
    },
    "CREATE_PATROL_ROUTE": {
      "prefix": "CREATE_PATROL_ROUTE()",
      "body": ["CREATE_PATROL_ROUTE()"],
      "description": "CREATE_PATROL_ROUTE()"
    },
    "DELETE_PATROL_ROUTE": {
      "prefix": "DELETE_PATROL_ROUTE()",
      "body": ["DELETE_PATROL_ROUTE(${1:const char* patrolRoute})"],
      "description": "DELETE_PATROL_ROUTE()"
    },
    "GET_PATROL_TASK_INFO": {
      "prefix": "GET_PATROL_TASK_INFO()",
      "body": [
        "GET_PATROL_TASK_INFO(${1:Ped ped}, ${2:int* timeLeftAtNode}, ${3:int* nodeId})"
      ],
      "description": "GET_PATROL_TASK_INFO()"
    },
    "TASK_PATROL": {
      "prefix": "TASK_PATROL()",
      "body": [
        "TASK_PATROL(${1:Ped ped}, ${2:const char* patrolRouteName}, ${3:int alertState}, ${4:BOOL canChatToPeds}, ${5:BOOL useHeadLookAt})"
      ],
      "description": "TASK_PATROL()"
    },
    "TASK_STAY_IN_COVER": {
      "prefix": "TASK_STAY_IN_COVER()",
      "body": ["TASK_STAY_IN_COVER(${1:Ped ped})"],
      "description": "TASK_STAY_IN_COVER()"
    },
    "ADD_VEHICLE_SUBTASK_ATTACK_COORD": {
      "prefix": "ADD_VEHICLE_SUBTASK_ATTACK_COORD()",
      "body": [
        "ADD_VEHICLE_SUBTASK_ATTACK_COORD(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "ADD_VEHICLE_SUBTASK_ATTACK_COORD()"
    },
    "ADD_VEHICLE_SUBTASK_ATTACK_PED": {
      "prefix": "ADD_VEHICLE_SUBTASK_ATTACK_PED()",
      "body": ["ADD_VEHICLE_SUBTASK_ATTACK_PED(${1:Ped ped}, ${2:Ped target})"],
      "description": "ADD_VEHICLE_SUBTASK_ATTACK_PED()"
    },
    "TASK_VEHICLE_SHOOT_AT_PED": {
      "prefix": "TASK_VEHICLE_SHOOT_AT_PED()",
      "body": [
        "TASK_VEHICLE_SHOOT_AT_PED(${1:Ped ped}, ${2:Ped target}, ${3:float fireTolerance})"
      ],
      "description": "TASK_VEHICLE_SHOOT_AT_PED()"
    },
    "TASK_VEHICLE_AIM_AT_PED": {
      "prefix": "TASK_VEHICLE_AIM_AT_PED()",
      "body": ["TASK_VEHICLE_AIM_AT_PED(${1:Ped ped}, ${2:Ped target})"],
      "description": "TASK_VEHICLE_AIM_AT_PED()"
    },
    "TASK_VEHICLE_SHOOT_AT_COORD": {
      "prefix": "TASK_VEHICLE_SHOOT_AT_COORD()",
      "body": [
        "TASK_VEHICLE_SHOOT_AT_COORD(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float fireTolerance})"
      ],
      "description": "TASK_VEHICLE_SHOOT_AT_COORD()"
    },
    "TASK_VEHICLE_AIM_AT_COORD": {
      "prefix": "TASK_VEHICLE_AIM_AT_COORD()",
      "body": [
        "TASK_VEHICLE_AIM_AT_COORD(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "TASK_VEHICLE_AIM_AT_COORD()"
    },
    "TASK_VEHICLE_GOTO_NAVMESH": {
      "prefix": "TASK_VEHICLE_GOTO_NAVMESH()",
      "body": [
        "TASK_VEHICLE_GOTO_NAVMESH(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float speed}, ${7:int behaviorFlag}, ${8:float stoppingRange})"
      ],
      "description": "TASK_VEHICLE_GOTO_NAVMESH()"
    },
    "TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD": {
      "prefix": "TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD()",
      "body": [
        "TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float aimAtX}, ${6:float aimAtY}, ${7:float aimAtZ}, ${8:float moveBlendRatio}, ${9:BOOL shoot}, ${10:float targetRadius}, ${11:float slowDistance}, ${12:BOOL useNavMesh}, ${13:int navFlags}, ${14:BOOL instantBlendToAim}, ${15:Hash firingPattern})"
      ],
      "description": "TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD()"
    },
    "TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY": {
      "prefix": "TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY()",
      "body": [
        "TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:Entity aimAtID}, ${6:float moveBlendRatio}, ${7:BOOL shoot}, ${8:float targetRadius}, ${9:float slowDistance}, ${10:BOOL useNavMesh}, ${11:int navFlags}, ${12:BOOL instantBlendToAim}, ${13:Hash firingPattern}, ${14:int time})"
      ],
      "description": "TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY()"
    },
    "TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD": {
      "prefix": "TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD()",
      "body": [
        "TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(${1:Ped pedHandle}, ${2:float goToLocationX}, ${3:float goToLocationY}, ${4:float goToLocationZ}, ${5:float focusLocationX}, ${6:float focusLocationY}, ${7:float focusLocationZ}, ${8:float speed}, ${9:BOOL shootAtEnemies}, ${10:float distanceToStopAt}, ${11:float noRoadsDistance}, ${12:BOOL useNavMesh}, ${13:int navFlags}, ${14:int taskFlags}, ${15:Hash firingPattern})"
      ],
      "description": "TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD()"
    },
    "TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD": {
      "prefix": "TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD()",
      "body": [
        "TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD(${1:Ped ped}, ${2:Entity entity}, ${3:float aimX}, ${4:float aimY}, ${5:float aimZ}, ${6:float moveBlendRatio}, ${7:BOOL shoot}, ${8:float targetRadius}, ${9:float slowDistance}, ${10:BOOL useNavMesh}, ${11:BOOL instantBlendToAim}, ${12:Hash firingPattern})"
      ],
      "description": "TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD()"
    },
    "TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY": {
      "prefix": "TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY()",
      "body": [
        "TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(${1:Ped ped}, ${2:Entity entityToWalkTo}, ${3:Entity entityToAimAt}, ${4:float speed}, ${5:BOOL shootatEntity}, ${6:float targetRadius}, ${7:float slowDistance}, ${8:BOOL useNavMesh}, ${9:BOOL instantBlendToAim}, ${10:Hash firingPattern})"
      ],
      "description": "TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY()"
    },
    "SET_HIGH_FALL_TASK": {
      "prefix": "SET_HIGH_FALL_TASK()",
      "body": [
        "SET_HIGH_FALL_TASK(${1:Ped ped}, ${2:int minTime}, ${3:int maxTime}, ${4:int entryType})"
      ],
      "description": "SET_HIGH_FALL_TASK()"
    },
    "REQUEST_WAYPOINT_RECORDING": {
      "prefix": "REQUEST_WAYPOINT_RECORDING()",
      "body": ["REQUEST_WAYPOINT_RECORDING(${1:const char* name})"],
      "description": "REQUEST_WAYPOINT_RECORDING()"
    },
    "GET_IS_WAYPOINT_RECORDING_LOADED": {
      "prefix": "GET_IS_WAYPOINT_RECORDING_LOADED()",
      "body": ["GET_IS_WAYPOINT_RECORDING_LOADED(${1:const char* name})"],
      "description": "GET_IS_WAYPOINT_RECORDING_LOADED()"
    },
    "REMOVE_WAYPOINT_RECORDING": {
      "prefix": "REMOVE_WAYPOINT_RECORDING()",
      "body": ["REMOVE_WAYPOINT_RECORDING(${1:const char* name})"],
      "description": "REMOVE_WAYPOINT_RECORDING()"
    },
    "WAYPOINT_RECORDING_GET_NUM_POINTS": {
      "prefix": "WAYPOINT_RECORDING_GET_NUM_POINTS()",
      "body": [
        "WAYPOINT_RECORDING_GET_NUM_POINTS(${1:const char* name}, ${2:int* points})"
      ],
      "description": "WAYPOINT_RECORDING_GET_NUM_POINTS()"
    },
    "WAYPOINT_RECORDING_GET_COORD": {
      "prefix": "WAYPOINT_RECORDING_GET_COORD()",
      "body": [
        "WAYPOINT_RECORDING_GET_COORD(${1:const char* name}, ${2:int point}, ${3:Vector3* coord})"
      ],
      "description": "WAYPOINT_RECORDING_GET_COORD()"
    },
    "WAYPOINT_RECORDING_GET_SPEED_AT_POINT": {
      "prefix": "WAYPOINT_RECORDING_GET_SPEED_AT_POINT()",
      "body": [
        "WAYPOINT_RECORDING_GET_SPEED_AT_POINT(${1:const char* name}, ${2:int point})"
      ],
      "description": "WAYPOINT_RECORDING_GET_SPEED_AT_POINT()"
    },
    "WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT": {
      "prefix": "WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT()",
      "body": [
        "WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT(${1:const char* name}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:int* point})"
      ],
      "description": "WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT()"
    },
    "TASK_FOLLOW_WAYPOINT_RECORDING": {
      "prefix": "TASK_FOLLOW_WAYPOINT_RECORDING()",
      "body": [
        "TASK_FOLLOW_WAYPOINT_RECORDING(${1:Ped ped}, ${2:const char* name}, ${3:int p2}, ${4:int p3}, ${5:int p4})"
      ],
      "description": "TASK_FOLLOW_WAYPOINT_RECORDING()"
    },
    "IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED": {
      "prefix": "IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED()",
      "body": ["IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(${1:Ped ped})"],
      "description": "IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED()"
    },
    "GET_PED_WAYPOINT_PROGRESS": {
      "prefix": "GET_PED_WAYPOINT_PROGRESS()",
      "body": ["GET_PED_WAYPOINT_PROGRESS(${1:Ped ped})"],
      "description": "GET_PED_WAYPOINT_PROGRESS()"
    },
    "GET_PED_WAYPOINT_DISTANCE": {
      "prefix": "GET_PED_WAYPOINT_DISTANCE()",
      "body": ["GET_PED_WAYPOINT_DISTANCE(${1:Any p0})"],
      "description": "GET_PED_WAYPOINT_DISTANCE()"
    },
    "SET_PED_WAYPOINT_ROUTE_OFFSET": {
      "prefix": "SET_PED_WAYPOINT_ROUTE_OFFSET()",
      "body": [
        "SET_PED_WAYPOINT_ROUTE_OFFSET(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "SET_PED_WAYPOINT_ROUTE_OFFSET()"
    },
    "GET_WAYPOINT_DISTANCE_ALONG_ROUTE": {
      "prefix": "GET_WAYPOINT_DISTANCE_ALONG_ROUTE()",
      "body": [
        "GET_WAYPOINT_DISTANCE_ALONG_ROUTE(${1:const char* name}, ${2:int point})"
      ],
      "description": "GET_WAYPOINT_DISTANCE_ALONG_ROUTE()"
    },
    "WAYPOINT_PLAYBACK_GET_IS_PAUSED": {
      "prefix": "WAYPOINT_PLAYBACK_GET_IS_PAUSED()",
      "body": ["WAYPOINT_PLAYBACK_GET_IS_PAUSED(${1:Any p0})"],
      "description": "WAYPOINT_PLAYBACK_GET_IS_PAUSED()"
    },
    "WAYPOINT_PLAYBACK_PAUSE": {
      "prefix": "WAYPOINT_PLAYBACK_PAUSE()",
      "body": [
        "WAYPOINT_PLAYBACK_PAUSE(${1:Any p0}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "WAYPOINT_PLAYBACK_PAUSE()"
    },
    "WAYPOINT_PLAYBACK_RESUME": {
      "prefix": "WAYPOINT_PLAYBACK_RESUME()",
      "body": [
        "WAYPOINT_PLAYBACK_RESUME(${1:Any p0}, ${2:BOOL p1}, ${3:Any p2}, ${4:Any p3})"
      ],
      "description": "WAYPOINT_PLAYBACK_RESUME()"
    },
    "WAYPOINT_PLAYBACK_OVERRIDE_SPEED": {
      "prefix": "WAYPOINT_PLAYBACK_OVERRIDE_SPEED()",
      "body": [
        "WAYPOINT_PLAYBACK_OVERRIDE_SPEED(${1:Any p0}, ${2:float p1}, ${3:BOOL p2})"
      ],
      "description": "WAYPOINT_PLAYBACK_OVERRIDE_SPEED()"
    },
    "WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED": {
      "prefix": "WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED()",
      "body": ["WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(${1:Any p0})"],
      "description": "WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED()"
    },
    "USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE": {
      "prefix": "USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE()",
      "body": [
        "USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE(${1:const char* name}, ${2:BOOL p1}, ${3:float p2}, ${4:float p3})"
      ],
      "description": "USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE()"
    },
    "WAYPOINT_PLAYBACK_START_AIMING_AT_PED": {
      "prefix": "WAYPOINT_PLAYBACK_START_AIMING_AT_PED()",
      "body": [
        "WAYPOINT_PLAYBACK_START_AIMING_AT_PED(${1:Ped ped}, ${2:Ped target}, ${3:BOOL p2})"
      ],
      "description": "WAYPOINT_PLAYBACK_START_AIMING_AT_PED()"
    },
    "WAYPOINT_PLAYBACK_START_AIMING_AT_COORD": {
      "prefix": "WAYPOINT_PLAYBACK_START_AIMING_AT_COORD()",
      "body": [
        "WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL p4})"
      ],
      "description": "WAYPOINT_PLAYBACK_START_AIMING_AT_COORD()"
    },
    "WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED": {
      "prefix": "WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED()",
      "body": [
        "WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED(${1:Ped ped}, ${2:Ped ped2}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED()"
    },
    "WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD": {
      "prefix": "WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD()",
      "body": [
        "WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL p4}, ${6:Hash firingPattern})"
      ],
      "description": "WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD()"
    },
    "WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING": {
      "prefix": "WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING()",
      "body": ["WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(${1:Ped ped})"],
      "description": "WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING()"
    },
    "ASSISTED_MOVEMENT_REQUEST_ROUTE": {
      "prefix": "ASSISTED_MOVEMENT_REQUEST_ROUTE()",
      "body": ["ASSISTED_MOVEMENT_REQUEST_ROUTE(${1:const char* route})"],
      "description": "ASSISTED_MOVEMENT_REQUEST_ROUTE()"
    },
    "ASSISTED_MOVEMENT_REMOVE_ROUTE": {
      "prefix": "ASSISTED_MOVEMENT_REMOVE_ROUTE()",
      "body": ["ASSISTED_MOVEMENT_REMOVE_ROUTE(${1:const char* route})"],
      "description": "ASSISTED_MOVEMENT_REMOVE_ROUTE()"
    },
    "ASSISTED_MOVEMENT_IS_ROUTE_LOADED": {
      "prefix": "ASSISTED_MOVEMENT_IS_ROUTE_LOADED()",
      "body": ["ASSISTED_MOVEMENT_IS_ROUTE_LOADED(${1:const char* route})"],
      "description": "ASSISTED_MOVEMENT_IS_ROUTE_LOADED()"
    },
    "ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES": {
      "prefix": "ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES()",
      "body": [
        "ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES(${1:const char* route}, ${2:int props})"
      ],
      "description": "ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES()"
    },
    "ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME": {
      "prefix": "ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME()",
      "body": [
        "ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME(${1:float dist})"
      ],
      "description": "ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME()"
    },
    "TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING": {
      "prefix": "TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING()",
      "body": [
        "TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:const char* WPRecording}, ${4:int p3}, ${5:int p4}, ${6:int p5}, ${7:int p6}, ${8:float p7}, ${9:BOOL p8}, ${10:float p9})"
      ],
      "description": "TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING()"
    },
    "IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE": {
      "prefix": "IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE()",
      "body": ["IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(${1:Vehicle vehicle})"],
      "description": "IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE()"
    },
    "GET_VEHICLE_WAYPOINT_PROGRESS": {
      "prefix": "GET_VEHICLE_WAYPOINT_PROGRESS()",
      "body": ["GET_VEHICLE_WAYPOINT_PROGRESS(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_WAYPOINT_PROGRESS()"
    },
    "GET_VEHICLE_WAYPOINT_TARGET_POINT": {
      "prefix": "GET_VEHICLE_WAYPOINT_TARGET_POINT()",
      "body": ["GET_VEHICLE_WAYPOINT_TARGET_POINT(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_WAYPOINT_TARGET_POINT()"
    },
    "VEHICLE_WAYPOINT_PLAYBACK_PAUSE": {
      "prefix": "VEHICLE_WAYPOINT_PLAYBACK_PAUSE()",
      "body": ["VEHICLE_WAYPOINT_PLAYBACK_PAUSE(${1:Vehicle vehicle})"],
      "description": "VEHICLE_WAYPOINT_PLAYBACK_PAUSE()"
    },
    "VEHICLE_WAYPOINT_PLAYBACK_RESUME": {
      "prefix": "VEHICLE_WAYPOINT_PLAYBACK_RESUME()",
      "body": ["VEHICLE_WAYPOINT_PLAYBACK_RESUME(${1:Vehicle vehicle})"],
      "description": "VEHICLE_WAYPOINT_PLAYBACK_RESUME()"
    },
    "VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED": {
      "prefix": "VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED()",
      "body": [
        "VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(${1:Vehicle vehicle})"
      ],
      "description": "VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED()"
    },
    "VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED": {
      "prefix": "VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED()",
      "body": [
        "VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(${1:Vehicle vehicle}, ${2:float speed})"
      ],
      "description": "VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED()"
    },
    "TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS": {
      "prefix": "TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS()",
      "body": [
        "TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS()"
    },
    "TASK_FORCE_MOTION_STATE": {
      "prefix": "TASK_FORCE_MOTION_STATE()",
      "body": [
        "TASK_FORCE_MOTION_STATE(${1:Ped ped}, ${2:Hash state}, ${3:BOOL forceRestart})"
      ],
      "description": "TASK_FORCE_MOTION_STATE()"
    },
    "TASK_MOVE_NETWORK_BY_NAME": {
      "prefix": "TASK_MOVE_NETWORK_BY_NAME()",
      "body": [
        "TASK_MOVE_NETWORK_BY_NAME(${1:Ped ped}, ${2:const char* task}, ${3:float multiplier}, ${4:BOOL allowOverrideCloneUpdate}, ${5:const char* animDict}, ${6:int flags})"
      ],
      "description": "TASK_MOVE_NETWORK_BY_NAME()"
    },
    "TASK_MOVE_NETWORK_ADVANCED_BY_NAME": {
      "prefix": "TASK_MOVE_NETWORK_ADVANCED_BY_NAME()",
      "body": [
        "TASK_MOVE_NETWORK_ADVANCED_BY_NAME(${1:Ped ped}, ${2:const char* network}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:float rotX}, ${7:float rotY}, ${8:float rotZ}, ${9:int rotOrder}, ${10:float blendDuration}, ${11:BOOL allowOverrideCloneUpdate}, ${12:const char* animDict}, ${13:int flags})"
      ],
      "description": "TASK_MOVE_NETWORK_ADVANCED_BY_NAME()"
    },
    "TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS": {
      "prefix": "TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS()",
      "body": [
        "TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS(${1:Ped ped}, ${2:const char* network}, ${3:int* initialParameters}, ${4:float blendDuration}, ${5:BOOL allowOverrideCloneUpdate}, ${6:const char* animDict}, ${7:int flags})"
      ],
      "description": "TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS()"
    },
    "TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS": {
      "prefix": "TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS()",
      "body": [
        "TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS(${1:Ped ped}, ${2:const char* network}, ${3:int* initialParameters}, ${4:float x}, ${5:float y}, ${6:float z}, ${7:float rotX}, ${8:float rotY}, ${9:float rotZ}, ${10:int rotOrder}, ${11:float blendDuration}, ${12:BOOL allowOverrideCloneUpdate}, ${13:const char* dictionary}, ${14:int flags})"
      ],
      "description": "TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS()"
    },
    "IS_TASK_MOVE_NETWORK_ACTIVE": {
      "prefix": "IS_TASK_MOVE_NETWORK_ACTIVE()",
      "body": ["IS_TASK_MOVE_NETWORK_ACTIVE(${1:Ped ped})"],
      "description": "IS_TASK_MOVE_NETWORK_ACTIVE()"
    },
    "IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION": {
      "prefix": "IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION()",
      "body": ["IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION(${1:Ped ped})"],
      "description": "IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION()"
    },
    "REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION": {
      "prefix": "REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION()",
      "body": [
        "REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION(${1:Ped ped}, ${2:const char* name})"
      ],
      "description": "REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION()"
    },
    "SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE": {
      "prefix": "SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE()",
      "body": [
        "SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(${1:Ped ped}, ${2:const char* state})"
      ],
      "description": "SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE()"
    },
    "SET_TASK_MOVE_NETWORK_ANIM_SET": {
      "prefix": "SET_TASK_MOVE_NETWORK_ANIM_SET()",
      "body": [
        "SET_TASK_MOVE_NETWORK_ANIM_SET(${1:Ped ped}, ${2:Hash clipSet}, ${3:Hash variableClipSet})"
      ],
      "description": "SET_TASK_MOVE_NETWORK_ANIM_SET()"
    },
    "SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT": {
      "prefix": "SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT()",
      "body": [
        "SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(${1:Ped ped}, ${2:const char* signalName}, ${3:float value})"
      ],
      "description": "SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT()"
    },
    "SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT": {
      "prefix": "SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT()",
      "body": [
        "SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT(${1:Ped ped}, ${2:const char* signalName}, ${3:float value})"
      ],
      "description": "SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT()"
    },
    "SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE": {
      "prefix": "SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE()",
      "body": [
        "SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE(${1:Ped ped}, ${2:const char* signalName}, ${3:float value})"
      ],
      "description": "SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE()"
    },
    "SET_TASK_MOVE_NETWORK_SIGNAL_BOOL": {
      "prefix": "SET_TASK_MOVE_NETWORK_SIGNAL_BOOL()",
      "body": [
        "SET_TASK_MOVE_NETWORK_SIGNAL_BOOL(${1:Ped ped}, ${2:const char* signalName}, ${3:BOOL value})"
      ],
      "description": "SET_TASK_MOVE_NETWORK_SIGNAL_BOOL()"
    },
    "GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT": {
      "prefix": "GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT()",
      "body": [
        "GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(${1:Ped ped}, ${2:const char* signalName})"
      ],
      "description": "GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT()"
    },
    "GET_TASK_MOVE_NETWORK_SIGNAL_BOOL": {
      "prefix": "GET_TASK_MOVE_NETWORK_SIGNAL_BOOL()",
      "body": [
        "GET_TASK_MOVE_NETWORK_SIGNAL_BOOL(${1:Ped ped}, ${2:const char* signalName})"
      ],
      "description": "GET_TASK_MOVE_NETWORK_SIGNAL_BOOL()"
    },
    "GET_TASK_MOVE_NETWORK_EVENT": {
      "prefix": "GET_TASK_MOVE_NETWORK_EVENT()",
      "body": [
        "GET_TASK_MOVE_NETWORK_EVENT(${1:Ped ped}, ${2:const char* eventName})"
      ],
      "description": "GET_TASK_MOVE_NETWORK_EVENT()"
    },
    "SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED": {
      "prefix": "SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED()",
      "body": [
        "SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(${1:Ped ped}, ${2:BOOL enable})"
      ],
      "description": "SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED()"
    },
    "_SET_SCRIPT_TASK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED": {
      "prefix": "_SET_SCRIPT_TASK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED()",
      "body": [
        "_SET_SCRIPT_TASK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(${1:Ped ped}, ${2:BOOL enable})"
      ],
      "description": "_SET_SCRIPT_TASK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED()"
    },
    "IS_MOVE_BLEND_RATIO_STILL": {
      "prefix": "IS_MOVE_BLEND_RATIO_STILL()",
      "body": ["IS_MOVE_BLEND_RATIO_STILL(${1:Ped ped})"],
      "description": "IS_MOVE_BLEND_RATIO_STILL()"
    },
    "IS_MOVE_BLEND_RATIO_WALKING": {
      "prefix": "IS_MOVE_BLEND_RATIO_WALKING()",
      "body": ["IS_MOVE_BLEND_RATIO_WALKING(${1:Ped ped})"],
      "description": "IS_MOVE_BLEND_RATIO_WALKING()"
    },
    "IS_MOVE_BLEND_RATIO_RUNNING": {
      "prefix": "IS_MOVE_BLEND_RATIO_RUNNING()",
      "body": ["IS_MOVE_BLEND_RATIO_RUNNING(${1:Ped ped})"],
      "description": "IS_MOVE_BLEND_RATIO_RUNNING()"
    },
    "IS_MOVE_BLEND_RATIO_SPRINTING": {
      "prefix": "IS_MOVE_BLEND_RATIO_SPRINTING()",
      "body": ["IS_MOVE_BLEND_RATIO_SPRINTING(${1:Ped ped})"],
      "description": "IS_MOVE_BLEND_RATIO_SPRINTING()"
    },
    "IS_PED_STILL": {
      "prefix": "IS_PED_STILL()",
      "body": ["IS_PED_STILL(${1:Ped ped})"],
      "description": "IS_PED_STILL()"
    },
    "IS_PED_WALKING": {
      "prefix": "IS_PED_WALKING()",
      "body": ["IS_PED_WALKING(${1:Ped ped})"],
      "description": "IS_PED_WALKING()"
    },
    "IS_PED_RUNNING": {
      "prefix": "IS_PED_RUNNING()",
      "body": ["IS_PED_RUNNING(${1:Ped ped})"],
      "description": "IS_PED_RUNNING()"
    },
    "IS_PED_SPRINTING": {
      "prefix": "IS_PED_SPRINTING()",
      "body": ["IS_PED_SPRINTING(${1:Ped ped})"],
      "description": "IS_PED_SPRINTING()"
    },
    "IS_PED_STRAFING": {
      "prefix": "IS_PED_STRAFING()",
      "body": ["IS_PED_STRAFING(${1:Ped ped})"],
      "description": "IS_PED_STRAFING()"
    },
    "TASK_SYNCHRONIZED_SCENE": {
      "prefix": "TASK_SYNCHRONIZED_SCENE()",
      "body": [
        "TASK_SYNCHRONIZED_SCENE(${1:Ped ped}, ${2:int scene}, ${3:const char* animDictionary}, ${4:const char* animationName}, ${5:float blendIn}, ${6:float blendOut}, ${7:int flags}, ${8:int ragdollBlockingFlags}, ${9:float moverBlendDelta}, ${10:int ikFlags})"
      ],
      "description": "TASK_SYNCHRONIZED_SCENE()"
    },
    "TASK_AGITATED_ACTION_CONFRONT_RESPONSE": {
      "prefix": "TASK_AGITATED_ACTION_CONFRONT_RESPONSE()",
      "body": [
        "TASK_AGITATED_ACTION_CONFRONT_RESPONSE(${1:Ped ped}, ${2:Ped ped2})"
      ],
      "description": "TASK_AGITATED_ACTION_CONFRONT_RESPONSE()"
    },
    "TASK_SWEEP_AIM_ENTITY": {
      "prefix": "TASK_SWEEP_AIM_ENTITY()",
      "body": [
        "TASK_SWEEP_AIM_ENTITY(${1:Ped ped}, ${2:const char* animDict}, ${3:const char* lowAnimName}, ${4:const char* medAnimName}, ${5:const char* hiAnimName}, ${6:int runtime}, ${7:Entity targetEntity}, ${8:float turnRate}, ${9:float blendInDuration})"
      ],
      "description": "TASK_SWEEP_AIM_ENTITY()"
    },
    "UPDATE_TASK_SWEEP_AIM_ENTITY": {
      "prefix": "UPDATE_TASK_SWEEP_AIM_ENTITY()",
      "body": ["UPDATE_TASK_SWEEP_AIM_ENTITY(${1:Ped ped}, ${2:Entity entity})"],
      "description": "UPDATE_TASK_SWEEP_AIM_ENTITY()"
    },
    "TASK_SWEEP_AIM_POSITION": {
      "prefix": "TASK_SWEEP_AIM_POSITION()",
      "body": [
        "TASK_SWEEP_AIM_POSITION(${1:Ped ped}, ${2:const char* animDict}, ${3:const char* lowAnimName}, ${4:const char* medAnimName}, ${5:const char* hiAnimName}, ${6:int runtime}, ${7:float x}, ${8:float y}, ${9:float z}, ${10:float turnRate}, ${11:float blendInDuration})"
      ],
      "description": "TASK_SWEEP_AIM_POSITION()"
    },
    "UPDATE_TASK_SWEEP_AIM_POSITION": {
      "prefix": "UPDATE_TASK_SWEEP_AIM_POSITION()",
      "body": [
        "UPDATE_TASK_SWEEP_AIM_POSITION(${1:Ped ped}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "UPDATE_TASK_SWEEP_AIM_POSITION()"
    },
    "TASK_ARREST_PED": {
      "prefix": "TASK_ARREST_PED()",
      "body": ["TASK_ARREST_PED(${1:Ped ped}, ${2:Ped target})"],
      "description": "TASK_ARREST_PED()"
    },
    "IS_PED_RUNNING_ARREST_TASK": {
      "prefix": "IS_PED_RUNNING_ARREST_TASK()",
      "body": ["IS_PED_RUNNING_ARREST_TASK(${1:Ped ped})"],
      "description": "IS_PED_RUNNING_ARREST_TASK()"
    },
    "IS_PED_BEING_ARRESTED": {
      "prefix": "IS_PED_BEING_ARRESTED()",
      "body": ["IS_PED_BEING_ARRESTED(${1:Ped ped})"],
      "description": "IS_PED_BEING_ARRESTED()"
    },
    "UNCUFF_PED": {
      "prefix": "UNCUFF_PED()",
      "body": ["UNCUFF_PED(${1:Ped ped})"],
      "description": "UNCUFF_PED()"
    },
    "IS_PED_CUFFED": {
      "prefix": "IS_PED_CUFFED()",
      "body": ["IS_PED_CUFFED(${1:Ped ped})"],
      "description": "IS_PED_CUFFED()"
    },
    "CREATE_VEHICLE": {
      "prefix": "CREATE_VEHICLE()",
      "body": [
        "CREATE_VEHICLE(${1:Hash modelHash}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float heading}, ${6:BOOL isNetwork}, ${7:BOOL bScriptHostVeh}, ${8:BOOL p7})"
      ],
      "description": "CREATE_VEHICLE()"
    },
    "DELETE_VEHICLE": {
      "prefix": "DELETE_VEHICLE()",
      "body": ["DELETE_VEHICLE(${1:Vehicle* vehicle})"],
      "description": "DELETE_VEHICLE()"
    },
    "SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON": {
      "prefix": "SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON()",
      "body": [
        "SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON(${1:Vehicle vehicle}, ${2:BOOL toggle}, ${3:BOOL p2})"
      ],
      "description": "SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON()"
    },
    "SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED": {
      "prefix": "SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED()",
      "body": [
        "SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED(${1:Vehicle vehicle}, ${2:BOOL canBeLockedOn}, ${3:BOOL p2})"
      ],
      "description": "SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED()"
    },
    "SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON": {
      "prefix": "SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON()",
      "body": [
        "SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(${1:Vehicle veh}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON()"
    },
    "GET_VEHICLE_HOMING_LOCKON_STATE": {
      "prefix": "GET_VEHICLE_HOMING_LOCKON_STATE()",
      "body": ["GET_VEHICLE_HOMING_LOCKON_STATE(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_HOMING_LOCKON_STATE()"
    },
    "GET_VEHICLE_HOMING_LOCKEDONTO_STATE": {
      "prefix": "GET_VEHICLE_HOMING_LOCKEDONTO_STATE()",
      "body": ["GET_VEHICLE_HOMING_LOCKEDONTO_STATE(${1:Any p0})"],
      "description": "GET_VEHICLE_HOMING_LOCKEDONTO_STATE()"
    },
    "SET_VEHICLE_HOMING_LOCKEDONTO_STATE": {
      "prefix": "SET_VEHICLE_HOMING_LOCKEDONTO_STATE()",
      "body": ["SET_VEHICLE_HOMING_LOCKEDONTO_STATE(${1:Any p0}, ${2:Any p1})"],
      "description": "SET_VEHICLE_HOMING_LOCKEDONTO_STATE()"
    },
    "IS_VEHICLE_MODEL": {
      "prefix": "IS_VEHICLE_MODEL()",
      "body": ["IS_VEHICLE_MODEL(${1:Vehicle vehicle}, ${2:Hash model})"],
      "description": "IS_VEHICLE_MODEL()"
    },
    "DOES_SCRIPT_VEHICLE_GENERATOR_EXIST": {
      "prefix": "DOES_SCRIPT_VEHICLE_GENERATOR_EXIST()",
      "body": ["DOES_SCRIPT_VEHICLE_GENERATOR_EXIST(${1:int vehicleGenerator})"],
      "description": "DOES_SCRIPT_VEHICLE_GENERATOR_EXIST()"
    },
    "CREATE_SCRIPT_VEHICLE_GENERATOR": {
      "prefix": "CREATE_SCRIPT_VEHICLE_GENERATOR()",
      "body": [
        "CREATE_SCRIPT_VEHICLE_GENERATOR(${1:float x}, ${2:float y}, ${3:float z}, ${4:float heading}, ${5:float p4}, ${6:float p5}, ${7:Hash modelHash}, ${8:int p7}, ${9:int p8}, ${10:int p9}, ${11:int p10}, ${12:BOOL p11}, ${13:BOOL p12}, ${14:BOOL p13}, ${15:BOOL p14}, ${16:BOOL p15}, ${17:int p16})"
      ],
      "description": "CREATE_SCRIPT_VEHICLE_GENERATOR()"
    },
    "DELETE_SCRIPT_VEHICLE_GENERATOR": {
      "prefix": "DELETE_SCRIPT_VEHICLE_GENERATOR()",
      "body": ["DELETE_SCRIPT_VEHICLE_GENERATOR(${1:int vehicleGenerator})"],
      "description": "DELETE_SCRIPT_VEHICLE_GENERATOR()"
    },
    "SET_SCRIPT_VEHICLE_GENERATOR": {
      "prefix": "SET_SCRIPT_VEHICLE_GENERATOR()",
      "body": [
        "SET_SCRIPT_VEHICLE_GENERATOR(${1:int vehicleGenerator}, ${2:BOOL enabled})"
      ],
      "description": "SET_SCRIPT_VEHICLE_GENERATOR()"
    },
    "SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA": {
      "prefix": "SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA()",
      "body": [
        "SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:BOOL toggle}, ${8:BOOL p7})"
      ],
      "description": "SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA()"
    },
    "SET_ALL_VEHICLE_GENERATORS_ACTIVE": {
      "prefix": "SET_ALL_VEHICLE_GENERATORS_ACTIVE()",
      "body": ["SET_ALL_VEHICLE_GENERATORS_ACTIVE()"],
      "description": "SET_ALL_VEHICLE_GENERATORS_ACTIVE()"
    },
    "SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE": {
      "prefix": "SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE()",
      "body": [
        "SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(${1:BOOL active})"
      ],
      "description": "SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE()"
    },
    "SET_VEHICLE_GENERATOR_AREA_OF_INTEREST": {
      "prefix": "SET_VEHICLE_GENERATOR_AREA_OF_INTEREST()",
      "body": [
        "SET_VEHICLE_GENERATOR_AREA_OF_INTEREST(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius})"
      ],
      "description": "SET_VEHICLE_GENERATOR_AREA_OF_INTEREST()"
    },
    "CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST": {
      "prefix": "CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST()",
      "body": ["CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST()"],
      "description": "CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST()"
    },
    "SET_VEHICLE_ON_GROUND_PROPERLY": {
      "prefix": "SET_VEHICLE_ON_GROUND_PROPERLY()",
      "body": [
        "SET_VEHICLE_ON_GROUND_PROPERLY(${1:Vehicle vehicle}, ${2:float p1})"
      ],
      "description": "SET_VEHICLE_ON_GROUND_PROPERLY()"
    },
    "SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION": {
      "prefix": "SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION()",
      "body": [
        "SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION(${1:Vehicle p0}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION()"
    },
    "IS_VEHICLE_STUCK_ON_ROOF": {
      "prefix": "IS_VEHICLE_STUCK_ON_ROOF()",
      "body": ["IS_VEHICLE_STUCK_ON_ROOF(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_STUCK_ON_ROOF()"
    },
    "ADD_VEHICLE_UPSIDEDOWN_CHECK": {
      "prefix": "ADD_VEHICLE_UPSIDEDOWN_CHECK()",
      "body": ["ADD_VEHICLE_UPSIDEDOWN_CHECK(${1:Vehicle vehicle})"],
      "description": "ADD_VEHICLE_UPSIDEDOWN_CHECK()"
    },
    "REMOVE_VEHICLE_UPSIDEDOWN_CHECK": {
      "prefix": "REMOVE_VEHICLE_UPSIDEDOWN_CHECK()",
      "body": ["REMOVE_VEHICLE_UPSIDEDOWN_CHECK(${1:Vehicle vehicle})"],
      "description": "REMOVE_VEHICLE_UPSIDEDOWN_CHECK()"
    },
    "IS_VEHICLE_STOPPED": {
      "prefix": "IS_VEHICLE_STOPPED()",
      "body": ["IS_VEHICLE_STOPPED(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_STOPPED()"
    },
    "GET_VEHICLE_NUMBER_OF_PASSENGERS": {
      "prefix": "GET_VEHICLE_NUMBER_OF_PASSENGERS()",
      "body": [
        "GET_VEHICLE_NUMBER_OF_PASSENGERS(${1:Vehicle vehicle}, ${2:BOOL includeDriver}, ${3:BOOL includeDeadOccupants})"
      ],
      "description": "GET_VEHICLE_NUMBER_OF_PASSENGERS()"
    },
    "GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS": {
      "prefix": "GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS()",
      "body": ["GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS()"
    },
    "GET_VEHICLE_MODEL_NUMBER_OF_SEATS": {
      "prefix": "GET_VEHICLE_MODEL_NUMBER_OF_SEATS()",
      "body": ["GET_VEHICLE_MODEL_NUMBER_OF_SEATS(${1:Hash modelHash})"],
      "description": "GET_VEHICLE_MODEL_NUMBER_OF_SEATS()"
    },
    "IS_SEAT_WARP_ONLY": {
      "prefix": "IS_SEAT_WARP_ONLY()",
      "body": ["IS_SEAT_WARP_ONLY(${1:Vehicle vehicle}, ${2:int seatIndex})"],
      "description": "IS_SEAT_WARP_ONLY()"
    },
    "IS_TURRET_SEAT": {
      "prefix": "IS_TURRET_SEAT()",
      "body": ["IS_TURRET_SEAT(${1:Vehicle vehicle}, ${2:int seatIndex})"],
      "description": "IS_TURRET_SEAT()"
    },
    "DOES_VEHICLE_ALLOW_RAPPEL": {
      "prefix": "DOES_VEHICLE_ALLOW_RAPPEL()",
      "body": ["DOES_VEHICLE_ALLOW_RAPPEL(${1:Vehicle vehicle})"],
      "description": "DOES_VEHICLE_ALLOW_RAPPEL()"
    },
    "SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME": {
      "prefix": "SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME()",
      "body": [
        "SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(${1:float multiplier})"
      ],
      "description": "SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME()"
    },
    "SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME": {
      "prefix": "SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME()",
      "body": [
        "SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(${1:float multiplier})"
      ],
      "description": "SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME()"
    },
    "SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME": {
      "prefix": "SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME()",
      "body": [
        "SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(${1:float multiplier})"
      ],
      "description": "SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME()"
    },
    "SET_DISABLE_RANDOM_TRAINS_THIS_FRAME": {
      "prefix": "SET_DISABLE_RANDOM_TRAINS_THIS_FRAME()",
      "body": ["SET_DISABLE_RANDOM_TRAINS_THIS_FRAME(${1:BOOL toggle})"],
      "description": "SET_DISABLE_RANDOM_TRAINS_THIS_FRAME()"
    },
    "SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME": {
      "prefix": "SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME()",
      "body": [
        "SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME(${1:float value})"
      ],
      "description": "SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME()"
    },
    "SET_FAR_DRAW_VEHICLES": {
      "prefix": "SET_FAR_DRAW_VEHICLES()",
      "body": ["SET_FAR_DRAW_VEHICLES(${1:BOOL toggle})"],
      "description": "SET_FAR_DRAW_VEHICLES()"
    },
    "SET_NUMBER_OF_PARKED_VEHICLES": {
      "prefix": "SET_NUMBER_OF_PARKED_VEHICLES()",
      "body": ["SET_NUMBER_OF_PARKED_VEHICLES(${1:int value})"],
      "description": "SET_NUMBER_OF_PARKED_VEHICLES()"
    },
    "SET_VEHICLE_DOORS_LOCKED": {
      "prefix": "SET_VEHICLE_DOORS_LOCKED()",
      "body": [
        "SET_VEHICLE_DOORS_LOCKED(${1:Vehicle vehicle}, ${2:int doorLockStatus})"
      ],
      "description": "SET_VEHICLE_DOORS_LOCKED()"
    },
    "SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED": {
      "prefix": "SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED()",
      "body": [
        "SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED(${1:Vehicle vehicle}, ${2:int doorId}, ${3:int doorLockStatus})"
      ],
      "description": "SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED()"
    },
    "SET_VEHICLE_HAS_MUTED_SIRENS": {
      "prefix": "SET_VEHICLE_HAS_MUTED_SIRENS()",
      "body": [
        "SET_VEHICLE_HAS_MUTED_SIRENS(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_HAS_MUTED_SIRENS()"
    },
    "SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER": {
      "prefix": "SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER()",
      "body": [
        "SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(${1:Vehicle vehicle}, ${2:Player player}, ${3:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER()"
    },
    "GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER": {
      "prefix": "GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER()",
      "body": [
        "GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(${1:Vehicle vehicle}, ${2:Player player})"
      ],
      "description": "GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER()"
    },
    "SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS": {
      "prefix": "SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS()",
      "body": [
        "SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS()"
    },
    "SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS": {
      "prefix": "SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS()",
      "body": [
        "SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS()"
    },
    "SET_VEHICLE_DOORS_LOCKED_FOR_TEAM": {
      "prefix": "SET_VEHICLE_DOORS_LOCKED_FOR_TEAM()",
      "body": [
        "SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(${1:Vehicle vehicle}, ${2:int team}, ${3:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_DOORS_LOCKED_FOR_TEAM()"
    },
    "SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS": {
      "prefix": "SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS()",
      "body": [
        "SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS()"
    },
    "SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED": {
      "prefix": "SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED()",
      "body": [
        "SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED(${1:Vehicle vehicle})"
      ],
      "description": "SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED()"
    },
    "_SET_VEHICLE_MAX_LAUNCH_ENGINE_REVS": {
      "prefix": "_SET_VEHICLE_MAX_LAUNCH_ENGINE_REVS()",
      "body": [
        "_SET_VEHICLE_MAX_LAUNCH_ENGINE_REVS(${1:Vehicle vehicle}, ${2:float modifier})"
      ],
      "description": "_SET_VEHICLE_MAX_LAUNCH_ENGINE_REVS()"
    },
    "_GET_VEHICLE_THROTTLE": {
      "prefix": "_GET_VEHICLE_THROTTLE()",
      "body": ["_GET_VEHICLE_THROTTLE(${1:Vehicle vehicle})"],
      "description": "_GET_VEHICLE_THROTTLE()"
    },
    "EXPLODE_VEHICLE": {
      "prefix": "EXPLODE_VEHICLE()",
      "body": [
        "EXPLODE_VEHICLE(${1:Vehicle vehicle}, ${2:BOOL isAudible}, ${3:BOOL isInvisible})"
      ],
      "description": "EXPLODE_VEHICLE()"
    },
    "SET_VEHICLE_OUT_OF_CONTROL": {
      "prefix": "SET_VEHICLE_OUT_OF_CONTROL()",
      "body": [
        "SET_VEHICLE_OUT_OF_CONTROL(${1:Vehicle vehicle}, ${2:BOOL killDriver}, ${3:BOOL explodeOnImpact})"
      ],
      "description": "SET_VEHICLE_OUT_OF_CONTROL()"
    },
    "SET_VEHICLE_TIMED_EXPLOSION": {
      "prefix": "SET_VEHICLE_TIMED_EXPLOSION()",
      "body": [
        "SET_VEHICLE_TIMED_EXPLOSION(${1:Vehicle vehicle}, ${2:Ped ped}, ${3:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_TIMED_EXPLOSION()"
    },
    "ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE": {
      "prefix": "ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE()",
      "body": ["ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE(${1:Vehicle vehicle})"],
      "description": "ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE()"
    },
    "CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE": {
      "prefix": "CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE()",
      "body": ["CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE()"],
      "description": "CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE()"
    },
    "HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE": {
      "prefix": "HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE()",
      "body": ["HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE()"],
      "description": "HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE()"
    },
    "DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE": {
      "prefix": "DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE()",
      "body": ["DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE()"],
      "description": "DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE()"
    },
    "HAVE_VEHICLE_REAR_DOORS_BEEN_BLOWN_OPEN_BY_STICKYBOMB": {
      "prefix": "HAVE_VEHICLE_REAR_DOORS_BEEN_BLOWN_OPEN_BY_STICKYBOMB()",
      "body": [
        "HAVE_VEHICLE_REAR_DOORS_BEEN_BLOWN_OPEN_BY_STICKYBOMB(${1:Vehicle vehicle})"
      ],
      "description": "HAVE_VEHICLE_REAR_DOORS_BEEN_BLOWN_OPEN_BY_STICKYBOMB()"
    },
    "SET_TAXI_LIGHTS": {
      "prefix": "SET_TAXI_LIGHTS()",
      "body": ["SET_TAXI_LIGHTS(${1:Vehicle vehicle}, ${2:BOOL state})"],
      "description": "SET_TAXI_LIGHTS()"
    },
    "IS_TAXI_LIGHT_ON": {
      "prefix": "IS_TAXI_LIGHT_ON()",
      "body": ["IS_TAXI_LIGHT_ON(${1:Vehicle vehicle})"],
      "description": "IS_TAXI_LIGHT_ON()"
    },
    "IS_VEHICLE_IN_GARAGE_AREA": {
      "prefix": "IS_VEHICLE_IN_GARAGE_AREA()",
      "body": [
        "IS_VEHICLE_IN_GARAGE_AREA(${1:const char* garageName}, ${2:Vehicle vehicle})"
      ],
      "description": "IS_VEHICLE_IN_GARAGE_AREA()"
    },
    "SET_VEHICLE_COLOURS": {
      "prefix": "SET_VEHICLE_COLOURS()",
      "body": [
        "SET_VEHICLE_COLOURS(${1:Vehicle vehicle}, ${2:int colorPrimary}, ${3:int colorSecondary})"
      ],
      "description": "SET_VEHICLE_COLOURS()"
    },
    "SET_VEHICLE_FULLBEAM": {
      "prefix": "SET_VEHICLE_FULLBEAM()",
      "body": ["SET_VEHICLE_FULLBEAM(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_VEHICLE_FULLBEAM()"
    },
    "SET_VEHICLE_IS_RACING": {
      "prefix": "SET_VEHICLE_IS_RACING()",
      "body": ["SET_VEHICLE_IS_RACING(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_VEHICLE_IS_RACING()"
    },
    "SET_VEHICLE_CUSTOM_PRIMARY_COLOUR": {
      "prefix": "SET_VEHICLE_CUSTOM_PRIMARY_COLOUR()",
      "body": [
        "SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(${1:Vehicle vehicle}, ${2:int r}, ${3:int g}, ${4:int b})"
      ],
      "description": "SET_VEHICLE_CUSTOM_PRIMARY_COLOUR()"
    },
    "GET_VEHICLE_CUSTOM_PRIMARY_COLOUR": {
      "prefix": "GET_VEHICLE_CUSTOM_PRIMARY_COLOUR()",
      "body": [
        "GET_VEHICLE_CUSTOM_PRIMARY_COLOUR(${1:Vehicle vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})"
      ],
      "description": "GET_VEHICLE_CUSTOM_PRIMARY_COLOUR()"
    },
    "CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR": {
      "prefix": "CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR()",
      "body": ["CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(${1:Vehicle vehicle})"],
      "description": "CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR()"
    },
    "GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM": {
      "prefix": "GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM()",
      "body": ["GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(${1:Vehicle vehicle})"],
      "description": "GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM()"
    },
    "SET_VEHICLE_CUSTOM_SECONDARY_COLOUR": {
      "prefix": "SET_VEHICLE_CUSTOM_SECONDARY_COLOUR()",
      "body": [
        "SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(${1:Vehicle vehicle}, ${2:int r}, ${3:int g}, ${4:int b})"
      ],
      "description": "SET_VEHICLE_CUSTOM_SECONDARY_COLOUR()"
    },
    "GET_VEHICLE_CUSTOM_SECONDARY_COLOUR": {
      "prefix": "GET_VEHICLE_CUSTOM_SECONDARY_COLOUR()",
      "body": [
        "GET_VEHICLE_CUSTOM_SECONDARY_COLOUR(${1:Vehicle vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})"
      ],
      "description": "GET_VEHICLE_CUSTOM_SECONDARY_COLOUR()"
    },
    "CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR": {
      "prefix": "CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR()",
      "body": ["CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(${1:Vehicle vehicle})"],
      "description": "CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR()"
    },
    "GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM": {
      "prefix": "GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM()",
      "body": ["GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(${1:Vehicle vehicle})"],
      "description": "GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM()"
    },
    "SET_VEHICLE_ENVEFF_SCALE": {
      "prefix": "SET_VEHICLE_ENVEFF_SCALE()",
      "body": ["SET_VEHICLE_ENVEFF_SCALE(${1:Vehicle vehicle}, ${2:float fade})"],
      "description": "SET_VEHICLE_ENVEFF_SCALE()"
    },
    "GET_VEHICLE_ENVEFF_SCALE": {
      "prefix": "GET_VEHICLE_ENVEFF_SCALE()",
      "body": ["GET_VEHICLE_ENVEFF_SCALE(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_ENVEFF_SCALE()"
    },
    "SET_CAN_RESPRAY_VEHICLE": {
      "prefix": "SET_CAN_RESPRAY_VEHICLE()",
      "body": ["SET_CAN_RESPRAY_VEHICLE(${1:Vehicle vehicle}, ${2:BOOL state})"],
      "description": "SET_CAN_RESPRAY_VEHICLE()"
    },
    "SET_GOON_BOSS_VEHICLE": {
      "prefix": "SET_GOON_BOSS_VEHICLE()",
      "body": ["SET_GOON_BOSS_VEHICLE(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_GOON_BOSS_VEHICLE()"
    },
    "SET_OPEN_REAR_DOORS_ON_EXPLOSION": {
      "prefix": "SET_OPEN_REAR_DOORS_ON_EXPLOSION()",
      "body": [
        "SET_OPEN_REAR_DOORS_ON_EXPLOSION(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_OPEN_REAR_DOORS_ON_EXPLOSION()"
    },
    "FORCE_SUBMARINE_SURFACE_MODE": {
      "prefix": "FORCE_SUBMARINE_SURFACE_MODE()",
      "body": [
        "FORCE_SUBMARINE_SURFACE_MODE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "FORCE_SUBMARINE_SURFACE_MODE()"
    },
    "FORCE_SUBMARINE_NEURTAL_BUOYANCY": {
      "prefix": "FORCE_SUBMARINE_NEURTAL_BUOYANCY()",
      "body": ["FORCE_SUBMARINE_NEURTAL_BUOYANCY(${1:Any p0}, ${2:Any p1})"],
      "description": "FORCE_SUBMARINE_NEURTAL_BUOYANCY()"
    },
    "SET_SUBMARINE_CRUSH_DEPTHS": {
      "prefix": "SET_SUBMARINE_CRUSH_DEPTHS()",
      "body": [
        "SET_SUBMARINE_CRUSH_DEPTHS(${1:Vehicle vehicle}, ${2:BOOL p1}, ${3:float depth1}, ${4:float depth2}, ${5:float depth3})"
      ],
      "description": "SET_SUBMARINE_CRUSH_DEPTHS()"
    },
    "GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH": {
      "prefix": "GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH()",
      "body": ["GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH(${1:Vehicle submarine})"],
      "description": "GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH()"
    },
    "GET_SUBMARINE_NUMBER_OF_AIR_LEAKS": {
      "prefix": "GET_SUBMARINE_NUMBER_OF_AIR_LEAKS()",
      "body": ["GET_SUBMARINE_NUMBER_OF_AIR_LEAKS(${1:Vehicle submarine})"],
      "description": "GET_SUBMARINE_NUMBER_OF_AIR_LEAKS()"
    },
    "SET_BOAT_IGNORE_LAND_PROBES": {
      "prefix": "SET_BOAT_IGNORE_LAND_PROBES()",
      "body": ["SET_BOAT_IGNORE_LAND_PROBES(${1:Any p0}, ${2:Any p1})"],
      "description": "SET_BOAT_IGNORE_LAND_PROBES()"
    },
    "_SET_BOUNDS_AFFECT_WATER_PROBES": {
      "prefix": "_SET_BOUNDS_AFFECT_WATER_PROBES()",
      "body": [
        "_SET_BOUNDS_AFFECT_WATER_PROBES(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "_SET_BOUNDS_AFFECT_WATER_PROBES()"
    },
    "SET_BOAT_ANCHOR": {
      "prefix": "SET_BOAT_ANCHOR()",
      "body": ["SET_BOAT_ANCHOR(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_BOAT_ANCHOR()"
    },
    "CAN_ANCHOR_BOAT_HERE": {
      "prefix": "CAN_ANCHOR_BOAT_HERE()",
      "body": ["CAN_ANCHOR_BOAT_HERE(${1:Vehicle vehicle})"],
      "description": "CAN_ANCHOR_BOAT_HERE()"
    },
    "CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS": {
      "prefix": "CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS()",
      "body": ["CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS(${1:Vehicle vehicle})"],
      "description": "CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS()"
    },
    "SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER": {
      "prefix": "SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER()",
      "body": [
        "SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER()"
    },
    "SET_FORCE_LOW_LOD_ANCHOR_MODE": {
      "prefix": "SET_FORCE_LOW_LOD_ANCHOR_MODE()",
      "body": [
        "SET_FORCE_LOW_LOD_ANCHOR_MODE(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_FORCE_LOW_LOD_ANCHOR_MODE()"
    },
    "SET_BOAT_LOW_LOD_ANCHOR_DISTANCE": {
      "prefix": "SET_BOAT_LOW_LOD_ANCHOR_DISTANCE()",
      "body": [
        "SET_BOAT_LOW_LOD_ANCHOR_DISTANCE(${1:Vehicle vehicle}, ${2:float value})"
      ],
      "description": "SET_BOAT_LOW_LOD_ANCHOR_DISTANCE()"
    },
    "IS_BOAT_ANCHORED": {
      "prefix": "IS_BOAT_ANCHORED()",
      "body": ["IS_BOAT_ANCHORED(${1:Vehicle vehicle})"],
      "description": "IS_BOAT_ANCHORED()"
    },
    "SET_BOAT_SINKS_WHEN_WRECKED": {
      "prefix": "SET_BOAT_SINKS_WHEN_WRECKED()",
      "body": [
        "SET_BOAT_SINKS_WHEN_WRECKED(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_BOAT_SINKS_WHEN_WRECKED()"
    },
    "SET_BOAT_WRECKED": {
      "prefix": "SET_BOAT_WRECKED()",
      "body": ["SET_BOAT_WRECKED(${1:Vehicle vehicle})"],
      "description": "SET_BOAT_WRECKED()"
    },
    "SET_VEHICLE_SIREN": {
      "prefix": "SET_VEHICLE_SIREN()",
      "body": ["SET_VEHICLE_SIREN(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_VEHICLE_SIREN()"
    },
    "IS_VEHICLE_SIREN_ON": {
      "prefix": "IS_VEHICLE_SIREN_ON()",
      "body": ["IS_VEHICLE_SIREN_ON(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_SIREN_ON()"
    },
    "IS_VEHICLE_SIREN_AUDIO_ON": {
      "prefix": "IS_VEHICLE_SIREN_AUDIO_ON()",
      "body": ["IS_VEHICLE_SIREN_AUDIO_ON(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_SIREN_AUDIO_ON()"
    },
    "SET_VEHICLE_STRONG": {
      "prefix": "SET_VEHICLE_STRONG()",
      "body": ["SET_VEHICLE_STRONG(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_VEHICLE_STRONG()"
    },
    "REMOVE_VEHICLE_STUCK_CHECK": {
      "prefix": "REMOVE_VEHICLE_STUCK_CHECK()",
      "body": ["REMOVE_VEHICLE_STUCK_CHECK(${1:Vehicle vehicle})"],
      "description": "REMOVE_VEHICLE_STUCK_CHECK()"
    },
    "GET_VEHICLE_COLOURS": {
      "prefix": "GET_VEHICLE_COLOURS()",
      "body": [
        "GET_VEHICLE_COLOURS(${1:Vehicle vehicle}, ${2:int* colorPrimary}, ${3:int* colorSecondary})"
      ],
      "description": "GET_VEHICLE_COLOURS()"
    },
    "IS_VEHICLE_SEAT_FREE": {
      "prefix": "IS_VEHICLE_SEAT_FREE()",
      "body": [
        "IS_VEHICLE_SEAT_FREE(${1:Vehicle vehicle}, ${2:int seatIndex}, ${3:BOOL isTaskRunning})"
      ],
      "description": "IS_VEHICLE_SEAT_FREE()"
    },
    "GET_PED_IN_VEHICLE_SEAT": {
      "prefix": "GET_PED_IN_VEHICLE_SEAT()",
      "body": [
        "GET_PED_IN_VEHICLE_SEAT(${1:Vehicle vehicle}, ${2:int seatIndex}, ${3:BOOL p2})"
      ],
      "description": "GET_PED_IN_VEHICLE_SEAT()"
    },
    "GET_LAST_PED_IN_VEHICLE_SEAT": {
      "prefix": "GET_LAST_PED_IN_VEHICLE_SEAT()",
      "body": [
        "GET_LAST_PED_IN_VEHICLE_SEAT(${1:Vehicle vehicle}, ${2:int seatIndex})"
      ],
      "description": "GET_LAST_PED_IN_VEHICLE_SEAT()"
    },
    "GET_VEHICLE_LIGHTS_STATE": {
      "prefix": "GET_VEHICLE_LIGHTS_STATE()",
      "body": [
        "GET_VEHICLE_LIGHTS_STATE(${1:Vehicle vehicle}, ${2:BOOL* lightsOn}, ${3:BOOL* highbeamsOn})"
      ],
      "description": "GET_VEHICLE_LIGHTS_STATE()"
    },
    "IS_VEHICLE_TYRE_BURST": {
      "prefix": "IS_VEHICLE_TYRE_BURST()",
      "body": [
        "IS_VEHICLE_TYRE_BURST(${1:Vehicle vehicle}, ${2:int wheelID}, ${3:BOOL completely})"
      ],
      "description": "IS_VEHICLE_TYRE_BURST()"
    },
    "SET_VEHICLE_FORWARD_SPEED": {
      "prefix": "SET_VEHICLE_FORWARD_SPEED()",
      "body": [
        "SET_VEHICLE_FORWARD_SPEED(${1:Vehicle vehicle}, ${2:float speed})"
      ],
      "description": "SET_VEHICLE_FORWARD_SPEED()"
    },
    "SET_VEHICLE_FORWARD_SPEED_XY": {
      "prefix": "SET_VEHICLE_FORWARD_SPEED_XY()",
      "body": [
        "SET_VEHICLE_FORWARD_SPEED_XY(${1:Vehicle vehicle}, ${2:float speed})"
      ],
      "description": "SET_VEHICLE_FORWARD_SPEED_XY()"
    },
    "BRING_VEHICLE_TO_HALT": {
      "prefix": "BRING_VEHICLE_TO_HALT()",
      "body": [
        "BRING_VEHICLE_TO_HALT(${1:Vehicle vehicle}, ${2:float distance}, ${3:int duration}, ${4:BOOL p3})"
      ],
      "description": "BRING_VEHICLE_TO_HALT()"
    },
    "SET_VEHICLE_STEER_FOR_BUILDINGS": {
      "prefix": "SET_VEHICLE_STEER_FOR_BUILDINGS()",
      "body": [
        "SET_VEHICLE_STEER_FOR_BUILDINGS(${1:Vehicle vehicle}, ${2:Any p1})"
      ],
      "description": "SET_VEHICLE_STEER_FOR_BUILDINGS()"
    },
    "SET_VEHICLE_CAUSES_SWERVING": {
      "prefix": "SET_VEHICLE_CAUSES_SWERVING()",
      "body": [
        "SET_VEHICLE_CAUSES_SWERVING(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_CAUSES_SWERVING()"
    },
    "SET_IGNORE_PLANES_SMALL_PITCH_CHANGE": {
      "prefix": "SET_IGNORE_PLANES_SMALL_PITCH_CHANGE()",
      "body": ["SET_IGNORE_PLANES_SMALL_PITCH_CHANGE(${1:Any p0}, ${2:Any p1})"],
      "description": "SET_IGNORE_PLANES_SMALL_PITCH_CHANGE()"
    },
    "STOP_BRINGING_VEHICLE_TO_HALT": {
      "prefix": "STOP_BRINGING_VEHICLE_TO_HALT()",
      "body": ["STOP_BRINGING_VEHICLE_TO_HALT(${1:Vehicle vehicle})"],
      "description": "STOP_BRINGING_VEHICLE_TO_HALT()"
    },
    "IS_VEHICLE_BEING_BROUGHT_TO_HALT": {
      "prefix": "IS_VEHICLE_BEING_BROUGHT_TO_HALT()",
      "body": ["IS_VEHICLE_BEING_BROUGHT_TO_HALT(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_BEING_BROUGHT_TO_HALT()"
    },
    "LOWER_FORKLIFT_FORKS": {
      "prefix": "LOWER_FORKLIFT_FORKS()",
      "body": ["LOWER_FORKLIFT_FORKS(${1:Vehicle forklift})"],
      "description": "LOWER_FORKLIFT_FORKS()"
    },
    "SET_FORKLIFT_FORK_HEIGHT": {
      "prefix": "SET_FORKLIFT_FORK_HEIGHT()",
      "body": [
        "SET_FORKLIFT_FORK_HEIGHT(${1:Vehicle vehicle}, ${2:float height})"
      ],
      "description": "SET_FORKLIFT_FORK_HEIGHT()"
    },
    "IS_ENTITY_ATTACHED_TO_HANDLER_FRAME": {
      "prefix": "IS_ENTITY_ATTACHED_TO_HANDLER_FRAME()",
      "body": [
        "IS_ENTITY_ATTACHED_TO_HANDLER_FRAME(${1:Vehicle vehicle}, ${2:Entity entity})"
      ],
      "description": "IS_ENTITY_ATTACHED_TO_HANDLER_FRAME()"
    },
    "IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME": {
      "prefix": "IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME()",
      "body": ["IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME(${1:Vehicle vehicle})"],
      "description": "IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME()"
    },
    "FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO": {
      "prefix": "FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO()",
      "body": [
        "FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO(${1:Entity entity})"
      ],
      "description": "FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO()"
    },
    "IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER": {
      "prefix": "IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER()",
      "body": [
        "IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER(${1:Vehicle vehicle}, ${2:Entity entity})"
      ],
      "description": "IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER()"
    },
    "ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP": {
      "prefix": "ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP()",
      "body": [
        "ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP(${1:Vehicle vehicle}, ${2:Entity entity})"
      ],
      "description": "ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP()"
    },
    "DETACH_CONTAINER_FROM_HANDLER_FRAME": {
      "prefix": "DETACH_CONTAINER_FROM_HANDLER_FRAME()",
      "body": ["DETACH_CONTAINER_FROM_HANDLER_FRAME(${1:Vehicle vehicle})"],
      "description": "DETACH_CONTAINER_FROM_HANDLER_FRAME()"
    },
    "SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE": {
      "prefix": "SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE()",
      "body": [
        "SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE()"
    },
    "SET_BOAT_DISABLE_AVOIDANCE": {
      "prefix": "SET_BOAT_DISABLE_AVOIDANCE()",
      "body": ["SET_BOAT_DISABLE_AVOIDANCE(${1:Vehicle vehicle}, ${2:BOOL p1})"],
      "description": "SET_BOAT_DISABLE_AVOIDANCE()"
    },
    "IS_HELI_LANDING_AREA_BLOCKED": {
      "prefix": "IS_HELI_LANDING_AREA_BLOCKED()",
      "body": ["IS_HELI_LANDING_AREA_BLOCKED(${1:Vehicle vehicle})"],
      "description": "IS_HELI_LANDING_AREA_BLOCKED()"
    },
    "SET_SHORT_SLOWDOWN_FOR_LANDING": {
      "prefix": "SET_SHORT_SLOWDOWN_FOR_LANDING()",
      "body": ["SET_SHORT_SLOWDOWN_FOR_LANDING(${1:Vehicle vehicle})"],
      "description": "SET_SHORT_SLOWDOWN_FOR_LANDING()"
    },
    "SET_HELI_TURBULENCE_SCALAR": {
      "prefix": "SET_HELI_TURBULENCE_SCALAR()",
      "body": ["SET_HELI_TURBULENCE_SCALAR(${1:Vehicle vehicle}, ${2:float p1})"],
      "description": "SET_HELI_TURBULENCE_SCALAR()"
    },
    "SET_CAR_BOOT_OPEN": {
      "prefix": "SET_CAR_BOOT_OPEN()",
      "body": ["SET_CAR_BOOT_OPEN(${1:Vehicle vehicle})"],
      "description": "SET_CAR_BOOT_OPEN()"
    },
    "SET_VEHICLE_TYRE_BURST": {
      "prefix": "SET_VEHICLE_TYRE_BURST()",
      "body": [
        "SET_VEHICLE_TYRE_BURST(${1:Vehicle vehicle}, ${2:int index}, ${3:BOOL onRim}, ${4:float p3})"
      ],
      "description": "SET_VEHICLE_TYRE_BURST()"
    },
    "SET_VEHICLE_DOORS_SHUT": {
      "prefix": "SET_VEHICLE_DOORS_SHUT()",
      "body": [
        "SET_VEHICLE_DOORS_SHUT(${1:Vehicle vehicle}, ${2:BOOL closeInstantly})"
      ],
      "description": "SET_VEHICLE_DOORS_SHUT()"
    },
    "SET_VEHICLE_TYRES_CAN_BURST": {
      "prefix": "SET_VEHICLE_TYRES_CAN_BURST()",
      "body": [
        "SET_VEHICLE_TYRES_CAN_BURST(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_TYRES_CAN_BURST()"
    },
    "GET_VEHICLE_TYRES_CAN_BURST": {
      "prefix": "GET_VEHICLE_TYRES_CAN_BURST()",
      "body": ["GET_VEHICLE_TYRES_CAN_BURST(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_TYRES_CAN_BURST()"
    },
    "SET_VEHICLE_WHEELS_CAN_BREAK": {
      "prefix": "SET_VEHICLE_WHEELS_CAN_BREAK()",
      "body": [
        "SET_VEHICLE_WHEELS_CAN_BREAK(${1:Vehicle vehicle}, ${2:BOOL enabled})"
      ],
      "description": "SET_VEHICLE_WHEELS_CAN_BREAK()"
    },
    "SET_VEHICLE_DOOR_OPEN": {
      "prefix": "SET_VEHICLE_DOOR_OPEN()",
      "body": [
        "SET_VEHICLE_DOOR_OPEN(${1:Vehicle vehicle}, ${2:int doorId}, ${3:BOOL loose}, ${4:BOOL openInstantly})"
      ],
      "description": "SET_VEHICLE_DOOR_OPEN()"
    },
    "SET_VEHICLE_DOOR_AUTO_LOCK": {
      "prefix": "SET_VEHICLE_DOOR_AUTO_LOCK()",
      "body": [
        "SET_VEHICLE_DOOR_AUTO_LOCK(${1:Vehicle vehicle}, ${2:int doorId}, ${3:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_DOOR_AUTO_LOCK()"
    },
    "SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES": {
      "prefix": "SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES()",
      "body": ["SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES(${1:Any p0})"],
      "description": "SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES()"
    },
    "REMOVE_VEHICLE_WINDOW": {
      "prefix": "REMOVE_VEHICLE_WINDOW()",
      "body": [
        "REMOVE_VEHICLE_WINDOW(${1:Vehicle vehicle}, ${2:int windowIndex})"
      ],
      "description": "REMOVE_VEHICLE_WINDOW()"
    },
    "ROLL_DOWN_WINDOWS": {
      "prefix": "ROLL_DOWN_WINDOWS()",
      "body": ["ROLL_DOWN_WINDOWS(${1:Vehicle vehicle})"],
      "description": "ROLL_DOWN_WINDOWS()"
    },
    "ROLL_DOWN_WINDOW": {
      "prefix": "ROLL_DOWN_WINDOW()",
      "body": ["ROLL_DOWN_WINDOW(${1:Vehicle vehicle}, ${2:int windowIndex})"],
      "description": "ROLL_DOWN_WINDOW()"
    },
    "ROLL_UP_WINDOW": {
      "prefix": "ROLL_UP_WINDOW()",
      "body": ["ROLL_UP_WINDOW(${1:Vehicle vehicle}, ${2:int windowIndex})"],
      "description": "ROLL_UP_WINDOW()"
    },
    "SMASH_VEHICLE_WINDOW": {
      "prefix": "SMASH_VEHICLE_WINDOW()",
      "body": [
        "SMASH_VEHICLE_WINDOW(${1:Vehicle vehicle}, ${2:int windowIndex})"
      ],
      "description": "SMASH_VEHICLE_WINDOW()"
    },
    "FIX_VEHICLE_WINDOW": {
      "prefix": "FIX_VEHICLE_WINDOW()",
      "body": ["FIX_VEHICLE_WINDOW(${1:Vehicle vehicle}, ${2:int windowIndex})"],
      "description": "FIX_VEHICLE_WINDOW()"
    },
    "POP_OUT_VEHICLE_WINDSCREEN": {
      "prefix": "POP_OUT_VEHICLE_WINDSCREEN()",
      "body": ["POP_OUT_VEHICLE_WINDSCREEN(${1:Vehicle vehicle})"],
      "description": "POP_OUT_VEHICLE_WINDSCREEN()"
    },
    "POP_OFF_VEHICLE_ROOF_WITH_IMPULSE": {
      "prefix": "POP_OFF_VEHICLE_ROOF_WITH_IMPULSE()",
      "body": [
        "POP_OFF_VEHICLE_ROOF_WITH_IMPULSE(${1:Vehicle vehicle}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "POP_OFF_VEHICLE_ROOF_WITH_IMPULSE()"
    },
    "SET_VEHICLE_LIGHTS": {
      "prefix": "SET_VEHICLE_LIGHTS()",
      "body": ["SET_VEHICLE_LIGHTS(${1:Vehicle vehicle}, ${2:int state})"],
      "description": "SET_VEHICLE_LIGHTS()"
    },
    "SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS": {
      "prefix": "SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS()",
      "body": [
        "SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS()"
    },
    "SET_VEHICLE_HEADLIGHT_SHADOWS": {
      "prefix": "SET_VEHICLE_HEADLIGHT_SHADOWS()",
      "body": [
        "SET_VEHICLE_HEADLIGHT_SHADOWS(${1:Vehicle vehicle}, ${2:int p1})"
      ],
      "description": "SET_VEHICLE_HEADLIGHT_SHADOWS()"
    },
    "SET_VEHICLE_ALARM": {
      "prefix": "SET_VEHICLE_ALARM()",
      "body": ["SET_VEHICLE_ALARM(${1:Vehicle vehicle}, ${2:BOOL state})"],
      "description": "SET_VEHICLE_ALARM()"
    },
    "START_VEHICLE_ALARM": {
      "prefix": "START_VEHICLE_ALARM()",
      "body": ["START_VEHICLE_ALARM(${1:Vehicle vehicle})"],
      "description": "START_VEHICLE_ALARM()"
    },
    "IS_VEHICLE_ALARM_ACTIVATED": {
      "prefix": "IS_VEHICLE_ALARM_ACTIVATED()",
      "body": ["IS_VEHICLE_ALARM_ACTIVATED(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_ALARM_ACTIVATED()"
    },
    "SET_VEHICLE_INTERIORLIGHT": {
      "prefix": "SET_VEHICLE_INTERIORLIGHT()",
      "body": [
        "SET_VEHICLE_INTERIORLIGHT(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_INTERIORLIGHT()"
    },
    "SET_VEHICLE_FORCE_INTERIORLIGHT": {
      "prefix": "SET_VEHICLE_FORCE_INTERIORLIGHT()",
      "body": [
        "SET_VEHICLE_FORCE_INTERIORLIGHT(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_FORCE_INTERIORLIGHT()"
    },
    "SET_VEHICLE_LIGHT_MULTIPLIER": {
      "prefix": "SET_VEHICLE_LIGHT_MULTIPLIER()",
      "body": [
        "SET_VEHICLE_LIGHT_MULTIPLIER(${1:Vehicle vehicle}, ${2:float multiplier})"
      ],
      "description": "SET_VEHICLE_LIGHT_MULTIPLIER()"
    },
    "ATTACH_VEHICLE_TO_TRAILER": {
      "prefix": "ATTACH_VEHICLE_TO_TRAILER()",
      "body": [
        "ATTACH_VEHICLE_TO_TRAILER(${1:Vehicle vehicle}, ${2:Vehicle trailer}, ${3:float radius})"
      ],
      "description": "ATTACH_VEHICLE_TO_TRAILER()"
    },
    "ATTACH_VEHICLE_ON_TO_TRAILER": {
      "prefix": "ATTACH_VEHICLE_ON_TO_TRAILER()",
      "body": [
        "ATTACH_VEHICLE_ON_TO_TRAILER(${1:Vehicle vehicle}, ${2:Vehicle trailer}, ${3:float offsetX}, ${4:float offsetY}, ${5:float offsetZ}, ${6:float coordsX}, ${7:float coordsY}, ${8:float coordsZ}, ${9:float rotationX}, ${10:float rotationY}, ${11:float rotationZ}, ${12:float disableCollisions})"
      ],
      "description": "ATTACH_VEHICLE_ON_TO_TRAILER()"
    },
    "STABILISE_ENTITY_ATTACHED_TO_HELI": {
      "prefix": "STABILISE_ENTITY_ATTACHED_TO_HELI()",
      "body": [
        "STABILISE_ENTITY_ATTACHED_TO_HELI(${1:Vehicle vehicle}, ${2:Entity entity}, ${3:float p2})"
      ],
      "description": "STABILISE_ENTITY_ATTACHED_TO_HELI()"
    },
    "DETACH_VEHICLE_FROM_TRAILER": {
      "prefix": "DETACH_VEHICLE_FROM_TRAILER()",
      "body": ["DETACH_VEHICLE_FROM_TRAILER(${1:Vehicle vehicle})"],
      "description": "DETACH_VEHICLE_FROM_TRAILER()"
    },
    "IS_VEHICLE_ATTACHED_TO_TRAILER": {
      "prefix": "IS_VEHICLE_ATTACHED_TO_TRAILER()",
      "body": ["IS_VEHICLE_ATTACHED_TO_TRAILER(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_ATTACHED_TO_TRAILER()"
    },
    "SET_TRAILER_INVERSE_MASS_SCALE": {
      "prefix": "SET_TRAILER_INVERSE_MASS_SCALE()",
      "body": [
        "SET_TRAILER_INVERSE_MASS_SCALE(${1:Vehicle vehicle}, ${2:float p1})"
      ],
      "description": "SET_TRAILER_INVERSE_MASS_SCALE()"
    },
    "SET_TRAILER_LEGS_RAISED": {
      "prefix": "SET_TRAILER_LEGS_RAISED()",
      "body": ["SET_TRAILER_LEGS_RAISED(${1:Vehicle vehicle})"],
      "description": "SET_TRAILER_LEGS_RAISED()"
    },
    "SET_TRAILER_LEGS_LOWERED": {
      "prefix": "SET_TRAILER_LEGS_LOWERED()",
      "body": ["SET_TRAILER_LEGS_LOWERED(${1:Vehicle vehicle})"],
      "description": "SET_TRAILER_LEGS_LOWERED()"
    },
    "SET_VEHICLE_TYRE_FIXED": {
      "prefix": "SET_VEHICLE_TYRE_FIXED()",
      "body": [
        "SET_VEHICLE_TYRE_FIXED(${1:Vehicle vehicle}, ${2:int tyreIndex})"
      ],
      "description": "SET_VEHICLE_TYRE_FIXED()"
    },
    "SET_VEHICLE_NUMBER_PLATE_TEXT": {
      "prefix": "SET_VEHICLE_NUMBER_PLATE_TEXT()",
      "body": [
        "SET_VEHICLE_NUMBER_PLATE_TEXT(${1:Vehicle vehicle}, ${2:const char* plateText})"
      ],
      "description": "SET_VEHICLE_NUMBER_PLATE_TEXT()"
    },
    "GET_NUMBER_OF_VEHICLE_NUMBER_PLATES": {
      "prefix": "GET_NUMBER_OF_VEHICLE_NUMBER_PLATES()",
      "body": ["GET_NUMBER_OF_VEHICLE_NUMBER_PLATES()"],
      "description": "GET_NUMBER_OF_VEHICLE_NUMBER_PLATES()"
    },
    "SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX": {
      "prefix": "SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX()",
      "body": [
        "SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(${1:Vehicle vehicle}, ${2:int plateIndex})"
      ],
      "description": "SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX()"
    },
    "GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX": {
      "prefix": "GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX()",
      "body": ["GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX()"
    },
    "SET_RANDOM_TRAINS": {
      "prefix": "SET_RANDOM_TRAINS()",
      "body": ["SET_RANDOM_TRAINS(${1:BOOL toggle})"],
      "description": "SET_RANDOM_TRAINS()"
    },
    "CREATE_MISSION_TRAIN": {
      "prefix": "CREATE_MISSION_TRAIN()",
      "body": [
        "CREATE_MISSION_TRAIN(${1:int variation}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:BOOL direction}, ${6:Any p5}, ${7:Any p6})"
      ],
      "description": "CREATE_MISSION_TRAIN()"
    },
    "SWITCH_TRAIN_TRACK": {
      "prefix": "SWITCH_TRAIN_TRACK()",
      "body": ["SWITCH_TRAIN_TRACK(${1:int trackId}, ${2:BOOL state})"],
      "description": "SWITCH_TRAIN_TRACK()"
    },
    "SET_TRAIN_TRACK_SPAWN_FREQUENCY": {
      "prefix": "SET_TRAIN_TRACK_SPAWN_FREQUENCY()",
      "body": [
        "SET_TRAIN_TRACK_SPAWN_FREQUENCY(${1:int trackIndex}, ${2:int frequency})"
      ],
      "description": "SET_TRAIN_TRACK_SPAWN_FREQUENCY()"
    },
    "ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION": {
      "prefix": "ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION()",
      "body": ["ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION(${1:Any p0})"],
      "description": "ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION()"
    },
    "DELETE_ALL_TRAINS": {
      "prefix": "DELETE_ALL_TRAINS()",
      "body": ["DELETE_ALL_TRAINS()"],
      "description": "DELETE_ALL_TRAINS()"
    },
    "SET_TRAIN_SPEED": {
      "prefix": "SET_TRAIN_SPEED()",
      "body": ["SET_TRAIN_SPEED(${1:Vehicle train}, ${2:float speed})"],
      "description": "SET_TRAIN_SPEED()"
    },
    "SET_TRAIN_CRUISE_SPEED": {
      "prefix": "SET_TRAIN_CRUISE_SPEED()",
      "body": ["SET_TRAIN_CRUISE_SPEED(${1:Vehicle train}, ${2:float speed})"],
      "description": "SET_TRAIN_CRUISE_SPEED()"
    },
    "SET_RANDOM_BOATS": {
      "prefix": "SET_RANDOM_BOATS()",
      "body": ["SET_RANDOM_BOATS(${1:BOOL toggle})"],
      "description": "SET_RANDOM_BOATS()"
    },
    "SET_RANDOM_BOATS_MP": {
      "prefix": "SET_RANDOM_BOATS_MP()",
      "body": ["SET_RANDOM_BOATS_MP(${1:BOOL toggle})"],
      "description": "SET_RANDOM_BOATS_MP()"
    },
    "SET_GARBAGE_TRUCKS": {
      "prefix": "SET_GARBAGE_TRUCKS()",
      "body": ["SET_GARBAGE_TRUCKS(${1:BOOL toggle})"],
      "description": "SET_GARBAGE_TRUCKS()"
    },
    "DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK": {
      "prefix": "DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK()",
      "body": ["DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK(${1:Vehicle vehicle})"],
      "description": "DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK()"
    },
    "GET_VEHICLE_RECORDING_ID": {
      "prefix": "GET_VEHICLE_RECORDING_ID()",
      "body": [
        "GET_VEHICLE_RECORDING_ID(${1:int recording}, ${2:const char* script})"
      ],
      "description": "GET_VEHICLE_RECORDING_ID()"
    },
    "REQUEST_VEHICLE_RECORDING": {
      "prefix": "REQUEST_VEHICLE_RECORDING()",
      "body": [
        "REQUEST_VEHICLE_RECORDING(${1:int recording}, ${2:const char* script})"
      ],
      "description": "REQUEST_VEHICLE_RECORDING()"
    },
    "HAS_VEHICLE_RECORDING_BEEN_LOADED": {
      "prefix": "HAS_VEHICLE_RECORDING_BEEN_LOADED()",
      "body": [
        "HAS_VEHICLE_RECORDING_BEEN_LOADED(${1:int recording}, ${2:const char* script})"
      ],
      "description": "HAS_VEHICLE_RECORDING_BEEN_LOADED()"
    },
    "REMOVE_VEHICLE_RECORDING": {
      "prefix": "REMOVE_VEHICLE_RECORDING()",
      "body": [
        "REMOVE_VEHICLE_RECORDING(${1:int recording}, ${2:const char* script})"
      ],
      "description": "REMOVE_VEHICLE_RECORDING()"
    },
    "GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME": {
      "prefix": "GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME()",
      "body": [
        "GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME(${1:int id}, ${2:float time})"
      ],
      "description": "GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME()"
    },
    "GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME": {
      "prefix": "GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME()",
      "body": [
        "GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME(${1:int recording}, ${2:float time}, ${3:const char* script})"
      ],
      "description": "GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME()"
    },
    "GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME": {
      "prefix": "GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME()",
      "body": [
        "GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME(${1:int id}, ${2:float time})"
      ],
      "description": "GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME()"
    },
    "GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME": {
      "prefix": "GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME()",
      "body": [
        "GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME(${1:int recording}, ${2:float time}, ${3:const char* script})"
      ],
      "description": "GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME()"
    },
    "GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID": {
      "prefix": "GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID()",
      "body": ["GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID(${1:int id})"],
      "description": "GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID()"
    },
    "GET_TOTAL_DURATION_OF_VEHICLE_RECORDING": {
      "prefix": "GET_TOTAL_DURATION_OF_VEHICLE_RECORDING()",
      "body": [
        "GET_TOTAL_DURATION_OF_VEHICLE_RECORDING(${1:int recording}, ${2:const char* script})"
      ],
      "description": "GET_TOTAL_DURATION_OF_VEHICLE_RECORDING()"
    },
    "GET_POSITION_IN_RECORDING": {
      "prefix": "GET_POSITION_IN_RECORDING()",
      "body": ["GET_POSITION_IN_RECORDING(${1:Vehicle vehicle})"],
      "description": "GET_POSITION_IN_RECORDING()"
    },
    "GET_TIME_POSITION_IN_RECORDING": {
      "prefix": "GET_TIME_POSITION_IN_RECORDING()",
      "body": ["GET_TIME_POSITION_IN_RECORDING(${1:Vehicle vehicle})"],
      "description": "GET_TIME_POSITION_IN_RECORDING()"
    },
    "START_PLAYBACK_RECORDED_VEHICLE": {
      "prefix": "START_PLAYBACK_RECORDED_VEHICLE()",
      "body": [
        "START_PLAYBACK_RECORDED_VEHICLE(${1:Vehicle vehicle}, ${2:int recording}, ${3:const char* script}, ${4:BOOL p3})"
      ],
      "description": "START_PLAYBACK_RECORDED_VEHICLE()"
    },
    "START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS": {
      "prefix": "START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS()",
      "body": [
        "START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS(${1:Vehicle vehicle}, ${2:int recording}, ${3:const char* script}, ${4:int flags}, ${5:int time}, ${6:int drivingStyle})"
      ],
      "description": "START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS()"
    },
    "FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE": {
      "prefix": "FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE()",
      "body": [
        "FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE()"
    },
    "STOP_PLAYBACK_RECORDED_VEHICLE": {
      "prefix": "STOP_PLAYBACK_RECORDED_VEHICLE()",
      "body": ["STOP_PLAYBACK_RECORDED_VEHICLE(${1:Vehicle vehicle})"],
      "description": "STOP_PLAYBACK_RECORDED_VEHICLE()"
    },
    "PAUSE_PLAYBACK_RECORDED_VEHICLE": {
      "prefix": "PAUSE_PLAYBACK_RECORDED_VEHICLE()",
      "body": ["PAUSE_PLAYBACK_RECORDED_VEHICLE(${1:Vehicle vehicle})"],
      "description": "PAUSE_PLAYBACK_RECORDED_VEHICLE()"
    },
    "UNPAUSE_PLAYBACK_RECORDED_VEHICLE": {
      "prefix": "UNPAUSE_PLAYBACK_RECORDED_VEHICLE()",
      "body": ["UNPAUSE_PLAYBACK_RECORDED_VEHICLE(${1:Vehicle vehicle})"],
      "description": "UNPAUSE_PLAYBACK_RECORDED_VEHICLE()"
    },
    "IS_PLAYBACK_GOING_ON_FOR_VEHICLE": {
      "prefix": "IS_PLAYBACK_GOING_ON_FOR_VEHICLE()",
      "body": ["IS_PLAYBACK_GOING_ON_FOR_VEHICLE(${1:Vehicle vehicle})"],
      "description": "IS_PLAYBACK_GOING_ON_FOR_VEHICLE()"
    },
    "IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE": {
      "prefix": "IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE()",
      "body": ["IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(${1:Vehicle vehicle})"],
      "description": "IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE()"
    },
    "GET_CURRENT_PLAYBACK_FOR_VEHICLE": {
      "prefix": "GET_CURRENT_PLAYBACK_FOR_VEHICLE()",
      "body": ["GET_CURRENT_PLAYBACK_FOR_VEHICLE(${1:Vehicle vehicle})"],
      "description": "GET_CURRENT_PLAYBACK_FOR_VEHICLE()"
    },
    "SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE": {
      "prefix": "SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE()",
      "body": [
        "SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE(${1:Vehicle vehicle})"
      ],
      "description": "SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE()"
    },
    "SET_PLAYBACK_SPEED": {
      "prefix": "SET_PLAYBACK_SPEED()",
      "body": ["SET_PLAYBACK_SPEED(${1:Vehicle vehicle}, ${2:float speed})"],
      "description": "SET_PLAYBACK_SPEED()"
    },
    "START_PLAYBACK_RECORDED_VEHICLE_USING_AI": {
      "prefix": "START_PLAYBACK_RECORDED_VEHICLE_USING_AI()",
      "body": [
        "START_PLAYBACK_RECORDED_VEHICLE_USING_AI(${1:Vehicle vehicle}, ${2:int recording}, ${3:const char* script}, ${4:float speed}, ${5:int drivingStyle})"
      ],
      "description": "START_PLAYBACK_RECORDED_VEHICLE_USING_AI()"
    },
    "SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE": {
      "prefix": "SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE()",
      "body": [
        "SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(${1:Vehicle vehicle}, ${2:float time})"
      ],
      "description": "SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE()"
    },
    "SET_PLAYBACK_TO_USE_AI": {
      "prefix": "SET_PLAYBACK_TO_USE_AI()",
      "body": [
        "SET_PLAYBACK_TO_USE_AI(${1:Vehicle vehicle}, ${2:int drivingStyle})"
      ],
      "description": "SET_PLAYBACK_TO_USE_AI()"
    },
    "SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER": {
      "prefix": "SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER()",
      "body": [
        "SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER(${1:Vehicle vehicle}, ${2:int time}, ${3:int drivingStyle}, ${4:BOOL p3})"
      ],
      "description": "SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER()"
    },
    "SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK": {
      "prefix": "SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK()",
      "body": [
        "SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK(${1:Vehicle vehicle}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:Any p4})"
      ],
      "description": "SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK()"
    },
    "SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK": {
      "prefix": "SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK()",
      "body": [
        "SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(${1:Vehicle vehicle}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK()"
    },
    "SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK": {
      "prefix": "SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK()",
      "body": [
        "SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(${1:Vehicle vehicle}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK()"
    },
    "SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING": {
      "prefix": "SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING()",
      "body": [
        "SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING()"
    },
    "EXPLODE_VEHICLE_IN_CUTSCENE": {
      "prefix": "EXPLODE_VEHICLE_IN_CUTSCENE()",
      "body": ["EXPLODE_VEHICLE_IN_CUTSCENE(${1:Vehicle vehicle}, ${2:BOOL p1})"],
      "description": "EXPLODE_VEHICLE_IN_CUTSCENE()"
    },
    "ADD_VEHICLE_STUCK_CHECK_WITH_WARP": {
      "prefix": "ADD_VEHICLE_STUCK_CHECK_WITH_WARP()",
      "body": [
        "ADD_VEHICLE_STUCK_CHECK_WITH_WARP(${1:Any p0}, ${2:float p1}, ${3:Any p2}, ${4:BOOL p3}, ${5:BOOL p4}, ${6:BOOL p5}, ${7:Any p6})"
      ],
      "description": "ADD_VEHICLE_STUCK_CHECK_WITH_WARP()"
    },
    "SET_VEHICLE_MODEL_IS_SUPPRESSED": {
      "prefix": "SET_VEHICLE_MODEL_IS_SUPPRESSED()",
      "body": [
        "SET_VEHICLE_MODEL_IS_SUPPRESSED(${1:Hash model}, ${2:BOOL suppressed})"
      ],
      "description": "SET_VEHICLE_MODEL_IS_SUPPRESSED()"
    },
    "GET_RANDOM_VEHICLE_IN_SPHERE": {
      "prefix": "GET_RANDOM_VEHICLE_IN_SPHERE()",
      "body": [
        "GET_RANDOM_VEHICLE_IN_SPHERE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash modelHash}, ${6:int flags})"
      ],
      "description": "GET_RANDOM_VEHICLE_IN_SPHERE()"
    },
    "GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE": {
      "prefix": "GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE()",
      "body": [
        "GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:int p4}, ${6:int p5}, ${7:int p6})"
      ],
      "description": "GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE()"
    },
    "GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE": {
      "prefix": "GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE()",
      "body": [
        "GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:int p4}, ${6:int p5}, ${7:int p6})"
      ],
      "description": "GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE()"
    },
    "GET_CLOSEST_VEHICLE": {
      "prefix": "GET_CLOSEST_VEHICLE()",
      "body": [
        "GET_CLOSEST_VEHICLE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:Hash modelHash}, ${6:int flags})"
      ],
      "description": "GET_CLOSEST_VEHICLE()"
    },
    "GET_TRAIN_CARRIAGE": {
      "prefix": "GET_TRAIN_CARRIAGE()",
      "body": ["GET_TRAIN_CARRIAGE(${1:Vehicle train}, ${2:int trailerNumber})"],
      "description": "GET_TRAIN_CARRIAGE()"
    },
    "IS_MISSION_TRAIN": {
      "prefix": "IS_MISSION_TRAIN()",
      "body": ["IS_MISSION_TRAIN(${1:Vehicle train})"],
      "description": "IS_MISSION_TRAIN()"
    },
    "DELETE_MISSION_TRAIN": {
      "prefix": "DELETE_MISSION_TRAIN()",
      "body": ["DELETE_MISSION_TRAIN(${1:Vehicle* train})"],
      "description": "DELETE_MISSION_TRAIN()"
    },
    "SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED": {
      "prefix": "SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED()",
      "body": [
        "SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED(${1:Vehicle* train}, ${2:BOOL p1})"
      ],
      "description": "SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED()"
    },
    "SET_MISSION_TRAIN_COORDS": {
      "prefix": "SET_MISSION_TRAIN_COORDS()",
      "body": [
        "SET_MISSION_TRAIN_COORDS(${1:Vehicle train}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "SET_MISSION_TRAIN_COORDS()"
    },
    "IS_THIS_MODEL_A_BOAT": {
      "prefix": "IS_THIS_MODEL_A_BOAT()",
      "body": ["IS_THIS_MODEL_A_BOAT(${1:Hash model})"],
      "description": "IS_THIS_MODEL_A_BOAT()"
    },
    "IS_THIS_MODEL_A_JETSKI": {
      "prefix": "IS_THIS_MODEL_A_JETSKI()",
      "body": ["IS_THIS_MODEL_A_JETSKI(${1:Hash model})"],
      "description": "IS_THIS_MODEL_A_JETSKI()"
    },
    "IS_THIS_MODEL_A_PLANE": {
      "prefix": "IS_THIS_MODEL_A_PLANE()",
      "body": ["IS_THIS_MODEL_A_PLANE(${1:Hash model})"],
      "description": "IS_THIS_MODEL_A_PLANE()"
    },
    "IS_THIS_MODEL_A_HELI": {
      "prefix": "IS_THIS_MODEL_A_HELI()",
      "body": ["IS_THIS_MODEL_A_HELI(${1:Hash model})"],
      "description": "IS_THIS_MODEL_A_HELI()"
    },
    "IS_THIS_MODEL_A_CAR": {
      "prefix": "IS_THIS_MODEL_A_CAR()",
      "body": ["IS_THIS_MODEL_A_CAR(${1:Hash model})"],
      "description": "IS_THIS_MODEL_A_CAR()"
    },
    "IS_THIS_MODEL_A_TRAIN": {
      "prefix": "IS_THIS_MODEL_A_TRAIN()",
      "body": ["IS_THIS_MODEL_A_TRAIN(${1:Hash model})"],
      "description": "IS_THIS_MODEL_A_TRAIN()"
    },
    "IS_THIS_MODEL_A_BIKE": {
      "prefix": "IS_THIS_MODEL_A_BIKE()",
      "body": ["IS_THIS_MODEL_A_BIKE(${1:Hash model})"],
      "description": "IS_THIS_MODEL_A_BIKE()"
    },
    "IS_THIS_MODEL_A_BICYCLE": {
      "prefix": "IS_THIS_MODEL_A_BICYCLE()",
      "body": ["IS_THIS_MODEL_A_BICYCLE(${1:Hash model})"],
      "description": "IS_THIS_MODEL_A_BICYCLE()"
    },
    "IS_THIS_MODEL_A_QUADBIKE": {
      "prefix": "IS_THIS_MODEL_A_QUADBIKE()",
      "body": ["IS_THIS_MODEL_A_QUADBIKE(${1:Hash model})"],
      "description": "IS_THIS_MODEL_A_QUADBIKE()"
    },
    "IS_THIS_MODEL_AN_AMPHIBIOUS_CAR": {
      "prefix": "IS_THIS_MODEL_AN_AMPHIBIOUS_CAR()",
      "body": ["IS_THIS_MODEL_AN_AMPHIBIOUS_CAR(${1:Hash model})"],
      "description": "IS_THIS_MODEL_AN_AMPHIBIOUS_CAR()"
    },
    "IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE": {
      "prefix": "IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE()",
      "body": ["IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE(${1:Hash model})"],
      "description": "IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE()"
    },
    "SET_HELI_BLADES_FULL_SPEED": {
      "prefix": "SET_HELI_BLADES_FULL_SPEED()",
      "body": ["SET_HELI_BLADES_FULL_SPEED(${1:Vehicle vehicle})"],
      "description": "SET_HELI_BLADES_FULL_SPEED()"
    },
    "SET_HELI_BLADES_SPEED": {
      "prefix": "SET_HELI_BLADES_SPEED()",
      "body": ["SET_HELI_BLADES_SPEED(${1:Vehicle vehicle}, ${2:float speed})"],
      "description": "SET_HELI_BLADES_SPEED()"
    },
    "FORCE_SUB_THROTTLE_FOR_TIME": {
      "prefix": "FORCE_SUB_THROTTLE_FOR_TIME()",
      "body": [
        "FORCE_SUB_THROTTLE_FOR_TIME(${1:Vehicle vehicle}, ${2:float p1}, ${3:float p2})"
      ],
      "description": "FORCE_SUB_THROTTLE_FOR_TIME()"
    },
    "SET_VEHICLE_CAN_BE_TARGETTED": {
      "prefix": "SET_VEHICLE_CAN_BE_TARGETTED()",
      "body": [
        "SET_VEHICLE_CAN_BE_TARGETTED(${1:Vehicle vehicle}, ${2:BOOL state})"
      ],
      "description": "SET_VEHICLE_CAN_BE_TARGETTED()"
    },
    "SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER": {
      "prefix": "SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER()",
      "body": [
        "SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER()"
    },
    "SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED": {
      "prefix": "SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED()",
      "body": [
        "SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(${1:Vehicle vehicle}, ${2:BOOL state})"
      ],
      "description": "SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED()"
    },
    "SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS": {
      "prefix": "SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS()",
      "body": [
        "SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS()"
    },
    "SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER": {
      "prefix": "SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER()",
      "body": [
        "SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER()"
    },
    "SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED": {
      "prefix": "SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED()",
      "body": [
        "SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED()"
    },
    "GET_VEHICLE_DIRT_LEVEL": {
      "prefix": "GET_VEHICLE_DIRT_LEVEL()",
      "body": ["GET_VEHICLE_DIRT_LEVEL(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_DIRT_LEVEL()"
    },
    "SET_VEHICLE_DIRT_LEVEL": {
      "prefix": "SET_VEHICLE_DIRT_LEVEL()",
      "body": [
        "SET_VEHICLE_DIRT_LEVEL(${1:Vehicle vehicle}, ${2:float dirtLevel})"
      ],
      "description": "SET_VEHICLE_DIRT_LEVEL()"
    },
    "GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS": {
      "prefix": "GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS()",
      "body": ["GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS(${1:Vehicle vehicle})"],
      "description": "GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS()"
    },
    "IS_VEHICLE_DOOR_FULLY_OPEN": {
      "prefix": "IS_VEHICLE_DOOR_FULLY_OPEN()",
      "body": [
        "IS_VEHICLE_DOOR_FULLY_OPEN(${1:Vehicle vehicle}, ${2:int doorId})"
      ],
      "description": "IS_VEHICLE_DOOR_FULLY_OPEN()"
    },
    "SET_VEHICLE_ENGINE_ON": {
      "prefix": "SET_VEHICLE_ENGINE_ON()",
      "body": [
        "SET_VEHICLE_ENGINE_ON(${1:Vehicle vehicle}, ${2:BOOL value}, ${3:BOOL instantly}, ${4:BOOL disableAutoStart})"
      ],
      "description": "SET_VEHICLE_ENGINE_ON()"
    },
    "SET_VEHICLE_UNDRIVEABLE": {
      "prefix": "SET_VEHICLE_UNDRIVEABLE()",
      "body": ["SET_VEHICLE_UNDRIVEABLE(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_VEHICLE_UNDRIVEABLE()"
    },
    "SET_VEHICLE_PROVIDES_COVER": {
      "prefix": "SET_VEHICLE_PROVIDES_COVER()",
      "body": [
        "SET_VEHICLE_PROVIDES_COVER(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_PROVIDES_COVER()"
    },
    "SET_VEHICLE_DOOR_CONTROL": {
      "prefix": "SET_VEHICLE_DOOR_CONTROL()",
      "body": [
        "SET_VEHICLE_DOOR_CONTROL(${1:Vehicle vehicle}, ${2:int doorId}, ${3:int speed}, ${4:float angle})"
      ],
      "description": "SET_VEHICLE_DOOR_CONTROL()"
    },
    "SET_VEHICLE_DOOR_LATCHED": {
      "prefix": "SET_VEHICLE_DOOR_LATCHED()",
      "body": [
        "SET_VEHICLE_DOOR_LATCHED(${1:Vehicle vehicle}, ${2:int doorId}, ${3:BOOL p2}, ${4:BOOL p3}, ${5:BOOL p4})"
      ],
      "description": "SET_VEHICLE_DOOR_LATCHED()"
    },
    "GET_VEHICLE_DOOR_ANGLE_RATIO": {
      "prefix": "GET_VEHICLE_DOOR_ANGLE_RATIO()",
      "body": [
        "GET_VEHICLE_DOOR_ANGLE_RATIO(${1:Vehicle vehicle}, ${2:int doorId})"
      ],
      "description": "GET_VEHICLE_DOOR_ANGLE_RATIO()"
    },
    "GET_PED_USING_VEHICLE_DOOR": {
      "prefix": "GET_PED_USING_VEHICLE_DOOR()",
      "body": [
        "GET_PED_USING_VEHICLE_DOOR(${1:Vehicle vehicle}, ${2:int doord})"
      ],
      "description": "GET_PED_USING_VEHICLE_DOOR()"
    },
    "SET_VEHICLE_DOOR_SHUT": {
      "prefix": "SET_VEHICLE_DOOR_SHUT()",
      "body": [
        "SET_VEHICLE_DOOR_SHUT(${1:Vehicle vehicle}, ${2:int doorId}, ${3:BOOL closeInstantly})"
      ],
      "description": "SET_VEHICLE_DOOR_SHUT()"
    },
    "SET_VEHICLE_DOOR_BROKEN": {
      "prefix": "SET_VEHICLE_DOOR_BROKEN()",
      "body": [
        "SET_VEHICLE_DOOR_BROKEN(${1:Vehicle vehicle}, ${2:int doorId}, ${3:BOOL deleteDoor})"
      ],
      "description": "SET_VEHICLE_DOOR_BROKEN()"
    },
    "SET_VEHICLE_CAN_BREAK": {
      "prefix": "SET_VEHICLE_CAN_BREAK()",
      "body": ["SET_VEHICLE_CAN_BREAK(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_VEHICLE_CAN_BREAK()"
    },
    "DOES_VEHICLE_HAVE_ROOF": {
      "prefix": "DOES_VEHICLE_HAVE_ROOF()",
      "body": ["DOES_VEHICLE_HAVE_ROOF(${1:Vehicle vehicle})"],
      "description": "DOES_VEHICLE_HAVE_ROOF()"
    },
    "SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION": {
      "prefix": "SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION()",
      "body": ["SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION(${1:Any p0})"],
      "description": "SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION()"
    },
    "SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION": {
      "prefix": "SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION()",
      "body": ["SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION(${1:Any p0})"],
      "description": "SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION()"
    },
    "SET_CARJACK_MISSION_REMOVAL_PARAMETERS": {
      "prefix": "SET_CARJACK_MISSION_REMOVAL_PARAMETERS()",
      "body": [
        "SET_CARJACK_MISSION_REMOVAL_PARAMETERS(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "SET_CARJACK_MISSION_REMOVAL_PARAMETERS()"
    },
    "IS_BIG_VEHICLE": {
      "prefix": "IS_BIG_VEHICLE()",
      "body": ["IS_BIG_VEHICLE(${1:Vehicle vehicle})"],
      "description": "IS_BIG_VEHICLE()"
    },
    "GET_NUMBER_OF_VEHICLE_COLOURS": {
      "prefix": "GET_NUMBER_OF_VEHICLE_COLOURS()",
      "body": ["GET_NUMBER_OF_VEHICLE_COLOURS(${1:Vehicle vehicle})"],
      "description": "GET_NUMBER_OF_VEHICLE_COLOURS()"
    },
    "SET_VEHICLE_COLOUR_COMBINATION": {
      "prefix": "SET_VEHICLE_COLOUR_COMBINATION()",
      "body": [
        "SET_VEHICLE_COLOUR_COMBINATION(${1:Vehicle vehicle}, ${2:int colorCombination})"
      ],
      "description": "SET_VEHICLE_COLOUR_COMBINATION()"
    },
    "GET_VEHICLE_COLOUR_COMBINATION": {
      "prefix": "GET_VEHICLE_COLOUR_COMBINATION()",
      "body": ["GET_VEHICLE_COLOUR_COMBINATION(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_COLOUR_COMBINATION()"
    },
    "SET_VEHICLE_XENON_LIGHT_COLOR_INDEX": {
      "prefix": "SET_VEHICLE_XENON_LIGHT_COLOR_INDEX()",
      "body": [
        "SET_VEHICLE_XENON_LIGHT_COLOR_INDEX(${1:Vehicle vehicle}, ${2:int colorIndex})"
      ],
      "description": "SET_VEHICLE_XENON_LIGHT_COLOR_INDEX()"
    },
    "GET_VEHICLE_XENON_LIGHT_COLOR_INDEX": {
      "prefix": "GET_VEHICLE_XENON_LIGHT_COLOR_INDEX()",
      "body": ["GET_VEHICLE_XENON_LIGHT_COLOR_INDEX(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_XENON_LIGHT_COLOR_INDEX()"
    },
    "SET_VEHICLE_IS_CONSIDERED_BY_PLAYER": {
      "prefix": "SET_VEHICLE_IS_CONSIDERED_BY_PLAYER()",
      "body": [
        "SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_IS_CONSIDERED_BY_PLAYER()"
    },
    "SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP": {
      "prefix": "SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP()",
      "body": [
        "SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP()"
    },
    "SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON": {
      "prefix": "SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON()",
      "body": [
        "SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON()"
    },
    "SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS": {
      "prefix": "SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS()",
      "body": [
        "SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS()"
    },
    "SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS": {
      "prefix": "SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS()",
      "body": [
        "SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS()"
    },
    "GET_RANDOM_VEHICLE_MODEL_IN_MEMORY": {
      "prefix": "GET_RANDOM_VEHICLE_MODEL_IN_MEMORY()",
      "body": [
        "GET_RANDOM_VEHICLE_MODEL_IN_MEMORY(${1:BOOL p0}, ${2:Hash* modelHash}, ${3:int* successIndicator})"
      ],
      "description": "GET_RANDOM_VEHICLE_MODEL_IN_MEMORY()"
    },
    "GET_VEHICLE_DOOR_LOCK_STATUS": {
      "prefix": "GET_VEHICLE_DOOR_LOCK_STATUS()",
      "body": ["GET_VEHICLE_DOOR_LOCK_STATUS(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_DOOR_LOCK_STATUS()"
    },
    "GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS": {
      "prefix": "GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS()",
      "body": [
        "GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS(${1:Vehicle vehicle}, ${2:int doorId})"
      ],
      "description": "GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS()"
    },
    "IS_VEHICLE_DOOR_DAMAGED": {
      "prefix": "IS_VEHICLE_DOOR_DAMAGED()",
      "body": ["IS_VEHICLE_DOOR_DAMAGED(${1:Vehicle veh}, ${2:int doorID})"],
      "description": "IS_VEHICLE_DOOR_DAMAGED()"
    },
    "SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF": {
      "prefix": "SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF()",
      "body": [
        "SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF(${1:Vehicle vehicle}, ${2:int doorId}, ${3:BOOL isBreakable})"
      ],
      "description": "SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF()"
    },
    "IS_VEHICLE_BUMPER_BOUNCING": {
      "prefix": "IS_VEHICLE_BUMPER_BOUNCING()",
      "body": [
        "IS_VEHICLE_BUMPER_BOUNCING(${1:Vehicle vehicle}, ${2:BOOL frontBumper})"
      ],
      "description": "IS_VEHICLE_BUMPER_BOUNCING()"
    },
    "IS_VEHICLE_BUMPER_BROKEN_OFF": {
      "prefix": "IS_VEHICLE_BUMPER_BROKEN_OFF()",
      "body": [
        "IS_VEHICLE_BUMPER_BROKEN_OFF(${1:Vehicle vehicle}, ${2:BOOL frontBumper})"
      ],
      "description": "IS_VEHICLE_BUMPER_BROKEN_OFF()"
    },
    "IS_COP_VEHICLE_IN_AREA_3D": {
      "prefix": "IS_COP_VEHICLE_IN_AREA_3D()",
      "body": [
        "IS_COP_VEHICLE_IN_AREA_3D(${1:float x1}, ${2:float x2}, ${3:float y1}, ${4:float y2}, ${5:float z1}, ${6:float z2})"
      ],
      "description": "IS_COP_VEHICLE_IN_AREA_3D()"
    },
    "IS_VEHICLE_ON_ALL_WHEELS": {
      "prefix": "IS_VEHICLE_ON_ALL_WHEELS()",
      "body": ["IS_VEHICLE_ON_ALL_WHEELS(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_ON_ALL_WHEELS()"
    },
    "GET_VEHICLE_MODEL_VALUE": {
      "prefix": "GET_VEHICLE_MODEL_VALUE()",
      "body": ["GET_VEHICLE_MODEL_VALUE(${1:Hash vehicleModel})"],
      "description": "GET_VEHICLE_MODEL_VALUE()"
    },
    "GET_VEHICLE_LAYOUT_HASH": {
      "prefix": "GET_VEHICLE_LAYOUT_HASH()",
      "body": ["GET_VEHICLE_LAYOUT_HASH(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_LAYOUT_HASH()"
    },
    "GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT": {
      "prefix": "GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT()",
      "body": [
        "GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT(${1:Vehicle vehicle}, ${2:int p1})"
      ],
      "description": "GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT()"
    },
    "SET_RENDER_TRAIN_AS_DERAILED": {
      "prefix": "SET_RENDER_TRAIN_AS_DERAILED()",
      "body": [
        "SET_RENDER_TRAIN_AS_DERAILED(${1:Vehicle train}, ${2:BOOL toggle})"
      ],
      "description": "SET_RENDER_TRAIN_AS_DERAILED()"
    },
    "SET_VEHICLE_EXTRA_COLOURS": {
      "prefix": "SET_VEHICLE_EXTRA_COLOURS()",
      "body": [
        "SET_VEHICLE_EXTRA_COLOURS(${1:Vehicle vehicle}, ${2:int pearlescentColor}, ${3:int wheelColor})"
      ],
      "description": "SET_VEHICLE_EXTRA_COLOURS()"
    },
    "GET_VEHICLE_EXTRA_COLOURS": {
      "prefix": "GET_VEHICLE_EXTRA_COLOURS()",
      "body": [
        "GET_VEHICLE_EXTRA_COLOURS(${1:Vehicle vehicle}, ${2:int* pearlescentColor}, ${3:int* wheelColor})"
      ],
      "description": "GET_VEHICLE_EXTRA_COLOURS()"
    },
    "SET_VEHICLE_EXTRA_COLOUR_5": {
      "prefix": "SET_VEHICLE_EXTRA_COLOUR_5()",
      "body": [
        "SET_VEHICLE_EXTRA_COLOUR_5(${1:Vehicle vehicle}, ${2:int color})"
      ],
      "description": "SET_VEHICLE_EXTRA_COLOUR_5()"
    },
    "GET_VEHICLE_EXTRA_COLOUR_5": {
      "prefix": "GET_VEHICLE_EXTRA_COLOUR_5()",
      "body": [
        "GET_VEHICLE_EXTRA_COLOUR_5(${1:Vehicle vehicle}, ${2:int* color})"
      ],
      "description": "GET_VEHICLE_EXTRA_COLOUR_5()"
    },
    "SET_VEHICLE_EXTRA_COLOUR_6": {
      "prefix": "SET_VEHICLE_EXTRA_COLOUR_6()",
      "body": [
        "SET_VEHICLE_EXTRA_COLOUR_6(${1:Vehicle vehicle}, ${2:int color})"
      ],
      "description": "SET_VEHICLE_EXTRA_COLOUR_6()"
    },
    "GET_VEHICLE_EXTRA_COLOUR_6": {
      "prefix": "GET_VEHICLE_EXTRA_COLOUR_6()",
      "body": [
        "GET_VEHICLE_EXTRA_COLOUR_6(${1:Vehicle vehicle}, ${2:int* color})"
      ],
      "description": "GET_VEHICLE_EXTRA_COLOUR_6()"
    },
    "STOP_ALL_GARAGE_ACTIVITY": {
      "prefix": "STOP_ALL_GARAGE_ACTIVITY()",
      "body": ["STOP_ALL_GARAGE_ACTIVITY()"],
      "description": "STOP_ALL_GARAGE_ACTIVITY()"
    },
    "SET_VEHICLE_FIXED": {
      "prefix": "SET_VEHICLE_FIXED()",
      "body": ["SET_VEHICLE_FIXED(${1:Vehicle vehicle})"],
      "description": "SET_VEHICLE_FIXED()"
    },
    "SET_VEHICLE_DEFORMATION_FIXED": {
      "prefix": "SET_VEHICLE_DEFORMATION_FIXED()",
      "body": ["SET_VEHICLE_DEFORMATION_FIXED(${1:Vehicle vehicle})"],
      "description": "SET_VEHICLE_DEFORMATION_FIXED()"
    },
    "SET_VEHICLE_CAN_ENGINE_MISSFIRE": {
      "prefix": "SET_VEHICLE_CAN_ENGINE_MISSFIRE()",
      "body": [
        "SET_VEHICLE_CAN_ENGINE_MISSFIRE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_CAN_ENGINE_MISSFIRE()"
    },
    "SET_VEHICLE_CAN_LEAK_OIL": {
      "prefix": "SET_VEHICLE_CAN_LEAK_OIL()",
      "body": [
        "SET_VEHICLE_CAN_LEAK_OIL(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_CAN_LEAK_OIL()"
    },
    "SET_VEHICLE_CAN_LEAK_PETROL": {
      "prefix": "SET_VEHICLE_CAN_LEAK_PETROL()",
      "body": [
        "SET_VEHICLE_CAN_LEAK_PETROL(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_CAN_LEAK_PETROL()"
    },
    "SET_DISABLE_VEHICLE_PETROL_TANK_FIRES": {
      "prefix": "SET_DISABLE_VEHICLE_PETROL_TANK_FIRES()",
      "body": [
        "SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_DISABLE_VEHICLE_PETROL_TANK_FIRES()"
    },
    "SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE": {
      "prefix": "SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE()",
      "body": [
        "SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE()"
    },
    "SET_DISABLE_VEHICLE_ENGINE_FIRES": {
      "prefix": "SET_DISABLE_VEHICLE_ENGINE_FIRES()",
      "body": [
        "SET_DISABLE_VEHICLE_ENGINE_FIRES(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_DISABLE_VEHICLE_ENGINE_FIRES()"
    },
    "SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE": {
      "prefix": "SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE()",
      "body": [
        "SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE()"
    },
    "SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE": {
      "prefix": "SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE()",
      "body": [
        "SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE()"
    },
    "SET_DISABLE_PRETEND_OCCUPANTS": {
      "prefix": "SET_DISABLE_PRETEND_OCCUPANTS()",
      "body": [
        "SET_DISABLE_PRETEND_OCCUPANTS(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_DISABLE_PRETEND_OCCUPANTS()"
    },
    "REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA": {
      "prefix": "REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA()",
      "body": [
        "REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:Any p6})"
      ],
      "description": "REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA()"
    },
    "SET_VEHICLE_STEER_BIAS": {
      "prefix": "SET_VEHICLE_STEER_BIAS()",
      "body": ["SET_VEHICLE_STEER_BIAS(${1:Vehicle vehicle}, ${2:float value})"],
      "description": "SET_VEHICLE_STEER_BIAS()"
    },
    "IS_VEHICLE_EXTRA_TURNED_ON": {
      "prefix": "IS_VEHICLE_EXTRA_TURNED_ON()",
      "body": [
        "IS_VEHICLE_EXTRA_TURNED_ON(${1:Vehicle vehicle}, ${2:int extraId})"
      ],
      "description": "IS_VEHICLE_EXTRA_TURNED_ON()"
    },
    "SET_VEHICLE_EXTRA": {
      "prefix": "SET_VEHICLE_EXTRA()",
      "body": [
        "SET_VEHICLE_EXTRA(${1:Vehicle vehicle}, ${2:int extraId}, ${3:BOOL disable})"
      ],
      "description": "SET_VEHICLE_EXTRA()"
    },
    "DOES_EXTRA_EXIST": {
      "prefix": "DOES_EXTRA_EXIST()",
      "body": ["DOES_EXTRA_EXIST(${1:Vehicle vehicle}, ${2:int extraId})"],
      "description": "DOES_EXTRA_EXIST()"
    },
    "IS_EXTRA_BROKEN_OFF": {
      "prefix": "IS_EXTRA_BROKEN_OFF()",
      "body": ["IS_EXTRA_BROKEN_OFF(${1:Vehicle vehicle}, ${2:int extraId})"],
      "description": "IS_EXTRA_BROKEN_OFF()"
    },
    "SET_CONVERTIBLE_ROOF": {
      "prefix": "SET_CONVERTIBLE_ROOF()",
      "body": ["SET_CONVERTIBLE_ROOF(${1:Vehicle vehicle}, ${2:BOOL p1})"],
      "description": "SET_CONVERTIBLE_ROOF()"
    },
    "LOWER_CONVERTIBLE_ROOF": {
      "prefix": "LOWER_CONVERTIBLE_ROOF()",
      "body": [
        "LOWER_CONVERTIBLE_ROOF(${1:Vehicle vehicle}, ${2:BOOL instantlyLower})"
      ],
      "description": "LOWER_CONVERTIBLE_ROOF()"
    },
    "RAISE_CONVERTIBLE_ROOF": {
      "prefix": "RAISE_CONVERTIBLE_ROOF()",
      "body": [
        "RAISE_CONVERTIBLE_ROOF(${1:Vehicle vehicle}, ${2:BOOL instantlyRaise})"
      ],
      "description": "RAISE_CONVERTIBLE_ROOF()"
    },
    "GET_CONVERTIBLE_ROOF_STATE": {
      "prefix": "GET_CONVERTIBLE_ROOF_STATE()",
      "body": ["GET_CONVERTIBLE_ROOF_STATE(${1:Vehicle vehicle})"],
      "description": "GET_CONVERTIBLE_ROOF_STATE()"
    },
    "IS_VEHICLE_A_CONVERTIBLE": {
      "prefix": "IS_VEHICLE_A_CONVERTIBLE()",
      "body": ["IS_VEHICLE_A_CONVERTIBLE(${1:Vehicle vehicle}, ${2:BOOL p1})"],
      "description": "IS_VEHICLE_A_CONVERTIBLE()"
    },
    "TRANSFORM_TO_SUBMARINE": {
      "prefix": "TRANSFORM_TO_SUBMARINE()",
      "body": [
        "TRANSFORM_TO_SUBMARINE(${1:Vehicle vehicle}, ${2:BOOL noAnimation})"
      ],
      "description": "TRANSFORM_TO_SUBMARINE()"
    },
    "TRANSFORM_TO_CAR": {
      "prefix": "TRANSFORM_TO_CAR()",
      "body": ["TRANSFORM_TO_CAR(${1:Vehicle vehicle}, ${2:BOOL noAnimation})"],
      "description": "TRANSFORM_TO_CAR()"
    },
    "IS_VEHICLE_IN_SUBMARINE_MODE": {
      "prefix": "IS_VEHICLE_IN_SUBMARINE_MODE()",
      "body": ["IS_VEHICLE_IN_SUBMARINE_MODE(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_IN_SUBMARINE_MODE()"
    },
    "IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS": {
      "prefix": "IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS()",
      "body": ["IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS()"
    },
    "SET_VEHICLE_DAMAGE": {
      "prefix": "SET_VEHICLE_DAMAGE()",
      "body": [
        "SET_VEHICLE_DAMAGE(${1:Vehicle vehicle}, ${2:float xOffset}, ${3:float yOffset}, ${4:float zOffset}, ${5:float damage}, ${6:float radius}, ${7:BOOL focusOnModel})"
      ],
      "description": "SET_VEHICLE_DAMAGE()"
    },
    "SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE": {
      "prefix": "SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE()",
      "body": [
        "SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE()"
    },
    "GET_VEHICLE_ENGINE_HEALTH": {
      "prefix": "GET_VEHICLE_ENGINE_HEALTH()",
      "body": ["GET_VEHICLE_ENGINE_HEALTH(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_ENGINE_HEALTH()"
    },
    "SET_VEHICLE_ENGINE_HEALTH": {
      "prefix": "SET_VEHICLE_ENGINE_HEALTH()",
      "body": [
        "SET_VEHICLE_ENGINE_HEALTH(${1:Vehicle vehicle}, ${2:float health})"
      ],
      "description": "SET_VEHICLE_ENGINE_HEALTH()"
    },
    "SET_PLANE_ENGINE_HEALTH": {
      "prefix": "SET_PLANE_ENGINE_HEALTH()",
      "body": [
        "SET_PLANE_ENGINE_HEALTH(${1:Vehicle vehicle}, ${2:float health})"
      ],
      "description": "SET_PLANE_ENGINE_HEALTH()"
    },
    "GET_VEHICLE_PETROL_TANK_HEALTH": {
      "prefix": "GET_VEHICLE_PETROL_TANK_HEALTH()",
      "body": ["GET_VEHICLE_PETROL_TANK_HEALTH(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_PETROL_TANK_HEALTH()"
    },
    "SET_VEHICLE_PETROL_TANK_HEALTH": {
      "prefix": "SET_VEHICLE_PETROL_TANK_HEALTH()",
      "body": [
        "SET_VEHICLE_PETROL_TANK_HEALTH(${1:Vehicle vehicle}, ${2:float health})"
      ],
      "description": "SET_VEHICLE_PETROL_TANK_HEALTH()"
    },
    "IS_VEHICLE_STUCK_TIMER_UP": {
      "prefix": "IS_VEHICLE_STUCK_TIMER_UP()",
      "body": [
        "IS_VEHICLE_STUCK_TIMER_UP(${1:Vehicle vehicle}, ${2:int p1}, ${3:int ms})"
      ],
      "description": "IS_VEHICLE_STUCK_TIMER_UP()"
    },
    "RESET_VEHICLE_STUCK_TIMER": {
      "prefix": "RESET_VEHICLE_STUCK_TIMER()",
      "body": [
        "RESET_VEHICLE_STUCK_TIMER(${1:Vehicle vehicle}, ${2:int nullAttributes})"
      ],
      "description": "RESET_VEHICLE_STUCK_TIMER()"
    },
    "IS_VEHICLE_DRIVEABLE": {
      "prefix": "IS_VEHICLE_DRIVEABLE()",
      "body": [
        "IS_VEHICLE_DRIVEABLE(${1:Vehicle vehicle}, ${2:BOOL isOnFireCheck})"
      ],
      "description": "IS_VEHICLE_DRIVEABLE()"
    },
    "SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER": {
      "prefix": "SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER()",
      "body": [
        "SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(${1:Vehicle vehicle}, ${2:BOOL owned})"
      ],
      "description": "SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER()"
    },
    "SET_VEHICLE_NEEDS_TO_BE_HOTWIRED": {
      "prefix": "SET_VEHICLE_NEEDS_TO_BE_HOTWIRED()",
      "body": [
        "SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_NEEDS_TO_BE_HOTWIRED()"
    },
    "SET_VEHICLE_BLIP_THROTTLE_RANDOMLY": {
      "prefix": "SET_VEHICLE_BLIP_THROTTLE_RANDOMLY()",
      "body": [
        "SET_VEHICLE_BLIP_THROTTLE_RANDOMLY(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_VEHICLE_BLIP_THROTTLE_RANDOMLY()"
    },
    "SET_POLICE_FOCUS_WILL_TRACK_VEHICLE": {
      "prefix": "SET_POLICE_FOCUS_WILL_TRACK_VEHICLE()",
      "body": [
        "SET_POLICE_FOCUS_WILL_TRACK_VEHICLE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_POLICE_FOCUS_WILL_TRACK_VEHICLE()"
    },
    "START_VEHICLE_HORN": {
      "prefix": "START_VEHICLE_HORN()",
      "body": [
        "START_VEHICLE_HORN(${1:Vehicle vehicle}, ${2:int duration}, ${3:Hash mode}, ${4:BOOL forever})"
      ],
      "description": "START_VEHICLE_HORN()"
    },
    "SET_VEHICLE_IN_CAR_MOD_SHOP": {
      "prefix": "SET_VEHICLE_IN_CAR_MOD_SHOP()",
      "body": [
        "SET_VEHICLE_IN_CAR_MOD_SHOP(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_IN_CAR_MOD_SHOP()"
    },
    "SET_VEHICLE_HAS_STRONG_AXLES": {
      "prefix": "SET_VEHICLE_HAS_STRONG_AXLES()",
      "body": [
        "SET_VEHICLE_HAS_STRONG_AXLES(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_HAS_STRONG_AXLES()"
    },
    "GET_VEHICLE_DEFORMATION_AT_POS": {
      "prefix": "GET_VEHICLE_DEFORMATION_AT_POS()",
      "body": [
        "GET_VEHICLE_DEFORMATION_AT_POS(${1:Vehicle vehicle}, ${2:float offsetX}, ${3:float offsetY}, ${4:float offsetZ})"
      ],
      "description": "GET_VEHICLE_DEFORMATION_AT_POS()"
    },
    "SET_VEHICLE_LIVERY": {
      "prefix": "SET_VEHICLE_LIVERY()",
      "body": ["SET_VEHICLE_LIVERY(${1:Vehicle vehicle}, ${2:int livery})"],
      "description": "SET_VEHICLE_LIVERY()"
    },
    "GET_VEHICLE_LIVERY": {
      "prefix": "GET_VEHICLE_LIVERY()",
      "body": ["GET_VEHICLE_LIVERY(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_LIVERY()"
    },
    "GET_VEHICLE_LIVERY_COUNT": {
      "prefix": "GET_VEHICLE_LIVERY_COUNT()",
      "body": ["GET_VEHICLE_LIVERY_COUNT(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_LIVERY_COUNT()"
    },
    "SET_VEHICLE_LIVERY2": {
      "prefix": "SET_VEHICLE_LIVERY2()",
      "body": ["SET_VEHICLE_LIVERY2(${1:Vehicle vehicle}, ${2:int livery})"],
      "description": "SET_VEHICLE_LIVERY2()"
    },
    "GET_VEHICLE_LIVERY2": {
      "prefix": "GET_VEHICLE_LIVERY2()",
      "body": ["GET_VEHICLE_LIVERY2(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_LIVERY2()"
    },
    "GET_VEHICLE_LIVERY2_COUNT": {
      "prefix": "GET_VEHICLE_LIVERY2_COUNT()",
      "body": ["GET_VEHICLE_LIVERY2_COUNT(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_LIVERY2_COUNT()"
    },
    "IS_VEHICLE_WINDOW_INTACT": {
      "prefix": "IS_VEHICLE_WINDOW_INTACT()",
      "body": [
        "IS_VEHICLE_WINDOW_INTACT(${1:Vehicle vehicle}, ${2:int windowIndex})"
      ],
      "description": "IS_VEHICLE_WINDOW_INTACT()"
    },
    "ARE_ALL_VEHICLE_WINDOWS_INTACT": {
      "prefix": "ARE_ALL_VEHICLE_WINDOWS_INTACT()",
      "body": ["ARE_ALL_VEHICLE_WINDOWS_INTACT(${1:Vehicle vehicle})"],
      "description": "ARE_ALL_VEHICLE_WINDOWS_INTACT()"
    },
    "ARE_ANY_VEHICLE_SEATS_FREE": {
      "prefix": "ARE_ANY_VEHICLE_SEATS_FREE()",
      "body": ["ARE_ANY_VEHICLE_SEATS_FREE(${1:Vehicle vehicle})"],
      "description": "ARE_ANY_VEHICLE_SEATS_FREE()"
    },
    "RESET_VEHICLE_WHEELS": {
      "prefix": "RESET_VEHICLE_WHEELS()",
      "body": ["RESET_VEHICLE_WHEELS(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "RESET_VEHICLE_WHEELS()"
    },
    "IS_HELI_PART_BROKEN": {
      "prefix": "IS_HELI_PART_BROKEN()",
      "body": [
        "IS_HELI_PART_BROKEN(${1:Vehicle vehicle}, ${2:BOOL p1}, ${3:BOOL p2}, ${4:BOOL p3})"
      ],
      "description": "IS_HELI_PART_BROKEN()"
    },
    "GET_HELI_MAIN_ROTOR_HEALTH": {
      "prefix": "GET_HELI_MAIN_ROTOR_HEALTH()",
      "body": ["GET_HELI_MAIN_ROTOR_HEALTH(${1:Vehicle vehicle})"],
      "description": "GET_HELI_MAIN_ROTOR_HEALTH()"
    },
    "GET_HELI_TAIL_ROTOR_HEALTH": {
      "prefix": "GET_HELI_TAIL_ROTOR_HEALTH()",
      "body": ["GET_HELI_TAIL_ROTOR_HEALTH(${1:Vehicle vehicle})"],
      "description": "GET_HELI_TAIL_ROTOR_HEALTH()"
    },
    "GET_HELI_TAIL_BOOM_HEALTH": {
      "prefix": "GET_HELI_TAIL_BOOM_HEALTH()",
      "body": ["GET_HELI_TAIL_BOOM_HEALTH(${1:Vehicle vehicle})"],
      "description": "GET_HELI_TAIL_BOOM_HEALTH()"
    },
    "SET_HELI_MAIN_ROTOR_HEALTH": {
      "prefix": "SET_HELI_MAIN_ROTOR_HEALTH()",
      "body": [
        "SET_HELI_MAIN_ROTOR_HEALTH(${1:Vehicle vehicle}, ${2:float health})"
      ],
      "description": "SET_HELI_MAIN_ROTOR_HEALTH()"
    },
    "SET_HELI_TAIL_ROTOR_HEALTH": {
      "prefix": "SET_HELI_TAIL_ROTOR_HEALTH()",
      "body": [
        "SET_HELI_TAIL_ROTOR_HEALTH(${1:Vehicle vehicle}, ${2:float health})"
      ],
      "description": "SET_HELI_TAIL_ROTOR_HEALTH()"
    },
    "SET_HELI_TAIL_BOOM_CAN_BREAK_OFF": {
      "prefix": "SET_HELI_TAIL_BOOM_CAN_BREAK_OFF()",
      "body": [
        "SET_HELI_TAIL_BOOM_CAN_BREAK_OFF(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_HELI_TAIL_BOOM_CAN_BREAK_OFF()"
    },
    "SET_VEHICLE_NAME_DEBUG": {
      "prefix": "SET_VEHICLE_NAME_DEBUG()",
      "body": [
        "SET_VEHICLE_NAME_DEBUG(${1:Vehicle vehicle}, ${2:const char* name})"
      ],
      "description": "SET_VEHICLE_NAME_DEBUG()"
    },
    "SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE": {
      "prefix": "SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE()",
      "body": [
        "SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE()"
    },
    "SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH": {
      "prefix": "SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH()",
      "body": [
        "SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH()"
    },
    "SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT": {
      "prefix": "SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT()",
      "body": [
        "SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT()"
    },
    "SET_VEHICLE_DISABLE_TOWING": {
      "prefix": "SET_VEHICLE_DISABLE_TOWING()",
      "body": [
        "SET_VEHICLE_DISABLE_TOWING(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_DISABLE_TOWING()"
    },
    "GET_VEHICLE_HAS_LANDING_GEAR": {
      "prefix": "GET_VEHICLE_HAS_LANDING_GEAR()",
      "body": ["GET_VEHICLE_HAS_LANDING_GEAR(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_HAS_LANDING_GEAR()"
    },
    "CONTROL_LANDING_GEAR": {
      "prefix": "CONTROL_LANDING_GEAR()",
      "body": ["CONTROL_LANDING_GEAR(${1:Vehicle vehicle}, ${2:int state})"],
      "description": "CONTROL_LANDING_GEAR()"
    },
    "GET_LANDING_GEAR_STATE": {
      "prefix": "GET_LANDING_GEAR_STATE()",
      "body": ["GET_LANDING_GEAR_STATE(${1:Vehicle vehicle})"],
      "description": "GET_LANDING_GEAR_STATE()"
    },
    "IS_ANY_VEHICLE_NEAR_POINT": {
      "prefix": "IS_ANY_VEHICLE_NEAR_POINT()",
      "body": [
        "IS_ANY_VEHICLE_NEAR_POINT(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius})"
      ],
      "description": "IS_ANY_VEHICLE_NEAR_POINT()"
    },
    "REQUEST_VEHICLE_HIGH_DETAIL_MODEL": {
      "prefix": "REQUEST_VEHICLE_HIGH_DETAIL_MODEL()",
      "body": ["REQUEST_VEHICLE_HIGH_DETAIL_MODEL(${1:Vehicle vehicle})"],
      "description": "REQUEST_VEHICLE_HIGH_DETAIL_MODEL()"
    },
    "_GET_VEHICLE_MODEL_NUM_DRIVE_GEARS": {
      "prefix": "_GET_VEHICLE_MODEL_NUM_DRIVE_GEARS()",
      "body": ["_GET_VEHICLE_MODEL_NUM_DRIVE_GEARS(${1:Hash vehicleModel})"],
      "description": "_GET_VEHICLE_MODEL_NUM_DRIVE_GEARS()"
    },
    "_GET_VEHICLE_MAX_DRIVE_GEAR_COUNT": {
      "prefix": "_GET_VEHICLE_MAX_DRIVE_GEAR_COUNT()",
      "body": ["_GET_VEHICLE_MAX_DRIVE_GEAR_COUNT(${1:Vehicle vehicle})"],
      "description": "_GET_VEHICLE_MAX_DRIVE_GEAR_COUNT()"
    },
    "_GET_VEHICLE_CURRENT_DRIVE_GEAR": {
      "prefix": "_GET_VEHICLE_CURRENT_DRIVE_GEAR()",
      "body": ["_GET_VEHICLE_CURRENT_DRIVE_GEAR(${1:Vehicle vehicle})"],
      "description": "_GET_VEHICLE_CURRENT_DRIVE_GEAR()"
    },
    "_GET_VEHICLE_CURRENT_REV_RATIO": {
      "prefix": "_GET_VEHICLE_CURRENT_REV_RATIO()",
      "body": ["_GET_VEHICLE_CURRENT_REV_RATIO(${1:Vehicle vehicle})"],
      "description": "_GET_VEHICLE_CURRENT_REV_RATIO()"
    },
    "REMOVE_VEHICLE_HIGH_DETAIL_MODEL": {
      "prefix": "REMOVE_VEHICLE_HIGH_DETAIL_MODEL()",
      "body": ["REMOVE_VEHICLE_HIGH_DETAIL_MODEL(${1:Vehicle vehicle})"],
      "description": "REMOVE_VEHICLE_HIGH_DETAIL_MODEL()"
    },
    "IS_VEHICLE_HIGH_DETAIL": {
      "prefix": "IS_VEHICLE_HIGH_DETAIL()",
      "body": ["IS_VEHICLE_HIGH_DETAIL(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_HIGH_DETAIL()"
    },
    "REQUEST_VEHICLE_ASSET": {
      "prefix": "REQUEST_VEHICLE_ASSET()",
      "body": [
        "REQUEST_VEHICLE_ASSET(${1:Hash vehicleHash}, ${2:int vehicleAsset})"
      ],
      "description": "REQUEST_VEHICLE_ASSET()"
    },
    "HAS_VEHICLE_ASSET_LOADED": {
      "prefix": "HAS_VEHICLE_ASSET_LOADED()",
      "body": ["HAS_VEHICLE_ASSET_LOADED(${1:int vehicleAsset})"],
      "description": "HAS_VEHICLE_ASSET_LOADED()"
    },
    "REMOVE_VEHICLE_ASSET": {
      "prefix": "REMOVE_VEHICLE_ASSET()",
      "body": ["REMOVE_VEHICLE_ASSET(${1:int vehicleAsset})"],
      "description": "REMOVE_VEHICLE_ASSET()"
    },
    "SET_VEHICLE_TOW_TRUCK_ARM_POSITION": {
      "prefix": "SET_VEHICLE_TOW_TRUCK_ARM_POSITION()",
      "body": [
        "SET_VEHICLE_TOW_TRUCK_ARM_POSITION(${1:Vehicle vehicle}, ${2:float position})"
      ],
      "description": "SET_VEHICLE_TOW_TRUCK_ARM_POSITION()"
    },
    "_SET_ATTACHED_VEHICLE_TO_TOW_TRUCK_ARM": {
      "prefix": "_SET_ATTACHED_VEHICLE_TO_TOW_TRUCK_ARM()",
      "body": [
        "_SET_ATTACHED_VEHICLE_TO_TOW_TRUCK_ARM(${1:Vehicle towTruck}, ${2:Vehicle vehicle})"
      ],
      "description": "_SET_ATTACHED_VEHICLE_TO_TOW_TRUCK_ARM()"
    },
    "ATTACH_VEHICLE_TO_TOW_TRUCK": {
      "prefix": "ATTACH_VEHICLE_TO_TOW_TRUCK()",
      "body": [
        "ATTACH_VEHICLE_TO_TOW_TRUCK(${1:Vehicle towTruck}, ${2:Vehicle vehicle}, ${3:BOOL rear}, ${4:float hookOffsetX}, ${5:float hookOffsetY}, ${6:float hookOffsetZ})"
      ],
      "description": "ATTACH_VEHICLE_TO_TOW_TRUCK()"
    },
    "DETACH_VEHICLE_FROM_TOW_TRUCK": {
      "prefix": "DETACH_VEHICLE_FROM_TOW_TRUCK()",
      "body": [
        "DETACH_VEHICLE_FROM_TOW_TRUCK(${1:Vehicle towTruck}, ${2:Vehicle vehicle})"
      ],
      "description": "DETACH_VEHICLE_FROM_TOW_TRUCK()"
    },
    "DETACH_VEHICLE_FROM_ANY_TOW_TRUCK": {
      "prefix": "DETACH_VEHICLE_FROM_ANY_TOW_TRUCK()",
      "body": ["DETACH_VEHICLE_FROM_ANY_TOW_TRUCK(${1:Vehicle vehicle})"],
      "description": "DETACH_VEHICLE_FROM_ANY_TOW_TRUCK()"
    },
    "IS_VEHICLE_ATTACHED_TO_TOW_TRUCK": {
      "prefix": "IS_VEHICLE_ATTACHED_TO_TOW_TRUCK()",
      "body": [
        "IS_VEHICLE_ATTACHED_TO_TOW_TRUCK(${1:Vehicle towTruck}, ${2:Vehicle vehicle})"
      ],
      "description": "IS_VEHICLE_ATTACHED_TO_TOW_TRUCK()"
    },
    "GET_ENTITY_ATTACHED_TO_TOW_TRUCK": {
      "prefix": "GET_ENTITY_ATTACHED_TO_TOW_TRUCK()",
      "body": ["GET_ENTITY_ATTACHED_TO_TOW_TRUCK(${1:Vehicle towTruck})"],
      "description": "GET_ENTITY_ATTACHED_TO_TOW_TRUCK()"
    },
    "SET_VEHICLE_AUTOMATICALLY_ATTACHES": {
      "prefix": "SET_VEHICLE_AUTOMATICALLY_ATTACHES()",
      "body": [
        "SET_VEHICLE_AUTOMATICALLY_ATTACHES(${1:Vehicle vehicle}, ${2:BOOL p1}, ${3:Any p2})"
      ],
      "description": "SET_VEHICLE_AUTOMATICALLY_ATTACHES()"
    },
    "SET_VEHICLE_BULLDOZER_ARM_POSITION": {
      "prefix": "SET_VEHICLE_BULLDOZER_ARM_POSITION()",
      "body": [
        "SET_VEHICLE_BULLDOZER_ARM_POSITION(${1:Vehicle vehicle}, ${2:float position}, ${3:BOOL p2})"
      ],
      "description": "SET_VEHICLE_BULLDOZER_ARM_POSITION()"
    },
    "SET_VEHICLE_TANK_TURRET_POSITION": {
      "prefix": "SET_VEHICLE_TANK_TURRET_POSITION()",
      "body": [
        "SET_VEHICLE_TANK_TURRET_POSITION(${1:Vehicle vehicle}, ${2:float position}, ${3:BOOL p2})"
      ],
      "description": "SET_VEHICLE_TANK_TURRET_POSITION()"
    },
    "SET_VEHICLE_TURRET_TARGET": {
      "prefix": "SET_VEHICLE_TURRET_TARGET()",
      "body": [
        "SET_VEHICLE_TURRET_TARGET(${1:Vehicle vehicle}, ${2:BOOL p1}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:BOOL p5})"
      ],
      "description": "SET_VEHICLE_TURRET_TARGET()"
    },
    "SET_VEHICLE_TANK_STATIONARY": {
      "prefix": "SET_VEHICLE_TANK_STATIONARY()",
      "body": ["SET_VEHICLE_TANK_STATIONARY(${1:Vehicle vehicle}, ${2:BOOL p1})"],
      "description": "SET_VEHICLE_TANK_STATIONARY()"
    },
    "SET_VEHICLE_TURRET_SPEED_THIS_FRAME": {
      "prefix": "SET_VEHICLE_TURRET_SPEED_THIS_FRAME()",
      "body": [
        "SET_VEHICLE_TURRET_SPEED_THIS_FRAME(${1:Vehicle vehicle}, ${2:float speed})"
      ],
      "description": "SET_VEHICLE_TURRET_SPEED_THIS_FRAME()"
    },
    "DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME": {
      "prefix": "DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME()",
      "body": [
        "DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME(${1:Vehicle vehicle})"
      ],
      "description": "DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME()"
    },
    "SET_VEHICLE_FLIGHT_NOZZLE_POSITION": {
      "prefix": "SET_VEHICLE_FLIGHT_NOZZLE_POSITION()",
      "body": [
        "SET_VEHICLE_FLIGHT_NOZZLE_POSITION(${1:Vehicle vehicle}, ${2:float angleRatio})"
      ],
      "description": "SET_VEHICLE_FLIGHT_NOZZLE_POSITION()"
    },
    "SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE": {
      "prefix": "SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE()",
      "body": [
        "SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE(${1:Vehicle vehicle}, ${2:float angle})"
      ],
      "description": "SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE()"
    },
    "GET_VEHICLE_FLIGHT_NOZZLE_POSITION": {
      "prefix": "GET_VEHICLE_FLIGHT_NOZZLE_POSITION()",
      "body": ["GET_VEHICLE_FLIGHT_NOZZLE_POSITION(${1:Vehicle plane})"],
      "description": "GET_VEHICLE_FLIGHT_NOZZLE_POSITION()"
    },
    "SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION": {
      "prefix": "SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION()",
      "body": [
        "SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION()"
    },
    "GENERATE_VEHICLE_CREATION_POS_FROM_PATHS": {
      "prefix": "GENERATE_VEHICLE_CREATION_POS_FROM_PATHS()",
      "body": [
        "GENERATE_VEHICLE_CREATION_POS_FROM_PATHS(${1:Vector3* outVec}, ${2:Any p1}, ${3:Vector3* outVec1}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5}, ${7:Any p6}, ${8:Any p7}, ${9:Any p8})"
      ],
      "description": "GENERATE_VEHICLE_CREATION_POS_FROM_PATHS()"
    },
    "SET_VEHICLE_BURNOUT": {
      "prefix": "SET_VEHICLE_BURNOUT()",
      "body": ["SET_VEHICLE_BURNOUT(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_VEHICLE_BURNOUT()"
    },
    "IS_VEHICLE_IN_BURNOUT": {
      "prefix": "IS_VEHICLE_IN_BURNOUT()",
      "body": ["IS_VEHICLE_IN_BURNOUT(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_IN_BURNOUT()"
    },
    "SET_VEHICLE_REDUCE_GRIP": {
      "prefix": "SET_VEHICLE_REDUCE_GRIP()",
      "body": ["SET_VEHICLE_REDUCE_GRIP(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_VEHICLE_REDUCE_GRIP()"
    },
    "SET_VEHICLE_REDUCE_GRIP_LEVEL": {
      "prefix": "SET_VEHICLE_REDUCE_GRIP_LEVEL()",
      "body": [
        "SET_VEHICLE_REDUCE_GRIP_LEVEL(${1:Vehicle vehicle}, ${2:int val})"
      ],
      "description": "SET_VEHICLE_REDUCE_GRIP_LEVEL()"
    },
    "SET_VEHICLE_INDICATOR_LIGHTS": {
      "prefix": "SET_VEHICLE_INDICATOR_LIGHTS()",
      "body": [
        "SET_VEHICLE_INDICATOR_LIGHTS(${1:Vehicle vehicle}, ${2:int turnSignal}, ${3:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_INDICATOR_LIGHTS()"
    },
    "SET_VEHICLE_BRAKE_LIGHTS": {
      "prefix": "SET_VEHICLE_BRAKE_LIGHTS()",
      "body": [
        "SET_VEHICLE_BRAKE_LIGHTS(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_BRAKE_LIGHTS()"
    },
    "SET_VEHICLE_TAIL_LIGHTS": {
      "prefix": "SET_VEHICLE_TAIL_LIGHTS()",
      "body": ["SET_VEHICLE_TAIL_LIGHTS(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_VEHICLE_TAIL_LIGHTS()"
    },
    "SET_VEHICLE_HANDBRAKE": {
      "prefix": "SET_VEHICLE_HANDBRAKE()",
      "body": ["SET_VEHICLE_HANDBRAKE(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_VEHICLE_HANDBRAKE()"
    },
    "SET_VEHICLE_BRAKE": {
      "prefix": "SET_VEHICLE_BRAKE()",
      "body": ["SET_VEHICLE_BRAKE(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_VEHICLE_BRAKE()"
    },
    "INSTANTLY_FILL_VEHICLE_POPULATION": {
      "prefix": "INSTANTLY_FILL_VEHICLE_POPULATION()",
      "body": ["INSTANTLY_FILL_VEHICLE_POPULATION()"],
      "description": "INSTANTLY_FILL_VEHICLE_POPULATION()"
    },
    "HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED": {
      "prefix": "HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED()",
      "body": ["HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED()"],
      "description": "HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED()"
    },
    "NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL": {
      "prefix": "NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL()",
      "body": [
        "NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(${1:BOOL toggle})"
      ],
      "description": "NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL()"
    },
    "NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL": {
      "prefix": "NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL()",
      "body": ["NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL(${1:int p0})"],
      "description": "NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL()"
    },
    "GET_VEHICLE_TRAILER_VEHICLE": {
      "prefix": "GET_VEHICLE_TRAILER_VEHICLE()",
      "body": [
        "GET_VEHICLE_TRAILER_VEHICLE(${1:Vehicle vehicle}, ${2:Vehicle* trailer})"
      ],
      "description": "GET_VEHICLE_TRAILER_VEHICLE()"
    },
    "_GET_VEHICLE_TRAILER_PARENT_VEHICLE": {
      "prefix": "_GET_VEHICLE_TRAILER_PARENT_VEHICLE()",
      "body": ["_GET_VEHICLE_TRAILER_PARENT_VEHICLE(${1:Vehicle trailer})"],
      "description": "_GET_VEHICLE_TRAILER_PARENT_VEHICLE()"
    },
    "SET_VEHICLE_USES_LARGE_REAR_RAMP": {
      "prefix": "SET_VEHICLE_USES_LARGE_REAR_RAMP()",
      "body": [
        "SET_VEHICLE_USES_LARGE_REAR_RAMP(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_USES_LARGE_REAR_RAMP()"
    },
    "SET_VEHICLE_RUDDER_BROKEN": {
      "prefix": "SET_VEHICLE_RUDDER_BROKEN()",
      "body": [
        "SET_VEHICLE_RUDDER_BROKEN(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_RUDDER_BROKEN()"
    },
    "SET_CONVERTIBLE_ROOF_LATCH_STATE": {
      "prefix": "SET_CONVERTIBLE_ROOF_LATCH_STATE()",
      "body": [
        "SET_CONVERTIBLE_ROOF_LATCH_STATE(${1:Vehicle vehicle}, ${2:BOOL state})"
      ],
      "description": "SET_CONVERTIBLE_ROOF_LATCH_STATE()"
    },
    "GET_VEHICLE_ESTIMATED_MAX_SPEED": {
      "prefix": "GET_VEHICLE_ESTIMATED_MAX_SPEED()",
      "body": ["GET_VEHICLE_ESTIMATED_MAX_SPEED(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_ESTIMATED_MAX_SPEED()"
    },
    "GET_VEHICLE_MAX_BRAKING": {
      "prefix": "GET_VEHICLE_MAX_BRAKING()",
      "body": ["GET_VEHICLE_MAX_BRAKING(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_MAX_BRAKING()"
    },
    "GET_VEHICLE_MAX_TRACTION": {
      "prefix": "GET_VEHICLE_MAX_TRACTION()",
      "body": ["GET_VEHICLE_MAX_TRACTION(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_MAX_TRACTION()"
    },
    "GET_VEHICLE_ACCELERATION": {
      "prefix": "GET_VEHICLE_ACCELERATION()",
      "body": ["GET_VEHICLE_ACCELERATION(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_ACCELERATION()"
    },
    "GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED": {
      "prefix": "GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED()",
      "body": ["GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED(${1:Hash modelHash})"],
      "description": "GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED()"
    },
    "GET_VEHICLE_MODEL_MAX_BRAKING": {
      "prefix": "GET_VEHICLE_MODEL_MAX_BRAKING()",
      "body": ["GET_VEHICLE_MODEL_MAX_BRAKING(${1:Hash modelHash})"],
      "description": "GET_VEHICLE_MODEL_MAX_BRAKING()"
    },
    "GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS": {
      "prefix": "GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS()",
      "body": ["GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS(${1:Hash modelHash})"],
      "description": "GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS()"
    },
    "GET_VEHICLE_MODEL_MAX_TRACTION": {
      "prefix": "GET_VEHICLE_MODEL_MAX_TRACTION()",
      "body": ["GET_VEHICLE_MODEL_MAX_TRACTION(${1:Hash modelHash})"],
      "description": "GET_VEHICLE_MODEL_MAX_TRACTION()"
    },
    "GET_VEHICLE_MODEL_ACCELERATION": {
      "prefix": "GET_VEHICLE_MODEL_ACCELERATION()",
      "body": ["GET_VEHICLE_MODEL_ACCELERATION(${1:Hash modelHash})"],
      "description": "GET_VEHICLE_MODEL_ACCELERATION()"
    },
    "GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS": {
      "prefix": "GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS()",
      "body": ["GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS(${1:Hash modelHash})"],
      "description": "GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS()"
    },
    "GET_FLYING_VEHICLE_MODEL_AGILITY": {
      "prefix": "GET_FLYING_VEHICLE_MODEL_AGILITY()",
      "body": ["GET_FLYING_VEHICLE_MODEL_AGILITY(${1:Hash modelHash})"],
      "description": "GET_FLYING_VEHICLE_MODEL_AGILITY()"
    },
    "GET_BOAT_VEHICLE_MODEL_AGILITY": {
      "prefix": "GET_BOAT_VEHICLE_MODEL_AGILITY()",
      "body": ["GET_BOAT_VEHICLE_MODEL_AGILITY(${1:Hash modelHash})"],
      "description": "GET_BOAT_VEHICLE_MODEL_AGILITY()"
    },
    "GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED": {
      "prefix": "GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED()",
      "body": ["GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED(${1:int vehicleClass})"],
      "description": "GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED()"
    },
    "GET_VEHICLE_CLASS_MAX_TRACTION": {
      "prefix": "GET_VEHICLE_CLASS_MAX_TRACTION()",
      "body": ["GET_VEHICLE_CLASS_MAX_TRACTION(${1:int vehicleClass})"],
      "description": "GET_VEHICLE_CLASS_MAX_TRACTION()"
    },
    "GET_VEHICLE_CLASS_MAX_AGILITY": {
      "prefix": "GET_VEHICLE_CLASS_MAX_AGILITY()",
      "body": ["GET_VEHICLE_CLASS_MAX_AGILITY(${1:int vehicleClass})"],
      "description": "GET_VEHICLE_CLASS_MAX_AGILITY()"
    },
    "GET_VEHICLE_CLASS_MAX_ACCELERATION": {
      "prefix": "GET_VEHICLE_CLASS_MAX_ACCELERATION()",
      "body": ["GET_VEHICLE_CLASS_MAX_ACCELERATION(${1:int vehicleClass})"],
      "description": "GET_VEHICLE_CLASS_MAX_ACCELERATION()"
    },
    "GET_VEHICLE_CLASS_MAX_BRAKING": {
      "prefix": "GET_VEHICLE_CLASS_MAX_BRAKING()",
      "body": ["GET_VEHICLE_CLASS_MAX_BRAKING(${1:int vehicleClass})"],
      "description": "GET_VEHICLE_CLASS_MAX_BRAKING()"
    },
    "ADD_ROAD_NODE_SPEED_ZONE": {
      "prefix": "ADD_ROAD_NODE_SPEED_ZONE()",
      "body": [
        "ADD_ROAD_NODE_SPEED_ZONE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:float speed}, ${6:BOOL p5})"
      ],
      "description": "ADD_ROAD_NODE_SPEED_ZONE()"
    },
    "REMOVE_ROAD_NODE_SPEED_ZONE": {
      "prefix": "REMOVE_ROAD_NODE_SPEED_ZONE()",
      "body": ["REMOVE_ROAD_NODE_SPEED_ZONE(${1:int speedzone})"],
      "description": "REMOVE_ROAD_NODE_SPEED_ZONE()"
    },
    "OPEN_BOMB_BAY_DOORS": {
      "prefix": "OPEN_BOMB_BAY_DOORS()",
      "body": ["OPEN_BOMB_BAY_DOORS(${1:Vehicle vehicle})"],
      "description": "OPEN_BOMB_BAY_DOORS()"
    },
    "CLOSE_BOMB_BAY_DOORS": {
      "prefix": "CLOSE_BOMB_BAY_DOORS()",
      "body": ["CLOSE_BOMB_BAY_DOORS(${1:Vehicle vehicle})"],
      "description": "CLOSE_BOMB_BAY_DOORS()"
    },
    "GET_ARE_BOMB_BAY_DOORS_OPEN": {
      "prefix": "GET_ARE_BOMB_BAY_DOORS_OPEN()",
      "body": ["GET_ARE_BOMB_BAY_DOORS_OPEN(${1:Vehicle aircraft})"],
      "description": "GET_ARE_BOMB_BAY_DOORS_OPEN()"
    },
    "IS_VEHICLE_SEARCHLIGHT_ON": {
      "prefix": "IS_VEHICLE_SEARCHLIGHT_ON()",
      "body": ["IS_VEHICLE_SEARCHLIGHT_ON(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_SEARCHLIGHT_ON()"
    },
    "SET_VEHICLE_SEARCHLIGHT": {
      "prefix": "SET_VEHICLE_SEARCHLIGHT()",
      "body": [
        "SET_VEHICLE_SEARCHLIGHT(${1:Vehicle heli}, ${2:BOOL toggle}, ${3:BOOL canBeUsedByAI})"
      ],
      "description": "SET_VEHICLE_SEARCHLIGHT()"
    },
    "DOES_VEHICLE_HAVE_SEARCHLIGHT": {
      "prefix": "DOES_VEHICLE_HAVE_SEARCHLIGHT()",
      "body": ["DOES_VEHICLE_HAVE_SEARCHLIGHT(${1:Vehicle vehicle})"],
      "description": "DOES_VEHICLE_HAVE_SEARCHLIGHT()"
    },
    "IS_ENTRY_POINT_FOR_SEAT_CLEAR": {
      "prefix": "IS_ENTRY_POINT_FOR_SEAT_CLEAR()",
      "body": [
        "IS_ENTRY_POINT_FOR_SEAT_CLEAR(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:int seatIndex}, ${4:BOOL side}, ${5:BOOL onEnter})"
      ],
      "description": "IS_ENTRY_POINT_FOR_SEAT_CLEAR()"
    },
    "GET_ENTRY_POINT_POSITION": {
      "prefix": "GET_ENTRY_POINT_POSITION()",
      "body": ["GET_ENTRY_POINT_POSITION(${1:Vehicle vehicle}, ${2:int doorId})"],
      "description": "GET_ENTRY_POINT_POSITION()"
    },
    "CAN_SHUFFLE_SEAT": {
      "prefix": "CAN_SHUFFLE_SEAT()",
      "body": ["CAN_SHUFFLE_SEAT(${1:Vehicle vehicle}, ${2:int seatIndex})"],
      "description": "CAN_SHUFFLE_SEAT()"
    },
    "GET_NUM_MOD_KITS": {
      "prefix": "GET_NUM_MOD_KITS()",
      "body": ["GET_NUM_MOD_KITS(${1:Vehicle vehicle})"],
      "description": "GET_NUM_MOD_KITS()"
    },
    "SET_VEHICLE_MOD_KIT": {
      "prefix": "SET_VEHICLE_MOD_KIT()",
      "body": ["SET_VEHICLE_MOD_KIT(${1:Vehicle vehicle}, ${2:int modKit})"],
      "description": "SET_VEHICLE_MOD_KIT()"
    },
    "GET_VEHICLE_MOD_KIT": {
      "prefix": "GET_VEHICLE_MOD_KIT()",
      "body": ["GET_VEHICLE_MOD_KIT(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_MOD_KIT()"
    },
    "GET_VEHICLE_MOD_KIT_TYPE": {
      "prefix": "GET_VEHICLE_MOD_KIT_TYPE()",
      "body": ["GET_VEHICLE_MOD_KIT_TYPE(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_MOD_KIT_TYPE()"
    },
    "GET_VEHICLE_WHEEL_TYPE": {
      "prefix": "GET_VEHICLE_WHEEL_TYPE()",
      "body": ["GET_VEHICLE_WHEEL_TYPE(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_WHEEL_TYPE()"
    },
    "SET_VEHICLE_WHEEL_TYPE": {
      "prefix": "SET_VEHICLE_WHEEL_TYPE()",
      "body": [
        "SET_VEHICLE_WHEEL_TYPE(${1:Vehicle vehicle}, ${2:int WheelType})"
      ],
      "description": "SET_VEHICLE_WHEEL_TYPE()"
    },
    "GET_NUM_MOD_COLORS": {
      "prefix": "GET_NUM_MOD_COLORS()",
      "body": ["GET_NUM_MOD_COLORS(${1:int paintType}, ${2:BOOL p1})"],
      "description": "GET_NUM_MOD_COLORS()"
    },
    "SET_VEHICLE_MOD_COLOR_1": {
      "prefix": "SET_VEHICLE_MOD_COLOR_1()",
      "body": [
        "SET_VEHICLE_MOD_COLOR_1(${1:Vehicle vehicle}, ${2:int paintType}, ${3:int color}, ${4:int pearlescentColor})"
      ],
      "description": "SET_VEHICLE_MOD_COLOR_1()"
    },
    "SET_VEHICLE_MOD_COLOR_2": {
      "prefix": "SET_VEHICLE_MOD_COLOR_2()",
      "body": [
        "SET_VEHICLE_MOD_COLOR_2(${1:Vehicle vehicle}, ${2:int paintType}, ${3:int color})"
      ],
      "description": "SET_VEHICLE_MOD_COLOR_2()"
    },
    "GET_VEHICLE_MOD_COLOR_1": {
      "prefix": "GET_VEHICLE_MOD_COLOR_1()",
      "body": [
        "GET_VEHICLE_MOD_COLOR_1(${1:Vehicle vehicle}, ${2:int* paintType}, ${3:int* color}, ${4:int* pearlescentColor})"
      ],
      "description": "GET_VEHICLE_MOD_COLOR_1()"
    },
    "GET_VEHICLE_MOD_COLOR_2": {
      "prefix": "GET_VEHICLE_MOD_COLOR_2()",
      "body": [
        "GET_VEHICLE_MOD_COLOR_2(${1:Vehicle vehicle}, ${2:int* paintType}, ${3:int* color})"
      ],
      "description": "GET_VEHICLE_MOD_COLOR_2()"
    },
    "HAVE_VEHICLE_MODS_STREAMED_IN": {
      "prefix": "HAVE_VEHICLE_MODS_STREAMED_IN()",
      "body": ["HAVE_VEHICLE_MODS_STREAMED_IN(${1:Vehicle vehicle})"],
      "description": "HAVE_VEHICLE_MODS_STREAMED_IN()"
    },
    "IS_VEHICLE_MOD_GEN9_EXCLUSIVE": {
      "prefix": "IS_VEHICLE_MOD_GEN9_EXCLUSIVE()",
      "body": [
        "IS_VEHICLE_MOD_GEN9_EXCLUSIVE(${1:Vehicle vehicle}, ${2:int modType}, ${3:int modIndex})"
      ],
      "description": "IS_VEHICLE_MOD_GEN9_EXCLUSIVE()"
    },
    "SET_VEHICLE_MOD": {
      "prefix": "SET_VEHICLE_MOD()",
      "body": [
        "SET_VEHICLE_MOD(${1:Vehicle vehicle}, ${2:int modType}, ${3:int modIndex}, ${4:BOOL customTires})"
      ],
      "description": "SET_VEHICLE_MOD()"
    },
    "GET_VEHICLE_MOD": {
      "prefix": "GET_VEHICLE_MOD()",
      "body": ["GET_VEHICLE_MOD(${1:Vehicle vehicle}, ${2:int modType})"],
      "description": "GET_VEHICLE_MOD()"
    },
    "GET_VEHICLE_MOD_VARIATION": {
      "prefix": "GET_VEHICLE_MOD_VARIATION()",
      "body": [
        "GET_VEHICLE_MOD_VARIATION(${1:Vehicle vehicle}, ${2:int modType})"
      ],
      "description": "GET_VEHICLE_MOD_VARIATION()"
    },
    "GET_NUM_VEHICLE_MODS": {
      "prefix": "GET_NUM_VEHICLE_MODS()",
      "body": ["GET_NUM_VEHICLE_MODS(${1:Vehicle vehicle}, ${2:int modType})"],
      "description": "GET_NUM_VEHICLE_MODS()"
    },
    "REMOVE_VEHICLE_MOD": {
      "prefix": "REMOVE_VEHICLE_MOD()",
      "body": ["REMOVE_VEHICLE_MOD(${1:Vehicle vehicle}, ${2:int modType})"],
      "description": "REMOVE_VEHICLE_MOD()"
    },
    "TOGGLE_VEHICLE_MOD": {
      "prefix": "TOGGLE_VEHICLE_MOD()",
      "body": [
        "TOGGLE_VEHICLE_MOD(${1:Vehicle vehicle}, ${2:int modType}, ${3:BOOL toggle})"
      ],
      "description": "TOGGLE_VEHICLE_MOD()"
    },
    "IS_TOGGLE_MOD_ON": {
      "prefix": "IS_TOGGLE_MOD_ON()",
      "body": ["IS_TOGGLE_MOD_ON(${1:Vehicle vehicle}, ${2:int modType})"],
      "description": "IS_TOGGLE_MOD_ON()"
    },
    "GET_VEHICLE_MOD_MODIFIER_VALUE": {
      "prefix": "GET_VEHICLE_MOD_MODIFIER_VALUE()",
      "body": [
        "GET_VEHICLE_MOD_MODIFIER_VALUE(${1:Vehicle vehicle}, ${2:int modType}, ${3:int modIndex})"
      ],
      "description": "GET_VEHICLE_MOD_MODIFIER_VALUE()"
    },
    "GET_VEHICLE_MOD_IDENTIFIER_HASH": {
      "prefix": "GET_VEHICLE_MOD_IDENTIFIER_HASH()",
      "body": [
        "GET_VEHICLE_MOD_IDENTIFIER_HASH(${1:Vehicle vehicle}, ${2:int modType}, ${3:int modIndex})"
      ],
      "description": "GET_VEHICLE_MOD_IDENTIFIER_HASH()"
    },
    "PRELOAD_VEHICLE_MOD": {
      "prefix": "PRELOAD_VEHICLE_MOD()",
      "body": [
        "PRELOAD_VEHICLE_MOD(${1:Vehicle vehicle}, ${2:int modType}, ${3:int modIndex})"
      ],
      "description": "PRELOAD_VEHICLE_MOD()"
    },
    "HAS_PRELOAD_MODS_FINISHED": {
      "prefix": "HAS_PRELOAD_MODS_FINISHED()",
      "body": ["HAS_PRELOAD_MODS_FINISHED(${1:Vehicle vehicle})"],
      "description": "HAS_PRELOAD_MODS_FINISHED()"
    },
    "RELEASE_PRELOAD_MODS": {
      "prefix": "RELEASE_PRELOAD_MODS()",
      "body": ["RELEASE_PRELOAD_MODS(${1:Vehicle vehicle})"],
      "description": "RELEASE_PRELOAD_MODS()"
    },
    "SET_VEHICLE_TYRE_SMOKE_COLOR": {
      "prefix": "SET_VEHICLE_TYRE_SMOKE_COLOR()",
      "body": [
        "SET_VEHICLE_TYRE_SMOKE_COLOR(${1:Vehicle vehicle}, ${2:int r}, ${3:int g}, ${4:int b})"
      ],
      "description": "SET_VEHICLE_TYRE_SMOKE_COLOR()"
    },
    "GET_VEHICLE_TYRE_SMOKE_COLOR": {
      "prefix": "GET_VEHICLE_TYRE_SMOKE_COLOR()",
      "body": [
        "GET_VEHICLE_TYRE_SMOKE_COLOR(${1:Vehicle vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})"
      ],
      "description": "GET_VEHICLE_TYRE_SMOKE_COLOR()"
    },
    "SET_VEHICLE_WINDOW_TINT": {
      "prefix": "SET_VEHICLE_WINDOW_TINT()",
      "body": ["SET_VEHICLE_WINDOW_TINT(${1:Vehicle vehicle}, ${2:int tint})"],
      "description": "SET_VEHICLE_WINDOW_TINT()"
    },
    "GET_VEHICLE_WINDOW_TINT": {
      "prefix": "GET_VEHICLE_WINDOW_TINT()",
      "body": ["GET_VEHICLE_WINDOW_TINT(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_WINDOW_TINT()"
    },
    "GET_NUM_VEHICLE_WINDOW_TINTS": {
      "prefix": "GET_NUM_VEHICLE_WINDOW_TINTS()",
      "body": ["GET_NUM_VEHICLE_WINDOW_TINTS()"],
      "description": "GET_NUM_VEHICLE_WINDOW_TINTS()"
    },
    "GET_VEHICLE_COLOR": {
      "prefix": "GET_VEHICLE_COLOR()",
      "body": [
        "GET_VEHICLE_COLOR(${1:Vehicle vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})"
      ],
      "description": "GET_VEHICLE_COLOR()"
    },
    "GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET": {
      "prefix": "GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET()",
      "body": ["GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET()"
    },
    "GET_VEHICLE_CAUSE_OF_DESTRUCTION": {
      "prefix": "GET_VEHICLE_CAUSE_OF_DESTRUCTION()",
      "body": ["GET_VEHICLE_CAUSE_OF_DESTRUCTION(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_CAUSE_OF_DESTRUCTION()"
    },
    "OVERRIDE_PLANE_DAMAGE_THREHSOLD": {
      "prefix": "OVERRIDE_PLANE_DAMAGE_THREHSOLD()",
      "body": [
        "OVERRIDE_PLANE_DAMAGE_THREHSOLD(${1:Vehicle vehicle}, ${2:float health})"
      ],
      "description": "OVERRIDE_PLANE_DAMAGE_THREHSOLD()"
    },
    "_SET_TRANSMISSION_REDUCED_GEAR_RATIO": {
      "prefix": "_SET_TRANSMISSION_REDUCED_GEAR_RATIO()",
      "body": [
        "_SET_TRANSMISSION_REDUCED_GEAR_RATIO(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "_SET_TRANSMISSION_REDUCED_GEAR_RATIO()"
    },
    "_GET_VEHICLE_DESIRED_DRIVE_GEAR": {
      "prefix": "_GET_VEHICLE_DESIRED_DRIVE_GEAR()",
      "body": ["_GET_VEHICLE_DESIRED_DRIVE_GEAR(${1:Vehicle vehicle})"],
      "description": "_GET_VEHICLE_DESIRED_DRIVE_GEAR()"
    },
    "GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED": {
      "prefix": "GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED()",
      "body": ["GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED(${1:Vehicle vehicle})"],
      "description": "GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED()"
    },
    "GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED": {
      "prefix": "GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED()",
      "body": ["GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED(${1:Vehicle vehicle})"],
      "description": "GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED()"
    },
    "GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED": {
      "prefix": "GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED()",
      "body": ["GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED(${1:Vehicle vehicle})"],
      "description": "GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED()"
    },
    "MODIFY_VEHICLE_TOP_SPEED": {
      "prefix": "MODIFY_VEHICLE_TOP_SPEED()",
      "body": [
        "MODIFY_VEHICLE_TOP_SPEED(${1:Vehicle vehicle}, ${2:float value})"
      ],
      "description": "MODIFY_VEHICLE_TOP_SPEED()"
    },
    "SET_VEHICLE_MAX_SPEED": {
      "prefix": "SET_VEHICLE_MAX_SPEED()",
      "body": ["SET_VEHICLE_MAX_SPEED(${1:Vehicle vehicle}, ${2:float speed})"],
      "description": "SET_VEHICLE_MAX_SPEED()"
    },
    "SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP": {
      "prefix": "SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP()",
      "body": [
        "SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP()"
    },
    "SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING": {
      "prefix": "SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING()",
      "body": [
        "SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING()"
    },
    "SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE": {
      "prefix": "SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE()",
      "body": [
        "SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE(${1:Vehicle vehicle}, ${2:BOOL toggle}, ${3:float p2})"
      ],
      "description": "SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE()"
    },
    "ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA": {
      "prefix": "ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA()",
      "body": [
        "ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6})"
      ],
      "description": "ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA()"
    },
    "REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA": {
      "prefix": "REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA()",
      "body": ["REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA(${1:int p0})"],
      "description": "REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA()"
    },
    "IS_ANY_PED_RAPPELLING_FROM_HELI": {
      "prefix": "IS_ANY_PED_RAPPELLING_FROM_HELI()",
      "body": ["IS_ANY_PED_RAPPELLING_FROM_HELI(${1:Vehicle vehicle})"],
      "description": "IS_ANY_PED_RAPPELLING_FROM_HELI()"
    },
    "SET_VEHICLE_CHEAT_POWER_INCREASE": {
      "prefix": "SET_VEHICLE_CHEAT_POWER_INCREASE()",
      "body": [
        "SET_VEHICLE_CHEAT_POWER_INCREASE(${1:Vehicle vehicle}, ${2:float value})"
      ],
      "description": "SET_VEHICLE_CHEAT_POWER_INCREASE()"
    },
    "SET_VEHICLE_INFLUENCES_WANTED_LEVEL": {
      "prefix": "SET_VEHICLE_INFLUENCES_WANTED_LEVEL()",
      "body": ["SET_VEHICLE_INFLUENCES_WANTED_LEVEL(${1:Any p0}, ${2:BOOL p1})"],
      "description": "SET_VEHICLE_INFLUENCES_WANTED_LEVEL()"
    },
    "SET_VEHICLE_IS_WANTED": {
      "prefix": "SET_VEHICLE_IS_WANTED()",
      "body": ["SET_VEHICLE_IS_WANTED(${1:Vehicle vehicle}, ${2:BOOL state})"],
      "description": "SET_VEHICLE_IS_WANTED()"
    },
    "SWING_BOAT_BOOM_TO_RATIO": {
      "prefix": "SWING_BOAT_BOOM_TO_RATIO()",
      "body": [
        "SWING_BOAT_BOOM_TO_RATIO(${1:Vehicle vehicle}, ${2:float ratio})"
      ],
      "description": "SWING_BOAT_BOOM_TO_RATIO()"
    },
    "SWING_BOAT_BOOM_FREELY": {
      "prefix": "SWING_BOAT_BOOM_FREELY()",
      "body": ["SWING_BOAT_BOOM_FREELY(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SWING_BOAT_BOOM_FREELY()"
    },
    "ALLOW_BOAT_BOOM_TO_ANIMATE": {
      "prefix": "ALLOW_BOAT_BOOM_TO_ANIMATE()",
      "body": [
        "ALLOW_BOAT_BOOM_TO_ANIMATE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "ALLOW_BOAT_BOOM_TO_ANIMATE()"
    },
    "GET_BOAT_BOOM_POSITION_RATIO": {
      "prefix": "GET_BOAT_BOOM_POSITION_RATIO()",
      "body": ["GET_BOAT_BOOM_POSITION_RATIO(${1:Vehicle vehicle})"],
      "description": "GET_BOAT_BOOM_POSITION_RATIO()"
    },
    "DISABLE_PLANE_AILERON": {
      "prefix": "DISABLE_PLANE_AILERON()",
      "body": [
        "DISABLE_PLANE_AILERON(${1:Vehicle vehicle}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "DISABLE_PLANE_AILERON()"
    },
    "GET_IS_VEHICLE_ENGINE_RUNNING": {
      "prefix": "GET_IS_VEHICLE_ENGINE_RUNNING()",
      "body": ["GET_IS_VEHICLE_ENGINE_RUNNING(${1:Vehicle vehicle})"],
      "description": "GET_IS_VEHICLE_ENGINE_RUNNING()"
    },
    "SET_VEHICLE_USE_ALTERNATE_HANDLING": {
      "prefix": "SET_VEHICLE_USE_ALTERNATE_HANDLING()",
      "body": [
        "SET_VEHICLE_USE_ALTERNATE_HANDLING(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_USE_ALTERNATE_HANDLING()"
    },
    "SET_BIKE_ON_STAND": {
      "prefix": "SET_BIKE_ON_STAND()",
      "body": [
        "SET_BIKE_ON_STAND(${1:Vehicle vehicle}, ${2:float x}, ${3:float y})"
      ],
      "description": "SET_BIKE_ON_STAND()"
    },
    "SET_VEHICLE_NOT_STEALABLE_AMBIENTLY": {
      "prefix": "SET_VEHICLE_NOT_STEALABLE_AMBIENTLY()",
      "body": [
        "SET_VEHICLE_NOT_STEALABLE_AMBIENTLY(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_VEHICLE_NOT_STEALABLE_AMBIENTLY()"
    },
    "LOCK_DOORS_WHEN_NO_LONGER_NEEDED": {
      "prefix": "LOCK_DOORS_WHEN_NO_LONGER_NEEDED()",
      "body": ["LOCK_DOORS_WHEN_NO_LONGER_NEEDED(${1:Vehicle vehicle})"],
      "description": "LOCK_DOORS_WHEN_NO_LONGER_NEEDED()"
    },
    "SET_LAST_DRIVEN_VEHICLE": {
      "prefix": "SET_LAST_DRIVEN_VEHICLE()",
      "body": ["SET_LAST_DRIVEN_VEHICLE(${1:Vehicle vehicle})"],
      "description": "SET_LAST_DRIVEN_VEHICLE()"
    },
    "GET_LAST_DRIVEN_VEHICLE": {
      "prefix": "GET_LAST_DRIVEN_VEHICLE()",
      "body": ["GET_LAST_DRIVEN_VEHICLE()"],
      "description": "GET_LAST_DRIVEN_VEHICLE()"
    },
    "CLEAR_LAST_DRIVEN_VEHICLE": {
      "prefix": "CLEAR_LAST_DRIVEN_VEHICLE()",
      "body": ["CLEAR_LAST_DRIVEN_VEHICLE()"],
      "description": "CLEAR_LAST_DRIVEN_VEHICLE()"
    },
    "SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG": {
      "prefix": "SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG()",
      "body": [
        "SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG()"
    },
    "SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN": {
      "prefix": "SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN()",
      "body": [
        "SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN(${1:Vehicle plane}, ${2:int height})"
      ],
      "description": "SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN()"
    },
    "SET_VEHICLE_LOD_MULTIPLIER": {
      "prefix": "SET_VEHICLE_LOD_MULTIPLIER()",
      "body": [
        "SET_VEHICLE_LOD_MULTIPLIER(${1:Vehicle vehicle}, ${2:float multiplier})"
      ],
      "description": "SET_VEHICLE_LOD_MULTIPLIER()"
    },
    "SET_VEHICLE_CAN_SAVE_IN_GARAGE": {
      "prefix": "SET_VEHICLE_CAN_SAVE_IN_GARAGE()",
      "body": [
        "SET_VEHICLE_CAN_SAVE_IN_GARAGE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_CAN_SAVE_IN_GARAGE()"
    },
    "GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS": {
      "prefix": "GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS()",
      "body": ["GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS()"
    },
    "GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS": {
      "prefix": "GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS()",
      "body": ["GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS()"
    },
    "SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET": {
      "prefix": "SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET()",
      "body": [
        "SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET(${1:Any p0}, ${2:BOOL p1})"
      ],
      "description": "SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET()"
    },
    "SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS": {
      "prefix": "SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS()",
      "body": [
        "SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS()"
    },
    "COPY_VEHICLE_DAMAGES": {
      "prefix": "COPY_VEHICLE_DAMAGES()",
      "body": [
        "COPY_VEHICLE_DAMAGES(${1:Vehicle sourceVehicle}, ${2:Vehicle targetVehicle})"
      ],
      "description": "COPY_VEHICLE_DAMAGES()"
    },
    "DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS": {
      "prefix": "DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS()",
      "body": ["DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS()"],
      "description": "DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS()"
    },
    "SET_LIGHTS_CUTOFF_DISTANCE_TWEAK": {
      "prefix": "SET_LIGHTS_CUTOFF_DISTANCE_TWEAK()",
      "body": ["SET_LIGHTS_CUTOFF_DISTANCE_TWEAK(${1:float distance})"],
      "description": "SET_LIGHTS_CUTOFF_DISTANCE_TWEAK()"
    },
    "SET_VEHICLE_SHOOT_AT_TARGET": {
      "prefix": "SET_VEHICLE_SHOOT_AT_TARGET()",
      "body": [
        "SET_VEHICLE_SHOOT_AT_TARGET(${1:Ped driver}, ${2:Entity entity}, ${3:float xTarget}, ${4:float yTarget}, ${5:float zTarget})"
      ],
      "description": "SET_VEHICLE_SHOOT_AT_TARGET()"
    },
    "GET_VEHICLE_LOCK_ON_TARGET": {
      "prefix": "GET_VEHICLE_LOCK_ON_TARGET()",
      "body": [
        "GET_VEHICLE_LOCK_ON_TARGET(${1:Vehicle vehicle}, ${2:Entity* entity})"
      ],
      "description": "GET_VEHICLE_LOCK_ON_TARGET()"
    },
    "SET_FORCE_HD_VEHICLE": {
      "prefix": "SET_FORCE_HD_VEHICLE()",
      "body": ["SET_FORCE_HD_VEHICLE(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_FORCE_HD_VEHICLE()"
    },
    "SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS": {
      "prefix": "SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS()",
      "body": [
        "SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS(${1:Vehicle vehicle}, ${2:float p1})"
      ],
      "description": "SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS()"
    },
    "GET_VEHICLE_PLATE_TYPE": {
      "prefix": "GET_VEHICLE_PLATE_TYPE()",
      "body": ["GET_VEHICLE_PLATE_TYPE(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_PLATE_TYPE()"
    },
    "TRACK_VEHICLE_VISIBILITY": {
      "prefix": "TRACK_VEHICLE_VISIBILITY()",
      "body": ["TRACK_VEHICLE_VISIBILITY(${1:Vehicle vehicle})"],
      "description": "TRACK_VEHICLE_VISIBILITY()"
    },
    "IS_VEHICLE_VISIBLE": {
      "prefix": "IS_VEHICLE_VISIBLE()",
      "body": ["IS_VEHICLE_VISIBLE(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_VISIBLE()"
    },
    "SET_VEHICLE_GRAVITY": {
      "prefix": "SET_VEHICLE_GRAVITY()",
      "body": ["SET_VEHICLE_GRAVITY(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_VEHICLE_GRAVITY()"
    },
    "SET_ENABLE_VEHICLE_SLIPSTREAMING": {
      "prefix": "SET_ENABLE_VEHICLE_SLIPSTREAMING()",
      "body": ["SET_ENABLE_VEHICLE_SLIPSTREAMING(${1:BOOL toggle})"],
      "description": "SET_ENABLE_VEHICLE_SLIPSTREAMING()"
    },
    "SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT": {
      "prefix": "SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT()",
      "body": ["SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT(${1:BOOL toggle})"],
      "description": "SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT()"
    },
    "GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM": {
      "prefix": "GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM()",
      "body": ["GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM()"
    },
    "IS_VEHICLE_PRODUCING_SLIP_STREAM": {
      "prefix": "IS_VEHICLE_PRODUCING_SLIP_STREAM()",
      "body": ["IS_VEHICLE_PRODUCING_SLIP_STREAM(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_PRODUCING_SLIP_STREAM()"
    },
    "SET_VEHICLE_INACTIVE_DURING_PLAYBACK": {
      "prefix": "SET_VEHICLE_INACTIVE_DURING_PLAYBACK()",
      "body": [
        "SET_VEHICLE_INACTIVE_DURING_PLAYBACK(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_INACTIVE_DURING_PLAYBACK()"
    },
    "SET_VEHICLE_ACTIVE_DURING_PLAYBACK": {
      "prefix": "SET_VEHICLE_ACTIVE_DURING_PLAYBACK()",
      "body": [
        "SET_VEHICLE_ACTIVE_DURING_PLAYBACK(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_ACTIVE_DURING_PLAYBACK()"
    },
    "IS_VEHICLE_SPRAYABLE": {
      "prefix": "IS_VEHICLE_SPRAYABLE()",
      "body": ["IS_VEHICLE_SPRAYABLE(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_SPRAYABLE()"
    },
    "SET_VEHICLE_ENGINE_CAN_DEGRADE": {
      "prefix": "SET_VEHICLE_ENGINE_CAN_DEGRADE()",
      "body": [
        "SET_VEHICLE_ENGINE_CAN_DEGRADE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_ENGINE_CAN_DEGRADE()"
    },
    "DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES": {
      "prefix": "DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES()",
      "body": [
        "DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES(${1:Vehicle vehicle}, ${2:int p1}, ${3:int p2})"
      ],
      "description": "DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES()"
    },
    "ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES": {
      "prefix": "ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES()",
      "body": ["ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES(${1:Vehicle vehicle})"],
      "description": "ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES()"
    },
    "IS_PLANE_LANDING_GEAR_INTACT": {
      "prefix": "IS_PLANE_LANDING_GEAR_INTACT()",
      "body": ["IS_PLANE_LANDING_GEAR_INTACT(${1:Vehicle plane})"],
      "description": "IS_PLANE_LANDING_GEAR_INTACT()"
    },
    "ARE_PLANE_PROPELLERS_INTACT": {
      "prefix": "ARE_PLANE_PROPELLERS_INTACT()",
      "body": ["ARE_PLANE_PROPELLERS_INTACT(${1:Vehicle plane})"],
      "description": "ARE_PLANE_PROPELLERS_INTACT()"
    },
    "SET_PLANE_PROPELLER_HEALTH": {
      "prefix": "SET_PLANE_PROPELLER_HEALTH()",
      "body": [
        "SET_PLANE_PROPELLER_HEALTH(${1:Vehicle plane}, ${2:float health})"
      ],
      "description": "SET_PLANE_PROPELLER_HEALTH()"
    },
    "SET_VEHICLE_CAN_DEFORM_WHEELS": {
      "prefix": "SET_VEHICLE_CAN_DEFORM_WHEELS()",
      "body": [
        "SET_VEHICLE_CAN_DEFORM_WHEELS(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_CAN_DEFORM_WHEELS()"
    },
    "IS_VEHICLE_STOLEN": {
      "prefix": "IS_VEHICLE_STOLEN()",
      "body": ["IS_VEHICLE_STOLEN(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_STOLEN()"
    },
    "SET_VEHICLE_IS_STOLEN": {
      "prefix": "SET_VEHICLE_IS_STOLEN()",
      "body": ["SET_VEHICLE_IS_STOLEN(${1:Vehicle vehicle}, ${2:BOOL isStolen})"],
      "description": "SET_VEHICLE_IS_STOLEN()"
    },
    "SET_PLANE_TURBULENCE_MULTIPLIER": {
      "prefix": "SET_PLANE_TURBULENCE_MULTIPLIER()",
      "body": [
        "SET_PLANE_TURBULENCE_MULTIPLIER(${1:Vehicle vehicle}, ${2:float multiplier})"
      ],
      "description": "SET_PLANE_TURBULENCE_MULTIPLIER()"
    },
    "ARE_WINGS_OF_PLANE_INTACT": {
      "prefix": "ARE_WINGS_OF_PLANE_INTACT()",
      "body": ["ARE_WINGS_OF_PLANE_INTACT(${1:Vehicle plane})"],
      "description": "ARE_WINGS_OF_PLANE_INTACT()"
    },
    "ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS": {
      "prefix": "ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS()",
      "body": [
        "ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS(${1:Vehicle vehicle})"
      ],
      "description": "ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS()"
    },
    "DETACH_VEHICLE_FROM_CARGOBOB": {
      "prefix": "DETACH_VEHICLE_FROM_CARGOBOB()",
      "body": [
        "DETACH_VEHICLE_FROM_CARGOBOB(${1:Vehicle vehicle}, ${2:Vehicle cargobob})"
      ],
      "description": "DETACH_VEHICLE_FROM_CARGOBOB()"
    },
    "DETACH_VEHICLE_FROM_ANY_CARGOBOB": {
      "prefix": "DETACH_VEHICLE_FROM_ANY_CARGOBOB()",
      "body": ["DETACH_VEHICLE_FROM_ANY_CARGOBOB(${1:Vehicle vehicle})"],
      "description": "DETACH_VEHICLE_FROM_ANY_CARGOBOB()"
    },
    "DETACH_ENTITY_FROM_CARGOBOB": {
      "prefix": "DETACH_ENTITY_FROM_CARGOBOB()",
      "body": [
        "DETACH_ENTITY_FROM_CARGOBOB(${1:Vehicle cargobob}, ${2:Entity entity})"
      ],
      "description": "DETACH_ENTITY_FROM_CARGOBOB()"
    },
    "IS_VEHICLE_ATTACHED_TO_CARGOBOB": {
      "prefix": "IS_VEHICLE_ATTACHED_TO_CARGOBOB()",
      "body": [
        "IS_VEHICLE_ATTACHED_TO_CARGOBOB(${1:Vehicle cargobob}, ${2:Vehicle vehicleAttached})"
      ],
      "description": "IS_VEHICLE_ATTACHED_TO_CARGOBOB()"
    },
    "GET_VEHICLE_ATTACHED_TO_CARGOBOB": {
      "prefix": "GET_VEHICLE_ATTACHED_TO_CARGOBOB()",
      "body": ["GET_VEHICLE_ATTACHED_TO_CARGOBOB(${1:Vehicle cargobob})"],
      "description": "GET_VEHICLE_ATTACHED_TO_CARGOBOB()"
    },
    "GET_ENTITY_ATTACHED_TO_CARGOBOB": {
      "prefix": "GET_ENTITY_ATTACHED_TO_CARGOBOB()",
      "body": ["GET_ENTITY_ATTACHED_TO_CARGOBOB(${1:Any p0})"],
      "description": "GET_ENTITY_ATTACHED_TO_CARGOBOB()"
    },
    "ATTACH_VEHICLE_TO_CARGOBOB": {
      "prefix": "ATTACH_VEHICLE_TO_CARGOBOB()",
      "body": [
        "ATTACH_VEHICLE_TO_CARGOBOB(${1:Vehicle cargobob}, ${2:Vehicle vehicle}, ${3:int p2}, ${4:float x}, ${5:float y}, ${6:float z})"
      ],
      "description": "ATTACH_VEHICLE_TO_CARGOBOB()"
    },
    "ATTACH_ENTITY_TO_CARGOBOB": {
      "prefix": "ATTACH_ENTITY_TO_CARGOBOB()",
      "body": [
        "ATTACH_ENTITY_TO_CARGOBOB(${1:Any p0}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4}, ${6:Any p5})"
      ],
      "description": "ATTACH_ENTITY_TO_CARGOBOB()"
    },
    "SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE": {
      "prefix": "SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE()",
      "body": [
        "SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE(${1:Vehicle cargobob}, ${2:BOOL toggle})"
      ],
      "description": "SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE()"
    },
    "SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY": {
      "prefix": "SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY()",
      "body": [
        "SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY()"
    },
    "CAN_CARGOBOB_PICK_UP_ENTITY": {
      "prefix": "CAN_CARGOBOB_PICK_UP_ENTITY()",
      "body": ["CAN_CARGOBOB_PICK_UP_ENTITY(${1:Any p0}, ${2:Any p1})"],
      "description": "CAN_CARGOBOB_PICK_UP_ENTITY()"
    },
    "GET_ATTACHED_PICK_UP_HOOK_POSITION": {
      "prefix": "GET_ATTACHED_PICK_UP_HOOK_POSITION()",
      "body": ["GET_ATTACHED_PICK_UP_HOOK_POSITION(${1:Vehicle cargobob})"],
      "description": "GET_ATTACHED_PICK_UP_HOOK_POSITION()"
    },
    "DOES_CARGOBOB_HAVE_PICK_UP_ROPE": {
      "prefix": "DOES_CARGOBOB_HAVE_PICK_UP_ROPE()",
      "body": ["DOES_CARGOBOB_HAVE_PICK_UP_ROPE(${1:Vehicle cargobob})"],
      "description": "DOES_CARGOBOB_HAVE_PICK_UP_ROPE()"
    },
    "CREATE_PICK_UP_ROPE_FOR_CARGOBOB": {
      "prefix": "CREATE_PICK_UP_ROPE_FOR_CARGOBOB()",
      "body": [
        "CREATE_PICK_UP_ROPE_FOR_CARGOBOB(${1:Vehicle cargobob}, ${2:int state})"
      ],
      "description": "CREATE_PICK_UP_ROPE_FOR_CARGOBOB()"
    },
    "REMOVE_PICK_UP_ROPE_FOR_CARGOBOB": {
      "prefix": "REMOVE_PICK_UP_ROPE_FOR_CARGOBOB()",
      "body": ["REMOVE_PICK_UP_ROPE_FOR_CARGOBOB(${1:Vehicle cargobob})"],
      "description": "REMOVE_PICK_UP_ROPE_FOR_CARGOBOB()"
    },
    "SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB": {
      "prefix": "SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB()",
      "body": [
        "SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB(${1:Vehicle cargobob}, ${2:float length1}, ${3:float length2}, ${4:BOOL p3})"
      ],
      "description": "SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB()"
    },
    "SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB": {
      "prefix": "SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB()",
      "body": [
        "SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB()"
    },
    "SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER": {
      "prefix": "SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER()",
      "body": [
        "SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER()"
    },
    "SET_CARGOBOB_PICKUP_ROPE_TYPE": {
      "prefix": "SET_CARGOBOB_PICKUP_ROPE_TYPE()",
      "body": ["SET_CARGOBOB_PICKUP_ROPE_TYPE(${1:Any p0}, ${2:Any p1})"],
      "description": "SET_CARGOBOB_PICKUP_ROPE_TYPE()"
    },
    "DOES_CARGOBOB_HAVE_PICKUP_MAGNET": {
      "prefix": "DOES_CARGOBOB_HAVE_PICKUP_MAGNET()",
      "body": ["DOES_CARGOBOB_HAVE_PICKUP_MAGNET(${1:Vehicle cargobob})"],
      "description": "DOES_CARGOBOB_HAVE_PICKUP_MAGNET()"
    },
    "SET_CARGOBOB_PICKUP_MAGNET_ACTIVE": {
      "prefix": "SET_CARGOBOB_PICKUP_MAGNET_ACTIVE()",
      "body": [
        "SET_CARGOBOB_PICKUP_MAGNET_ACTIVE(${1:Vehicle cargobob}, ${2:BOOL isActive})"
      ],
      "description": "SET_CARGOBOB_PICKUP_MAGNET_ACTIVE()"
    },
    "SET_CARGOBOB_PICKUP_MAGNET_STRENGTH": {
      "prefix": "SET_CARGOBOB_PICKUP_MAGNET_STRENGTH()",
      "body": [
        "SET_CARGOBOB_PICKUP_MAGNET_STRENGTH(${1:Vehicle cargobob}, ${2:float strength})"
      ],
      "description": "SET_CARGOBOB_PICKUP_MAGNET_STRENGTH()"
    },
    "SET_CARGOBOB_PICKUP_MAGNET_FALLOFF": {
      "prefix": "SET_CARGOBOB_PICKUP_MAGNET_FALLOFF()",
      "body": [
        "SET_CARGOBOB_PICKUP_MAGNET_FALLOFF(${1:Vehicle cargobob}, ${2:float p1})"
      ],
      "description": "SET_CARGOBOB_PICKUP_MAGNET_FALLOFF()"
    },
    "SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH": {
      "prefix": "SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH()",
      "body": [
        "SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH(${1:Vehicle cargobob}, ${2:float p1})"
      ],
      "description": "SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH()"
    },
    "SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF": {
      "prefix": "SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF()",
      "body": [
        "SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF(${1:Vehicle cargobob}, ${2:float p1})"
      ],
      "description": "SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF()"
    },
    "SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH": {
      "prefix": "SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH()",
      "body": [
        "SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH(${1:Vehicle cargobob}, ${2:float p1})"
      ],
      "description": "SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH()"
    },
    "SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH": {
      "prefix": "SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH()",
      "body": [
        "SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH(${1:Vehicle vehicle}, ${2:float p1})"
      ],
      "description": "SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH()"
    },
    "SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE": {
      "prefix": "SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE()",
      "body": [
        "SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE(${1:Vehicle vehicle}, ${2:Vehicle cargobob})"
      ],
      "description": "SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE()"
    },
    "SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE": {
      "prefix": "SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE()",
      "body": [
        "SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE(${1:Vehicle vehicle}, ${2:BOOL p1}, ${3:BOOL p2})"
      ],
      "description": "SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE()"
    },
    "SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT": {
      "prefix": "SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT()",
      "body": [
        "SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT()"
    },
    "DOES_VEHICLE_HAVE_WEAPONS": {
      "prefix": "DOES_VEHICLE_HAVE_WEAPONS()",
      "body": ["DOES_VEHICLE_HAVE_WEAPONS(${1:Vehicle vehicle})"],
      "description": "DOES_VEHICLE_HAVE_WEAPONS()"
    },
    "SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY": {
      "prefix": "SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY()",
      "body": [
        "SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY()"
    },
    "DISABLE_VEHICLE_WEAPON": {
      "prefix": "DISABLE_VEHICLE_WEAPON()",
      "body": [
        "DISABLE_VEHICLE_WEAPON(${1:BOOL disabled}, ${2:Hash weaponHash}, ${3:Vehicle vehicle}, ${4:Ped owner})"
      ],
      "description": "DISABLE_VEHICLE_WEAPON()"
    },
    "IS_VEHICLE_WEAPON_DISABLED": {
      "prefix": "IS_VEHICLE_WEAPON_DISABLED()",
      "body": [
        "IS_VEHICLE_WEAPON_DISABLED(${1:Hash weaponHash}, ${2:Vehicle vehicle}, ${3:Ped owner})"
      ],
      "description": "IS_VEHICLE_WEAPON_DISABLED()"
    },
    "SET_VEHICLE_USED_FOR_PILOT_SCHOOL": {
      "prefix": "SET_VEHICLE_USED_FOR_PILOT_SCHOOL()",
      "body": [
        "SET_VEHICLE_USED_FOR_PILOT_SCHOOL(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_USED_FOR_PILOT_SCHOOL()"
    },
    "SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION": {
      "prefix": "SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION()",
      "body": [
        "SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION()"
    },
    "GET_VEHICLE_CLASS": {
      "prefix": "GET_VEHICLE_CLASS()",
      "body": ["GET_VEHICLE_CLASS(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_CLASS()"
    },
    "GET_VEHICLE_CLASS_FROM_NAME": {
      "prefix": "GET_VEHICLE_CLASS_FROM_NAME()",
      "body": ["GET_VEHICLE_CLASS_FROM_NAME(${1:Hash modelHash})"],
      "description": "GET_VEHICLE_CLASS_FROM_NAME()"
    },
    "SET_PLAYERS_LAST_VEHICLE": {
      "prefix": "SET_PLAYERS_LAST_VEHICLE()",
      "body": ["SET_PLAYERS_LAST_VEHICLE(${1:Vehicle vehicle})"],
      "description": "SET_PLAYERS_LAST_VEHICLE()"
    },
    "SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS": {
      "prefix": "SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS()",
      "body": [
        "SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS()"
    },
    "SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR": {
      "prefix": "SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR()",
      "body": [
        "SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR(${1:Vehicle vehicle}, ${2:float p1})"
      ],
      "description": "SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR()"
    },
    "SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP": {
      "prefix": "SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP()",
      "body": [
        "SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP()"
    },
    "SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED": {
      "prefix": "SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED()",
      "body": [
        "SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED()"
    },
    "SET_VEHICLE_IMPATIENCE_TIMER": {
      "prefix": "SET_VEHICLE_IMPATIENCE_TIMER()",
      "body": ["SET_VEHICLE_IMPATIENCE_TIMER(${1:Vehicle vehicle}, ${2:Any p1})"],
      "description": "SET_VEHICLE_IMPATIENCE_TIMER()"
    },
    "SET_VEHICLE_HANDLING_OVERRIDE": {
      "prefix": "SET_VEHICLE_HANDLING_OVERRIDE()",
      "body": [
        "SET_VEHICLE_HANDLING_OVERRIDE(${1:Vehicle vehicle}, ${2:Hash hash})"
      ],
      "description": "SET_VEHICLE_HANDLING_OVERRIDE()"
    },
    "SET_VEHICLE_EXTENDED_REMOVAL_RANGE": {
      "prefix": "SET_VEHICLE_EXTENDED_REMOVAL_RANGE()",
      "body": [
        "SET_VEHICLE_EXTENDED_REMOVAL_RANGE(${1:Vehicle vehicle}, ${2:int range})"
      ],
      "description": "SET_VEHICLE_EXTENDED_REMOVAL_RANGE()"
    },
    "SET_VEHICLE_STEERING_BIAS_SCALAR": {
      "prefix": "SET_VEHICLE_STEERING_BIAS_SCALAR()",
      "body": ["SET_VEHICLE_STEERING_BIAS_SCALAR(${1:Any p0}, ${2:float p1})"],
      "description": "SET_VEHICLE_STEERING_BIAS_SCALAR()"
    },
    "SET_HELI_CONTROL_LAGGING_RATE_SCALAR": {
      "prefix": "SET_HELI_CONTROL_LAGGING_RATE_SCALAR()",
      "body": [
        "SET_HELI_CONTROL_LAGGING_RATE_SCALAR(${1:Vehicle helicopter}, ${2:float multiplier})"
      ],
      "description": "SET_HELI_CONTROL_LAGGING_RATE_SCALAR()"
    },
    "SET_VEHICLE_FRICTION_OVERRIDE": {
      "prefix": "SET_VEHICLE_FRICTION_OVERRIDE()",
      "body": [
        "SET_VEHICLE_FRICTION_OVERRIDE(${1:Vehicle vehicle}, ${2:float friction})"
      ],
      "description": "SET_VEHICLE_FRICTION_OVERRIDE()"
    },
    "SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP": {
      "prefix": "SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP()",
      "body": [
        "SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP()"
    },
    "ARE_PLANE_CONTROL_PANELS_INTACT": {
      "prefix": "ARE_PLANE_CONTROL_PANELS_INTACT()",
      "body": [
        "ARE_PLANE_CONTROL_PANELS_INTACT(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "ARE_PLANE_CONTROL_PANELS_INTACT()"
    },
    "SET_VEHICLE_CEILING_HEIGHT": {
      "prefix": "SET_VEHICLE_CEILING_HEIGHT()",
      "body": [
        "SET_VEHICLE_CEILING_HEIGHT(${1:Vehicle vehicle}, ${2:float height})"
      ],
      "description": "SET_VEHICLE_CEILING_HEIGHT()"
    },
    "SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER": {
      "prefix": "SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER()",
      "body": [
        "SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER()"
    },
    "CLEAR_VEHICLE_ROUTE_HISTORY": {
      "prefix": "CLEAR_VEHICLE_ROUTE_HISTORY()",
      "body": ["CLEAR_VEHICLE_ROUTE_HISTORY(${1:Vehicle vehicle})"],
      "description": "CLEAR_VEHICLE_ROUTE_HISTORY()"
    },
    "DOES_VEHICLE_EXIST_WITH_DECORATOR": {
      "prefix": "DOES_VEHICLE_EXIST_WITH_DECORATOR()",
      "body": ["DOES_VEHICLE_EXIST_WITH_DECORATOR(${1:const char* decorator})"],
      "description": "DOES_VEHICLE_EXIST_WITH_DECORATOR()"
    },
    "SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS": {
      "prefix": "SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS()",
      "body": [
        "SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS()"
    },
    "SET_VEHICLE_EXCLUSIVE_DRIVER": {
      "prefix": "SET_VEHICLE_EXCLUSIVE_DRIVER()",
      "body": [
        "SET_VEHICLE_EXCLUSIVE_DRIVER(${1:Vehicle vehicle}, ${2:Ped ped}, ${3:int index})"
      ],
      "description": "SET_VEHICLE_EXCLUSIVE_DRIVER()"
    },
    "IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE": {
      "prefix": "IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE()",
      "body": [
        "IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE(${1:Ped ped}, ${2:Vehicle vehicle}, ${3:int* outIndex})"
      ],
      "description": "IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE()"
    },
    "DISABLE_INDIVIDUAL_PLANE_PROPELLER": {
      "prefix": "DISABLE_INDIVIDUAL_PLANE_PROPELLER()",
      "body": [
        "DISABLE_INDIVIDUAL_PLANE_PROPELLER(${1:Vehicle vehicle}, ${2:int propeller})"
      ],
      "description": "DISABLE_INDIVIDUAL_PLANE_PROPELLER()"
    },
    "SET_VEHICLE_FORCE_AFTERBURNER": {
      "prefix": "SET_VEHICLE_FORCE_AFTERBURNER()",
      "body": [
        "SET_VEHICLE_FORCE_AFTERBURNER(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_FORCE_AFTERBURNER()"
    },
    "SET_DONT_PROCESS_VEHICLE_GLASS": {
      "prefix": "SET_DONT_PROCESS_VEHICLE_GLASS()",
      "body": [
        "SET_DONT_PROCESS_VEHICLE_GLASS(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_DONT_PROCESS_VEHICLE_GLASS()"
    },
    "SET_DISABLE_WANTED_CONES_RESPONSE": {
      "prefix": "SET_DISABLE_WANTED_CONES_RESPONSE()",
      "body": [
        "SET_DISABLE_WANTED_CONES_RESPONSE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_DISABLE_WANTED_CONES_RESPONSE()"
    },
    "SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING": {
      "prefix": "SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING()",
      "body": [
        "SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING()"
    },
    "SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK": {
      "prefix": "SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK()",
      "body": [
        "SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK(${1:Vehicle vehicle}, ${2:float p1})"
      ],
      "description": "SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK()"
    },
    "SET_VEHICLE_READY_FOR_CLEANUP": {
      "prefix": "SET_VEHICLE_READY_FOR_CLEANUP()",
      "body": ["SET_VEHICLE_READY_FOR_CLEANUP(${1:Any p0})"],
      "description": "SET_VEHICLE_READY_FOR_CLEANUP()"
    },
    "SET_DISTANT_CARS_ENABLED": {
      "prefix": "SET_DISTANT_CARS_ENABLED()",
      "body": ["SET_DISTANT_CARS_ENABLED(${1:BOOL toggle})"],
      "description": "SET_DISTANT_CARS_ENABLED()"
    },
    "SET_VEHICLE_NEON_COLOUR": {
      "prefix": "SET_VEHICLE_NEON_COLOUR()",
      "body": [
        "SET_VEHICLE_NEON_COLOUR(${1:Vehicle vehicle}, ${2:int r}, ${3:int g}, ${4:int b})"
      ],
      "description": "SET_VEHICLE_NEON_COLOUR()"
    },
    "SET_VEHICLE_NEON_INDEX_COLOUR": {
      "prefix": "SET_VEHICLE_NEON_INDEX_COLOUR()",
      "body": [
        "SET_VEHICLE_NEON_INDEX_COLOUR(${1:Vehicle vehicle}, ${2:int index})"
      ],
      "description": "SET_VEHICLE_NEON_INDEX_COLOUR()"
    },
    "GET_VEHICLE_NEON_COLOUR": {
      "prefix": "GET_VEHICLE_NEON_COLOUR()",
      "body": [
        "GET_VEHICLE_NEON_COLOUR(${1:Vehicle vehicle}, ${2:int* r}, ${3:int* g}, ${4:int* b})"
      ],
      "description": "GET_VEHICLE_NEON_COLOUR()"
    },
    "SET_VEHICLE_NEON_ENABLED": {
      "prefix": "SET_VEHICLE_NEON_ENABLED()",
      "body": [
        "SET_VEHICLE_NEON_ENABLED(${1:Vehicle vehicle}, ${2:int index}, ${3:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_NEON_ENABLED()"
    },
    "GET_VEHICLE_NEON_ENABLED": {
      "prefix": "GET_VEHICLE_NEON_ENABLED()",
      "body": ["GET_VEHICLE_NEON_ENABLED(${1:Vehicle vehicle}, ${2:int index})"],
      "description": "GET_VEHICLE_NEON_ENABLED()"
    },
    "SET_AMBIENT_VEHICLE_NEON_ENABLED": {
      "prefix": "SET_AMBIENT_VEHICLE_NEON_ENABLED()",
      "body": ["SET_AMBIENT_VEHICLE_NEON_ENABLED(${1:BOOL p0})"],
      "description": "SET_AMBIENT_VEHICLE_NEON_ENABLED()"
    },
    "SUPPRESS_NEONS_ON_VEHICLE": {
      "prefix": "SUPPRESS_NEONS_ON_VEHICLE()",
      "body": [
        "SUPPRESS_NEONS_ON_VEHICLE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SUPPRESS_NEONS_ON_VEHICLE()"
    },
    "SET_DISABLE_SUPERDUMMY": {
      "prefix": "SET_DISABLE_SUPERDUMMY()",
      "body": ["SET_DISABLE_SUPERDUMMY(${1:Vehicle vehicle}, ${2:BOOL p1})"],
      "description": "SET_DISABLE_SUPERDUMMY()"
    },
    "REQUEST_VEHICLE_DIAL": {
      "prefix": "REQUEST_VEHICLE_DIAL()",
      "body": ["REQUEST_VEHICLE_DIAL(${1:Vehicle vehicle})"],
      "description": "REQUEST_VEHICLE_DIAL()"
    },
    "GET_VEHICLE_BODY_HEALTH": {
      "prefix": "GET_VEHICLE_BODY_HEALTH()",
      "body": ["GET_VEHICLE_BODY_HEALTH(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_BODY_HEALTH()"
    },
    "SET_VEHICLE_BODY_HEALTH": {
      "prefix": "SET_VEHICLE_BODY_HEALTH()",
      "body": ["SET_VEHICLE_BODY_HEALTH(${1:Vehicle vehicle}, ${2:float value})"],
      "description": "SET_VEHICLE_BODY_HEALTH()"
    },
    "GET_VEHICLE_SIZE": {
      "prefix": "GET_VEHICLE_SIZE()",
      "body": [
        "GET_VEHICLE_SIZE(${1:Vehicle vehicle}, ${2:Vector3* out1}, ${3:Vector3* out2})"
      ],
      "description": "GET_VEHICLE_SIZE()"
    },
    "GET_FAKE_SUSPENSION_LOWERING_AMOUNT": {
      "prefix": "GET_FAKE_SUSPENSION_LOWERING_AMOUNT()",
      "body": ["GET_FAKE_SUSPENSION_LOWERING_AMOUNT(${1:Vehicle vehicle})"],
      "description": "GET_FAKE_SUSPENSION_LOWERING_AMOUNT()"
    },
    "SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER": {
      "prefix": "SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER()",
      "body": [
        "SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER(${1:float multiplier})"
      ],
      "description": "SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER()"
    },
    "GET_NUMBER_OF_VEHICLE_DOORS": {
      "prefix": "GET_NUMBER_OF_VEHICLE_DOORS()",
      "body": ["GET_NUMBER_OF_VEHICLE_DOORS(${1:Vehicle vehicle})"],
      "description": "GET_NUMBER_OF_VEHICLE_DOORS()"
    },
    "SET_HYDRAULICS_CONTROL": {
      "prefix": "SET_HYDRAULICS_CONTROL()",
      "body": ["SET_HYDRAULICS_CONTROL(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_HYDRAULICS_CONTROL()"
    },
    "SET_CAN_ADJUST_GROUND_CLEARANCE": {
      "prefix": "SET_CAN_ADJUST_GROUND_CLEARANCE()",
      "body": [
        "SET_CAN_ADJUST_GROUND_CLEARANCE(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_CAN_ADJUST_GROUND_CLEARANCE()"
    },
    "GET_VEHICLE_HEALTH_PERCENTAGE": {
      "prefix": "GET_VEHICLE_HEALTH_PERCENTAGE()",
      "body": [
        "GET_VEHICLE_HEALTH_PERCENTAGE(${1:Vehicle vehicle}, ${2:float maxEngineHealth}, ${3:float maxPetrolTankHealth}, ${4:float maxBodyHealth}, ${5:float maxMainRotorHealth}, ${6:float maxTailRotorHealth}, ${7:float maxUnkHealth})"
      ],
      "description": "GET_VEHICLE_HEALTH_PERCENTAGE()"
    },
    "GET_VEHICLE_IS_MERCENARY": {
      "prefix": "GET_VEHICLE_IS_MERCENARY()",
      "body": ["GET_VEHICLE_IS_MERCENARY(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_IS_MERCENARY()"
    },
    "SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING": {
      "prefix": "SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING()",
      "body": [
        "SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING()"
    },
    "SET_VEHICLE_KERS_ALLOWED": {
      "prefix": "SET_VEHICLE_KERS_ALLOWED()",
      "body": [
        "SET_VEHICLE_KERS_ALLOWED(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_KERS_ALLOWED()"
    },
    "GET_VEHICLE_HAS_KERS": {
      "prefix": "GET_VEHICLE_HAS_KERS()",
      "body": ["GET_VEHICLE_HAS_KERS(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_HAS_KERS()"
    },
    "SET_PLANE_RESIST_TO_EXPLOSION": {
      "prefix": "SET_PLANE_RESIST_TO_EXPLOSION()",
      "body": [
        "SET_PLANE_RESIST_TO_EXPLOSION(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_PLANE_RESIST_TO_EXPLOSION()"
    },
    "SET_HELI_RESIST_TO_EXPLOSION": {
      "prefix": "SET_HELI_RESIST_TO_EXPLOSION()",
      "body": [
        "SET_HELI_RESIST_TO_EXPLOSION(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_HELI_RESIST_TO_EXPLOSION()"
    },
    "SET_DISABLE_BMX_EXTRA_TRICK_FORCES": {
      "prefix": "SET_DISABLE_BMX_EXTRA_TRICK_FORCES()",
      "body": ["SET_DISABLE_BMX_EXTRA_TRICK_FORCES(${1:Any p0})"],
      "description": "SET_DISABLE_BMX_EXTRA_TRICK_FORCES()"
    },
    "SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR": {
      "prefix": "SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR()",
      "body": [
        "SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(${1:Vehicle vehicle}, ${2:int wheelId}, ${3:float value})"
      ],
      "description": "SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR()"
    },
    "GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR": {
      "prefix": "GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR()",
      "body": [
        "GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(${1:Vehicle vehicle}, ${2:int wheelId})"
      ],
      "description": "GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR()"
    },
    "SET_CAN_USE_HYDRAULICS": {
      "prefix": "SET_CAN_USE_HYDRAULICS()",
      "body": ["SET_CAN_USE_HYDRAULICS(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_CAN_USE_HYDRAULICS()"
    },
    "SET_HYDRAULIC_VEHICLE_STATE": {
      "prefix": "SET_HYDRAULIC_VEHICLE_STATE()",
      "body": [
        "SET_HYDRAULIC_VEHICLE_STATE(${1:Vehicle vehicle}, ${2:int state})"
      ],
      "description": "SET_HYDRAULIC_VEHICLE_STATE()"
    },
    "SET_HYDRAULIC_WHEEL_STATE": {
      "prefix": "SET_HYDRAULIC_WHEEL_STATE()",
      "body": [
        "SET_HYDRAULIC_WHEEL_STATE(${1:Vehicle vehicle}, ${2:int wheelId}, ${3:int state}, ${4:float value}, ${5:Any p4})"
      ],
      "description": "SET_HYDRAULIC_WHEEL_STATE()"
    },
    "HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY": {
      "prefix": "HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY()",
      "body": [
        "HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY()"
    },
    "CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT": {
      "prefix": "CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT()",
      "body": ["CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT(${1:Vehicle vehicle})"],
      "description": "CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT()"
    },
    "SET_VEHICLE_BOBBLEHEAD_VELOCITY": {
      "prefix": "SET_VEHICLE_BOBBLEHEAD_VELOCITY()",
      "body": [
        "SET_VEHICLE_BOBBLEHEAD_VELOCITY(${1:float x}, ${2:float y}, ${3:float p2})"
      ],
      "description": "SET_VEHICLE_BOBBLEHEAD_VELOCITY()"
    },
    "GET_VEHICLE_IS_DUMMY": {
      "prefix": "GET_VEHICLE_IS_DUMMY()",
      "body": ["GET_VEHICLE_IS_DUMMY(${1:Any p0})"],
      "description": "GET_VEHICLE_IS_DUMMY()"
    },
    "SET_VEHICLE_DAMAGE_SCALE": {
      "prefix": "SET_VEHICLE_DAMAGE_SCALE()",
      "body": ["SET_VEHICLE_DAMAGE_SCALE(${1:Vehicle vehicle}, ${2:float p1})"],
      "description": "SET_VEHICLE_DAMAGE_SCALE()"
    },
    "SET_VEHICLE_WEAPON_DAMAGE_SCALE": {
      "prefix": "SET_VEHICLE_WEAPON_DAMAGE_SCALE()",
      "body": [
        "SET_VEHICLE_WEAPON_DAMAGE_SCALE(${1:Vehicle vehicle}, ${2:float multiplier})"
      ],
      "description": "SET_VEHICLE_WEAPON_DAMAGE_SCALE()"
    },
    "SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY": {
      "prefix": "SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY()",
      "body": [
        "SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY()"
    },
    "SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER": {
      "prefix": "SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER()",
      "body": [
        "SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER()"
    },
    "SET_BIKE_EASY_TO_LAND": {
      "prefix": "SET_BIKE_EASY_TO_LAND()",
      "body": ["SET_BIKE_EASY_TO_LAND(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_BIKE_EASY_TO_LAND()"
    },
    "SET_INVERT_VEHICLE_CONTROLS": {
      "prefix": "SET_INVERT_VEHICLE_CONTROLS()",
      "body": [
        "SET_INVERT_VEHICLE_CONTROLS(${1:Vehicle vehicle}, ${2:BOOL state})"
      ],
      "description": "SET_INVERT_VEHICLE_CONTROLS()"
    },
    "SET_SPEED_BOOST_EFFECT_DISABLED": {
      "prefix": "SET_SPEED_BOOST_EFFECT_DISABLED()",
      "body": ["SET_SPEED_BOOST_EFFECT_DISABLED(${1:BOOL disabled})"],
      "description": "SET_SPEED_BOOST_EFFECT_DISABLED()"
    },
    "SET_SLOW_DOWN_EFFECT_DISABLED": {
      "prefix": "SET_SLOW_DOWN_EFFECT_DISABLED()",
      "body": ["SET_SLOW_DOWN_EFFECT_DISABLED(${1:BOOL disabled})"],
      "description": "SET_SLOW_DOWN_EFFECT_DISABLED()"
    },
    "SET_FORMATION_LEADER": {
      "prefix": "SET_FORMATION_LEADER()",
      "body": [
        "SET_FORMATION_LEADER(${1:Vehicle vehicle}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float p4})"
      ],
      "description": "SET_FORMATION_LEADER()"
    },
    "RESET_FORMATION_LEADER": {
      "prefix": "RESET_FORMATION_LEADER()",
      "body": ["RESET_FORMATION_LEADER()"],
      "description": "RESET_FORMATION_LEADER()"
    },
    "GET_IS_BOAT_CAPSIZED": {
      "prefix": "GET_IS_BOAT_CAPSIZED()",
      "body": ["GET_IS_BOAT_CAPSIZED(${1:Vehicle vehicle})"],
      "description": "GET_IS_BOAT_CAPSIZED()"
    },
    "SET_ALLOW_RAMMING_SOOP_OR_RAMP": {
      "prefix": "SET_ALLOW_RAMMING_SOOP_OR_RAMP()",
      "body": ["SET_ALLOW_RAMMING_SOOP_OR_RAMP(${1:Any p0}, ${2:Any p1})"],
      "description": "SET_ALLOW_RAMMING_SOOP_OR_RAMP()"
    },
    "SET_SCRIPT_RAMP_IMPULSE_SCALE": {
      "prefix": "SET_SCRIPT_RAMP_IMPULSE_SCALE()",
      "body": [
        "SET_SCRIPT_RAMP_IMPULSE_SCALE(${1:Vehicle vehicle}, ${2:float impulseScale})"
      ],
      "description": "SET_SCRIPT_RAMP_IMPULSE_SCALE()"
    },
    "GET_IS_DOOR_VALID": {
      "prefix": "GET_IS_DOOR_VALID()",
      "body": ["GET_IS_DOOR_VALID(${1:Vehicle vehicle}, ${2:int doorId})"],
      "description": "GET_IS_DOOR_VALID()"
    },
    "SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME": {
      "prefix": "SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME()",
      "body": [
        "SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME(${1:Vehicle vehicle}, ${2:float seconds})"
      ],
      "description": "SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME()"
    },
    "GET_HAS_ROCKET_BOOST": {
      "prefix": "GET_HAS_ROCKET_BOOST()",
      "body": ["GET_HAS_ROCKET_BOOST(${1:Vehicle vehicle})"],
      "description": "GET_HAS_ROCKET_BOOST()"
    },
    "IS_ROCKET_BOOST_ACTIVE": {
      "prefix": "IS_ROCKET_BOOST_ACTIVE()",
      "body": ["IS_ROCKET_BOOST_ACTIVE(${1:Vehicle vehicle})"],
      "description": "IS_ROCKET_BOOST_ACTIVE()"
    },
    "SET_ROCKET_BOOST_ACTIVE": {
      "prefix": "SET_ROCKET_BOOST_ACTIVE()",
      "body": ["SET_ROCKET_BOOST_ACTIVE(${1:Vehicle vehicle}, ${2:BOOL active})"],
      "description": "SET_ROCKET_BOOST_ACTIVE()"
    },
    "GET_HAS_RETRACTABLE_WHEELS": {
      "prefix": "GET_HAS_RETRACTABLE_WHEELS()",
      "body": ["GET_HAS_RETRACTABLE_WHEELS(${1:Vehicle vehicle})"],
      "description": "GET_HAS_RETRACTABLE_WHEELS()"
    },
    "GET_IS_WHEELS_RETRACTED": {
      "prefix": "GET_IS_WHEELS_RETRACTED()",
      "body": ["GET_IS_WHEELS_RETRACTED(${1:Vehicle vehicle})"],
      "description": "GET_IS_WHEELS_RETRACTED()"
    },
    "SET_WHEELS_EXTENDED_INSTANTLY": {
      "prefix": "SET_WHEELS_EXTENDED_INSTANTLY()",
      "body": ["SET_WHEELS_EXTENDED_INSTANTLY(${1:Vehicle vehicle})"],
      "description": "SET_WHEELS_EXTENDED_INSTANTLY()"
    },
    "SET_WHEELS_RETRACTED_INSTANTLY": {
      "prefix": "SET_WHEELS_RETRACTED_INSTANTLY()",
      "body": ["SET_WHEELS_RETRACTED_INSTANTLY(${1:Vehicle vehicle})"],
      "description": "SET_WHEELS_RETRACTED_INSTANTLY()"
    },
    "GET_CAR_HAS_JUMP": {
      "prefix": "GET_CAR_HAS_JUMP()",
      "body": ["GET_CAR_HAS_JUMP(${1:Vehicle vehicle})"],
      "description": "GET_CAR_HAS_JUMP()"
    },
    "SET_USE_HIGHER_CAR_JUMP": {
      "prefix": "SET_USE_HIGHER_CAR_JUMP()",
      "body": ["SET_USE_HIGHER_CAR_JUMP(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_USE_HIGHER_CAR_JUMP()"
    },
    "SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS": {
      "prefix": "SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS()",
      "body": [
        "SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS()"
    },
    "SET_VEHICLE_WEAPON_RESTRICTED_AMMO": {
      "prefix": "SET_VEHICLE_WEAPON_RESTRICTED_AMMO()",
      "body": [
        "SET_VEHICLE_WEAPON_RESTRICTED_AMMO(${1:Vehicle vehicle}, ${2:int weaponIndex}, ${3:int capacity})"
      ],
      "description": "SET_VEHICLE_WEAPON_RESTRICTED_AMMO()"
    },
    "GET_VEHICLE_WEAPON_RESTRICTED_AMMO": {
      "prefix": "GET_VEHICLE_WEAPON_RESTRICTED_AMMO()",
      "body": [
        "GET_VEHICLE_WEAPON_RESTRICTED_AMMO(${1:Vehicle vehicle}, ${2:int weaponIndex})"
      ],
      "description": "GET_VEHICLE_WEAPON_RESTRICTED_AMMO()"
    },
    "GET_VEHICLE_HAS_PARACHUTE": {
      "prefix": "GET_VEHICLE_HAS_PARACHUTE()",
      "body": ["GET_VEHICLE_HAS_PARACHUTE(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_HAS_PARACHUTE()"
    },
    "GET_VEHICLE_CAN_DEPLOY_PARACHUTE": {
      "prefix": "GET_VEHICLE_CAN_DEPLOY_PARACHUTE()",
      "body": ["GET_VEHICLE_CAN_DEPLOY_PARACHUTE(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_CAN_DEPLOY_PARACHUTE()"
    },
    "VEHICLE_START_PARACHUTING": {
      "prefix": "VEHICLE_START_PARACHUTING()",
      "body": [
        "VEHICLE_START_PARACHUTING(${1:Vehicle vehicle}, ${2:BOOL active})"
      ],
      "description": "VEHICLE_START_PARACHUTING()"
    },
    "IS_VEHICLE_PARACHUTE_DEPLOYED": {
      "prefix": "IS_VEHICLE_PARACHUTE_DEPLOYED()",
      "body": ["IS_VEHICLE_PARACHUTE_DEPLOYED(${1:Vehicle vehicle})"],
      "description": "IS_VEHICLE_PARACHUTE_DEPLOYED()"
    },
    "VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE": {
      "prefix": "VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE()",
      "body": [
        "VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE()"
    },
    "VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE": {
      "prefix": "VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE()",
      "body": [
        "VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE()"
    },
    "VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY": {
      "prefix": "VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY()",
      "body": [
        "VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY()"
    },
    "VEHICLE_SET_JET_WASH_FORCE_ENABLED": {
      "prefix": "VEHICLE_SET_JET_WASH_FORCE_ENABLED()",
      "body": ["VEHICLE_SET_JET_WASH_FORCE_ENABLED(${1:Any p0})"],
      "description": "VEHICLE_SET_JET_WASH_FORCE_ENABLED()"
    },
    "SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS": {
      "prefix": "SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS()",
      "body": [
        "SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS()"
    },
    "SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT": {
      "prefix": "SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT()",
      "body": [
        "SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT(${1:BOOL toggle})"
      ],
      "description": "SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT()"
    },
    "_SET_VEHICLE_USE_HORN_BUTTON_FOR_NITROUS": {
      "prefix": "_SET_VEHICLE_USE_HORN_BUTTON_FOR_NITROUS()",
      "body": ["_SET_VEHICLE_USE_HORN_BUTTON_FOR_NITROUS(${1:BOOL toggle})"],
      "description": "_SET_VEHICLE_USE_HORN_BUTTON_FOR_NITROUS()"
    },
    "VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE": {
      "prefix": "VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE()",
      "body": [
        "VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE(${1:Vehicle vehicle}, ${2:Hash modelHash})"
      ],
      "description": "VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE()"
    },
    "VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX": {
      "prefix": "VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX()",
      "body": [
        "VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX(${1:Vehicle vehicle}, ${2:int textureVariation})"
      ],
      "description": "VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX()"
    },
    "VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO": {
      "prefix": "VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO()",
      "body": [
        "VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO()"
    },
    "VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO": {
      "prefix": "VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO()",
      "body": [
        "VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO()"
    },
    "VEHICLE_SET_OVERRIDE_SIDE_RATIO": {
      "prefix": "VEHICLE_SET_OVERRIDE_SIDE_RATIO()",
      "body": ["VEHICLE_SET_OVERRIDE_SIDE_RATIO(${1:Any p0}, ${2:Any p1})"],
      "description": "VEHICLE_SET_OVERRIDE_SIDE_RATIO()"
    },
    "GET_ALL_VEHICLES": {
      "prefix": "GET_ALL_VEHICLES()",
      "body": ["GET_ALL_VEHICLES(${1:Any* vehsStruct})"],
      "description": "GET_ALL_VEHICLES()"
    },
    "SET_CARGOBOB_EXTA_PICKUP_RANGE": {
      "prefix": "SET_CARGOBOB_EXTA_PICKUP_RANGE()",
      "body": ["SET_CARGOBOB_EXTA_PICKUP_RANGE(${1:Any p0}, ${2:Any p1})"],
      "description": "SET_CARGOBOB_EXTA_PICKUP_RANGE()"
    },
    "SET_OVERRIDE_VEHICLE_DOOR_TORQUE": {
      "prefix": "SET_OVERRIDE_VEHICLE_DOOR_TORQUE()",
      "body": [
        "SET_OVERRIDE_VEHICLE_DOOR_TORQUE(${1:Any p0}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "SET_OVERRIDE_VEHICLE_DOOR_TORQUE()"
    },
    "SET_WHEELIE_ENABLED": {
      "prefix": "SET_WHEELIE_ENABLED()",
      "body": ["SET_WHEELIE_ENABLED(${1:Vehicle vehicle}, ${2:BOOL enabled})"],
      "description": "SET_WHEELIE_ENABLED()"
    },
    "SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE": {
      "prefix": "SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE()",
      "body": [
        "SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE(${1:Any p0}, ${2:Any p1})"
      ],
      "description": "SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE()"
    },
    "SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION": {
      "prefix": "SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION()",
      "body": [
        "SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION(${1:Vehicle vehicle}, ${2:float value})"
      ],
      "description": "SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION()"
    },
    "SET_TRAILER_ATTACHMENT_ENABLED": {
      "prefix": "SET_TRAILER_ATTACHMENT_ENABLED()",
      "body": ["SET_TRAILER_ATTACHMENT_ENABLED(${1:Any p0}, ${2:Any p1})"],
      "description": "SET_TRAILER_ATTACHMENT_ENABLED()"
    },
    "SET_ROCKET_BOOST_FILL": {
      "prefix": "SET_ROCKET_BOOST_FILL()",
      "body": [
        "SET_ROCKET_BOOST_FILL(${1:Vehicle vehicle}, ${2:float percentage})"
      ],
      "description": "SET_ROCKET_BOOST_FILL()"
    },
    "SET_GLIDER_ACTIVE": {
      "prefix": "SET_GLIDER_ACTIVE()",
      "body": ["SET_GLIDER_ACTIVE(${1:Vehicle vehicle}, ${2:BOOL state})"],
      "description": "SET_GLIDER_ACTIVE()"
    },
    "SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS": {
      "prefix": "SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS()",
      "body": [
        "SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS(${1:Vehicle vehicle}, ${2:BOOL shouldReset})"
      ],
      "description": "SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS()"
    },
    "SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION": {
      "prefix": "SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION()",
      "body": [
        "SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION(${1:Vehicle vehicle}, ${2:BOOL disable})"
      ],
      "description": "SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION()"
    },
    "SET_GROUND_EFFECT_REDUCES_DRAG": {
      "prefix": "SET_GROUND_EFFECT_REDUCES_DRAG()",
      "body": ["SET_GROUND_EFFECT_REDUCES_DRAG(${1:BOOL toggle})"],
      "description": "SET_GROUND_EFFECT_REDUCES_DRAG()"
    },
    "SET_DISABLE_MAP_COLLISION": {
      "prefix": "SET_DISABLE_MAP_COLLISION()",
      "body": ["SET_DISABLE_MAP_COLLISION(${1:Vehicle vehicle})"],
      "description": "SET_DISABLE_MAP_COLLISION()"
    },
    "SET_DISABLE_PED_STAND_ON_TOP": {
      "prefix": "SET_DISABLE_PED_STAND_ON_TOP()",
      "body": [
        "SET_DISABLE_PED_STAND_ON_TOP(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_DISABLE_PED_STAND_ON_TOP()"
    },
    "SET_VEHICLE_DAMAGE_SCALES": {
      "prefix": "SET_VEHICLE_DAMAGE_SCALES()",
      "body": [
        "SET_VEHICLE_DAMAGE_SCALES(${1:Vehicle vehicle}, ${2:Any p1}, ${3:Any p2}, ${4:Any p3}, ${5:Any p4})"
      ],
      "description": "SET_VEHICLE_DAMAGE_SCALES()"
    },
    "SET_PLANE_SECTION_DAMAGE_SCALE": {
      "prefix": "SET_PLANE_SECTION_DAMAGE_SCALE()",
      "body": [
        "SET_PLANE_SECTION_DAMAGE_SCALE(${1:Vehicle vehicle}, ${2:Any p1}, ${3:Any p2})"
      ],
      "description": "SET_PLANE_SECTION_DAMAGE_SCALE()"
    },
    "SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED": {
      "prefix": "SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED()",
      "body": [
        "SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED()"
    },
    "SET_VEHICLE_BOMB_AMMO": {
      "prefix": "SET_VEHICLE_BOMB_AMMO()",
      "body": ["SET_VEHICLE_BOMB_AMMO(${1:Vehicle vehicle}, ${2:int bombCount})"],
      "description": "SET_VEHICLE_BOMB_AMMO()"
    },
    "GET_VEHICLE_BOMB_AMMO": {
      "prefix": "GET_VEHICLE_BOMB_AMMO()",
      "body": ["GET_VEHICLE_BOMB_AMMO(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_BOMB_AMMO()"
    },
    "SET_VEHICLE_COUNTERMEASURE_AMMO": {
      "prefix": "SET_VEHICLE_COUNTERMEASURE_AMMO()",
      "body": [
        "SET_VEHICLE_COUNTERMEASURE_AMMO(${1:Vehicle vehicle}, ${2:int counterMeasureCount})"
      ],
      "description": "SET_VEHICLE_COUNTERMEASURE_AMMO()"
    },
    "GET_VEHICLE_COUNTERMEASURE_AMMO": {
      "prefix": "GET_VEHICLE_COUNTERMEASURE_AMMO()",
      "body": ["GET_VEHICLE_COUNTERMEASURE_AMMO(${1:Vehicle vehicle})"],
      "description": "GET_VEHICLE_COUNTERMEASURE_AMMO()"
    },
    "SET_HELI_COMBAT_OFFSET": {
      "prefix": "SET_HELI_COMBAT_OFFSET()",
      "body": [
        "SET_HELI_COMBAT_OFFSET(${1:Vehicle vehicle}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "SET_HELI_COMBAT_OFFSET()"
    },
    "GET_CAN_VEHICLE_BE_PLACED_HERE": {
      "prefix": "GET_CAN_VEHICLE_BE_PLACED_HERE()",
      "body": [
        "GET_CAN_VEHICLE_BE_PLACED_HERE(${1:Vehicle vehicle}, ${2:float x}, ${3:float y}, ${4:float z}, ${5:float rotX}, ${6:float rotY}, ${7:float rotZ}, ${8:int p7}, ${9:Any p8})"
      ],
      "description": "GET_CAN_VEHICLE_BE_PLACED_HERE()"
    },
    "SET_DISABLE_AUTOMATIC_CRASH_TASK": {
      "prefix": "SET_DISABLE_AUTOMATIC_CRASH_TASK()",
      "body": [
        "SET_DISABLE_AUTOMATIC_CRASH_TASK(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_DISABLE_AUTOMATIC_CRASH_TASK()"
    },
    "SET_SPECIAL_FLIGHT_MODE_RATIO": {
      "prefix": "SET_SPECIAL_FLIGHT_MODE_RATIO()",
      "body": [
        "SET_SPECIAL_FLIGHT_MODE_RATIO(${1:Vehicle vehicle}, ${2:float ratio})"
      ],
      "description": "SET_SPECIAL_FLIGHT_MODE_RATIO()"
    },
    "SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO": {
      "prefix": "SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO()",
      "body": [
        "SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(${1:Vehicle vehicle}, ${2:float targetRatio})"
      ],
      "description": "SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO()"
    },
    "SET_SPECIAL_FLIGHT_MODE_ALLOWED": {
      "prefix": "SET_SPECIAL_FLIGHT_MODE_ALLOWED()",
      "body": [
        "SET_SPECIAL_FLIGHT_MODE_ALLOWED(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_SPECIAL_FLIGHT_MODE_ALLOWED()"
    },
    "SET_DISABLE_HOVER_MODE_FLIGHT": {
      "prefix": "SET_DISABLE_HOVER_MODE_FLIGHT()",
      "body": [
        "SET_DISABLE_HOVER_MODE_FLIGHT(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_DISABLE_HOVER_MODE_FLIGHT()"
    },
    "GET_OUTRIGGERS_DEPLOYED": {
      "prefix": "GET_OUTRIGGERS_DEPLOYED()",
      "body": ["GET_OUTRIGGERS_DEPLOYED(${1:Vehicle vehicle})"],
      "description": "GET_OUTRIGGERS_DEPLOYED()"
    },
    "FIND_SPAWN_COORDINATES_FOR_HELI": {
      "prefix": "FIND_SPAWN_COORDINATES_FOR_HELI()",
      "body": ["FIND_SPAWN_COORDINATES_FOR_HELI(${1:Ped ped})"],
      "description": "FIND_SPAWN_COORDINATES_FOR_HELI()"
    },
    "SET_DEPLOY_FOLDING_WINGS": {
      "prefix": "SET_DEPLOY_FOLDING_WINGS()",
      "body": [
        "SET_DEPLOY_FOLDING_WINGS(${1:Vehicle vehicle}, ${2:BOOL deploy}, ${3:BOOL p2})"
      ],
      "description": "SET_DEPLOY_FOLDING_WINGS()"
    },
    "ARE_FOLDING_WINGS_DEPLOYED": {
      "prefix": "ARE_FOLDING_WINGS_DEPLOYED()",
      "body": ["ARE_FOLDING_WINGS_DEPLOYED(${1:Vehicle vehicle})"],
      "description": "ARE_FOLDING_WINGS_DEPLOYED()"
    },
    "_SET_DEPLOY_MISSILE_BAYS": {
      "prefix": "_SET_DEPLOY_MISSILE_BAYS()",
      "body": [
        "_SET_DEPLOY_MISSILE_BAYS(${1:Vehicle vehicle}, ${2:BOOL deploy})"
      ],
      "description": "_SET_DEPLOY_MISSILE_BAYS()"
    },
    "_ARE_MISSILE_BAYS_DEPLOYED": {
      "prefix": "_ARE_MISSILE_BAYS_DEPLOYED()",
      "body": ["_ARE_MISSILE_BAYS_DEPLOYED(${1:Vehicle vehicle})"],
      "description": "_ARE_MISSILE_BAYS_DEPLOYED()"
    },
    "SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE": {
      "prefix": "SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE()",
      "body": [
        "SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE()"
    },
    "SET_TURRET_HIDDEN": {
      "prefix": "SET_TURRET_HIDDEN()",
      "body": [
        "SET_TURRET_HIDDEN(${1:Vehicle vehicle}, ${2:int index}, ${3:BOOL toggle})"
      ],
      "description": "SET_TURRET_HIDDEN()"
    },
    "SET_HOVER_MODE_WING_RATIO": {
      "prefix": "SET_HOVER_MODE_WING_RATIO()",
      "body": [
        "SET_HOVER_MODE_WING_RATIO(${1:Vehicle vehicle}, ${2:float ratio})"
      ],
      "description": "SET_HOVER_MODE_WING_RATIO()"
    },
    "SET_DISABLE_TURRET_MOVEMENT": {
      "prefix": "SET_DISABLE_TURRET_MOVEMENT()",
      "body": [
        "SET_DISABLE_TURRET_MOVEMENT(${1:Vehicle vehicle}, ${2:int turretId})"
      ],
      "description": "SET_DISABLE_TURRET_MOVEMENT()"
    },
    "SET_FORCE_FIX_LINK_MATRICES": {
      "prefix": "SET_FORCE_FIX_LINK_MATRICES()",
      "body": ["SET_FORCE_FIX_LINK_MATRICES(${1:Vehicle vehicle})"],
      "description": "SET_FORCE_FIX_LINK_MATRICES()"
    },
    "SET_TRANSFORM_RATE_FOR_ANIMATION": {
      "prefix": "SET_TRANSFORM_RATE_FOR_ANIMATION()",
      "body": [
        "SET_TRANSFORM_RATE_FOR_ANIMATION(${1:Vehicle vehicle}, ${2:float transformRate})"
      ],
      "description": "SET_TRANSFORM_RATE_FOR_ANIMATION()"
    },
    "SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT": {
      "prefix": "SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT()",
      "body": [
        "SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT()"
    },
    "SET_VEHICLE_COMBAT_MODE": {
      "prefix": "SET_VEHICLE_COMBAT_MODE()",
      "body": ["SET_VEHICLE_COMBAT_MODE(${1:BOOL toggle})"],
      "description": "SET_VEHICLE_COMBAT_MODE()"
    },
    "SET_VEHICLE_DETONATION_MODE": {
      "prefix": "SET_VEHICLE_DETONATION_MODE()",
      "body": ["SET_VEHICLE_DETONATION_MODE(${1:BOOL toggle})"],
      "description": "SET_VEHICLE_DETONATION_MODE()"
    },
    "SET_VEHICLE_SHUNT_ON_STICK": {
      "prefix": "SET_VEHICLE_SHUNT_ON_STICK()",
      "body": ["SET_VEHICLE_SHUNT_ON_STICK(${1:BOOL toggle})"],
      "description": "SET_VEHICLE_SHUNT_ON_STICK()"
    },
    "GET_IS_VEHICLE_SHUNTING": {
      "prefix": "GET_IS_VEHICLE_SHUNTING()",
      "body": ["GET_IS_VEHICLE_SHUNTING(${1:Vehicle vehicle})"],
      "description": "GET_IS_VEHICLE_SHUNTING()"
    },
    "GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT": {
      "prefix": "GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT()",
      "body": ["GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT(${1:Vehicle vehicle})"],
      "description": "GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT()"
    },
    "GET_LAST_SHUNT_VEHICLE": {
      "prefix": "GET_LAST_SHUNT_VEHICLE()",
      "body": ["GET_LAST_SHUNT_VEHICLE(${1:Vehicle vehicle})"],
      "description": "GET_LAST_SHUNT_VEHICLE()"
    },
    "SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE": {
      "prefix": "SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE()",
      "body": ["SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE(${1:BOOL toggle})"],
      "description": "SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE()"
    },
    "SET_OVERRIDE_NITROUS_LEVEL": {
      "prefix": "SET_OVERRIDE_NITROUS_LEVEL()",
      "body": [
        "SET_OVERRIDE_NITROUS_LEVEL(${1:Vehicle vehicle}, ${2:BOOL toggle}, ${3:float level}, ${4:float power}, ${5:float rechargeTime}, ${6:BOOL disableSound})"
      ],
      "description": "SET_OVERRIDE_NITROUS_LEVEL()"
    },
    "SET_NITROUS_IS_ACTIVE": {
      "prefix": "SET_NITROUS_IS_ACTIVE()",
      "body": ["SET_NITROUS_IS_ACTIVE(${1:Vehicle vehicle}, ${2:BOOL enabled})"],
      "description": "SET_NITROUS_IS_ACTIVE()"
    },
    "_SET_OVERRIDE_TRACTION_LOSS_MULTIPLIER": {
      "prefix": "_SET_OVERRIDE_TRACTION_LOSS_MULTIPLIER()",
      "body": [
        "_SET_OVERRIDE_TRACTION_LOSS_MULTIPLIER(${1:Vehicle vehicle}, ${2:float modifier})"
      ],
      "description": "_SET_OVERRIDE_TRACTION_LOSS_MULTIPLIER()"
    },
    "_SET_DRIFT_SLIP_ANGLE_LIMITS": {
      "prefix": "_SET_DRIFT_SLIP_ANGLE_LIMITS()",
      "body": [
        "_SET_DRIFT_SLIP_ANGLE_LIMITS(${1:Vehicle vehicle}, ${2:float durationScalar}, ${3:float amplitudeScalar}, ${4:float slipAngleLimit})"
      ],
      "description": "_SET_DRIFT_SLIP_ANGLE_LIMITS()"
    },
    "_SET_MINIMUM_TIME_BETWEEN_GEAR_SHIFTS": {
      "prefix": "_SET_MINIMUM_TIME_BETWEEN_GEAR_SHIFTS()",
      "body": [
        "_SET_MINIMUM_TIME_BETWEEN_GEAR_SHIFTS(${1:Vehicle vehicle}, ${2:int time})"
      ],
      "description": "_SET_MINIMUM_TIME_BETWEEN_GEAR_SHIFTS()"
    },
    "FULLY_CHARGE_NITROUS": {
      "prefix": "FULLY_CHARGE_NITROUS()",
      "body": ["FULLY_CHARGE_NITROUS(${1:Vehicle vehicle})"],
      "description": "FULLY_CHARGE_NITROUS()"
    },
    "_GET_REMAINING_NITROUS_DURATION": {
      "prefix": "_GET_REMAINING_NITROUS_DURATION()",
      "body": ["_GET_REMAINING_NITROUS_DURATION(${1:Vehicle vehicle})"],
      "description": "_GET_REMAINING_NITROUS_DURATION()"
    },
    "IS_NITROUS_ACTIVE": {
      "prefix": "IS_NITROUS_ACTIVE()",
      "body": ["IS_NITROUS_ACTIVE(${1:Vehicle vehicle})"],
      "description": "IS_NITROUS_ACTIVE()"
    },
    "CLEAR_NITROUS": {
      "prefix": "CLEAR_NITROUS()",
      "body": ["CLEAR_NITROUS(${1:Vehicle vehicle})"],
      "description": "CLEAR_NITROUS()"
    },
    "SET_INCREASE_WHEEL_CRUSH_DAMAGE": {
      "prefix": "SET_INCREASE_WHEEL_CRUSH_DAMAGE()",
      "body": [
        "SET_INCREASE_WHEEL_CRUSH_DAMAGE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "SET_INCREASE_WHEEL_CRUSH_DAMAGE()"
    },
    "SET_DISABLE_WEAPON_BLADE_FORCES": {
      "prefix": "SET_DISABLE_WEAPON_BLADE_FORCES()",
      "body": ["SET_DISABLE_WEAPON_BLADE_FORCES(${1:BOOL toggle})"],
      "description": "SET_DISABLE_WEAPON_BLADE_FORCES()"
    },
    "SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP": {
      "prefix": "SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP()",
      "body": ["SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP(${1:BOOL toggle})"],
      "description": "SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP()"
    },
    "GET_DOES_VEHICLE_HAVE_TOMBSTONE": {
      "prefix": "GET_DOES_VEHICLE_HAVE_TOMBSTONE()",
      "body": ["GET_DOES_VEHICLE_HAVE_TOMBSTONE(${1:Vehicle vehicle})"],
      "description": "GET_DOES_VEHICLE_HAVE_TOMBSTONE()"
    },
    "HIDE_TOMBSTONE": {
      "prefix": "HIDE_TOMBSTONE()",
      "body": ["HIDE_TOMBSTONE(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "HIDE_TOMBSTONE()"
    },
    "APPLY_EMP_EFFECT": {
      "prefix": "APPLY_EMP_EFFECT()",
      "body": ["APPLY_EMP_EFFECT(${1:Vehicle vehicle})"],
      "description": "APPLY_EMP_EFFECT()"
    },
    "GET_IS_VEHICLE_DISABLED_BY_EMP": {
      "prefix": "GET_IS_VEHICLE_DISABLED_BY_EMP()",
      "body": ["GET_IS_VEHICLE_DISABLED_BY_EMP(${1:Vehicle vehicle})"],
      "description": "GET_IS_VEHICLE_DISABLED_BY_EMP()"
    },
    "SET_DISABLE_RETRACTING_WEAPON_BLADES": {
      "prefix": "SET_DISABLE_RETRACTING_WEAPON_BLADES()",
      "body": ["SET_DISABLE_RETRACTING_WEAPON_BLADES(${1:BOOL toggle})"],
      "description": "SET_DISABLE_RETRACTING_WEAPON_BLADES()"
    },
    "GET_TYRE_HEALTH": {
      "prefix": "GET_TYRE_HEALTH()",
      "body": ["GET_TYRE_HEALTH(${1:Vehicle vehicle}, ${2:int wheelIndex})"],
      "description": "GET_TYRE_HEALTH()"
    },
    "SET_TYRE_HEALTH": {
      "prefix": "SET_TYRE_HEALTH()",
      "body": [
        "SET_TYRE_HEALTH(${1:Vehicle vehicle}, ${2:int wheelIndex}, ${3:float health})"
      ],
      "description": "SET_TYRE_HEALTH()"
    },
    "GET_TYRE_WEAR_RATE": {
      "prefix": "GET_TYRE_WEAR_RATE()",
      "body": ["GET_TYRE_WEAR_RATE(${1:Vehicle vehicle}, ${2:int wheelIndex})"],
      "description": "GET_TYRE_WEAR_RATE()"
    },
    "SET_TYRE_WEAR_RATE": {
      "prefix": "SET_TYRE_WEAR_RATE()",
      "body": [
        "SET_TYRE_WEAR_RATE(${1:Vehicle vehicle}, ${2:int wheelIndex}, ${3:float multiplier})"
      ],
      "description": "SET_TYRE_WEAR_RATE()"
    },
    "SET_TYRE_WEAR_RATE_SCALE": {
      "prefix": "SET_TYRE_WEAR_RATE_SCALE()",
      "body": [
        "SET_TYRE_WEAR_RATE_SCALE(${1:Vehicle vehicle}, ${2:int wheelIndex}, ${3:float multiplier})"
      ],
      "description": "SET_TYRE_WEAR_RATE_SCALE()"
    },
    "SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE": {
      "prefix": "SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE()",
      "body": [
        "SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE(${1:Vehicle vehicle}, ${2:int wheelIndex}, ${3:float multiplier})"
      ],
      "description": "SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE()"
    },
    "SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION": {
      "prefix": "SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION()",
      "body": [
        "SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION(${1:Vehicle vehicle}, ${2:int p1})"
      ],
      "description": "SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION()"
    },
    "SET_REDUCED_SUSPENSION_FORCE": {
      "prefix": "SET_REDUCED_SUSPENSION_FORCE()",
      "body": [
        "SET_REDUCED_SUSPENSION_FORCE(${1:Vehicle vehicle}, ${2:BOOL enable})"
      ],
      "description": "SET_REDUCED_SUSPENSION_FORCE()"
    },
    "SET_DRIFT_TYRES": {
      "prefix": "SET_DRIFT_TYRES()",
      "body": ["SET_DRIFT_TYRES(${1:Vehicle vehicle}, ${2:BOOL toggle})"],
      "description": "SET_DRIFT_TYRES()"
    },
    "GET_DRIFT_TYRES_SET": {
      "prefix": "GET_DRIFT_TYRES_SET()",
      "body": ["GET_DRIFT_TYRES_SET(${1:Vehicle vehicle})"],
      "description": "GET_DRIFT_TYRES_SET()"
    },
    "NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING": {
      "prefix": "NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING()",
      "body": [
        "NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING()"
    },
    "SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED": {
      "prefix": "SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED()",
      "body": [
        "SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED(${1:Vehicle vehicle}, ${2:BOOL p1})"
      ],
      "description": "SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED()"
    },
    "_SET_ALLOW_COLLISION_WHEN_IN_VEHICLE": {
      "prefix": "_SET_ALLOW_COLLISION_WHEN_IN_VEHICLE()",
      "body": [
        "_SET_ALLOW_COLLISION_WHEN_IN_VEHICLE(${1:Vehicle vehicle}, ${2:BOOL toggle})"
      ],
      "description": "_SET_ALLOW_COLLISION_WHEN_IN_VEHICLE()"
    },
    "_IS_VEHICLE_GEN9_EXCLUSIVE_MODEL": {
      "prefix": "_IS_VEHICLE_GEN9_EXCLUSIVE_MODEL()",
      "body": ["_IS_VEHICLE_GEN9_EXCLUSIVE_MODEL(${1:Hash vehicleModel})"],
      "description": "_IS_VEHICLE_GEN9_EXCLUSIVE_MODEL()"
    },
    "_GET_VEHICLE_MAX_EXHAUST_BONE_COUNT": {
      "prefix": "_GET_VEHICLE_MAX_EXHAUST_BONE_COUNT()",
      "body": ["_GET_VEHICLE_MAX_EXHAUST_BONE_COUNT()"],
      "description": "_GET_VEHICLE_MAX_EXHAUST_BONE_COUNT()"
    },
    "_GET_VEHICLE_EXHAUST_BONE": {
      "prefix": "_GET_VEHICLE_EXHAUST_BONE()",
      "body": [
        "_GET_VEHICLE_EXHAUST_BONE(${1:Vehicle vehicle}, ${2:int index}, ${3:int* boneIndex}, ${4:BOOL* axisX})"
      ],
      "description": "_GET_VEHICLE_EXHAUST_BONE()"
    },
    "GET_WATER_HEIGHT": {
      "prefix": "GET_WATER_HEIGHT()",
      "body": [
        "GET_WATER_HEIGHT(${1:float x}, ${2:float y}, ${3:float z}, ${4:float* height})"
      ],
      "description": "GET_WATER_HEIGHT()"
    },
    "GET_WATER_HEIGHT_NO_WAVES": {
      "prefix": "GET_WATER_HEIGHT_NO_WAVES()",
      "body": [
        "GET_WATER_HEIGHT_NO_WAVES(${1:float x}, ${2:float y}, ${3:float z}, ${4:float* height})"
      ],
      "description": "GET_WATER_HEIGHT_NO_WAVES()"
    },
    "TEST_PROBE_AGAINST_WATER": {
      "prefix": "TEST_PROBE_AGAINST_WATER()",
      "body": [
        "TEST_PROBE_AGAINST_WATER(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:Vector3* result})"
      ],
      "description": "TEST_PROBE_AGAINST_WATER()"
    },
    "TEST_PROBE_AGAINST_ALL_WATER": {
      "prefix": "TEST_PROBE_AGAINST_ALL_WATER()",
      "body": [
        "TEST_PROBE_AGAINST_ALL_WATER(${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:int flags}, ${8:float* waterHeight})"
      ],
      "description": "TEST_PROBE_AGAINST_ALL_WATER()"
    },
    "TEST_VERTICAL_PROBE_AGAINST_ALL_WATER": {
      "prefix": "TEST_VERTICAL_PROBE_AGAINST_ALL_WATER()",
      "body": [
        "TEST_VERTICAL_PROBE_AGAINST_ALL_WATER(${1:float x}, ${2:float y}, ${3:float z}, ${4:int flags}, ${5:float* waterHeight})"
      ],
      "description": "TEST_VERTICAL_PROBE_AGAINST_ALL_WATER()"
    },
    "MODIFY_WATER": {
      "prefix": "MODIFY_WATER()",
      "body": [
        "MODIFY_WATER(${1:float x}, ${2:float y}, ${3:float radius}, ${4:float height})"
      ],
      "description": "MODIFY_WATER()"
    },
    "ADD_EXTRA_CALMING_QUAD": {
      "prefix": "ADD_EXTRA_CALMING_QUAD()",
      "body": [
        "ADD_EXTRA_CALMING_QUAD(${1:float xLow}, ${2:float yLow}, ${3:float xHigh}, ${4:float yHigh}, ${5:float height})"
      ],
      "description": "ADD_EXTRA_CALMING_QUAD()"
    },
    "REMOVE_EXTRA_CALMING_QUAD": {
      "prefix": "REMOVE_EXTRA_CALMING_QUAD()",
      "body": ["REMOVE_EXTRA_CALMING_QUAD(${1:int calmingQuad})"],
      "description": "REMOVE_EXTRA_CALMING_QUAD()"
    },
    "SET_DEEP_OCEAN_SCALER": {
      "prefix": "SET_DEEP_OCEAN_SCALER()",
      "body": ["SET_DEEP_OCEAN_SCALER(${1:float intensity})"],
      "description": "SET_DEEP_OCEAN_SCALER()"
    },
    "GET_DEEP_OCEAN_SCALER": {
      "prefix": "GET_DEEP_OCEAN_SCALER()",
      "body": ["GET_DEEP_OCEAN_SCALER()"],
      "description": "GET_DEEP_OCEAN_SCALER()"
    },
    "SET_CALMED_WAVE_HEIGHT_SCALER": {
      "prefix": "SET_CALMED_WAVE_HEIGHT_SCALER()",
      "body": ["SET_CALMED_WAVE_HEIGHT_SCALER(${1:float height})"],
      "description": "SET_CALMED_WAVE_HEIGHT_SCALER()"
    },
    "RESET_DEEP_OCEAN_SCALER": {
      "prefix": "RESET_DEEP_OCEAN_SCALER()",
      "body": ["RESET_DEEP_OCEAN_SCALER()"],
      "description": "RESET_DEEP_OCEAN_SCALER()"
    },
    "ENABLE_LASER_SIGHT_RENDERING": {
      "prefix": "ENABLE_LASER_SIGHT_RENDERING()",
      "body": ["ENABLE_LASER_SIGHT_RENDERING(${1:BOOL toggle})"],
      "description": "ENABLE_LASER_SIGHT_RENDERING()"
    },
    "GET_WEAPON_COMPONENT_TYPE_MODEL": {
      "prefix": "GET_WEAPON_COMPONENT_TYPE_MODEL()",
      "body": ["GET_WEAPON_COMPONENT_TYPE_MODEL(${1:Hash componentHash})"],
      "description": "GET_WEAPON_COMPONENT_TYPE_MODEL()"
    },
    "GET_WEAPONTYPE_MODEL": {
      "prefix": "GET_WEAPONTYPE_MODEL()",
      "body": ["GET_WEAPONTYPE_MODEL(${1:Hash weaponHash})"],
      "description": "GET_WEAPONTYPE_MODEL()"
    },
    "GET_WEAPONTYPE_SLOT": {
      "prefix": "GET_WEAPONTYPE_SLOT()",
      "body": ["GET_WEAPONTYPE_SLOT(${1:Hash weaponHash})"],
      "description": "GET_WEAPONTYPE_SLOT()"
    },
    "GET_WEAPONTYPE_GROUP": {
      "prefix": "GET_WEAPONTYPE_GROUP()",
      "body": ["GET_WEAPONTYPE_GROUP(${1:Hash weaponHash})"],
      "description": "GET_WEAPONTYPE_GROUP()"
    },
    "GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT": {
      "prefix": "GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT()",
      "body": [
        "GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT(${1:Hash componentHash})"
      ],
      "description": "GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT()"
    },
    "GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL": {
      "prefix": "GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL()",
      "body": [
        "GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL(${1:Hash componentHash}, ${2:int extraComponentIndex})"
      ],
      "description": "GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL()"
    },
    "SET_CURRENT_PED_WEAPON": {
      "prefix": "SET_CURRENT_PED_WEAPON()",
      "body": [
        "SET_CURRENT_PED_WEAPON(${1:Ped ped}, ${2:Hash weaponHash}, ${3:BOOL bForceInHand})"
      ],
      "description": "SET_CURRENT_PED_WEAPON()"
    },
    "GET_CURRENT_PED_WEAPON": {
      "prefix": "GET_CURRENT_PED_WEAPON()",
      "body": [
        "GET_CURRENT_PED_WEAPON(${1:Ped ped}, ${2:Hash* weaponHash}, ${3:BOOL p2})"
      ],
      "description": "GET_CURRENT_PED_WEAPON()"
    },
    "GET_CURRENT_PED_WEAPON_ENTITY_INDEX": {
      "prefix": "GET_CURRENT_PED_WEAPON_ENTITY_INDEX()",
      "body": ["GET_CURRENT_PED_WEAPON_ENTITY_INDEX(${1:Ped ped}, ${2:Any p1})"],
      "description": "GET_CURRENT_PED_WEAPON_ENTITY_INDEX()"
    },
    "GET_BEST_PED_WEAPON": {
      "prefix": "GET_BEST_PED_WEAPON()",
      "body": ["GET_BEST_PED_WEAPON(${1:Ped ped}, ${2:BOOL p1})"],
      "description": "GET_BEST_PED_WEAPON()"
    },
    "SET_CURRENT_PED_VEHICLE_WEAPON": {
      "prefix": "SET_CURRENT_PED_VEHICLE_WEAPON()",
      "body": [
        "SET_CURRENT_PED_VEHICLE_WEAPON(${1:Ped ped}, ${2:Hash weaponHash})"
      ],
      "description": "SET_CURRENT_PED_VEHICLE_WEAPON()"
    },
    "GET_CURRENT_PED_VEHICLE_WEAPON": {
      "prefix": "GET_CURRENT_PED_VEHICLE_WEAPON()",
      "body": [
        "GET_CURRENT_PED_VEHICLE_WEAPON(${1:Ped ped}, ${2:Hash* weaponHash})"
      ],
      "description": "GET_CURRENT_PED_VEHICLE_WEAPON()"
    },
    "SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY": {
      "prefix": "SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY()",
      "body": ["SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY(${1:Ped ped})"],
      "description": "SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY()"
    },
    "IS_PED_ARMED": {
      "prefix": "IS_PED_ARMED()",
      "body": ["IS_PED_ARMED(${1:Ped ped}, ${2:int typeFlags})"],
      "description": "IS_PED_ARMED()"
    },
    "IS_WEAPON_VALID": {
      "prefix": "IS_WEAPON_VALID()",
      "body": ["IS_WEAPON_VALID(${1:Hash weaponHash})"],
      "description": "IS_WEAPON_VALID()"
    },
    "HAS_PED_GOT_WEAPON": {
      "prefix": "HAS_PED_GOT_WEAPON()",
      "body": [
        "HAS_PED_GOT_WEAPON(${1:Ped ped}, ${2:Hash weaponHash}, ${3:BOOL p2})"
      ],
      "description": "HAS_PED_GOT_WEAPON()"
    },
    "IS_PED_WEAPON_READY_TO_SHOOT": {
      "prefix": "IS_PED_WEAPON_READY_TO_SHOOT()",
      "body": ["IS_PED_WEAPON_READY_TO_SHOOT(${1:Ped ped})"],
      "description": "IS_PED_WEAPON_READY_TO_SHOOT()"
    },
    "GET_PED_WEAPONTYPE_IN_SLOT": {
      "prefix": "GET_PED_WEAPONTYPE_IN_SLOT()",
      "body": ["GET_PED_WEAPONTYPE_IN_SLOT(${1:Ped ped}, ${2:Hash weaponSlot})"],
      "description": "GET_PED_WEAPONTYPE_IN_SLOT()"
    },
    "GET_AMMO_IN_PED_WEAPON": {
      "prefix": "GET_AMMO_IN_PED_WEAPON()",
      "body": ["GET_AMMO_IN_PED_WEAPON(${1:Ped ped}, ${2:Hash weaponhash})"],
      "description": "GET_AMMO_IN_PED_WEAPON()"
    },
    "ADD_AMMO_TO_PED": {
      "prefix": "ADD_AMMO_TO_PED()",
      "body": [
        "ADD_AMMO_TO_PED(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int ammo})"
      ],
      "description": "ADD_AMMO_TO_PED()"
    },
    "SET_PED_AMMO": {
      "prefix": "SET_PED_AMMO()",
      "body": [
        "SET_PED_AMMO(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int ammo}, ${4:BOOL p3})"
      ],
      "description": "SET_PED_AMMO()"
    },
    "SET_PED_INFINITE_AMMO": {
      "prefix": "SET_PED_INFINITE_AMMO()",
      "body": [
        "SET_PED_INFINITE_AMMO(${1:Ped ped}, ${2:BOOL toggle}, ${3:Hash weaponHash})"
      ],
      "description": "SET_PED_INFINITE_AMMO()"
    },
    "SET_PED_INFINITE_AMMO_CLIP": {
      "prefix": "SET_PED_INFINITE_AMMO_CLIP()",
      "body": ["SET_PED_INFINITE_AMMO_CLIP(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_INFINITE_AMMO_CLIP()"
    },
    "SET_PED_STUN_GUN_FINITE_AMMO": {
      "prefix": "SET_PED_STUN_GUN_FINITE_AMMO()",
      "body": ["SET_PED_STUN_GUN_FINITE_AMMO(${1:Any p0}, ${2:Any p1})"],
      "description": "SET_PED_STUN_GUN_FINITE_AMMO()"
    },
    "GIVE_WEAPON_TO_PED": {
      "prefix": "GIVE_WEAPON_TO_PED()",
      "body": [
        "GIVE_WEAPON_TO_PED(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int ammoCount}, ${4:BOOL isHidden}, ${5:BOOL bForceInHand})"
      ],
      "description": "GIVE_WEAPON_TO_PED()"
    },
    "GIVE_DELAYED_WEAPON_TO_PED": {
      "prefix": "GIVE_DELAYED_WEAPON_TO_PED()",
      "body": [
        "GIVE_DELAYED_WEAPON_TO_PED(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int ammoCount}, ${4:BOOL bForceInHand})"
      ],
      "description": "GIVE_DELAYED_WEAPON_TO_PED()"
    },
    "REMOVE_ALL_PED_WEAPONS": {
      "prefix": "REMOVE_ALL_PED_WEAPONS()",
      "body": ["REMOVE_ALL_PED_WEAPONS(${1:Ped ped}, ${2:BOOL p1})"],
      "description": "REMOVE_ALL_PED_WEAPONS()"
    },
    "REMOVE_WEAPON_FROM_PED": {
      "prefix": "REMOVE_WEAPON_FROM_PED()",
      "body": ["REMOVE_WEAPON_FROM_PED(${1:Ped ped}, ${2:Hash weaponHash})"],
      "description": "REMOVE_WEAPON_FROM_PED()"
    },
    "HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE": {
      "prefix": "HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE()",
      "body": [
        "HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(${1:Ped ped}, ${2:BOOL toggle})"
      ],
      "description": "HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE()"
    },
    "SET_PED_CURRENT_WEAPON_VISIBLE": {
      "prefix": "SET_PED_CURRENT_WEAPON_VISIBLE()",
      "body": [
        "SET_PED_CURRENT_WEAPON_VISIBLE(${1:Ped ped}, ${2:BOOL visible}, ${3:BOOL deselectWeapon}, ${4:BOOL p3}, ${5:BOOL p4})"
      ],
      "description": "SET_PED_CURRENT_WEAPON_VISIBLE()"
    },
    "SET_PED_DROPS_WEAPONS_WHEN_DEAD": {
      "prefix": "SET_PED_DROPS_WEAPONS_WHEN_DEAD()",
      "body": ["SET_PED_DROPS_WEAPONS_WHEN_DEAD(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_PED_DROPS_WEAPONS_WHEN_DEAD()"
    },
    "HAS_PED_BEEN_DAMAGED_BY_WEAPON": {
      "prefix": "HAS_PED_BEEN_DAMAGED_BY_WEAPON()",
      "body": [
        "HAS_PED_BEEN_DAMAGED_BY_WEAPON(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int weaponType})"
      ],
      "description": "HAS_PED_BEEN_DAMAGED_BY_WEAPON()"
    },
    "CLEAR_PED_LAST_WEAPON_DAMAGE": {
      "prefix": "CLEAR_PED_LAST_WEAPON_DAMAGE()",
      "body": ["CLEAR_PED_LAST_WEAPON_DAMAGE(${1:Ped ped})"],
      "description": "CLEAR_PED_LAST_WEAPON_DAMAGE()"
    },
    "HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON": {
      "prefix": "HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON()",
      "body": [
        "HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON(${1:Entity entity}, ${2:Hash weaponHash}, ${3:int weaponType})"
      ],
      "description": "HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON()"
    },
    "CLEAR_ENTITY_LAST_WEAPON_DAMAGE": {
      "prefix": "CLEAR_ENTITY_LAST_WEAPON_DAMAGE()",
      "body": ["CLEAR_ENTITY_LAST_WEAPON_DAMAGE(${1:Entity entity})"],
      "description": "CLEAR_ENTITY_LAST_WEAPON_DAMAGE()"
    },
    "SET_PED_DROPS_WEAPON": {
      "prefix": "SET_PED_DROPS_WEAPON()",
      "body": ["SET_PED_DROPS_WEAPON(${1:Ped ped})"],
      "description": "SET_PED_DROPS_WEAPON()"
    },
    "SET_PED_DROPS_INVENTORY_WEAPON": {
      "prefix": "SET_PED_DROPS_INVENTORY_WEAPON()",
      "body": [
        "SET_PED_DROPS_INVENTORY_WEAPON(${1:Ped ped}, ${2:Hash weaponHash}, ${3:float xOffset}, ${4:float yOffset}, ${5:float zOffset}, ${6:int ammoCount})"
      ],
      "description": "SET_PED_DROPS_INVENTORY_WEAPON()"
    },
    "GET_MAX_AMMO_IN_CLIP": {
      "prefix": "GET_MAX_AMMO_IN_CLIP()",
      "body": [
        "GET_MAX_AMMO_IN_CLIP(${1:Ped ped}, ${2:Hash weaponHash}, ${3:BOOL p2})"
      ],
      "description": "GET_MAX_AMMO_IN_CLIP()"
    },
    "GET_AMMO_IN_CLIP": {
      "prefix": "GET_AMMO_IN_CLIP()",
      "body": [
        "GET_AMMO_IN_CLIP(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int* ammo})"
      ],
      "description": "GET_AMMO_IN_CLIP()"
    },
    "SET_AMMO_IN_CLIP": {
      "prefix": "SET_AMMO_IN_CLIP()",
      "body": [
        "SET_AMMO_IN_CLIP(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int ammo})"
      ],
      "description": "SET_AMMO_IN_CLIP()"
    },
    "GET_MAX_AMMO": {
      "prefix": "GET_MAX_AMMO()",
      "body": [
        "GET_MAX_AMMO(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int* ammo})"
      ],
      "description": "GET_MAX_AMMO()"
    },
    "GET_MAX_AMMO_BY_TYPE": {
      "prefix": "GET_MAX_AMMO_BY_TYPE()",
      "body": [
        "GET_MAX_AMMO_BY_TYPE(${1:Ped ped}, ${2:Hash ammoTypeHash}, ${3:int* ammo})"
      ],
      "description": "GET_MAX_AMMO_BY_TYPE()"
    },
    "ADD_PED_AMMO_BY_TYPE": {
      "prefix": "ADD_PED_AMMO_BY_TYPE()",
      "body": [
        "ADD_PED_AMMO_BY_TYPE(${1:Ped ped}, ${2:Hash ammoTypeHash}, ${3:int ammo})"
      ],
      "description": "ADD_PED_AMMO_BY_TYPE()"
    },
    "SET_PED_AMMO_BY_TYPE": {
      "prefix": "SET_PED_AMMO_BY_TYPE()",
      "body": [
        "SET_PED_AMMO_BY_TYPE(${1:Ped ped}, ${2:Hash ammoTypeHash}, ${3:int ammo})"
      ],
      "description": "SET_PED_AMMO_BY_TYPE()"
    },
    "GET_PED_AMMO_BY_TYPE": {
      "prefix": "GET_PED_AMMO_BY_TYPE()",
      "body": ["GET_PED_AMMO_BY_TYPE(${1:Ped ped}, ${2:Hash ammoTypeHash})"],
      "description": "GET_PED_AMMO_BY_TYPE()"
    },
    "SET_PED_AMMO_TO_DROP": {
      "prefix": "SET_PED_AMMO_TO_DROP()",
      "body": ["SET_PED_AMMO_TO_DROP(${1:Ped ped}, ${2:int p1})"],
      "description": "SET_PED_AMMO_TO_DROP()"
    },
    "SET_PICKUP_AMMO_AMOUNT_SCALER": {
      "prefix": "SET_PICKUP_AMMO_AMOUNT_SCALER()",
      "body": ["SET_PICKUP_AMMO_AMOUNT_SCALER(${1:float p0})"],
      "description": "SET_PICKUP_AMMO_AMOUNT_SCALER()"
    },
    "GET_PED_AMMO_TYPE_FROM_WEAPON": {
      "prefix": "GET_PED_AMMO_TYPE_FROM_WEAPON()",
      "body": [
        "GET_PED_AMMO_TYPE_FROM_WEAPON(${1:Ped ped}, ${2:Hash weaponHash})"
      ],
      "description": "GET_PED_AMMO_TYPE_FROM_WEAPON()"
    },
    "GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON": {
      "prefix": "GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON()",
      "body": [
        "GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON(${1:Ped ped}, ${2:Hash weaponHash})"
      ],
      "description": "GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON()"
    },
    "GET_PED_LAST_WEAPON_IMPACT_COORD": {
      "prefix": "GET_PED_LAST_WEAPON_IMPACT_COORD()",
      "body": [
        "GET_PED_LAST_WEAPON_IMPACT_COORD(${1:Ped ped}, ${2:Vector3* coords})"
      ],
      "description": "GET_PED_LAST_WEAPON_IMPACT_COORD()"
    },
    "SET_PED_GADGET": {
      "prefix": "SET_PED_GADGET()",
      "body": [
        "SET_PED_GADGET(${1:Ped ped}, ${2:Hash gadgetHash}, ${3:BOOL p2})"
      ],
      "description": "SET_PED_GADGET()"
    },
    "GET_IS_PED_GADGET_EQUIPPED": {
      "prefix": "GET_IS_PED_GADGET_EQUIPPED()",
      "body": ["GET_IS_PED_GADGET_EQUIPPED(${1:Ped ped}, ${2:Hash gadgetHash})"],
      "description": "GET_IS_PED_GADGET_EQUIPPED()"
    },
    "GET_SELECTED_PED_WEAPON": {
      "prefix": "GET_SELECTED_PED_WEAPON()",
      "body": ["GET_SELECTED_PED_WEAPON(${1:Ped ped})"],
      "description": "GET_SELECTED_PED_WEAPON()"
    },
    "EXPLODE_PROJECTILES": {
      "prefix": "EXPLODE_PROJECTILES()",
      "body": [
        "EXPLODE_PROJECTILES(${1:Ped ped}, ${2:Hash weaponHash}, ${3:BOOL p2})"
      ],
      "description": "EXPLODE_PROJECTILES()"
    },
    "REMOVE_ALL_PROJECTILES_OF_TYPE": {
      "prefix": "REMOVE_ALL_PROJECTILES_OF_TYPE()",
      "body": [
        "REMOVE_ALL_PROJECTILES_OF_TYPE(${1:Hash weaponHash}, ${2:BOOL explode})"
      ],
      "description": "REMOVE_ALL_PROJECTILES_OF_TYPE()"
    },
    "GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON": {
      "prefix": "GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON()",
      "body": ["GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON(${1:Ped ped})"],
      "description": "GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON()"
    },
    "GET_MAX_RANGE_OF_CURRENT_PED_WEAPON": {
      "prefix": "GET_MAX_RANGE_OF_CURRENT_PED_WEAPON()",
      "body": ["GET_MAX_RANGE_OF_CURRENT_PED_WEAPON(${1:Ped ped})"],
      "description": "GET_MAX_RANGE_OF_CURRENT_PED_WEAPON()"
    },
    "HAS_VEHICLE_GOT_PROJECTILE_ATTACHED": {
      "prefix": "HAS_VEHICLE_GOT_PROJECTILE_ATTACHED()",
      "body": [
        "HAS_VEHICLE_GOT_PROJECTILE_ATTACHED(${1:Ped driver}, ${2:Vehicle vehicle}, ${3:Hash weaponHash}, ${4:Any p3})"
      ],
      "description": "HAS_VEHICLE_GOT_PROJECTILE_ATTACHED()"
    },
    "GIVE_WEAPON_COMPONENT_TO_PED": {
      "prefix": "GIVE_WEAPON_COMPONENT_TO_PED()",
      "body": [
        "GIVE_WEAPON_COMPONENT_TO_PED(${1:Ped ped}, ${2:Hash weaponHash}, ${3:Hash componentHash})"
      ],
      "description": "GIVE_WEAPON_COMPONENT_TO_PED()"
    },
    "REMOVE_WEAPON_COMPONENT_FROM_PED": {
      "prefix": "REMOVE_WEAPON_COMPONENT_FROM_PED()",
      "body": [
        "REMOVE_WEAPON_COMPONENT_FROM_PED(${1:Ped ped}, ${2:Hash weaponHash}, ${3:Hash componentHash})"
      ],
      "description": "REMOVE_WEAPON_COMPONENT_FROM_PED()"
    },
    "HAS_PED_GOT_WEAPON_COMPONENT": {
      "prefix": "HAS_PED_GOT_WEAPON_COMPONENT()",
      "body": [
        "HAS_PED_GOT_WEAPON_COMPONENT(${1:Ped ped}, ${2:Hash weaponHash}, ${3:Hash componentHash})"
      ],
      "description": "HAS_PED_GOT_WEAPON_COMPONENT()"
    },
    "IS_PED_WEAPON_COMPONENT_ACTIVE": {
      "prefix": "IS_PED_WEAPON_COMPONENT_ACTIVE()",
      "body": [
        "IS_PED_WEAPON_COMPONENT_ACTIVE(${1:Ped ped}, ${2:Hash weaponHash}, ${3:Hash componentHash})"
      ],
      "description": "IS_PED_WEAPON_COMPONENT_ACTIVE()"
    },
    "REFILL_AMMO_INSTANTLY": {
      "prefix": "REFILL_AMMO_INSTANTLY()",
      "body": ["REFILL_AMMO_INSTANTLY(${1:Ped ped})"],
      "description": "REFILL_AMMO_INSTANTLY()"
    },
    "MAKE_PED_RELOAD": {
      "prefix": "MAKE_PED_RELOAD()",
      "body": ["MAKE_PED_RELOAD(${1:Ped ped})"],
      "description": "MAKE_PED_RELOAD()"
    },
    "REQUEST_WEAPON_ASSET": {
      "prefix": "REQUEST_WEAPON_ASSET()",
      "body": [
        "REQUEST_WEAPON_ASSET(${1:Hash weaponHash}, ${2:int p1}, ${3:int p2})"
      ],
      "description": "REQUEST_WEAPON_ASSET()"
    },
    "HAS_WEAPON_ASSET_LOADED": {
      "prefix": "HAS_WEAPON_ASSET_LOADED()",
      "body": ["HAS_WEAPON_ASSET_LOADED(${1:Hash weaponHash})"],
      "description": "HAS_WEAPON_ASSET_LOADED()"
    },
    "REMOVE_WEAPON_ASSET": {
      "prefix": "REMOVE_WEAPON_ASSET()",
      "body": ["REMOVE_WEAPON_ASSET(${1:Hash weaponHash})"],
      "description": "REMOVE_WEAPON_ASSET()"
    },
    "CREATE_WEAPON_OBJECT": {
      "prefix": "CREATE_WEAPON_OBJECT()",
      "body": [
        "CREATE_WEAPON_OBJECT(${1:Hash weaponHash}, ${2:int ammoCount}, ${3:float x}, ${4:float y}, ${5:float z}, ${6:BOOL showWorldModel}, ${7:float scale}, ${8:Any p7}, ${9:Any p8}, ${10:Any p9})"
      ],
      "description": "CREATE_WEAPON_OBJECT()"
    },
    "GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT": {
      "prefix": "GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT()",
      "body": [
        "GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT(${1:Object weaponObject}, ${2:Hash componentHash})"
      ],
      "description": "GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT()"
    },
    "REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT": {
      "prefix": "REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT()",
      "body": [
        "REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(${1:Object object}, ${2:Hash componentHash})"
      ],
      "description": "REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT()"
    },
    "HAS_WEAPON_GOT_WEAPON_COMPONENT": {
      "prefix": "HAS_WEAPON_GOT_WEAPON_COMPONENT()",
      "body": [
        "HAS_WEAPON_GOT_WEAPON_COMPONENT(${1:Object weapon}, ${2:Hash componentHash})"
      ],
      "description": "HAS_WEAPON_GOT_WEAPON_COMPONENT()"
    },
    "GIVE_WEAPON_OBJECT_TO_PED": {
      "prefix": "GIVE_WEAPON_OBJECT_TO_PED()",
      "body": [
        "GIVE_WEAPON_OBJECT_TO_PED(${1:Object weaponObject}, ${2:Ped ped})"
      ],
      "description": "GIVE_WEAPON_OBJECT_TO_PED()"
    },
    "DOES_WEAPON_TAKE_WEAPON_COMPONENT": {
      "prefix": "DOES_WEAPON_TAKE_WEAPON_COMPONENT()",
      "body": [
        "DOES_WEAPON_TAKE_WEAPON_COMPONENT(${1:Hash weaponHash}, ${2:Hash componentHash})"
      ],
      "description": "DOES_WEAPON_TAKE_WEAPON_COMPONENT()"
    },
    "GET_WEAPON_OBJECT_FROM_PED": {
      "prefix": "GET_WEAPON_OBJECT_FROM_PED()",
      "body": ["GET_WEAPON_OBJECT_FROM_PED(${1:Ped ped}, ${2:BOOL p1})"],
      "description": "GET_WEAPON_OBJECT_FROM_PED()"
    },
    "GIVE_LOADOUT_TO_PED": {
      "prefix": "GIVE_LOADOUT_TO_PED()",
      "body": ["GIVE_LOADOUT_TO_PED(${1:Ped ped}, ${2:Hash loadoutHash})"],
      "description": "GIVE_LOADOUT_TO_PED()"
    },
    "SET_PED_WEAPON_TINT_INDEX": {
      "prefix": "SET_PED_WEAPON_TINT_INDEX()",
      "body": [
        "SET_PED_WEAPON_TINT_INDEX(${1:Ped ped}, ${2:Hash weaponHash}, ${3:int tintIndex})"
      ],
      "description": "SET_PED_WEAPON_TINT_INDEX()"
    },
    "GET_PED_WEAPON_TINT_INDEX": {
      "prefix": "GET_PED_WEAPON_TINT_INDEX()",
      "body": ["GET_PED_WEAPON_TINT_INDEX(${1:Ped ped}, ${2:Hash weaponHash})"],
      "description": "GET_PED_WEAPON_TINT_INDEX()"
    },
    "SET_WEAPON_OBJECT_TINT_INDEX": {
      "prefix": "SET_WEAPON_OBJECT_TINT_INDEX()",
      "body": [
        "SET_WEAPON_OBJECT_TINT_INDEX(${1:Object weapon}, ${2:int tintIndex})"
      ],
      "description": "SET_WEAPON_OBJECT_TINT_INDEX()"
    },
    "GET_WEAPON_OBJECT_TINT_INDEX": {
      "prefix": "GET_WEAPON_OBJECT_TINT_INDEX()",
      "body": ["GET_WEAPON_OBJECT_TINT_INDEX(${1:Object weapon})"],
      "description": "GET_WEAPON_OBJECT_TINT_INDEX()"
    },
    "GET_WEAPON_TINT_COUNT": {
      "prefix": "GET_WEAPON_TINT_COUNT()",
      "body": ["GET_WEAPON_TINT_COUNT(${1:Hash weaponHash})"],
      "description": "GET_WEAPON_TINT_COUNT()"
    },
    "SET_PED_WEAPON_COMPONENT_TINT_INDEX": {
      "prefix": "SET_PED_WEAPON_COMPONENT_TINT_INDEX()",
      "body": [
        "SET_PED_WEAPON_COMPONENT_TINT_INDEX(${1:Ped ped}, ${2:Hash weaponHash}, ${3:Hash camoComponentHash}, ${4:int colorIndex})"
      ],
      "description": "SET_PED_WEAPON_COMPONENT_TINT_INDEX()"
    },
    "GET_PED_WEAPON_COMPONENT_TINT_INDEX": {
      "prefix": "GET_PED_WEAPON_COMPONENT_TINT_INDEX()",
      "body": [
        "GET_PED_WEAPON_COMPONENT_TINT_INDEX(${1:Ped ped}, ${2:Hash weaponHash}, ${3:Hash camoComponentHash})"
      ],
      "description": "GET_PED_WEAPON_COMPONENT_TINT_INDEX()"
    },
    "SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX": {
      "prefix": "SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX()",
      "body": [
        "SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(${1:Object weaponObject}, ${2:Hash camoComponentHash}, ${3:int colorIndex})"
      ],
      "description": "SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX()"
    },
    "GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX": {
      "prefix": "GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX()",
      "body": [
        "GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(${1:Object weaponObject}, ${2:Hash camoComponentHash})"
      ],
      "description": "GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX()"
    },
    "GET_PED_WEAPON_CAMO_INDEX": {
      "prefix": "GET_PED_WEAPON_CAMO_INDEX()",
      "body": ["GET_PED_WEAPON_CAMO_INDEX(${1:Ped ped}, ${2:Hash weaponHash})"],
      "description": "GET_PED_WEAPON_CAMO_INDEX()"
    },
    "SET_WEAPON_OBJECT_CAMO_INDEX": {
      "prefix": "SET_WEAPON_OBJECT_CAMO_INDEX()",
      "body": [
        "SET_WEAPON_OBJECT_CAMO_INDEX(${1:Object weaponObject}, ${2:int p1})"
      ],
      "description": "SET_WEAPON_OBJECT_CAMO_INDEX()"
    },
    "GET_WEAPON_HUD_STATS": {
      "prefix": "GET_WEAPON_HUD_STATS()",
      "body": ["GET_WEAPON_HUD_STATS(${1:Hash weaponHash}, ${2:Any* outData})"],
      "description": "GET_WEAPON_HUD_STATS()"
    },
    "GET_WEAPON_COMPONENT_HUD_STATS": {
      "prefix": "GET_WEAPON_COMPONENT_HUD_STATS()",
      "body": [
        "GET_WEAPON_COMPONENT_HUD_STATS(${1:Hash componentHash}, ${2:Any* outData})"
      ],
      "description": "GET_WEAPON_COMPONENT_HUD_STATS()"
    },
    "GET_WEAPON_DAMAGE": {
      "prefix": "GET_WEAPON_DAMAGE()",
      "body": [
        "GET_WEAPON_DAMAGE(${1:Hash weaponHash}, ${2:Hash componentHash})"
      ],
      "description": "GET_WEAPON_DAMAGE()"
    },
    "GET_WEAPON_CLIP_SIZE": {
      "prefix": "GET_WEAPON_CLIP_SIZE()",
      "body": ["GET_WEAPON_CLIP_SIZE(${1:Hash weaponHash})"],
      "description": "GET_WEAPON_CLIP_SIZE()"
    },
    "GET_WEAPON_TIME_BETWEEN_SHOTS": {
      "prefix": "GET_WEAPON_TIME_BETWEEN_SHOTS()",
      "body": ["GET_WEAPON_TIME_BETWEEN_SHOTS(${1:Hash weaponHash})"],
      "description": "GET_WEAPON_TIME_BETWEEN_SHOTS()"
    },
    "SET_PED_CHANCE_OF_FIRING_BLANKS": {
      "prefix": "SET_PED_CHANCE_OF_FIRING_BLANKS()",
      "body": [
        "SET_PED_CHANCE_OF_FIRING_BLANKS(${1:Ped ped}, ${2:float xBias}, ${3:float yBias})"
      ],
      "description": "SET_PED_CHANCE_OF_FIRING_BLANKS()"
    },
    "SET_PED_SHOOT_ORDNANCE_WEAPON": {
      "prefix": "SET_PED_SHOOT_ORDNANCE_WEAPON()",
      "body": ["SET_PED_SHOOT_ORDNANCE_WEAPON(${1:Ped ped}, ${2:float p1})"],
      "description": "SET_PED_SHOOT_ORDNANCE_WEAPON()"
    },
    "REQUEST_WEAPON_HIGH_DETAIL_MODEL": {
      "prefix": "REQUEST_WEAPON_HIGH_DETAIL_MODEL()",
      "body": ["REQUEST_WEAPON_HIGH_DETAIL_MODEL(${1:Entity weaponObject})"],
      "description": "REQUEST_WEAPON_HIGH_DETAIL_MODEL()"
    },
    "_SET_WEAPON_PED_DAMAGE_MODIFIER": {
      "prefix": "_SET_WEAPON_PED_DAMAGE_MODIFIER()",
      "body": [
        "_SET_WEAPON_PED_DAMAGE_MODIFIER(${1:Hash weapon}, ${2:float damageModifier})"
      ],
      "description": "_SET_WEAPON_PED_DAMAGE_MODIFIER()"
    },
    "SET_WEAPON_DAMAGE_MODIFIER": {
      "prefix": "SET_WEAPON_DAMAGE_MODIFIER()",
      "body": [
        "SET_WEAPON_DAMAGE_MODIFIER(${1:Hash weaponHash}, ${2:float damageMultiplier})"
      ],
      "description": "SET_WEAPON_DAMAGE_MODIFIER()"
    },
    "SET_WEAPON_AOE_MODIFIER": {
      "prefix": "SET_WEAPON_AOE_MODIFIER()",
      "body": [
        "SET_WEAPON_AOE_MODIFIER(${1:Hash weaponHash}, ${2:float multiplier})"
      ],
      "description": "SET_WEAPON_AOE_MODIFIER()"
    },
    "SET_WEAPON_EFFECT_DURATION_MODIFIER": {
      "prefix": "SET_WEAPON_EFFECT_DURATION_MODIFIER()",
      "body": [
        "SET_WEAPON_EFFECT_DURATION_MODIFIER(${1:Hash p0}, ${2:float p1})"
      ],
      "description": "SET_WEAPON_EFFECT_DURATION_MODIFIER()"
    },
    "IS_PED_CURRENT_WEAPON_SILENCED": {
      "prefix": "IS_PED_CURRENT_WEAPON_SILENCED()",
      "body": ["IS_PED_CURRENT_WEAPON_SILENCED(${1:Ped ped})"],
      "description": "IS_PED_CURRENT_WEAPON_SILENCED()"
    },
    "IS_FLASH_LIGHT_ON": {
      "prefix": "IS_FLASH_LIGHT_ON()",
      "body": ["IS_FLASH_LIGHT_ON(${1:Ped ped})"],
      "description": "IS_FLASH_LIGHT_ON()"
    },
    "SET_FLASH_LIGHT_FADE_DISTANCE": {
      "prefix": "SET_FLASH_LIGHT_FADE_DISTANCE()",
      "body": ["SET_FLASH_LIGHT_FADE_DISTANCE(${1:float distance})"],
      "description": "SET_FLASH_LIGHT_FADE_DISTANCE()"
    },
    "SET_FLASH_LIGHT_ACTIVE_HISTORY": {
      "prefix": "SET_FLASH_LIGHT_ACTIVE_HISTORY()",
      "body": ["SET_FLASH_LIGHT_ACTIVE_HISTORY(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_FLASH_LIGHT_ACTIVE_HISTORY()"
    },
    "SET_WEAPON_ANIMATION_OVERRIDE": {
      "prefix": "SET_WEAPON_ANIMATION_OVERRIDE()",
      "body": [
        "SET_WEAPON_ANIMATION_OVERRIDE(${1:Ped ped}, ${2:Hash animStyle})"
      ],
      "description": "SET_WEAPON_ANIMATION_OVERRIDE()"
    },
    "GET_WEAPON_DAMAGE_TYPE": {
      "prefix": "GET_WEAPON_DAMAGE_TYPE()",
      "body": ["GET_WEAPON_DAMAGE_TYPE(${1:Hash weaponHash})"],
      "description": "GET_WEAPON_DAMAGE_TYPE()"
    },
    "SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED": {
      "prefix": "SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED()",
      "body": ["SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED(${1:Ped ped})"],
      "description": "SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED()"
    },
    "CAN_USE_WEAPON_ON_PARACHUTE": {
      "prefix": "CAN_USE_WEAPON_ON_PARACHUTE()",
      "body": ["CAN_USE_WEAPON_ON_PARACHUTE(${1:Hash weaponHash})"],
      "description": "CAN_USE_WEAPON_ON_PARACHUTE()"
    },
    "CREATE_AIR_DEFENCE_SPHERE": {
      "prefix": "CREATE_AIR_DEFENCE_SPHERE()",
      "body": [
        "CREATE_AIR_DEFENCE_SPHERE(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:Hash weaponHash})"
      ],
      "description": "CREATE_AIR_DEFENCE_SPHERE()"
    },
    "CREATE_AIR_DEFENCE_ANGLED_AREA": {
      "prefix": "CREATE_AIR_DEFENCE_ANGLED_AREA()",
      "body": [
        "CREATE_AIR_DEFENCE_ANGLED_AREA(${1:float p0}, ${2:float p1}, ${3:float p2}, ${4:float p3}, ${5:float p4}, ${6:float p5}, ${7:float p6}, ${8:float p7}, ${9:float p8}, ${10:float radius}, ${11:Hash weaponHash})"
      ],
      "description": "CREATE_AIR_DEFENCE_ANGLED_AREA()"
    },
    "REMOVE_AIR_DEFENCE_SPHERE": {
      "prefix": "REMOVE_AIR_DEFENCE_SPHERE()",
      "body": ["REMOVE_AIR_DEFENCE_SPHERE(${1:int zoneId})"],
      "description": "REMOVE_AIR_DEFENCE_SPHERE()"
    },
    "REMOVE_ALL_AIR_DEFENCE_SPHERES": {
      "prefix": "REMOVE_ALL_AIR_DEFENCE_SPHERES()",
      "body": ["REMOVE_ALL_AIR_DEFENCE_SPHERES()"],
      "description": "REMOVE_ALL_AIR_DEFENCE_SPHERES()"
    },
    "SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE": {
      "prefix": "SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE()",
      "body": [
        "SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE(${1:Player player}, ${2:int zoneId}, ${3:BOOL enable})"
      ],
      "description": "SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE()"
    },
    "IS_AIR_DEFENCE_SPHERE_IN_AREA": {
      "prefix": "IS_AIR_DEFENCE_SPHERE_IN_AREA()",
      "body": [
        "IS_AIR_DEFENCE_SPHERE_IN_AREA(${1:float x}, ${2:float y}, ${3:float z}, ${4:float radius}, ${5:int* outZoneId})"
      ],
      "description": "IS_AIR_DEFENCE_SPHERE_IN_AREA()"
    },
    "FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION": {
      "prefix": "FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION()",
      "body": [
        "FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION(${1:int zoneId}, ${2:float x}, ${3:float y}, ${4:float z})"
      ],
      "description": "FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION()"
    },
    "DOES_AIR_DEFENCE_SPHERE_EXIST": {
      "prefix": "DOES_AIR_DEFENCE_SPHERE_EXIST()",
      "body": ["DOES_AIR_DEFENCE_SPHERE_EXIST(${1:int zoneId})"],
      "description": "DOES_AIR_DEFENCE_SPHERE_EXIST()"
    },
    "SET_CAN_PED_SELECT_INVENTORY_WEAPON": {
      "prefix": "SET_CAN_PED_SELECT_INVENTORY_WEAPON()",
      "body": [
        "SET_CAN_PED_SELECT_INVENTORY_WEAPON(${1:Ped ped}, ${2:Hash weaponHash}, ${3:BOOL toggle})"
      ],
      "description": "SET_CAN_PED_SELECT_INVENTORY_WEAPON()"
    },
    "SET_CAN_PED_SELECT_ALL_WEAPONS": {
      "prefix": "SET_CAN_PED_SELECT_ALL_WEAPONS()",
      "body": ["SET_CAN_PED_SELECT_ALL_WEAPONS(${1:Ped ped}, ${2:BOOL toggle})"],
      "description": "SET_CAN_PED_SELECT_ALL_WEAPONS()"
    },
    "GET_ZONE_AT_COORDS": {
      "prefix": "GET_ZONE_AT_COORDS()",
      "body": ["GET_ZONE_AT_COORDS(${1:float x}, ${2:float y}, ${3:float z})"],
      "description": "GET_ZONE_AT_COORDS()"
    },
    "GET_ZONE_FROM_NAME_ID": {
      "prefix": "GET_ZONE_FROM_NAME_ID()",
      "body": ["GET_ZONE_FROM_NAME_ID(${1:const char* zoneName})"],
      "description": "GET_ZONE_FROM_NAME_ID()"
    },
    "GET_ZONE_POPSCHEDULE": {
      "prefix": "GET_ZONE_POPSCHEDULE()",
      "body": ["GET_ZONE_POPSCHEDULE(${1:int zoneId})"],
      "description": "GET_ZONE_POPSCHEDULE()"
    },
    "SET_ZONE_ENABLED": {
      "prefix": "SET_ZONE_ENABLED()",
      "body": ["SET_ZONE_ENABLED(${1:int zoneId}, ${2:BOOL toggle})"],
      "description": "SET_ZONE_ENABLED()"
    },
    "GET_ZONE_SCUMMINESS": {
      "prefix": "GET_ZONE_SCUMMINESS()",
      "body": ["GET_ZONE_SCUMMINESS(${1:int zoneId})"],
      "description": "GET_ZONE_SCUMMINESS()"
    },
    "OVERRIDE_POPSCHEDULE_VEHICLE_MODEL": {
      "prefix": "OVERRIDE_POPSCHEDULE_VEHICLE_MODEL()",
      "body": [
        "OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(${1:int scheduleId}, ${2:Hash vehicleHash})"
      ],
      "description": "OVERRIDE_POPSCHEDULE_VEHICLE_MODEL()"
    },
    "CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL": {
      "prefix": "CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL()",
      "body": ["CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(${1:int scheduleId})"],
      "description": "CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL()"
    },
    "GET_HASH_OF_MAP_AREA_AT_COORDS": {
      "prefix": "GET_HASH_OF_MAP_AREA_AT_COORDS()",
      "body": [
        "GET_HASH_OF_MAP_AREA_AT_COORDS(${1:float x}, ${2:float y}, ${3:float z})"
      ],
      "description": "GET_HASH_OF_MAP_AREA_AT_COORDS()"
    }
  }
  